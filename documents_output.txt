





Troubleshooting — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















Troubleshooting




 Contents 



Ros Init Exception
Robot Description not Loaded
Stop Iteration
BulletWorld crashes after loading an URDF
Error when performing Actions or Motions
Missing pr2_arm_kinematics










Troubleshooting#
This page contains the most common errors that could happen when using PyCRAM and how to resolve them.

Ros Init Exception#
ROSInitException: time is not initialized. Have you called init_node()


This exception usually occurs when trying to load an Object into the BulletWorld or when creating a Pose. The reason for
this exception is that the ROS node of PyCRAM could not be initialized, this is usually the case when the PyCRAM launch
file was not launched.
To solve this problem you just have to launch the ik_and_description file of PyCRAM. This can be done via the
following command.
roslaunch pycram ik_and_description




Robot Description not Loaded#
In PyCRAM a lot of things are base on the robot description that is currently loaded and in turn the robot description
that will be loaded depends on the robot description that is on the ROS parameter server at the time PyCRAM is started.
If you get an error that looks similar to the following exception the most likely case is that the robot description was
not loaded.
     763 with open(self.path) as f:
     764     self.urdf_object = URDF.from_xml_string(f.read())
 --> 765     if self.urdf_object.name == robot_description.name and not BulletWorld.robot:
     766         BulletWorld.robot = self
     768 self.links[self.urdf_object.get_root()] = -1

 AttributeError: 'NoneType' object has no attribute 'name'



There could be a few reasons for this behaviour:

The name of the URDF on the parameter server and the name in the PyCRAM robot description are different
The PyCRAM robot description is matched by the name of the robot in the URDF
You can check the assignment of the PyCRAM robot description in this function update_robot_description() (there is a link to the source code)




You only started a roscore
You did not start the ik_and_description launch file





Stop Iteration#
Stop iterations usually happen when you try to resolve a designator for which there is no solution or if you iterate over a
designator and reached the end of all possible solutions.
When you try to resolve a designator which has no solution the error will look something like this.
    753 def ground(self) -> Union[Object, bool]:
    754     """
    755     Return the first object from the bullet world that fits the description.
    756
    757     :return: A resolved object designator
    758     """
--> 759     return next(iter(self))

StopIteration:


If you encounter such an error the most likely reason is that you put the wrong arguments into your DesignatorDescription.
The best solution is to double check the input arguments of the DesignatorDescription.


BulletWorld crashes after loading an URDF#
It can happen that the BulletWorld crashes when loading a URDF. This happens when loading a URDF with more than 127 links.
This is a limitation of PyBullet which can not deal with objects with more links.
Only real solution here is to either delete links such that you have at max 127 links or split up the URDF and load the
split parts individually.


Error when performing Actions or Motions#
     30 def perform(self):
     31     pm_manager = ProcessModuleManager.get_manager()
---> 32     return pm_manager.navigate().execute(self)

AttributeError: 'NoneType' object has no attribute 'navigate'


If you get an error like this when trying to perform an action or motion designator, then you did not specify how the
designator should be executed. You can specify how the designator should be performed by using the simulated_robot or
real_robot environments. This is also explained in the Action Designator Example.
with simulated_robot:
   NavigateAction([Pose()]).resolve().perform()



Missing pr2_arm_kinematics#
Aptitudes autoremove likes to also remove the arm kinematics. The error message looks similar to this. Important is the
missing library libmoveit_kinematics_base.so. This can be fixed by reinstalling the missing libraries.
process[pr2_left_arm_kinematics-3]: started with pid [26862]
pr2_arm_kinematics_node: error while loading shared libraries: libmoveit_kinematics_base.so.1.1.12: cannot open shared object file: No such file or directory
process[pr2_right_arm_kinematics-4]: started with pid [26863]
[pr2_left_arm_kinematics-3] process has died [pid 26862, exit code 127, cmd ~/pycram/devel/lib/pr2_arm_kinematics/pr2_arm_kinematics_node __name:=pr2_left_arm_kinematics __log:=~/.ros/log/ba5e95de-384f-11ee-ab53-97c8787037e5/pr2_left_arm_kinematics-3.log].
log file: ~/.ros/log/ba5e95de-384f-11ee-ab53-97c8787037e5/pr2_left_arm_kinematics-3*.log
pr2_arm_kinematics_node: error while loading shared libraries: libmoveit_kinematics_base.so.1.1.12: cannot open shared object file: No such file or directory
[pr2_right_arm_kinematics-4] process has died [pid 26863, exit code 127, cmd ~/pycram/devel/lib/pr2_arm_kinematics/pr2_arm_kinematics_node __name:=pr2_right_arm_kinematics __log:=~/.ros/log/ba5e95de-384f-11ee-ab53-97c8787037e5/pr2_right_arm_kinematics-4.log].
log file: ~/.ros/log/ba5e95de-384f-11ee-ab53-97c8787037e5/pr2_right_arm_kinematics-4*.log
IK server ready.


Reinstall the missing libraries with
sudo apt-get install ros-noetic-moveit


Then rebuild your workspace.











previous
Designators




next
General Remarks









 Contents
  


Ros Init Exception
Robot Description not Loaded
Stop Iteration
BulletWorld crashes after loading an URDF
Error when performing Actions or Motions
Missing pr2_arm_kinematics










By Jonas Dech




    
      © Copyright 2024.
      
























Search - PyCRAM


























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue
















Search


Error
Please activate JavaScript to enable the search functionality.





Ctrl+K














By Jonas Dech




    
      © Copyright 2024.
      

























ROS Utils — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















ROS Utils




 Contents 



TF Broadcaster
Joint State Publisher
Force Torque Sensor
Visualisation Marker Publisher
Robot State Updater








ROS Utils#
PyCRAM provides a number of utils to interact with the ROS network. The utils are:

A TF Broadcaster
A Joint State Publisher
A Simulated Force Torque Sensor
A Visualisation Marker Publisher
A Robot State Updater

These site will go over all utils what they do and how to use them. All ROS utils presented here
will publish continuously in a new thread. You can either stop the publishing by calling the
`stop_publishing` or the thread will terminate automatically once the process is ended.

TF Broadcaster#
The TF broadcaster broadcasts the transformations to every object and every link in the
BulletWorld to the TF topic. This allows other ROS nodes to listen to the TF topic and
transform their poses to the TF frames published in the transforms on the TF topic.
The broadcaster publishes transforms in a specific interval, this interval can be specified
when creating the broadcaster.
from pycram.ros.tf_broadcaster import TFBroadcaster

broadcaster = TFBroadcaster()


The broadcaster allows to specify a projection namespace, the projection namespace will be
prefixed before the TF frames. Furthermore, you can specify an odom frame and the interval
at which the transforms will be published in seconds.


Joint State Publisher#
The joint state publisher publishes the current joint positions for every joint of the
currently loaded robot. Furthermore, allows the joint state publisher to specify a topic
to publish as well as an interval at which the position should be published.
from pycram.ros.joint_state_publisher import JointStatePublisher

joint_publisher = JointStatePublisher("joint_states", 0.1)




Force Torque Sensor#
PyBullet, the underlying simulation framework, allows to simulate a force torque sensor for
a given joint. The results from this simulated force torque sensor are then published to
a ROS topic of type geometry_msgs/WrenchStamped. Furthermore, allows the force torque sensor
class to specify a topic as well as an interval in seconds.
from pycram.ros.force_torque_sensor import ForceTorqueSensor

ft_sensor = ForceTorqueSensor("l_wrist_roll_joint", "/pycram/fts", 0.1)




Visualisation Marker Publisher#
The visualisation marker publisher sends an array of visualisation marker to a ROS topic which can then be
rendered by RVIZ for example. The array consists of one Marker per link for each Object in the Bullet World, with
each Object creating its own namespace. The visualisation marker publisher has to instantiated once and then
publishes constantly in the background.
from pycram.ros.viz_marker_publisher import VizMarkerPublisher

v = VizMarkerPublisher()




Robot State Updater#
The robot state updater is intended for working with a real robot, since the robot in the bullet world should mimic
the real robot there has to be a module which takes care of updating the state of the robot in the BulletWorld. The
robot state updated hooks into the TF and joint_state topic to get the current position as well as the current joint
configuration of the robot and applies it to the robt in the BulletWorld.
As all the other ROS utils the robot state updater only needs to be initialized and then takes care of himself.
To initialize the robot state updater a TF topic as well as a joint state topic have to be provided.
from pycram.ros.robot_state_updater import RobotStateUpdater

r = RobotStateUpdater("/tf", "/joint_states")












previous
Installation




next
Adding a new robot to PyCRAM









 Contents
  


TF Broadcaster
Joint State Publisher
Force Torque Sensor
Visualisation Marker Publisher
Robot State Updater








By Jonas Dech




    
      © Copyright 2024.
      

























General Remarks — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















General Remarks




 Contents 



Jupyter Notebooks & PyCharm
Dirty Terminals
Missing pr2_arm_kinematics








General Remarks#

Jupyter Notebooks & PyCharm#
If you have the situation that you activate your venv that has rospy installed and launched
PyCharm from the console you’ll run into trouble using jupyter notebooks. PyCharm allows you
to correctly set up the jupyter server, however the notebook will always use your
/usr/bin/python as interpreter and you can’t select the correct one in the drop down menu.
To fix this issue one has to execute
python -m ipykernel install --user --name <kernel_name> --display-name "<Name_to_display>"


, eg.
python -m ipykernel install --user --name pycram --display-name "pycram"


in your terminal. –name is the name of your virtual environment and –display-name is the name
that will display in the drop down menu of jupyter. After that, select the correct Python interpreter kernel (pycram) and
everything should work now.
Refer here for details.


Dirty Terminals#
If your terminal gets polluted by PyBullet complaining about incomplete URDF descriptions, you need to first fix your
URDF files by inserting the missing tags and second delete the resources/cached folder.


Missing pr2_arm_kinematics#
Aptitudes autoremove likes to also remove the arm kinematics. Reinstall the missing libraries with
sudo apt-get install ros-noetic-moveit


Then rebuild your workspace.










previous
Troubleshooting




next
PyCRAM Introduction









 Contents
  


Jupyter Notebooks & PyCharm
Dirty Terminals
Missing pr2_arm_kinematics








By Jonas Dech




    
      © Copyright 2024.
      

























Python Module Index — PyCRAM























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue

























Python Module Index

p


 

p



pycram



   
       pycram.cache_manager



   
       pycram.costmaps



   
       pycram.datastructures



   
       pycram.datastructures.dataclasses



   
       pycram.datastructures.enums



   
       pycram.datastructures.pose



   
       pycram.datastructures.world



   
       pycram.description



   
       pycram.designator



   
       pycram.designators



   
       pycram.designators.action_designator



   
       pycram.designators.location_designator



   
       pycram.designators.motion_designator



   
       pycram.designators.object_designator



   
       pycram.designators.specialized_designators



   
       pycram.designators.specialized_designators.action



   
       pycram.designators.specialized_designators.action.dual_arm_pickup_action



   
       pycram.designators.specialized_designators.location



   
       pycram.designators.specialized_designators.location.database_location



   
       pycram.designators.specialized_designators.location.giskard_location



   
       pycram.designators.specialized_designators.probabilistic



   
       pycram.designators.specialized_designators.probabilistic.probabilistic_action



   
       pycram.external_interfaces



   
       pycram.external_interfaces.giskard



   
       pycram.external_interfaces.ik



   
       pycram.external_interfaces.knowrob



   
       pycram.external_interfaces.move_base



   
       pycram.external_interfaces.robokudo



   
       pycram.external_interfaces.tmc



   
       pycram.failure_handling



   
       pycram.fluent



   
       pycram.helper



   
       pycram.language



   
       pycram.local_transformer



   
       pycram.object_descriptors



   
       pycram.object_descriptors.generic



   
       pycram.object_descriptors.urdf



   
       pycram.ontology



   
       pycram.ontology.ontology



   
       pycram.ontology.ontology_common



   
       pycram.orm



   
       pycram.orm.action_designator



   
       pycram.orm.base



   
       pycram.orm.motion_designator



   
       pycram.orm.object_designator



   
       pycram.orm.tasktree



   
       pycram.orm.utils



   
       pycram.orm.views



   
       pycram.plan_failures



   
       pycram.pose_generator_and_validator



   
       pycram.process_module



   
       pycram.process_modules



   
       pycram.process_modules.boxy_process_modules



   
       pycram.process_modules.default_process_modules



   
       pycram.process_modules.donbot_process_modules



   
       pycram.process_modules.hsrb_process_modules



   
       pycram.process_modules.pr2_process_modules



   
       pycram.process_modules.stretch_process_modules



   
       pycram.robot_description



   
       pycram.robot_descriptions



   
       pycram.robot_descriptions.boxy_description



   
       pycram.robot_descriptions.donbot_description



   
       pycram.robot_descriptions.hsrb_description



   
       pycram.robot_descriptions.pr2_description



   
       pycram.robot_descriptions.stretch_description



   
       pycram.robot_descriptions.tiago_description



   
       pycram.robot_descriptions.turtlebot_description



   
       pycram.robot_descriptions.ur5_description



   
       pycram.ros



   
       pycram.ros.force_torque_sensor



   
       pycram.ros.joint_state_publisher



   
       pycram.ros.robot_state_updater



   
       pycram.ros.tf_broadcaster



   
       pycram.ros.viz_marker_publisher



   
       pycram.tasktree



   
       pycram.utils



   
       pycram.world_concepts



   
       pycram.world_concepts.constraints



   
       pycram.world_concepts.event



   
       pycram.world_concepts.world_object



   
       pycram.world_reasoning



   
       pycram.worlds



   
       pycram.worlds.bullet_world













By Jonas Dech




    
      © Copyright 2024.
      

























ORM — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf
















ORM









ORM#











previous
Motion Designator




next
Hands on Object Relational Mapping in PyCram











By Jonas Dech




    
      © Copyright 2024.
      

























Robot Description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Robot Description




 Contents 



Robot Description Class
Kinematic Chain Description
End Effector Description
Camera Description
Grasps
Register Robot Description








Robot Description#
The robot description contains semantic information about the robot which can not be extracted from the URDF in a
general way. This inludes kinematic chains, end-effectors, cameras and their parameter, etc.
In genral a Robot Description consists a number of different descriptions, these are:

RobotDescription
KinematicChainDescription
EndEffectorDescription
CameraDescription

In this example we will create a robot description step-by-step and describe the different components on the way. The
robot we will use as an example will be the PR2, the complete PR2 description can also be seen in
pycram.robot_descriptions.pr2_description().

Robot Description Class#
We start by creating an instance of the RobotDescription class, this will serve as a
the main component to which all other descriptions will be added.
To initialize a RobotDescription we need a few parameter which are:

Name
base_link
torso_link
torso_joint
Path to a URDF file

from pycram.robot_description import RobotDescription
import rospkg

rospack = rospkg.RosPack()
filename = rospack.get_path('pycram') + '/resources/robots/' + "pr2" + '.urdf'

pr2_description = RobotDescription("pr2", "base_link", "torso_lift_link", "torso_lift_joint", filename)




Kinematic Chain Description#
The kinematic chain description describes a chain of links and joints of the robot which might be interesting when
working with the robot. An example of such a chain would be the arm of the robot, when programming for the robot it is
important to know which links and joints exactly make up the arm, however, these can not be extracted from the URDF
automatically.
The kinematic chain is based upon the URDF, meaning when initializing the description one only needs to specify the
first and last link of the chain.
We will now create the kinematic chain description for the right arm of the PR2. For initializing
the KinematicChainDescription the following parameter are needed:

Name
first link
last link
URDF object
Arm type

The arm type specifies which arm this kinematic chain describes, this is needed when one wants to access only the arms
of the robot.
from pycram.robot_description import KinematicChainDescription
from pycram.datastructures.enums import Arms

right_arm = KinematicChainDescription("right", "torso_lift_link", "r_wrist_roll_link",
                                      pr2_description.urdf_object, arm_type=Arms.RIGHT)


The created KinematicChainDescription can now be added to the robot description.
pr2_description.add_kinematic_chain_description(right_arm)




End Effector Description#
Since kinematic chains only describe a moveable chain of links and joints like arms these do not represent end-effectors
which can be used to do manipulation tasks.
To represent end-effectors we will create an EndEffectorDescription which contains the information of the respective
end-effector. When creating an EndEffectorDescription we need the following parameter:

Name
first link
tool_frame
URDF object

You might have noticed that the end-efftor only has a first link but no last link, this is the case since end-effectors
are at the end of the arms. Therefore, all links and joints below a certain link can be seen as part of the
end-effector.
from pycram.robot_description import EndEffectorDescription

right_gripper = EndEffectorDescription("right_gripper", "r_gripper_palm_link", "r_gripper_tool_frame",
                                       pr2_description.urdf_object)


The gripper can no be added to the previously created KinematicChainDescription.
right_arm.end_effector = right_gripper




Camera Description#
The camera description contains all parameters of a camera, which is mounted on the robot. The parameter for
the CameraDescription are:

Name
Link name
minimal height
maximal height
horizontal angle
vertical angle

from pycram.robot_description import CameraDescription
from pycram.datastructures.enums import Grasp

camera = CameraDescription("kinect_camera", "wide_stereo_optical_frame", 1.27,
                           1.60, 0.99483, 0.75049)


The finished camera description can now be added to the robot description.
pr2_description.add_camera_description(camera)




Grasps#
Grasps define how a robot interacts with objects. The grasps defined in the robot description define for each grasp (
right, left, top, front) the orientation of the end-effector, relative to the base_frame of the robot, to achieve the
respective grasp.
pr2_description.add_grasp_orientations({Grasp.FRONT: [0, 0, 0, 1],
                                        Grasp.LEFT: [0, 0, -1, 1],
                                        Grasp.RIGHT: [0, 0, 1, 1],
                                        Grasp.TOP: [0, 1, 0, 1]})




Register Robot Description#
Lastly, you need to register the robot description to the RobotDescriptionManager. As you can see the code to
register the robot description has to be executed at the start of PyCRAM, if you put your file with the robot
description in the pycram.robot_descriptions directory it will be executed upon the start of PyCRAM.
from pycram.robot_description import RobotDescriptionManager

rdm = RobotDescriptionManager()
rdm.register_description(pr2_description)












previous
Pose




next
External Interface









 Contents
  


Robot Description Class
Kinematic Chain Description
End Effector Description
Camera Description
Grasps
Register Robot Description








By Jonas Dech




    
      © Copyright 2024.
      

























Pose — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Pose




 Contents 



Pose
Editing a pose
Copy Poses
Convert to Transform


Transforms
Convert to Pose and Copy
Operations on Transforms
Multiplication
Invert
Inverse Times












Pose#
Poses in PyCRAM are represented by the Pose class which inherits from the PoseStamped message of ROS. This makes PyCRAMs
poses compatible with everything in ROS like services, topics or TF.
This notebook will provide an overview about poses, how to use them and what they can do. We will start by simply
creating a pose.
Before we start a few words about naming convention of Poses in PyCRAM. Naming convention is similar to the PoseStamped
message so if you are familiar with that this should be easy.

Position: A position means the position in cartesian space, so the x, y, and z coordinates.
Orientation: An orientation is the rotation in all three axes represented as a quaternion with x, y, z, w.
Pose: A pose is the combination of a position and an orientation. Poses in PyCRAM also contain a frame of
reference to which the position and orientation are relative.

from pycram.datastructures.pose import Pose

example_pose = Pose([1, 2, 3], [0, 0, 0, 1], "map")
print(example_pose)


As you can see we created the example_pose with a position of [1, 2, 3] and an orientation
of [0, 0, 0, 1] in the frame map. But we don’t need to provide all these parameters for a Pose, in case
there is no parameter the Pose will use default parameter.
from pycram.datastructures.pose import Pose

default_pose = Pose()
print(default_pose)


In case no parameter is provided the defualt parameter are:

position: [0, 0, 0]
orientation: [o, 0, 0, 1]
frame: map

The following example will show how to access the data stored in a pose.
from pycram.datastructures.pose import Pose

example_pose = Pose([1, 2, 3], [0, 0, 0, 1], "map")

print(f"Access to a component of the position: {example_pose.position.y}")

print(f"Access to a component of the rotation: {example_pose.orientation.x}")

print(f"Get the whole position as geometry_msgs/Pose:\n{example_pose.position}")

print(f"You can also get position or orientation as a list: {example_pose.position_as_list()}")

print(f"Same with the whole pose: {example_pose.to_list()}")

print(f"Access the reference frame: {example_pose.frame}")



Editing a pose#
You can also edit the data saved in a Pose, similar to how you access it.
from pycram.datastructures.pose import Pose

example_pose = Pose([1, 2, 3], [0, 0, 0, 1], "map")

# Edit a single component of the position 
example_pose.position.x = 3
print(f"Edit only one component:\n{example_pose.position}", "\n")

# Edit the whole position
example_pose.position = [0, 0, 1]
print(f"Edit the whole position:\n{example_pose.position}", "\n")

example_pose.frame = "new_frame"
print(f"Set a new frame:\n{example_pose.frame}", "\n")

example_pose.set_position([3, 2, 1])
print(f"Set the position via method:\n{example_pose.position}", "\n")




Copy Poses#
You can also copy Poses to create a new Pose with the same data. This can be useful if you have a method which would
need to alter the Pose, since poses are passed by reference to a method every change done to the Pose in the method
would affect the instanced passed to the method.
from pycram.datastructures.pose import Pose

example_pose = Pose([1, 2, 3], [0, 0, 0, 1], "map")

copy_pose = example_pose.copy()

print(example_pose, "\n")
print(copy_pose)




Convert to Transform#
PyCRAM also has its own transform at which we will take a look in the next section. However, here we will take a look at
how to convert a Pose into a Transform.
For this example we will take a Pose which represents the current pose of a milk object and convert it into a Transform
which represents the transformation from the map frame to the milk frame.
from pycram.datastructures.pose import Pose

milk_pose = Pose([3, 4, 1], [1, 0, 0, 1], "map")

milk_transform = milk_pose.to_transform("milk")

print(milk_transform)





Transforms#
Transforms are similar to Poses but instead of representing a Pose in a frame of reference they represent a
transformation from one frame of reference to another. For this purpose Transforms have an additional parameter
called child_frame_id which is the frame of reference to which the Transform is pointing.
Transforms in PyCRAM inherit from the TransformStamped message of ROS which makes them, like Poses, compatible to ROS
services and topics that expect a TransformStamped message. Therefore, the naming conventions of Transforms are the same
as of TransformStamped which.

Translation: The vector describing the transformation in cartesian space.
Rotation: The quaternion describing the transformation of rotation.
Transform: The combination of translation and rotation

from pycram.datastructures.pose import Transform

example_transform = Transform([1, 2, 2], [0, 0, 0, 1], "map", "object")

print(example_transform)


Transforms have the same methods to get and set values as Poses have, therefore only a short showcase will be given. For
more details please look at the Pose example or the API documentation.
from pycram.datastructures.pose import Transform

example_transform = Transform([2, 5, 1], [0, 0, 1, 1], "map", "object")

print(f"Access the rotation:\n{example_transform.rotation}", "\n")

print(f"Access the child_frane: {example_transform.child_frame_id}", "\n")

# changing translation and rotation is exactly like with Poses.

example_transform.translation = [1, 1, 1]
print(f"New translation:\n{example_transform.translation}")



Convert to Pose and Copy#
Analog to Poses Transforms have a method that converts a Transform to a Pose, in this process the child_frame_id
will be lost.
Also like in Poses Transforms have a copy method which creates an exact copy of this Transform.
from pycram.datastructures.pose import Transform

milk_transform = Transform([1, 1, 1], [0, 0, 0, 1], "map", "milk")

milk_pose = milk_transform.to_pose()

print(f"The converted pose:\n{milk_pose}", "\n")

example_transform = Transform([1, 1, 1], [0, 0, 0, 1], "map", "milk")

copy_transform = example_transform.copy()

print(f"The copied transform:\n{copy_transform}")




Operations on Transforms#
Transforms have, unlike Poses, operations that can be done. These operations are:

Multiplication
Invert
InverseTimes


Multiplication#
We will first take a look at the multiplication of Transforms. We will use an example were we have two Transforms, the
first from map to a hand frame and the second from the hand to a milk frame. By multiplying
these two we get the Transform from map to milk frame.
from pycram.datastructures.pose import Transform

map_to_hand = Transform([1, 1, 1], [0, 0, 0, 1], "map", "hand")

hand_to_milk = Transform([0.1, 0.05, 0], [0, 0, 0, 1], "hand", "milk")

map_to_milk = map_to_hand * hand_to_milk

print(map_to_milk)




Invert#
This inverts a Transform, so in we have a transform from map to milk then inverting it results in a
Transform from milk to map .
from pycram.datastructures.pose import Transform

map_to_milk = Transform([1, 1, 0.5], [0, 0, 0, 1], "map", "milk")

milk_to_map = map_to_milk.invert()

print(milk_to_map)




Inverse Times#
Inverse times combines the inverting and multiplication of Transforms, this results in a ‘minus’ for Transforms. We will
again use the example of a hand holding a milk, but this time we have the Transforms from map to milk
and hand to milk.
from pycram.datastructures.pose import Transform

map_to_milk = Transform([1.1, 1.05, 1], [0, 0, 0, 1], "map", "milk")

hand_to_milk = Transform([0.1, 0.05, 0], [0, 0, 0, 1], "hand", "milk")

map_to_milk = map_to_milk.inverse_times(hand_to_milk)

print(map_to_milk)













previous
Datastructure




next
Robot Description









 Contents
  


Pose
Editing a pose
Copy Poses
Convert to Transform


Transforms
Convert to Pose and Copy
Operations on Transforms
Multiplication
Invert
Inverse Times












By Jonas Dech




    
      © Copyright 2024.
      

























ORM querying examples — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf
















ORM querying examples









ORM querying examples#
In this tutorial, we will get to see more examples of ORM querying.
First, we will gather a lot of data. In order to achieve that we will write a randomized experiment for grasping a couple of objects.
In the experiment the robot will try to grasp a randomized object using random poses and torso heights.
from tf import transformations
import itertools
import time
from typing import Optional, List, Tuple

import numpy as np

import sqlalchemy.orm
import tf
import tqdm

import pycram.orm.base
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object as BulletWorldObject
from pycram.designators.action_designator import MoveTorsoAction, PickUpAction, NavigateAction, ParkArmsAction, ParkArmsActionPerformable, MoveTorsoActionPerformable
from pycram.designators.object_designator import ObjectDesignatorDescription
from pycram.plan_failures import PlanFailure
from pycram.process_module import ProcessModule
from pycram.datastructures.enums import Arms, ObjectType, Grasp

from pycram.process_module import simulated_robot
import sqlalchemy.orm
import pycram.orm
from pycram.orm.base import Position, RobotState
from pycram.orm.tasktree import TaskTreeNode
from pycram.orm.action_designator import PickUpAction as ORMPickUpAction
from pycram.orm.object_designator import Object
import sqlalchemy.sql
import pandas as pd

from pycram.datastructures.pose import Pose

np.random.seed(420)

ProcessModule.execution_delay = False
pycram.orm.base.ProcessMetaData().description = "Tutorial for learning from experience in a Grasping action."


class GraspingExplorer:
    """Class to try randomized grasping plans."""

    world: Optional[BulletWorld]

    def __init__(self, robots: Optional[List[Tuple[str, str]]] = None, objects: Optional[List[Tuple[str, str]]] = None,
                 arms: Optional[List[Arms]] = None, grasps: Optional[List[Grasp]] = None,
                 samples_per_scenario: int = 1000):
        """
        Create a GraspingExplorer.
        :param robots: The robots to use
        :param objects: The objects to try to grasp
        :param arms: The arms of the robot to use
        :param grasps: The grasp orientations to use
        :param samples_per_scenario: The number of tries per scenario.
        """
        # store exploration space
        if not robots:
            self.robots: List[Tuple[str, str]] = [("pr2", "pr2.urdf")]

        if not objects:
            self.objects: List[Tuple[str, ObjectType, str]] = [("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl"),
                                                                            ("bowl", ObjectType.BOWL, "bowl.stl"),
                                                                            ("milk", ObjectType.MILK, "milk.stl"),
                                                                            ("spoon", ObjectType.SPOON, "spoon.stl")]

        if not arms:
            self.arms: List[str] = [Arms.LEFT, Arms.RIGHT]

        if not grasps:
            self.grasps: List[str] = [Grasp.LEFT, Grasp.RIGHT, Grasp.FRONT, Grasp.TOP]

        # store trials per scenario
        self.samples_per_scenario: int = samples_per_scenario

        # chain hyperparameters
        self.hyper_parameters = [self.robots, self.objects, self.arms, self.grasps]

        self.total_tries = 0
        self.total_failures = 0

    def perform(self, session: sqlalchemy.orm.Session):
        """
        Perform all experiments.
        :param session: The database-session to insert the samples in.
        """

        # create progress bar
        progress_bar = tqdm.tqdm(
            total=np.prod([len(p) for p in self.hyper_parameters]) * self.samples_per_scenario)

        self.world = BulletWorld("DIRECT")

        # for every robot
        for robot, robot_urdf in self.robots:

            # spawn it
            robot = BulletWorldObject(robot, ObjectType.ROBOT, robot_urdf)

            # for every obj
            for obj, obj_type, obj_stl in self.objects:

                # spawn it
                bw_object = BulletWorldObject(obj, obj_type, obj_stl, pose=Pose([0, 0, 0.75], [0, 0, 0, 1]))

                # create object designator
                object_designator = ObjectDesignatorDescription(names=[obj])

                # for every arm and grasp pose
                for arm, grasp in itertools.product(self.arms, self.grasps):
                    # sample positions in 2D
                    positions = np.random.uniform([-2, -2], [2, 2], (self.samples_per_scenario, 2))

                    # for every position
                    for position in positions:

                        # set z axis to 0
                        position = [*position, 0]

                        # calculate orientation for robot to face the object
                        angle = np.arctan2(position[1], position[0]) + np.pi
                        orientation = list(transformations.quaternion_from_euler(0, 0, angle, axes="sxyz"))

                        # try to execute a grasping plan
                        with simulated_robot:

                            ParkArmsActionPerformable(Arms.BOTH).perform()
                            # navigate to sampled position
                            NavigateAction([Pose(position, orientation)]).resolve().perform()

                            # move torso
                            height = np.random.uniform(0., 0.33, 1)[0]
                            MoveTorsoActionPerformable(height).perform()

                            # try to pick it up
                            try:
                                PickUpAction(object_designator, [arm], [grasp]).resolve().perform()

                            # if it fails
                            except PlanFailure:

                                # update failure stats
                                self.total_failures += 1

                            # reset BulletWorld
                            self.world.reset_world()

                            # update progress bar
                            self.total_tries += 1

                            # insert into database
                            pycram.tasktree.task_tree.insert(session, use_progress_bar=False)
                            pycram.tasktree.reset_tree()

                            progress_bar.update()
                            progress_bar.set_postfix(success_rate=(self.total_tries - self.total_failures) /
                                                                  self.total_tries)

                bw_object.remove()
            robot.remove()



Next we have to establish a connection to a database and execute the experiment a couple of times. Note that the (few) number of samples we generate is only for demonstrations.
For robust and reliable machine learning millions of samples are required.
engine = sqlalchemy.create_engine("sqlite+pysqlite:///:memory:")
session = sqlalchemy.orm.Session(bind=engine)
pycram.orm.base.Base.metadata.create_all(bind=engine)
session.commit()

explorer = GraspingExplorer(samples_per_scenario=30)
explorer.perform(session)


The success_rate of the output above indicates how many of our samples succeeded in trying to grasp a randomized object.
Now that we have data to query from and a running session, we can actually start creating queries.
Let’s say we want to select positions of robots that were able to grasp a specific object (in this case a “milk” object):
from sqlalchemy import select
from pycram.datastructures.enums import ObjectType

milk = BulletWorldObject("Milk", ObjectType.MILK, "milk.stl")

# query all relative robot positions in regard to an objects position
# make sure to order the joins() correctly
query = (select(ORMPickUpAction.arm, ORMPickUpAction.grasp, RobotState.torso_height, Position.x, Position.y)
         .join(TaskTreeNode.code)
         .join(Code.designator.of_type(ORMPickUpAction))
         .join(ORMPickUpAction.robot_state)
         .join(RobotState.pose)
         .join(pycram.orm.base.Pose.position)
         .join(ORMPickUpAction.object).where(Object.type == milk.type)
                                      .where(TaskTreeNode.status == "SUCCEEDED"))
print(query)

df = pd.read_sql_query(query, session.get_bind())
print(df)


If you are not familiar with sqlalchemy querying you might wonder what the of_type() function does and why we needed it in this query:
In order to understand the importance of the of_type() function in the joins above it is crucial to understand the inheritance structure in the ORM package. The action necessary for this query is the PickUpAction. It inherits the Action class/table (which holds all the actions). The Action class itself on the other hand inherits Designator (which holds all the actions, but also all the motions).
We started our joins by joining TaskTreeNode on its relationship to Code and Code on its relationship to Designator. Next table we need is the PickUpAction table, but there is no specified relationship between Designator and PickUpAction. But we do know that a PickUpAction is actually a Designator, meaning, it inherits from Designator. So we can just “tell” the join to join Code on every Designator, that is “of_type” PickUpAction (.join(Code.designator.of_type(ORMPickUpAction))).
The effect of this function can also be seen in the printed query of above’s output.
Another interesting query: Let’s say we want to select the torso height and positions of robots relative to the object they were trying to grasp:
from pycram.orm.base import Pose as ORMPose

robot_pose = sqlalchemy.orm.aliased(ORMPose)
object_pose = sqlalchemy.orm.aliased(ORMPose)
robot_position = sqlalchemy.orm.aliased(Position)
object_position = sqlalchemy.orm.aliased(Position)

query = (select(TaskTreeNode.status, Object.type, 
                       sqlalchemy.label("relative torso height", object_position.z - RobotState.torso_height),
                       sqlalchemy.label("x", robot_position.x - object_position.x),
                       sqlalchemy.label("y", robot_position.y - object_position.y))
         .join(TaskTreeNode.code)
         .join(Code.designator.of_type(ORMPickUpAction))
         .join(ORMPickUpAction.robot_state)
         .join(robot_pose, RobotState.pose)
         .join(robot_position, robot_pose.position)
         .join(ORMPickUpAction.object)
         .join(object_pose, Object.pose)
         .join(object_position, object_pose.position))
print(query)

df = pd.read_sql(query, session.get_bind())
df["status"] = df["status"].apply(lambda x: str(x.name))
print(df)


Obviously the query returned every row of the database since we didn’t apply any filters.
Why is this query interesting? This query not only required more joins and the usage of the of_type() function, but we actually needed to access two of the tables twice with different purposes, namely the Pose and Position tables. We wanted to get the position of the robot relative to the object position, meaning we had to obtain all robot positions and all object positions. If we want to access the same table twice, we have to make sure to rename (one of) the occurrences in our query in order to provide proper sql syntax. This can be done by creating aliases using the sqlalchemy.orm.aliased() function. Sqlalchemy will automatically rename all the aliased tables for you during runtime.









previous
Hands on Object Relational Mapping in PyCram




next
Migrate NEEMs











By Jonas Dech




    
      © Copyright 2024.
      

























Hands on Object Relational Mapping in PyCram — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf
















Hands on Object Relational Mapping in PyCram









Hands on Object Relational Mapping in PyCram#
This tutorial will walk you through the serialization of a minimal plan in pycram.
First we will import sqlalchemy, create an in memory database and connect a session to it.
import sqlalchemy
import sqlalchemy.orm

engine = sqlalchemy.create_engine("sqlite+pysqlite:///:memory:", echo=False)
session = sqlalchemy.orm.Session(bind=engine)
session


Next we create the database schema using the sqlalchemy functionality. For that we need to import the base class of pycram.orm.
import pycram.orm.base
import pycram.orm.action_designator
pycram.orm.base.Base.metadata.create_all(engine)
session.commit()


Next we will write a simple plan where the robot parks his arms and then moves somewhere. We will construct a TaskTree around it such that we can serialize it later. As usual, we first create a world and then define the plan. By doing so, we obtain the task tree.
from pycram.designators.action_designator import *
from pycram.designators.location_designator import *
from pycram.process_module import simulated_robot
from pycram.datastructures.enums import Arms, ObjectType, Grasp, WorldMode
from pycram.tasktree import with_tree
import pycram.tasktree
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object
from pycram.designators.object_designator import *
from pycram.datastructures.pose import Pose
import anytree

world = BulletWorld(WorldMode.GUI)
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([1.3, 1, 0.9]))
cereal = Object("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", pose=Pose([1.3, 0.7, 0.95]))
milk_desig = ObjectDesignatorDescription(names=["milk"])
cereal_desig = ObjectDesignatorDescription(names=["cereal"])
robot_desig = ObjectDesignatorDescription(names=["pr2"]).resolve()
kitchen_desig = ObjectDesignatorDescription(names=["kitchen"])

@with_tree
def plan():
    with simulated_robot:
        ParkArmsActionPerformable(Arms.BOTH).perform()
        MoveTorsoAction([0.2]).resolve().perform()
        pickup_pose = CostmapLocation(target=cereal_desig.resolve(), reachable_for=robot_desig).resolve()
        pickup_arm = pickup_pose.reachable_arms[0]
        NavigateAction(target_locations=[pickup_pose.pose]).resolve().perform()
        PickUpAction(object_designator_description=cereal_desig, arms=[pickup_arm], grasps=[Grasp.FRONT]).resolve().perform()
        ParkArmsAction([Arms.BOTH]).resolve().perform()

        place_island = SemanticCostmapLocation("kitchen_island_surface", kitchen_desig.resolve(),
                                           cereal_desig.resolve()).resolve()

        place_stand = CostmapLocation(place_island.pose, reachable_for=robot_desig, reachable_arm=pickup_arm).resolve()

        NavigateAction(target_locations=[place_stand.pose]).resolve().perform()

        PlaceAction(cereal_desig, target_locations=[place_island.pose], arms=[pickup_arm]).resolve().perform()

        ParkArmsActionPerformable(Arms.BOTH).perform()

plan()

# set description of what we are doing
pycram.orm.base.ProcessMetaData().description = "Tutorial for getting familiar with the ORM."
task_tree = pycram.tasktree.task_tree
print(anytree.RenderTree(task_tree))


Next we serialize the task tree by recursively inserting from its root.
task_tree.root.insert(session)


We can look at our experiment (Process)MetaData to get some context on the data we just created.
from sqlalchemy import select

print(*session.scalars(select(pycram.orm.base.ProcessMetaData)).all())


Lastly we can look at various table to see how the structures got logged.
For example, we can get all the navigate actions that occurred.
navigations = session.scalars(select(pycram.orm.action_designator.NavigateAction)).all()
print(*navigations, sep="\n")


Due to the inheritance mapped in the ORM package, we can also obtain all executed actions with just one query.
actions = session.scalars(select(pycram.orm.action_designator.Action)).all()
print(*actions, sep="\n")


Of course all relational algebra operators, such as filtering and joining also work in pycram.orm queries. Let’s say we need all the poses of objects, that were picked up by a robot. Since we defined a relationship between the PickUpAction table and the Object table and between the Object table and the Pose table in the ORM class schema, we can just use the join operator without any further specification:
object_actions = (session.scalars(select(pycram.orm.base.Pose)
                  .join(pycram.orm.action_designator.PickUpAction.object)
                  .join(pycram.orm.object_designator.Object.pose))
                  .all())
print(*object_actions, sep="\n")



Did you notice, that for the joins we did not join the tables together in a typical sql kind of way, but rather used the relationships defined in the ORM classes and wrote joins like PickUpAction.object or Object.pose? This is because the ORM package automatically creates the joins for us, so we only have to join on the attributes that hold the relationship. This is a huge advantage over writing sql queries by hand, since we do not have to worry about the join conditions.
This is a strong tool, but it is crucial to use it properly. Very important to note: The order of the joins matters! For instance, if we joined the Pose table with the Object table first, and placed the join between the PickUpAction table and the Object table second, sqlalchemy would have selected the Pose not from the join between all three tables, but rather from a join between the Pose and the Object table + from a join between the PickUpAction table and the Object table. These mistakes can lead to wrong results or even to errors (the above-mentioned example would actually lead to an error due to the Object table being accessed twice in two separate joins in the same query and therefore the column names of the Object tables would have been ambiguous and could not be used by sqlalchemy to join).
Make sure to check out the other examples of ORM querying.
If we want to filter for all successful tasks we can just add the filter operator:
from pycram.orm.tasktree import TaskTreeNode

successful_tasks = session.scalars(select(TaskTreeNode).where(TaskTreeNode.status == "SUCCEEDED"))
print(*successful_tasks, sep="\n")


As expected all but the root node succeeded, since the root node is still running.
Writing an extension to the ORM package is also done with ease. We need to create a new ActionDesignator class and its ORM equivalent, where we define our new table. Let’s say we want to log all the things the robot says. We will create a new ActionDesignator class called Saying and its ORM equivalent called ORMSaying.
from sqlalchemy.orm import Mapped, mapped_column, Session
from pycram.orm.action_designator import Action
from dataclasses import dataclass


# define ORM class from pattern in every pycram.orm class
class ORMSaying(Action):

    id: Mapped[int] = mapped_column(sqlalchemy.ForeignKey(f'{Action.__tablename__}.id'), primary_key=True, init=False)
    # since we do not want to add any custom specifications to our column, we don't even need to define mapped_column, sqlalchemy does this internally.
    text: Mapped[str] 

# define brand new action designator

@dataclass 
class SayingActionPerformable(ActionDesignatorDescription.Action):
    
    text: str
        
    @with_tree
    def perform(self) -> None:
        print(self.text)

    def to_sql(self) -> ORMSaying:
        return ORMSaying(self.text)

    def insert(self, session: Session, *args, **kwargs) -> ORMSaying:
        action = super().insert(session)
        session.add(action)
        session.commit()
        return action



Now we got our new ActionDesignator called Saying and its ORM version. Since this class got created after all other classes got inserted into the database (in the beginning of the notebook) we have to insert it manually.
ORMSaying.metadata.create_all(bind=engine)


Now we can create and insert a Saying action. Since this is the last part where we interact with the BulletWorld, we can also close it.
# create a saying action and insert it
SayingActionPerformable("Patchie, Patchie; Where is my Patchie?").perform()
pycram.tasktree.task_tree.root.insert(session)
session.commit()

world.exit()


It is notable that committing the object to the session fills its primary key. Hence, there is no worries about assigning unique IDs manually.
Finally, we can double-check that our object exists in the database.
session.scalars(select(ORMSaying)).all()











previous
ORM




next
ORM querying examples











By Jonas Dech




    
      © Copyright 2024.
      

























Ontology interface — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Ontology interface




 Contents 



Ontology interface
Owlready2
Ontology Manager
Ontology Concept Holder
Query ontology classes and their properties
Create a new ontology concept class and its individual
Access ontology concept classes and individuals
Connect ontology class individuals with designators
Create new ontology triple classes
Create ontology relations


Query designators based on their ontology-concept relations


Practical examples
Example 1
Example 2
Setup simulated environment
Create PourableObject-LiquidHolder triple ontology classes
Spawn a pourable object & liquid holders into the world and Create their designators
Create an ontology relation between the designators of the pourable object & its liquid holders
Set up resolve for the ontology concept of the pourable object
Robot picks up the target liquid holder




Save ontologies to an OWL file
Optimize ontology loading with SQLite3









Ontology interface#
This tutorial demonstrates basic usages of owlready2 API for ontology manipulation. Notably, new ontology concept
triple classes (subject, predicate, object) will be dynamically created, with optional existing ontology parent classes
that are loaded from an OWL ontology. Then through the interconnected relations specified in triples, designators and
their corresponding ontology concepts can be double-way queried for input information in certain tasks, eg. making a
robot motion plan.

from pathlib import Path
from typing import Type
from pycram.designator import ObjectDesignatorDescription





Owlready2#
Owlready2 is a Python package providing a transparent access to
OWL ontologies. It supports various manipulation operations, including but not limited to loading, modification, saving
ontologies. Built-in supported reasoners include HermiT
and Pellet.

import logging

try:
    from owlready2 import *
except ImportError:
    owlready2 = None
    logging.error("Could not import owlready2, Ontology Manager could not be initialized!")

logging.getLogger().setLevel(logging.INFO)





Ontology Manager#
OntologyManager is the singleton class acting as the main interface between PyCram with ontologies, whereby object
instances in the former could query relevant information based on the semantic connection with their corresponding
ontology concepts.
Such connection, as represented by triples (subject-predicate-object), could be also created on the fly if not
pre-existing in the loaded ontology.
Also new and updated concepts with their properties defined in runtime could be stored into
an SQLite3 file database for reuse.
Here we will use SOMA ontology as the baseline to utilize the generalized concepts
provided by it.

from pycram.ontology.ontology import OntologyManager, SOMA_HOME_ONTOLOGY_IRI
from pycram.ontology.ontology_common import OntologyConceptHolderStore, OntologyConceptHolder

ontology_manager = OntologyManager(SOMA_HOME_ONTOLOGY_IRI)
main_ontology = ontology_manager.main_ontology
soma = ontology_manager.soma
dul = ontology_manager.dul


General class axioms of the loaded ontologies
can be queried by
print(f"{main_ontology.name}: ", ontology_manager.get_ontology_general_class_axioms(main_ontology))
print(f"{soma.name}: ", ontology_manager.get_ontology_general_class_axioms(soma))
print(f"{dul.name}: ", ontology_manager.get_ontology_general_class_axioms(dul))




Ontology Concept Holder#
OntologyConceptHolder class, encapsulating an owlready2.Thing instance, is used primarily as the binding
connection between the owlready2.Thing ontology concept to PyCram designators. We make it that way, instead of
creating a custom concept class that inherits from owlready2.Thing for the reasons below:

owlready2 API does not have very robust support for client classes to inherit from theirs with added (non-semantic)
attributes, particularly in our case, where classes like DesignatorDescription have their metaclass as ABCMeta,
while it is EntityClass that is the metaclass used for basically all concepts (classes, properties) in owlready2.
Since those two metaclasses just bear no relationship, for the inheritance to work, the only way is to create a child
metaclass with both of those as parents, however without full support by owlready2, plus the second reason below
will point out it’s not worth the effort.
Essentially, we will have new ontology concept classes created dynamically, if their types inherit
from owlready2.Thing, all custom non-semantic (of types known only by PyCram) attributes, which are defined by their
own in child classes, will apparently be not savable into the ontology by owlready2 api. Then the next time the
ontology is loaded, those same dynamic classes will not be created anymore, thus without those attributes either,
causing running error.

As such, in short, an ontology concept class, either newly created on the fly or loaded from ontologies, has to
be owlready2.Thing or its pure derived class (without non-semantic attributes), so to make itself reusable upon
reloading.
Notable attributes:

ontology_concept: An ontology concept of owlready2.Thing type or its pure child class (without custom non-semantic
attributes), either dynamically created, or loaded from an ontology
designators: a list of DesignatorDescription instances associated with ontology_concept
resolve: a Callable typically returning a list of DesignatorDescription as specific designators,
like designators or its subset, inferred from the ontology concept. In fact, it can be resolved to anything else
relevant, up to the caller.





Query ontology classes and their properties#
Classes in the loaded ontology can be queried based on their exact names, or part of them, or by namespace.
Here, we can see essential info (ancestors, super/sub-classes, properties, direct instances, etc.) of the found ontology
class.

ontology_designed_container_class = ontology_manager.get_ontology_class('DesignedContainer')
ontology_manager.print_ontology_class(ontology_designed_container_class)
classes = ontology_manager.get_ontology_classes_by_subname('PhysicalObject');
print(classes[0])
classes = ontology_manager.get_ontology_classes_by_namespace('SOMA');
print(classes[:2])



Descendants of an ontology class can be also queried by

ontology_manager.get_ontology_descendant_classes(ontology_designed_container_class)[:5]





Create a new ontology concept class and its individual#
A new ontology class can be created dynamically as inheriting from an existing class in the loaded ontology.
Here we create the class and its instance, also known as __individual
__ in ontology terms, which is then
wrapped inside an OntologyConceptHolder.

ontology_custom_container_class = ontology_manager.create_ontology_concept_class('CustomContainerConcept',
                                                                                 ontology_designed_container_class)
custom_container_concept_holder = OntologyConceptHolder(
    ontology_custom_container_class(name='ontology_custom_container_concept',
                                    namespace=main_ontology))





Access ontology concept classes and individuals#
All ontology classes created on the fly purely inherit (without added non-semantic attributes) from owlready2.Thing,
and so share the same namespace with the loaded ontology instance, main_ontology. They can then be accessible through
that namespace by main_ontology.<class_name>.
The same applies for individuals of those classes, accessible by main_ontology.<class_individual_name>

ontology_manager.print_ontology_class(main_ontology.CustomContainerConcept)
print(
    f"custom_container_concept is {main_ontology.ontology_custom_container_concept}: {custom_container_concept_holder.ontology_concept is main_ontology.ontology_custom_container_concept}")



For ones already existing in the ontology, they can only be accessed through their corresponding ontology, eg: soma as
follows

ontology_manager.print_ontology_class(soma.Cup)





Connect ontology class individuals with designators#
After creating custom_container_concept_holder (wrapping custom_container_concept as an owlready2.Thing), we
connect it to a designator (say obj_designator) by:

Appending to obj_designator.ontology_concept_holders with custom_container_concept_holder
Appending to custom_container_concept_holder.designators with obj_designator


custom_container_designator = ObjectDesignatorDescription(names=["obj"])
custom_container_designator.ontology_concept_holders.append(custom_container_concept_holder)
custom_container_concept_holder.designators.append(custom_container_designator)



We can also automatize all the above setup with a single function call

another_custom_container_designator = ontology_manager.create_ontology_linked_designator(
    object_name="another_custom_container",
    designator_class=ObjectDesignatorDescription,
    ontology_concept_name="AnotherCustomContainerConcept",
    ontology_parent_class=ontology_designed_container_class)
another_custom_container_concept = another_custom_container_designator.ontology_concept_holders[0].ontology_concept
print(f"Ontology concept: {another_custom_container_concept.name} of class {type(another_custom_container_concept)}")
another_custom_container_designator = OntologyConceptHolderStore().get_ontology_concept_holder_by_name(
    main_ontology.AnotherCustomContainerConcept.instances()[0].name).get_default_designator()
print(f"Designator: {another_custom_container_designator.names[0]} of type {type(another_custom_container_designator)}")





Create new ontology triple classes#
Concept classes of a triple, aka [subject, predicate, object], can be created dynamically. Here we will make an
example creating ones for [handheld objects] and [placeholder objects], with a pair of predicate and inverse
predicate signifying their mutual relation.

PLACEABLE_ON_PREDICATE_NAME = "placeable_on"
HOLD_OBJ_PREDICATE_NAME = "hold_obj"
ontology_manager.create_ontology_triple_classes(ontology_subject_parent_class=soma.DesignedContainer,
                                                subject_class_name="OntologyPlaceHolderObject",
                                                ontology_object_parent_class=soma.Shape,
                                                object_class_name="OntologyHandheldObject",
                                                predicate_class_name=PLACEABLE_ON_PREDICATE_NAME,
                                                inverse_predicate_class_name=HOLD_OBJ_PREDICATE_NAME,
                                                ontology_property_parent_class=soma.affordsBearer,
                                                ontology_inverse_property_parent_class=soma.isBearerAffordedBy)
ontology_manager.print_ontology_property(main_ontology.placeable_on)
ontology_manager.print_ontology_property(main_ontology.hold_obj)



There, we use soma.DesignedContainer & soma.Shape, existing concept in SOMA ontology, as the parent classes for the
subject & object concepts respectively.
There is also a note that those classes will have the same namespace with main_ontology, so later on to be accessible
through it.
Then now we define some instances of the newly created triple classes, and link them to object designators, again
using ontology_manager.create_ontology_linked_designator()

def create_ontology_handheld_object_designator(object_name: str, ontology_parent_class: Type[owlready2.Thing]):
    return ontology_manager.create_ontology_linked_designator(object_name=object_name,
                                                              designator_class=ObjectDesignatorDescription,
                                                              ontology_concept_name=f"Onto{object_name}",
                                                              ontology_parent_class=ontology_parent_class)


# Holdable Objects
cookie_box = create_ontology_handheld_object_designator("cookie_box", main_ontology.OntologyHandheldObject)
egg = create_ontology_handheld_object_designator("egg", main_ontology.OntologyHandheldObject)

# Placeholder objects
placeholders = [create_ontology_handheld_object_designator(object_name, main_ontology.OntologyPlaceHolderObject)
                for object_name in ['table', 'stool', 'shelf']]

egg_tray = create_ontology_handheld_object_designator("egg_tray", main_ontology.OntologyPlaceHolderObject)




Create ontology relations#
Now we will create ontology relations or predicates between placeholder objects and handheld objects
with ontology_manager.set_ontology_relation()

for place_holder in placeholders:
    ontology_manager.set_ontology_relation(subject_designator=cookie_box, object_designator=place_holder,
                                           predicate_name=PLACEABLE_ON_PREDICATE_NAME)

ontology_manager.set_ontology_relation(subject_designator=egg_tray, object_designator=egg,
                                       predicate_name=HOLD_OBJ_PREDICATE_NAME)






Query designators based on their ontology-concept relations#
Now we can make queries for designators from designators, based on the relation among their corresponding ontology
concepts setup above

print(f"{cookie_box.names}'s placeholder candidates:",
      f"""{[placeholder.names for placeholder in
            ontology_manager.get_designators_by_subject_predicate(subject=cookie_box,
                                                                  predicate_name=PLACEABLE_ON_PREDICATE_NAME)]}""")

print(f"{egg.names}'s placeholder candidates:",
      f"""{[placeholder.names for placeholder in
            ontology_manager.get_designators_by_subject_predicate(subject=egg,
                                                                  predicate_name=PLACEABLE_ON_PREDICATE_NAME)]}""")

for place_holder in placeholders:
    print(f"{place_holder.names} can hold:",
          f"""{[placeholder.names for placeholder in
                ontology_manager.get_designators_by_subject_predicate(subject=place_holder,
                                                                      predicate_name=HOLD_OBJ_PREDICATE_NAME)]}""")

print(f"{egg_tray.names} can hold:",
      f"""{[placeholder.names for placeholder in
            ontology_manager.get_designators_by_subject_predicate(subject=egg_tray,
                                                                  predicate_name=HOLD_OBJ_PREDICATE_NAME)]}""")






Practical examples#

Example 1#
How about creating ontology concept classes encapsulating pycram.datastructures.enums.ObjectType? We can do it by:

from pycram.datastructures.enums import ObjectType

# Create a generic ontology concept class for edible objects
generic_edible_class = ontology_manager.create_ontology_concept_class('GenericEdible')

# Create a list of object designators sharing the same concept class as [generic_edible_class]
edible_obj_types = [ObjectType.MILK, ObjectType.BREAKFAST_CEREAL]
for object_type in ObjectType:
    if object_type in edible_obj_types:
        # Create a designator for the edible object
        ontology_manager.create_ontology_object_designator_from_type(object_type, generic_edible_class)

print(f'{generic_edible_class.name} object types:')
for edible_ontology_concept in generic_edible_class.direct_instances():
    print(edible_ontology_concept,
          [des.types for des in
           OntologyConceptHolderStore().get_ontology_concept_holder_by_name(edible_ontology_concept.name).designators])






Example 2#
We could also make use of relations between ontology concepts that designators are associated with, to enable more
abstract inputs in robot motion plans.
In a similar style to the scenario of placeholder objects and handheld objects above, but with a bit difference,
we will ask the robot to query which content holders (eg. cup, pitcher, bowl) whereby a milk box could be pourable into.
Basically, we will provide an ontology-based implementation for the query:
abstract_ontology_concept -> specific_objects_in_world?
To achieve it, we will create triple classes and configure a customized resolve() for the abstract concept, which
returns its associated specific designators.
These designators are then used to again resolve for the target objects of interest, which become the inputs to a robot
motion plan.

Setup simulated environment#

from pycram.worlds.bullet_world import BulletWorld, Object
from pycram.datastructures.pose import Pose

from pycram.process_module import simulated_robot
from pycram.designators.action_designator import *
from pycram.designators.location_designator import *

world = BulletWorld()
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
kitchen_designator = ObjectDesignatorDescription(names=["kitchen"])
robot_designator = ObjectDesignatorDescription(names=["pr2"]).resolve()




Create PourableObject-LiquidHolder triple ontology classes#
POURABLE_INTO_PREDICATE_NAME = "pourable_into"
HOLD_LIQUID_PREDICATE_NAME = "hold_liquid"
ontology_manager.create_ontology_triple_classes(ontology_subject_parent_class=soma.DesignedContainer,
                                                subject_class_name="OntologyLiquidHolderObject",
                                                ontology_object_parent_class=soma.Shape,
                                                object_class_name="OntologyPourableObject",
                                                predicate_class_name=POURABLE_INTO_PREDICATE_NAME,
                                                inverse_predicate_class_name=HOLD_LIQUID_PREDICATE_NAME,
                                                ontology_property_parent_class=soma.affordsBearer,
                                                ontology_inverse_property_parent_class=soma.isBearerAffordedBy)




Spawn a pourable object & liquid holders into the world and Create their designators#
# Holdable obj
milk_box = Object("milk_box", ObjectType.MILK, "milk.stl")
milk_box_designator = create_ontology_handheld_object_designator(milk_box.name, main_ontology.OntologyPourableObject)

# Liquid-holders
cup = Object("cup", ObjectType.JEROEN_CUP, "jeroen_cup.stl", pose=Pose([1.4, 1, 0.9]))
bowl = Object("bowl", ObjectType.BOWL, "bowl.stl", pose=Pose([1.4, 0.5, 0.9]))
pitcher = Object("pitcher", ObjectType.GENERIC_OBJECT, "Static_MilkPitcher.stl", pose=Pose([1.4, 0, 0.9]))
milk_holders = [cup, bowl, pitcher]
milk_holder_designators = [
    create_ontology_handheld_object_designator(obj.name, main_ontology.OntologyLiquidHolderObject)
    for obj in milk_holders]




Create an ontology relation between the designators of the pourable object & its liquid holders#
for milk_holder_desig in milk_holder_designators:
    ontology_manager.set_ontology_relation(subject_designator=milk_box_designator, object_designator=milk_holder_desig,
                                           predicate_name=POURABLE_INTO_PREDICATE_NAME)




Set up resolve for the ontology concept of the pourable object#
milk_box_concept_holder = milk_box_designator.ontology_concept_holders[0]


def milk_box_concept_resolve():
    object_designator = ontology_manager.get_designators_by_subject_predicate(subject=milk_box_designator,
                                                                              predicate_name=POURABLE_INTO_PREDICATE_NAME)[
        0]
    return object_designator, object_designator.resolve()


milk_box_concept_holder.resolve = milk_box_concept_resolve


Here, for demonstration purpose only, we specify the resolving result by milk_box_concept_holder as cup, the
first-registered (default) pourable-into target milk holder, utilizing the ontology relation setup above.
Now, we can query the milk box’s target liquid holder by resolving milk_box_concept_holder
target_milk_holder_designator, target_milk_holder = milk_box_concept_holder.resolve()
print(
    f"Pickup target object: {target_milk_holder.name}, a content holder for {milk_box_designator.names} as in relation `{POURABLE_INTO_PREDICATE_NAME}`")




Robot picks up the target liquid holder#
with simulated_robot:
    ParkArmsAction([Arms.BOTH]).resolve().perform()

    MoveTorsoAction([0.3]).resolve().perform()

    pickup_pose = CostmapLocation(target=target_milk_holder, reachable_for=robot_designator).resolve()
    pickup_arm = pickup_pose.reachable_arms[0]

    print(pickup_pose, pickup_arm)

    NavigateAction(target_locations=[pickup_pose.pose]).resolve().perform()

    PickUpAction(object_designator_description=target_milk_holder_designator, arms=[pickup_arm],
                 grasps=[Grasp.FRONT]).resolve().perform()

    ParkArmsAction([Arms.BOTH]).resolve().perform()

    place_island = SemanticCostmapLocation("kitchen_island_surface", kitchen_designator.resolve(),
                                           target_milk_holder_designator.resolve()).resolve()

    place_stand = CostmapLocation(place_island.pose, reachable_for=robot_designator, reachable_arm=pickup_arm).resolve()

    NavigateAction(target_locations=[place_stand.pose]).resolve().perform()

    PlaceAction(target_milk_holder_designator, target_locations=[place_island.pose],
                arms=[pickup_arm]).resolve().perform()

    ParkArmsAction([Arms.BOTH]).resolve().perform()
world.exit()






Save ontologies to an OWL file#
After all the above operations on our ontologies, we now can save them to an OWL file on disk
ontology_manager.save(f"{Path.home()}/ontologies/New{main_ontology.name}.owl")




Optimize ontology loading with SQLite3#
Upon the initial ontology loading from OWL, an SQLite3 file is automatically created, acting as the quadstore cache for
the loaded ontologies. This allows them to be selectively reusable the next time being loaded.
More info can be referenced here.









previous
Robokudo interface in PyCRAM




next
pycram









 Contents
  


Ontology interface
Owlready2
Ontology Manager
Ontology Concept Holder
Query ontology classes and their properties
Create a new ontology concept class and its individual
Access ontology concept classes and individuals
Connect ontology class individuals with designators
Create new ontology triple classes
Create ontology relations


Query designators based on their ontology-concept relations


Practical examples
Example 1
Example 2
Setup simulated environment
Create PourableObject-LiquidHolder triple ontology classes
Spawn a pourable object & liquid holders into the world and Create their designators
Create an ontology relation between the designators of the pourable object & its liquid holders
Set up resolve for the ontology concept of the pourable object
Robot picks up the target liquid holder




Save ontologies to an OWL file
Optimize ontology loading with SQLite3








By Jonas Dech




    
      © Copyright 2024.
      

























Object Designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Object Designator




 Contents 



Believe Object
Object Part
Object Designators as Generators








Object Designator#
Object designators are used to describe objects located in the BulletWorld or the real environment and then resolve them
during runtime to concrete objects.
Object designators are different from the Object class in bullet_world.py in the way that they just describe an object
and do not create objects or provide methods to manipulate them. Nevertheless, object designators contain a reference to
the BulletWorld object.
An Object designator takes two parameters, of which at least one has to be provided. These parameters are:

A list of names
A list of types

Object Designators work similar to Location designators, they get constrains describing a set of objects and when
resolved return a specific instance.
For all following examples we need a BulletWorld, so let’s create one.
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object
from pycram.datastructures.enums import ObjectType, WorldMode
from pycram.datastructures.pose import Pose

world = BulletWorld(WorldMode.GUI)



Believe Object#
This object designator is used to describe objects that are located in the BulletWorld. So objects that are in the
belief state, hence the name. In the future when there is a perception interface, there will be a RealObject
description which will be used to describe objects in the real world.
Since BelieveObject() describes Objects in the BulletWorld we create a few.
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([1.3, 1, 0.9]))
cereal = Object("froot_loops", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", pose=Pose([1.3, 0.9, 0.95]))
spoon = Object("spoon", ObjectType.SPOON, "spoon.stl", pose=Pose([1.3, 1.1, 0.87]))


Now that we have objects we can create an object designator to describe them. For the start we want an object designator
only describing the milk. Since all objects have unique names we can create an object designator using a list with only
the name of the object.
from pycram.designators.object_designator import BelieveObject

object_description = BelieveObject(names=["milk"])

print(object_description.resolve())


You can also use the type to describe objects, so now we want to have an object designator that describes every food in
the world.
from pycram.designators.object_designator import BelieveObject

object_description = BelieveObject(types=[ObjectType.MILK, ObjectType.BREAKFAST_CEREAL])

print(object_description.resolve())




Object Part#
Part of object designators can be used to describe something as part of another object. For example, you could describe
a specific drawer as part of the kitchen. This is necessary since the drawer is no single BulletWorld Object but rather
a link of the kitchen which is a BulletWorld Object.
For this example we need just need the kitchen, if you didn’t spawn it in the previous example you can spawn it with the
following cell.
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")


from pycram.designators.object_designator import ObjectPart, BelieveObject

kitchen_desig = BelieveObject(names=["kitchen"]).resolve()

object_description = ObjectPart(names=["sink_area_left_upper_drawer_main"], part_of=kitchen_desig)

print(object_description.resolve())




Object Designators as Generators#
Similar to location designators object designators can be used as generators to iterate through every object that they
are describing. We will see this at the example of an object designator describing every type of food.
For this we need some objects, so if you didn’t already spawn them you can use the next cell for this.
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([1.3, 1, 0.9]))
cereal = Object("froot_loops", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", pose=Pose([1.3, 0.9, 0.95]))
spoon = Object("spoon", ObjectType.SPOON, "spoon.stl", pose=Pose([1.3, 1.1, 0.87]))


from pycram.designators.object_designator import BelieveObject

object_description = BelieveObject(types=[ObjectType.MILK, ObjectType.BREAKFAST_CEREAL])

for obj in object_description:
    print(obj, "\n")


To close the world use the following exit function.
world.exit()












previous
Action Designator




next
Location Designator









 Contents
  


Believe Object
Object Part
Object Designators as Generators








By Jonas Dech




    
      © Copyright 2024.
      

























Motion Designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Motion Designator




 Contents 



Move
MoveTCP
Looking
Move Gripper
Detecting
Move Arm Joints
World State Detecting
Move Joints








Motion Designator#
Motion designators are similar to action designators, but unlike action designators, motion designators represent atomic
low-level motions. Motion designators only take the parameter that they should execute and not a list of possible
parameters, like the other designators. Like action designators, motion designators can be performed, performing motion
designator verifies the parameter and passes the designator to the respective process module.
Since motion designators perform a motion on the robot, we need a robot which we can use. Therefore, we will create a
BulletWorld as well as a PR2 robot.
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object
from pycram.datastructures.enums import ObjectType, WorldMode

world = BulletWorld(WorldMode.GUI)
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")



Move#
Move is used to let the robot drive to the given target pose. Motion designator are used in the same way as the other
designator, first create a description then resolve it to the actual designator and lastly, perform the resolved
designator.
from pycram.datastructures.pose import Pose
from pycram.designators.motion_designator import MoveMotion
from pycram.process_module import simulated_robot

with simulated_robot:
    motion_description = MoveMotion(target=Pose([1, 0, 0], [0, 0, 0, 1]))

    motion_description.perform()


world.reset_world()




MoveTCP#
MoveTCP is used to move the tool center point (TCP) of the given arm to the target position specified by the parameter.
Like any designator we start by creating a description and then resolving and performing it.
from pycram.designators.motion_designator import MoveTCPMotion
from pycram.process_module import simulated_robot
from pycram.datastructures.enums import Arms

with simulated_robot:
    motion_description = MoveTCPMotion(target=Pose([0.5, 0.6, 0.6], [0, 0, 0, 1]), arm=Arms.LEFT)

    motion_description.perform()




Looking#
Looking motion designator adjusts the robot state such that the cameras point towards the target pose. Although this
motion designator takes the target as position and orientation, in reality only the position is used.
from pycram.designators.motion_designator import LookingMotion
from pycram.process_module import simulated_robot

with simulated_robot:
    motion_description = LookingMotion(target=Pose([1, 1, 1], [0, 0, 0, 1]))

    motion_description.perform()




Move Gripper#
Move gripper moves the gripper of an arm to one of two states. The states can be OPEN  and CLOSE, which open
and close the gripper respectively.
from pycram.designators.motion_designator import MoveGripperMotion
from pycram.process_module import simulated_robot
from pycram.datastructures.enums import Arms, GripperState

with simulated_robot:
    motion_description = MoveGripperMotion(motion=GripperState.OPEN, gripper=Arms.LEFT)

    motion_description.perform()




Detecting#
This is the motion designator implementation of detecting, if an object with the given object type is in the field of
view (FOV) this motion designator will return an object designator describing the object.
Since we need an object that we can detect, we will spawn a milk for this.
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([1.5, 0, 1]))


from pycram.designators.motion_designator import DetectingMotion, LookingMotion
from pycram.process_module import simulated_robot

with simulated_robot:
    LookingMotion(target=Pose([1.5, 0, 1], [0, 0, 0, 1])).perform()

    motion_description = DetectingMotion(object_type=ObjectType.MILK)

    obj = motion_description.perform()

    print(obj)




Move Arm Joints#
This motion designator moves one or both arms. Movement targets are a dictionary with joint name as key and target pose
as value.
from pycram.designators.motion_designator import MoveArmJointsMotion
from pycram.process_module import simulated_robot

with simulated_robot:
    motion_description = MoveArmJointsMotion(right_arm_poses={"r_shoulder_pan_joint": -0.7})

    motion_description.perform()




World State Detecting#
World state detecting is also used to detect objects, however, the object is not required to be in the FOV of the robot.
As long as the object is somewhere in the belief state (BulletWorld) a resolved object designator will be returned.
Sine we want to detect something we will spawn an object that we can detect. If you already spawned the milk from the
previous example, you can skip this step.
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([-1, 0, 1]))


from pycram.designators.motion_designator import WorldStateDetectingMotion
from pycram.process_module import simulated_robot

with simulated_robot:
    motion_description = WorldStateDetectingMotion(object_type=ObjectType.MILK)

    obj = motion_description.perform()

    print(obj)




Move Joints#
Move joints can move any number of joints of the robot, the designator takes two lists as parameter. The first list are
the names of all joints that should be moved and the second list are the positions to which the joints should be moved.
from pycram.designators.motion_designator import MoveJointsMotion
from pycram.process_module import simulated_robot

with simulated_robot:
    motion_description = MoveJointsMotion(names=["torso_lift_joint", "r_shoulder_pan_joint"], positions=[0.2, -1.2])

    motion_description.perform()


The following cell can be used after testing the examples, to close the BulletWorld.
world.exit()












previous
Location Designator




next
ORM









 Contents
  


Move
MoveTCP
Looking
Move Gripper
Detecting
Move Arm Joints
World State Detecting
Move Joints








By Jonas Dech




    
      © Copyright 2024.
      

























Migrate NEEMs — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf
















Migrate NEEMs









Migrate NEEMs#
In this tutorial we will go through the process of migrating locally stored PyCRORM NEEMs to an already existing
PyCRORM NEEM-Hub.
In some cases it my occur that you want to record data from a pycram controlled robot locally and perform some local
actions before migrating your data to a big database server. In such cases, you can easily make a local database and
connect your pycram process to it.
After you recorded your data locally you can migrate the data using the migrate_neems function.
First, lets create an in memory database engine called source_engine where we record our current process.
import sqlalchemy.orm
import pycram

source_engine: sqlalchemy.engine.Engine
source_engine = sqlalchemy.create_engine("sqlite+pysqlite:///:memory:", echo=False)
source_session_maker = sqlalchemy.orm.sessionmaker(bind=source_engine)
pycram.orm.base.Base.metadata.create_all(source_engine) #create all Tables


Next, create an engine called destination_engine for the destination database where you want to migrate your NEEMs to.
Note: This is just an example configuration.
destination_engine: sqlalchemy.engine.Engine
destination_engine = sqlalchemy.create_engine("postgresql+psycopg2://alice:alice123@localhost:5433/pycram", echo=False) # example values
destination_session_maker = sqlalchemy.orm.sessionmaker(bind=destination_engine)


If you already have some data in your local database you can skip the next block, otherwise we will quickly create
some example data
from pycram.datastructures.enums import Arms, ObjectType
from pycram.designators.action_designator import *
from pycram.designators.location_designator import *
from pycram.process_module import simulated_robot
from pycram.tasktree import with_tree
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object
from pycram.designators.object_designator import *


class ExamplePlans:
    def __init__(self):
        self.world = BulletWorld("DIRECT")
        self.pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
        self.kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
        self.milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([1.3, 1, 0.9]))
        self.cereal = Object("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", pose=Pose([1.3, 0.7, 0.95]))
        self.milk_desig = ObjectDesignatorDescription(names=["milk"])
        self.cereal_desig = ObjectDesignatorDescription(names=["cereal"])
        self.robot_desig = ObjectDesignatorDescription(names=["pr2"]).resolve()
        self.kitchen_desig = ObjectDesignatorDescription(names=["kitchen"])

    @with_tree
    def pick_and_place_plan(self):
        with simulated_robot:
            ParkArmsAction([Arms.BOTH]).resolve().perform()
            MoveTorsoAction([0.3]).resolve().perform()
            pickup_pose = CostmapLocation(target=self.cereal_desig.resolve(), reachable_for=self.robot_desig).resolve()
            pickup_arm = pickup_pose.reachable_arms[0]
            NavigateAction(target_locations=[pickup_pose.pose]).resolve().perform()
            PickUpAction(object_designator_description=self.cereal_desig, arms=[pickup_arm],
                         grasps=["front"]).resolve().perform()
            ParkArmsAction([Arms.BOTH]).resolve().perform()

            place_island = SemanticCostmapLocation("kitchen_island_surface", self.kitchen_desig.resolve(),
                                                   self.cereal_desig.resolve()).resolve()

            place_stand = CostmapLocation(place_island.pose, reachable_for=self.robot_desig,
                                          reachable_arm=pickup_arm).resolve()

            NavigateAction(target_locations=[place_stand.pose]).resolve().perform()

            PlaceAction(self.cereal_desig, target_locations=[place_island.pose], arms=[pickup_arm]).resolve().perform()

            ParkArmsAction([Arms.BOTH]).resolve().perform()



import pycram.orm.utils           
import pycram.tasktree
            
with source_session_maker() as session:
    example_plans = ExamplePlans()
    for i in range(3):
        try:
            print("ExamplePlans run {}".format(i))
            example_plans.pick_and_place_plan()
            example_plans.world.reset_bullet_world()
            process_meta_data = pycram.orm.base.ProcessMetaData()
            process_meta_data.description = "Example Plan {}".format(i)
            process_meta_data.insert(session)
            pycram.tasktree.task_tree.root.insert(session)
            process_meta_data.reset()
        except Exception as e:
            print("Error: {}\n{}".format(type(e).__name__, e))
    session.commit()
    example_plans.world.exit()


Now that we have some example data or already had some example data all we need to do it migrate it over to
the already existing PyCRORM NEEM-Hub.
pycram.orm.utils.migrate_neems(source_session_maker,destination_session_maker)


If the command ran successful the content of the source database should now be copied within the destination database. For example if we query for all the different meta_data, the previously defined instance come up.
with destination_session_maker() as session:
    statement = sqlalchemy.select('*').select_from(pycram.orm.base.ProcessMetaData)
    result = session.execute(statement).all()
    for item in result:
        print(item)


Looking at all the output, we can clearly see that the PyCRORM NEEM-Hub now contains our Example Plans 0 - 2.









previous
ORM querying examples




next
Datastructure











By Jonas Dech




    
      © Copyright 2024.
      

























Location Designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Location Designator




 Contents 



Occupancy
Reachable
Visibile
Semantic
Location Designator as Generator
Accessing Locations
Giskard Location








Location Designator#
This example will show you what location designators are, how to use them and what they are capable of.
Location Designators are used to semantically describe locations in the world. You could, for example, create a location
designator that describes every position where a robot can be placed without colliding with the environment. Location
designator can describe locations for:

Visibility
Reachability
Occupancy
URDF Links (for example a table)

To find locations that fit the given constrains, location designator create Costmaps. Costmaps are a 2D distribution
that have a value greater than 0 for every position that fits the costmap criteria.
Location designators work similar to other designators, meaning you have to create a location designator description
which describes the location. This description can then be resolved to the actual 6D pose on runtime.

Occupancy#
We will start with a simple location designator that describes a location where the robot can be placed without
colliding with the environment. To do this we need a BulletWorld since the costmaps are mostly created from the current
state of the BulletWorld.
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object
from pycram.datastructures.enums import ObjectType, WorldMode
from pycram.datastructures.pose import Pose

world = BulletWorld()
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")


Next up we will create the location designator description, the CostmapLocation() that we will be using needs a
target as a parameter. This target describes what the location designator is for, this could either be a pose or object
that the robot should be able to see or reach.
In this case we only want poses where the robot can be placed, this is the default behaviour of the location designator
which we will be extending later.
from pycram.designators.location_designator import CostmapLocation

target = kitchen.get_pose()

location_description = CostmapLocation(target)

pose = location_description.resolve()

print(pose)




Reachable#
Next we want to locations from where the robot can reach a specific point, like an object the robot should pick up. This
can also be done with the CostmapLocation() description, but this time we need to provide an additional argument.
The additional argument is the robo which should be able to reach the pose.
Since a robot is needed we will use the PR2 and use a milk as a target point for the robot to reach. The torso of the
PR2 will be set to 0.2 since otherwise the arms of the robot will be too low to reach on the countertop.
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
pr2.set_joint_state("torso_lift_joint", 0.2)
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([1.3, 1, 0.9]))



from pycram.designators.location_designator import CostmapLocation
from pycram.designators.object_designator import BelieveObject

target = BelieveObject(names=["milk"]).resolve()
robot_desig = BelieveObject(names=["pr2"]).resolve()

location_description = CostmapLocation(target=target, reachable_for=robot_desig)

print(location_description.resolve())


As you can see we get a pose near the countertop where the robot can be placed without colliding with it. Furthermore,
we get a list of arms with which the robot can reach the given object.


Visibile#
The CostmapLocation() can also find position from which the robot can see a given object or location. This is very
similar to how reachable locations are described, meaning we provide a object designator or a pose and a robot
designator but this time we use the visible_for parameter.
For this example we need the milk as well as the PR2, so if you did not spawn them during the previous location
designator you can spawn them with the following cell.
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([1.3, 1, 0.9]))


from pycram.designators.location_designator import CostmapLocation
from pycram.designators.object_designator import BelieveObject

target = BelieveObject(names=["milk"]).resolve()
robot_desig = BelieveObject(names=["pr2"]).resolve()

location_description = CostmapLocation(target=target, visible_for=robot_desig)

print(location_description.resolve())




Semantic#
Semantic location designator are used to create location descriptions for semantic entities, like a table. An example of
this is: You have a robot that picked up an object and should place it on a table. Semantic location designator then
allows to find poses that are on this table.
Semantic location designator need an object from which the target entity is a part and the URDF link representing the
entity. In this case we want a position on the kitchen island, so we have to provide the kitchen object designator since
the island is a part of the kitchen and the link name of the island surface.
For this example we need the kitchen as well as the milk. If you spawned them in one of the previous examples you don’t
need to execute the following cell.
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
milk = Object("milk", ObjectType.MILK, "milk.stl")


from pycram.designators.location_designator import SemanticCostmapLocation
from pycram.designators.object_designator import BelieveObject

kitchen_desig = BelieveObject(names=["kitchen"]).resolve()
milk_desig = BelieveObject(names=["milk"]).resolve()

location_description = SemanticCostmapLocation(urdf_link_name="kitchen_island_surface",
                                               part_of=kitchen_desig,
                                               for_object=milk_desig)

print(location_description.resolve())




Location Designator as Generator#
Location designator descriptions implement an iter method, so they can be used as generators which generate valid poses
for the location described in the description. This can be useful if the first pose does not work for some reason.
We will see this at the example of a location designator for visibility. For this example we need the milk, if you
already have a milk spawned in you world you can ignore the following cell.
milk = Object("milk", ObjectType.MILK, "milk.stl")


from pycram.designators.location_designator import CostmapLocation
from pycram.designators.object_designator import BelieveObject

target = BelieveObject(names=["milk"]).resolve()
robot_desig = BelieveObject(names=["pr2"]).resolve()

location_description = CostmapLocation(target=target, visible_for=robot_desig)

for pose in location_description:
    print(pose.pose)




Accessing Locations#
Accessing describes a location from which the robot can open a drawer. The drawer is specified by a ObjetcPart
designator which describes the handle of the drawer.
At the moment this location designator only works in the apartment environment, so please remove the kitchen if you
spawned it in a previous example. Furthermore, we need a robot, so we also spawn the PR2 if it isn’t spawned already.
kitchen.remove()


apartment = Object("apartment", ObjectType.ENVIRONMENT, "apartment.urdf")


pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
pr2.set_joint_state("torso_lift_joint", 0.25)


from pycram.designators.object_designator import *
from pycram.designators.location_designator import *

apartment_desig = BelieveObject(names=["apartment"])
handle_desig = ObjectPart(names=["handle_cab10_t"], part_of=apartment_desig.resolve())
robot_desig = BelieveObject(names=["pr2"])

access_location = AccessingLocation(handle_desig.resolve(), robot_desig.resolve()).resolve()
print(access_location.pose)




Giskard Location#
Some robots like the HSR or the Stretch2 need a full-body ik solver to utilize the whole body. For this case robots
the GiskardLocation() can be used. This location designator uses giskard as an ik solver to find a pose for the
robot to reach a target pose.
Note: The GiskardLocation relies on Giskard, therefore Giskard needs to run in order for this Location Designator to
work.
from pycram.designators.specialized_designators.location.giskard_location import GiskardLocation

robot_desig = BelieveObject(names=["pr2"]).resolve()

loc = GiskardLocation(target=Pose([1, 1, 1]), reachable_for=robot_desig).resolve()
print(loc.pose)


If you are finished with this example you can close the world with the following cell:
world.exit()












previous
Object Designator




next
Motion Designator









 Contents
  


Occupancy
Reachable
Visibile
Semantic
Location Designator as Generator
Accessing Locations
Giskard Location








By Jonas Dech




    
      © Copyright 2024.
      

























Local Transformer — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Local Transformer




 Contents 



Setting up the Environment
Initializing the World
Adding Objects to the World
Creating a Local Transfomer
Transformations with LocalTransformer
Transformation frames








Local Transformer#
The local transformer is used to handle transforms between different frames in PyCRAM. This is useful when you want to
transform a pose from one frame to another, for example, from the map frame to the frame of an object. This example will
introduce the Local Transformer and how to use it to transform poses between frames.

Setting up the Environment#
This step involves importing the required modules and initializing key components for our tasks.
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object
from pycram.datastructures.pose import Transform, Pose
from pycram.local_transformer import LocalTransformer
from pycram.datastructures.enums import WorldMode




Initializing the World#
Every robot simulation requires a world where it can interact. This world serves as the playground where the robot
performs tasks.
Let’s start by creating this world.
Since the local transformer can only transform between frames of objects which are in the world, we need to create a
world first.
# Create an instance of the BulletWorld
world = BulletWorld(WorldMode.GUI)




Adding Objects to the World#
For our robot to perform meaningful tasks, we need to populate its world with objects.
In this section, we’ll add a variety of objects, from a simple floor plane to kitchen setups and items like milk and
bowls.
These objects will be used in subsequent tasks, to provide the frames to which we will transform poses.
from pycram.worlds.bullet_world import Object
from pycram.datastructures.enums import ObjectType

kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([0.9, 1, 0.95]))
bowl = Object("bowl", ObjectType.BOWL, "bowl.stl", pose=Pose([1.6, 1, 0.90]))




Creating a Local Transfomer#
The local transformer is implemented as a singelton, meaing regardless of how much and where an instance is created it
will always be the same instance. This is done since the local transfomer collects all transformations between frames
and would there always be a new instance, all transformations woulb need to be re-collected.
from pycram.local_transformer import LocalTransformer

local_transformer = LocalTransformer()
print(local_transformer)

new_local_transformer = LocalTransformer()
print(new_local_transformer)




Transformations with LocalTransformer#
Now that we have our world set up, let’s perform some transformations. We’ll use the LocalTransformer to transform poses
relative to our objects.
from pycram.local_transformer import LocalTransformer

l = LocalTransformer()
test_pose = Pose([1, 1, 1], [0, 0, 0, 1], "map")

transformed_pose = l.transform_to_object_frame(test_pose, milk)
print(transformed_pose)

print("-------------------")
new_pose = l.transform_pose(transformed_pose, "map")
print(new_pose)


In the above code, we first transformed a pose to the object frame of the milk object, and then we transformed it back
to the map frame. This demonstrates how we can easily manipulate poses relative to objects in our environment.
You can also transform poses relative to other poses. by using the transform_pose method. Further you can set a
Transform.
from pycram.datastructures.pose import Transform

l.setTransform(Transform([1, 1, 1], [0, 0, 0, 1], "map", "test_frame"))
p = Pose()

transformed_pose = l.transform_pose(p, "test_frame")




Transformation frames#
Links of an Object are represented by the Object frame_id + ‘/’ + link name. Since link names need to be
unique for an URDF this is no problem.
These frames need to be used in whenever you are transforming something with the local transformer. To get the base
frame of an Object, meaning the frame name without any link, there is the attribute tf_frame and for the frame of a link
there is a method which returns the frame name of a link given the link name.
print(milk.tf_frame)

print(kitchen.get_link_tf_frame("kitchen_island_surface"))


You can use the cell below to exit the simulation.
world.exit()












previous
Plan Language




next
Designators









 Contents
  


Setting up the Environment
Initializing the World
Adding Objects to the World
Creating a Local Transfomer
Transformations with LocalTransformer
Transformation frames








By Jonas Dech




    
      © Copyright 2024.
      

























Plan Language — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Plan Language




 Contents 



Sequential
Try In Order
Parallel
Try All
Combination of Expressions
Code Objects
Exception Handling
Repeat
Monitor








Plan Language#
The PyCRAM plan language is a way to structure the execution of your plan. In generally the plan language allows to
execute designators either sequential or in parallel. Furthermore, exceptions that occur during execution of a plan with
the plan language do not interrupt the execution instead they are caught and saved to a dictionary for later analysis.
All language expressions return a State, this can either be SUCCEDED or FAILED.
There are 4 language expressions:


Expression
Name
Description



+
Sequential
Executes the designators one after another, if one of the designators raises an exception the execution is aborted and the state FAILED will be returned.

-
Try In Order
Executes the designators one after another, if one designator raises an exception the exception is caught and saved but the execution is not interrupted and the other designators are executed. Returns the state SUCCEDED if at least one designator can be executed without exception.

*
Repeat
Repeat the previous language expression a number of time. Has to be used with a language expression and an integer.

|
Parallel
Executes all designators in parallel. For each designator there will be a new thread created and the designator is executed in this thread. If one of the designators raises an exception the returned state will be FAILED.

^
Try All
Executes all designators in parallel with a designated thread for each designator. Returns the state SUCCEDED if at least one designator can be executed without an exception

>>
Monitor
Monitors the execution of the attached langauge expression, will interrupt the execution as soon as a given condition is fulfilled.




The Sequential expression is the only one which aborts the execution once an error is raised.
When using the plan language a tree structure of the plan is created where the language expressions are nodes and
designators are leafs. This tree uses AnyTree (like the task tree) and can be rendered with the anytree Renderer.

Sequential#
This language expression allows to execute designators one after another, if one of the designators raises an exception
the execution will be aborted and the state FAILED will be returned.
We will start with a simple example that uses an action designator for moving the robot and parking its arms.
import time

from pycram.designators.action_designator import *
from pycram.datastructures.pose import Pose
from pycram.datastructures.enums import Arms

navigate = NavigateAction([Pose([1, 1, 0])])
park = ParkArmsAction([Arms.BOTH])

plan = navigate + park


With this simple plan created we can inspect it and render the created tree structure.
from anytree import RenderTree

print(RenderTree(plan))


As you can see there is the root node which is the language expression and then there are the leafs which are the
designators. When executing this plan the Sequential node will try to execute the NavigateAction and if that is finished
without any error the ParkArmsAction will be executed.
The plan can be executed by wrapping it inside a with simulated_robot environment and calling perform on the
plan.
If you are performing a plan with a simulated robot, you need a BulletWorld.
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object
from pycram.datastructures.enums import ObjectType

world = BulletWorld()
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")


from pycram.process_module import simulated_robot

world.reset_bullet_world()

with simulated_robot:
    plan.perform()




Try In Order#
Try in order is similar to Sequential, it also executes all designators one after another but the key difference is that
an exception in one of the designators does not terminate the whole execution. Furthermore, the state FAILED will only
be returned if all designator executions raise an error.
Besides the described difference in behaviour this language expression can be used in the same way as Sequential.
from pycram.designators.action_designator import *
from pycram.datastructures.pose import Pose
from pycram.datastructures.enums import Arms
from pycram.process_module import simulated_robot

world.reset_bullet_world()

navigate = NavigateAction([Pose([1, 1, 0])])
park = ParkArmsAction([Arms.BOTH])

plan = navigate - park

with simulated_robot:
    plan.perform()




Parallel#
Parallel executes all designator at once in dedicated threads. The execution of other designators is not aborted when a
exception is raised, this is the case since threads can not be killed from the outside and this would also cause
unforeseen problems. The state returned will be SUCCEDED if all designators could be executed without an exception raised
in any other case FAILED will be returned.
Since executing designators in parallel can get chaotic especially with complex actions like PickUp or Transport. For
this reason not all action designators can be used in parallel and try all expressions. The list of action designator
that cannot be used in language expressions can be seen in parallel_blocklist.
Designators that cannot be used in parallel and try all:

PickUpAction
PlaceAction
OpenAction
CloseAction
TransportAction

Using the parallel expressions works like Sequential and TryInOrder.
from pycram.designators.action_designator import *
from pycram.datastructures.pose import Pose
from pycram.datastructures.enums import Arms
from pycram.process_module import simulated_robot

world.reset_world()

navigate = NavigateAction([Pose([1, 1, 0])])
park = ParkArmsAction([Arms.BOTH])

plan = navigate | park

with simulated_robot:
    plan.perform()




Try All#
TryAll is to Parallel what TryInOrder is to Sequential, meaning TryAll will also execute all designators in parallel but
will return SUCCEEDED if at least one designator is executed without raising an exception.
TryAll can be used like any other language expression.
from pycram.designators.action_designator import *
from pycram.datastructures.pose import Pose
from pycram.datastructures.enums import Arms
from pycram.process_module import simulated_robot

world.reset_bullet_world()

navigate = NavigateAction([Pose([1, 1, 0])])
park = ParkArmsAction([Arms.BOTH])

plan = navigate ^ park

with simulated_robot:
    plan.perform()




Combination of Expressions#
You can also combine different language expressions to further structure your plans. If you combine sequential and
parallel expression please keep in mind that sequential expressions bind stringer than parallel ones. For example:
navigate | park + move_torso


In this case ‘park’ and ‘move_torso’ would form a Sequential expression and ‘naviagte’ would form a Parallel expression
with Sequential. You can try this yourself in the following cell.
from pycram.designators.action_designator import *
from pycram.datastructures.pose import Pose
from pycram.datastructures.enums import Arms
from pycram.process_module import simulated_robot

world.reset_world()

navigate = NavigateAction([Pose([1, 1, 0])])
park = ParkArmsAction([Arms.BOTH])
move_torso = MoveTorsoAction([0.3])

plan = navigate | park + move_torso

with simulated_robot:
    plan.perform()




Code Objects#
You can not only use designators in the plan language but also python code. For this there is the Code  object
which takes a callable and the arguments for this callable. This allows you to execute arbitrary code in a plan.
The callable that is used in the Code object can either be a lambda expression or, for more complex code, a
function. If you use a function you can provide parameters as keyword-arguments.
from pycram.designators.action_designator import *
from pycram.datastructures.enums import Arms
from pycram.process_module import simulated_robot
from pycram.language import Code


def code_test(param):
    print("-" * 20)
    print(param)


park = ParkArmsAction([Arms.BOTH])
code = Code(lambda: print("This is from the code object"))
code_func = Code(code_test, {"param": "Code function"})

plan = park | code | code_func

with simulated_robot:
    plan.perform()




Exception Handling#
If an exception is raised during the execution of a designator when it is used in a language expression the exception
will be caught and saved to a dictionary. In general all designators in a language expression are executed regardless
of exceptions raised, the only exception from this is the Sequential expression which stops after it encountered an
exception.
The language will only catch exceptions that are of type PlanFailure meaning errors that are defined in
plan_failures.py in PyCRAM. This also means normal Python errors, such as KeyError, will interrupt the execution of your
designators.
We will see how exceptions are handled at a simple example.
from pycram.designators.action_designator import *
from pycram.process_module import simulated_robot
from pycram.language import Code
from pycram.plan_failures import PlanFailure


def code_test():
    raise PlanFailure


navigate = NavigateAction([Pose([1, 1, 0])])
code_func = Code(code_test)

plan = navigate | code_func

with simulated_robot:
    plan.perform()

print(plan.exceptions)




Repeat#
Repeat simply repeats a language expression a number of times. As all other language expressions Repeat captures
exceptions that occur during execution and saves them to the dictionary in the root of the plan.
Since Repeat uses the * operator you should keep in mind that it will be evaluated before any other operator, so use
parentheses to ensure the correct structure of your plan.
You can see an example of how to use Repeat below.
from pycram.designators.action_designator import *
from pycram.process_module import simulated_robot

move_torso_up = MoveTorsoAction([0.3])
move_torso_down = MoveTorsoAction([0.])

plan = (move_torso_up + move_torso_down) * 5

with simulated_robot:
    plan.perform()




Monitor#
Monitor allows to monitor the execution of a language expression and interrupt it as soon as a given condition is
fulfilled. The condition can either be a Callable which returns a boolean or a Fluent.
When executed the Monitor will create a separate thread which will check if the condition is satisfied with a frequency
of 10 Hz. If the condition is satisfied the execution of the language expression will be interrupted.
For the example on how Monitors work we will use the previous example with the robot moving up and down. We will use a
Monitor to interrupt the execution after 2 seconds instead of executing the whole plan 5 times.
from pycram.designators.action_designator import *
from pycram.process_module import simulated_robot
from pycram.language import Monitor
import time

move_torso_up = MoveTorsoAction([0.3])
move_torso_down = MoveTorsoAction([0.])


def monitor_func():
    time.sleep(2)
    return True


plan = (move_torso_up + move_torso_down) * 5 >> Monitor(monitor_func)

with simulated_robot:
    plan.perform()


If you are finished with this example you can close the world with the cell below.
world.exit()












previous
Bullet World




next
Local Transformer









 Contents
  


Sequential
Try In Order
Parallel
Try All
Combination of Expressions
Code Objects
Exception Handling
Repeat
Monitor








By Jonas Dech




    
      © Copyright 2024.
      

























PyCRAM Introduction — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















PyCRAM Introduction




 Contents 



PyCRAM Introduction
Bullet World
Objects
Costmaps
Visibility Costmaps
Occupancy Costmap


Bullet World Reasoning


Designators
Motion Designators
Object Designators
Location Designator
Location Designators


Action Designator
Making a simple plan
Task Trees
ORM








PyCRAM Introduction#
import pycram




Bullet World#
The BulletWorld is the internal simulation of PyCRAM. You can simulate different actions and reason about the outcome of
different actions.
It is possible to spawn objects and robots into the BulletWorld, these objects can come from URDF, OBJ or STL files.
A BulletWorld can be created by simply creating an object of the BulletWorld class.
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object
from pycram.datastructures.enums import ObjectType
from pycram.datastructures.pose import Pose

world = BulletWorld()


The BulletWorld allows to render images from arbitrary positions. In the following example we render images with the
camera at the position [0.3, 0, 1] and pointing towards [1, 0, 1], so we are looking upwards along the x-axis.
The renderer returns 3 different kinds of images which are also shown on the left side of the BulletWorld window. (If
these winodws are missing, click the BulletWorld window to focus it, and press “g”) These images are:

An RGB image which shows everything like it is rendered in the BulletWorld window, just from another perspective.
A depth image which consists of distance values from the camera towards the objects in the field of view.
A segmentation mask image which segments the image into the different objects displayed. The segmentation is done by
assigning every pixel the unique id of the object that is displayed there.

world.get_images_for_target(Pose([1, 0, 1], [0, 0, 0, 1]), Pose([0.3, 0, 1], [0, 0, 0, 1]))



Objects#
Everything that is located inside the BulletWorld is an Object.
Objects can be created from URDF, OBJ or STL files. Since everything is of type Object a robot might share the same
methods as a milk (with some limitations).
Signature:
Object:

Name
Type
Filename or Filepath

Optional:

Position
Orientation
World
Color
Ignore Cached Files

If there is only a filename and no path, PyCRAM will check in the resource directory if there is a matching file.
milk = Object("Milk", ObjectType.MILK, "milk.stl")


Objects provide methods to change the position and rotation, change the color, attach other objects, set the state of
joints if the objects has any or get the position and orientation of a link.
These methods are the same for every Object, however since some Objects may not have joints or more than one link
methods related to these will not work.
milk.set_position(Pose([1, 0, 0]))


To remove an Object from the BulletWorld just call the ‘remove’ method on the Object.
milk.remove()


Since everything inside the BulletWorld is an Object, even a complex environment Object like the kitchen can be spawned
in the same way as the milk.
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")




Costmaps#
Costmaps are a way to get positions with respect to certain criterias.
The currently available costmaps are:

OccupancyCostmap
VisibilityCostmap
SemanticCostmap
GaussianCostmap

It is also possible to merge multiple costmaps to combine different criteria.

Visibility Costmaps#
Visibility costmaps determine every position, around a target position, from which the target is visible. Visibility
Costmaps are able to work with cameras that are movable in height for example, if the robot has a movable torso.
import pycram.costmaps as cm

v = cm.VisibilityCostmap(1.27, 1.60, size=300, resolution=0.02, origin=Pose([0, 0, 0.1], [0, 0, 0, 1]))


v.visualize()


v.close_visualization()




Occupancy Costmap#
Is valid for every position where the robot can be placed without colliding with an object.
o = cm.OccupancyCostmap(0.2, from_ros=False, size=300, resolution=0.02, origin=Pose([0, 0, 0.1], [0, 0, 0, 1]))


s = cm.SemanticCostmap(kitchen, "kitchen_island_surface", size=100, resolution=0.02)

g = cm.GaussianCostmap(200, 15, resolution=0.02)


You can visualize the costmap in the BulletWorld to get an impression what information is actually contained in the
costmap. With this you could also check if the costmap was created correctly.
Visualization can be done via the ‘visualize’ method of each costmap.
o.visualize()


o.close_visualization()


It is also possible to combine two costmap, this will result in a new costmap with the same size which contains the
information of both previous costmaps. Combination is done by checking for each position in the two costmaps if they are
zero, in this case to same position in the new costmap will also be zero in any other case the new position will be the
normalized product of the two combined costmaps.
ov = o + v


ov.visualize()


ov.close_visualization()





Bullet World Reasoning#
Allows for geometric reasoning in the BulletWorld. At the moment the following types of reasoning are supported:

stable()
contact()
visible()
occluding()
reachable()
blocking()
supporting()

To show the geometric reasoning we first spawn a robot as well as the milk Object again.
import pycram.world_reasoning as btr

milk = Object("Milk", ObjectType.MILK, "milk.stl", pose=Pose([1, 0, 1]))
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")


We start with testing for visibility
milk.set_position(Pose([1, 0, 1]))
visible = btr.visible(milk, pr2.get_link_pose("wide_stereo_optical_frame"))
print(f"Milk visible: {visible}")


milk.set_position(Pose([1, 0, 0.05]))

plane = BulletWorld.current_bullet_world.objects[0]
contact = btr.contact(milk, plane)
print(f"Milk is in contact with the floor: {contact}")


milk.set_position(Pose([0.6, -0.5, 0.7]))

reachable = btr.reachable(milk, pr2, "r_gripper_tool_frame")
print(f"Milk is reachable for the PR2: {reachable}")





Designators#
Designators are symbolic descriptions of Actions, Motions, Objects or Locations. In PyCRAM the different types of
designators are represented by a class which takes a description, the description then tells the designator what to do.
For example, let’s look at a Motion Designator to move the robot to a specific location.

Motion Designators#
When using a Motion Designator you need to specify which Process Module needs to be used, either the Process Module for
the real or the simulated robot. A Process Module is the interface between a real or simulated robot, and PyCRAM
designators. By exchanging the Process Module, one can quickly change the robot the plan is executed on, allowing PyCRAM
plans to be re-used across multiple robot platforms. This can be done either with a decorator which can be added to a
function and then every designator executed within this function, will be executed on the specified robot. The other
possibility is a “with” scope which wraps a code piece.
These two ways can also be combined, you could write a function which should be executed on the real robot and the
function contains a “with” scope which executes something on the simulated robot for reasoning purposes.
from pycram.designators.motion_designator import *
from pycram.process_module import simulated_robot, with_simulated_robot

description = MoveMotion(target=Pose([1, 0, 0], [0, 0, 0, 1]))

with simulated_robot:
    description.perform()




from pycram.process_module import with_simulated_robot


@with_simulated_robot
def move():
    MoveMotion(target=Pose([0, 0, 0], [0, 0, 0, 1])).perform()


move()


Other implemented Motion Designator descriptions are:

Accessing
Move TCP
Looking
Move Gripper
Detecting
Move Arm Joint
World State Detecting



Object Designators#
An Object Designator represents objects. These objects could either be from the BulletWorld or the real world. Object
Designators are used, for example, by the PickUpAction to know which object should be picked up.
from pycram.designators.object_designator import *

milk_desig = BelieveObject(names=["Milk"])
milk_desig.resolve()




Location Designator#
Location Designator can create a position in cartisian space from a symbolic desctiption
from pycram.designators.object_designator import *

milk_desig = BelieveObject(names=["Milk"])
milk_desig.resolve()




Location Designators#
Location Designators can create a position in cartesian space from a symbolic description.
from pycram.designators.location_designator import *
from pycram.designators.object_designator import *

robot_desig = BelieveObject(types=[ObjectType.ROBOT]).resolve()
milk_desig = BelieveObject(names=["Milk"]).resolve()
location_desig = CostmapLocation(target=milk_desig, visible_for=robot_desig)

print(f"Resolved: {location_desig.resolve()}")
print()

for pose in location_desig:
    print(pose)






Action Designator#
Action Designators are used to describe high-level actions. Action Designators are usually composed of other Designators
to describe the high-level action in detail.
from pycram.designators.action_designator import *
from pycram.datastructures.enums import Arms

with simulated_robot:
    ParkArmsAction([Arms.BOTH]).resolve().perform()





Making a simple plan#
To get familiar with the PyCRAM Framework we will write a simple pick and place plan. This plan will let the robot grasp
a cereal box from the kitchen counter and place it on the kitchen island. This is a simple pick and place plan.
from pycram.designators.object_designator import *

cereal = Object("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", pose=Pose([1.4, 1, 0.95]))



cereal_desig = ObjectDesignatorDescription(names=["cereal"])
kitchen_desig = ObjectDesignatorDescription(names=["kitchen"])
robot_desig = ObjectDesignatorDescription(names=["pr2"]).resolve()
with simulated_robot:
    ParkArmsAction([Arms.BOTH]).resolve().perform()

    MoveTorsoAction([0.3]).resolve().perform()

    pickup_pose = CostmapLocation(target=cereal_desig.resolve(), reachable_for=robot_desig).resolve()
    pickup_arm = pickup_pose.reachable_arms[0]

    NavigateAction(target_locations=[pickup_pose.pose]).resolve().perform()

    PickUpAction(object_designator_description=cereal_desig, arms=[pickup_arm], grasps=["front"]).resolve().perform()

    ParkArmsAction([Arms.BOTH]).resolve().perform()

    place_island = SemanticCostmapLocation("kitchen_island_surface", kitchen_desig.resolve(),
                                           cereal_desig.resolve()).resolve()

    place_stand = CostmapLocation(place_island.pose, reachable_for=robot_desig, reachable_arm=pickup_arm).resolve()

    NavigateAction(target_locations=[place_stand.pose]).resolve().perform()

    PlaceAction(cereal_desig, target_locations=[place_island.pose], arms=[pickup_arm]).resolve().perform()

    ParkArmsAction([Arms.BOTH]).resolve().perform()







Task Trees#
Task trees are a hierarchical representation of all Actions involved in a plan. The Task tree can later be used to
inspect and restructure the execution order of Actions in the plan.
import pycram.task
import anytree

tt = pycram.task.task_tree
print(anytree.RenderTree(tt))


from anytree.dotexport import RenderTreeGraph, DotExporter

RenderTreeGraph(tt).to_picture("tree.png")




ORM#
import sqlalchemy.orm
import pycram.orm.base
import pycram.orm.action_designator

# set description of what we are doing
pycram.orm.base.ProcessMetaData().description = "Tutorial for getting familiar with the ORM."

engine = sqlalchemy.create_engine("sqlite+pysqlite:///:memory:", echo=False)
session = sqlalchemy.orm.Session(bind=engine)
pycram.orm.base.Base.metadata.create_all(engine)
session.commit()

tt.insert(session)


from sqlalchemy import select

navigations = session.scalars(select(pycram.orm.action_designator.NavigateAction)).all()
print(*navigations, sep="\n")


navigations = (session.scalars(
    select(pycram.orm.action_designator.NavigateAction, pycram.orm.base.Position, pycram.orm.base.Quaternion).
    join(pycram.orm.action_designator.NavigateAction.pose).
    join(pycram.orm.base.Pose.position).
    join(pycram.orm.base.Pose.orientation)).all())
print(*navigations, sep="\n")


The world can also be closed with the ‘exit’ method
world.exit()











previous
General Remarks




next
Bullet World









 Contents
  


PyCRAM Introduction
Bullet World
Objects
Costmaps
Visibility Costmaps
Occupancy Costmap


Bullet World Reasoning


Designators
Motion Designators
Object Designators
Location Designator
Location Designators


Action Designator
Making a simple plan
Task Trees
ORM








By Jonas Dech




    
      © Copyright 2024.
      

























Robokudo interface in PyCRAM — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Robokudo interface in PyCRAM




 Contents 



How to use the RoboKudo interface in PyCRAM
How the RoboKudo interface in PyCRAM works
How to extend the RoboKudo interface in PyCRAM








Robokudo interface in PyCRAM#
This notebook should give you an example on how the RoboKudo interface in PyCRAM works. We will go over how to use the
interface, how it is implemented and what can be extended.
First, you need to install RoboKudo by following the installation
instructions here.
RoboKudo depends on a pipline of so-called annotators to process images, depending on your use-case the used annotators
will change. But for this simple example we can use the demo pipeline from
the tutorial. You can start RoboKudo by calling
rosrun robokudo main.py _ae=query


To get a stream of images to process you need the test bag file,
from here. You can run this
bag file with the following command in the directory where the bag file is.
rosbag play test.bag --loop


There should now be two windows which show you the result of the annotators. You switch between different annotators by
using the arrow keys.

How to use the RoboKudo interface in PyCRAM#
Everything related to the RoboKudo interface can be found in the file pycram.external_interfaces.robokudo. The
most important method of this file is query() which takes a PyCRAM object designator and calls RoboKudo to try to
find a fitting object in the camera view. The other methods are just helper for constructing messages.
Since we are only working with the demo pipeline we will only see how the interface functions but not actually perceive
objects in the images.
from pycram.external_interfaces import robokudo
from pycram.designators.object_designator import *
from pycram.enums import ObjectType

object_desig_desc = ObjectDesignatorDescription(types=[ObjectType.BOWL])
robokudo.query(object_desig_desc)


There was no object detected since the pipline we are using for this example only returns an empty message. However,
this should give you an impression on how the interface works.


How the RoboKudo interface in PyCRAM works#
The interface to RoboKudo is designed around the ROS service that RoboKudo provides. The interface takes an
ObjectDesignatorDescription which is PyCRAMs symbolic representation of objects and converts it to a RoboKudo
ObjectDesignator, the RoboKudo ObjectDesignator is then send to RoboKudo.
The result from this is a list of RoboKudo ObjectDesignators which are possible matches that were found in the camera
FOV. Each of these ObjectDesignators has a list of possible poses that are the result of different pose estimators (
currently PyCRAM picks the pose from ‘ClusterPoseBBAnnotator’ from the list of possible poses).
PyCRAM then transforms all possible poses for the found Objects to ‘map’ frame and returns them as a dictionary.
When using the interface the decorator init_robokudo_interface() should be added to all methods that want to send
queries to RoboKudo. This decorator makes sure that RoboKudo is running and creates an action client which can be used
via the global variable robokudo_action_client.


How to extend the RoboKudo interface in PyCRAM#
At the moment the RoboKudo interface is tailored towards a specific scenario, in which only two types of objects need to
be detected. The distinction is mainly made by the difference in color, which is written in the RoboKudo
ObjectDesignator depending on the ObjectType of the PyCRAM ObjectDesignator.
The main point for extension would be to make the interface more universal and extend it to work with other pipelines
for example for human detection.










previous
Giskard interface in PyCRAM




next
Ontology interface









 Contents
  


How to use the RoboKudo interface in PyCRAM
How the RoboKudo interface in PyCRAM works
How to extend the RoboKudo interface in PyCRAM








By Jonas Dech




    
      © Copyright 2024.
      

























Giskard interface in PyCRAM — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Giskard interface in PyCRAM




 Contents 



How to use the Giskard interface
How the Giskard interface works
Extend the Giskard interface








Giskard interface in PyCRAM#
This notebook should provide you with an example on how to use the Giskard interface. This includes how to use the
interface, how it actually works and how to extend it.
We start by installing and launching Giskard. For the installation please follow the
instructions here.
After you finish the installation you should be able to launch Giskard by calling:
roslaunch giskardpy giskardpy_pr2_standalone.launch


This way you can launch Giskard for any robot that is supported:
roslaunch giskardpy giskardpy_hsr_standalone.launch


“Standalone” means that Giskard only uses a simulated robot and does not look for a real robot. If you want to use
Giskard with a real robot you have to switch out “standalone” with “iai”, e.g:
roslaunch giskardpy giskardpy_hsr_iai.launch


To see what Giskard is doing you can start RViz, there should already be a MarkerArray when starting otherwise you have
to add this manually.

How to use the Giskard interface#
Everything related to the Giskard interface is located in pycram.external_interfaces.giskard.
The content of the file can be roughly divided into three parts:

Methods to manage the belief states between PyCRAM and Giskard
Motion goals that should be sent to Giskard for execution
Helper methods to construct ROS messages

The most useful methods are the ones for sending and executing Motion goals. These are the ones we will mostly look at.
We will now start by setting up PyCRAM and then try to send some simple motion goals.
from pycram.bullet_world import BulletWorld, Object
from pycram.enums import ObjectType

world = BulletWorld()
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")


When you are working on the real robot you also need to initialize the RobotStateUpdater, this module updates the robot
in the BulletWorld with the pose and joint state of the real robot.
You might need to change to topic names to fit the topic names as published by your robot.
from pycram.ros.robot_state_updater import RobotStateUpdater

r = RobotStateUpdater("/tf", "/joint_states")


Now we have a PyCRAM belief state set up, belief state in this case just refers to the BulletWorld since the BulletWorld
represents what we believe the world to look like.
The next step will be to send a simple motion goal. The motion goal we will be sending is moving the torso up. For this
we just need to move one joint, so we can use the achive_joint_goal. This method takes a dictionary with the
joints that should be moved and the target value for the joints.
Look at RViz to see the robot move, since we call Giskard for movement the robot in the BulletWorld will not move.
from pycram.external_interfaces import giskard

giskard.achieve_joint_goal({"torso_lift_joint": 0.28})


For Giskard everything is connected by joints (this is called
a World Tree by Giskard) therefore we can move the robot’s base
by using motion goals between the map origin and the robot base. (e.g. by sending a “base_link” goal in the “map”
frame).
In the example below we use a cartesian goal, meaning we give Giskard a goal pose, a root link and a tip link and
Giskard tries to move all joints between root link and tip link such that the tip link is at the goal pose.
This sort of movement is fine for short distances, but keep in mind that Giskard has no collision avoidance for longer
journeys. So using MoveBase for longer distances is a better idea.
from pycram.external_interfaces import giskard
from pycram.pose import Pose

giskard.achieve_cartesian_goal(Pose([1, 0, 0]), "base_link", "map")


Now for the last example: we will move the gripper using full body motion control.
We will again use the cartesian goal, but now between “map” and “r_gripper_tool_frame” frames. This will not only move
the robot (because the kinematic chain between “map” and “base_link” as used in the previous example is also part of
this chain) but also move the arm of the robot such that it reaches the goal pose.
from pycram.external_interfaces import giskard
from pycram.pose import Pose

giskard.achieve_cartesian_goal(Pose([1, 0.5, 0.7]), "r_gripper_tool_frame", "map")


That concludes this example you can now close the BulletWorld by using the “exit” method.
world.exit()




How the Giskard interface works#
The PyCRAM interface to Giskard mostly relies on the Python interface that Giskard already
provides (tutorial and
the source code). This interface
provides methods to achieve motion goals and load things into the Giskard believe state.
What PyCRAM does with this, is: Synchronize the belief state of Giskard with the one of PyCRAM by loading the
environment URDF in Giskard, this is done before any motion goal is sent. Furthermore, the motion goals are wrapped in
methods that use PyCRAM data types.
You can also set collisions between different groups of links. By default, Giskard avoids all collisions but for things
like grasping an object you want to allow collisions of the gripper. The interface also supports the following collision
modes:

avoid_all_collisions
allow_self_collision
allow_gripper_collision
The collision mode can be set by calling the respective method, after calling the method the collision mode is valid for
the next motion goal. Afterwards, it defaults back to avoid_all_collisions.

There is a init_giskard_interface method which can be used as a decorator. This decorator should be used on all
methods that access the giskard_wrapper, since it assures that the interface is working and checks if Giskard died or
the imports for the giskard_msgs failed.


Extend the Giskard interface#
At the moment the PyCRAM Giskard interface is mostly a wrapper around the Python interface provided by Giskard. If you
want to extend the interface there are two ways:

Wrap more motion goals which are provided by the Python interface
Design new Higher-Level motion goals by combining the motion goals already provided











previous
External Interface




next
Robokudo interface in PyCRAM









 Contents
  


How to use the Giskard interface
How the Giskard interface works
Extend the Giskard interface








By Jonas Dech




    
      © Copyright 2024.
      

























Bullet World — PyCRAM



























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Bullet World




 Contents 



Attachments
Links and Joints
Misc Methods








Bullet World#
This Notebook will show you the basics of working with the PyCRAM BulletWorld.
First we need to import and create a BulletWorld.
from pycram.worlds.bullet_world import BulletWorld
from pycram.datastructures.pose import Pose
from pycram.datastructures.enums import ObjectType, WorldMode

world = BulletWorld(mode=WorldMode.GUI)


This new window is the BulletWorld, PyCRAMs internal physics simulation. You can use the mouse to move the camera
around:

Press the left mouse button to rotate the camera
Press the right mouse button to move the camera
Press the middle mouse button (scroll wheel) and move the mouse up or down to zoom

At the moment the BulletWorld only contains a floor, this is spawned by default when creating the BulletWorld.
Furthermore, the gravity is set to 9.8 \(m^2\), which is the same gravitation as the one on earth.
To spawn new things in the BulletWorld we need to import the Object class and create and instance of it.
from pycram.world_concepts.world_object import Object

milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([0, 0, 1]))



As you can see this spawns a milk floating in the air. What we did here was create a new Object which has the name “
milk” as well as the type MILK, is spawned from the file “milk.stl” and is at the position [0, 0, 1].
The type of an Object can either be from the enum ObjectType or a string. However, it is recommended to use the enum
since this would make for a more consistent naming of types which makes it easier to work with types. But since the
types of the enum might not fit your case you can also use strings.
The first three of these parameters are required while the position is optional. As you can see it was sufficient to
only specify the filename for PyCRAM to spawn the milk mesh. When only providing a filename, PyCRAM will search in its
resource directory for a matching file and use it.
For a complete list of all parameters that can be used to crate an Object please check the documentation.
Since the Object is spawned, we can now interact with it. First we want to move it around and change its orientation

milk.set_position(Pose([1, 1, 1]))


milk.set_orientation(Pose(orientation=[1, 0, 0, 1]))


milk.set_pose(Pose([0, 0, 1], [0, 0, 0, 1]))


In the same sense as setting the position or orientation, you can also get the position and orientation.
print(f"Position: \n{milk.get_position()}")

print(f"Orientation: \n{milk.get_orientation()}")

print(f"Pose: \n{milk.get_pose()}")



Attachments#
You can attach Objects to each other simply by calling the attach method on one of them and providing the other as
parameter. Since attachments are bi-directional it doesn’t matter on which Object you call the method.
First we need another Object
cereal = Object("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", pose=Pose([1, 0, 1]))


milk.attach(cereal)


Now since they are attached to each other, if we move one of them the other will move in conjunction.
milk.set_position(Pose([1, 1, 1]))


In the same way the Object can also be detached, just call the detach method on one of the two attached Objects.
cereal.detach(milk)




Links and Joints#
Objects spawned from mesh files do not have links or joints, but if you spawn things from a URDF like a robot they will
have a lot of links and joints. Every Object has two dictionaries as attributes, namely links and joints
which contain every link or joint as key and a unique id, used by PyBullet, as value.
We will see this at the example of the PR2:
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
print(pr2.links)


For links there are similar methods available as for the pose. However, you can only get the position and
orientation of a link.
print(f"Position: \n{pr2.get_link_position('torso_lift_link')}")

print(f"Orientation: \n{pr2.get_link_orientation('torso_lift_link')}")

print(f"Pose: \n{pr2.get_link_pose('torso_lift_link')}")


Methods available for joints are:

get_joint_position()
set_joint_position()
get_joint_limits()

We will see how these methods work at the example of the torso_lift_joint:
print(f"Joint limits: {pr2.get_joint_limits('torso_lift_joint')}")

print(f"Current Joint state: {pr2.get_joint_position('torso_lift_joint')}")

pr2.set_joint_position("torso_lift_joint", 0.2)

print(f"New Joint state: {pr2.get_joint_position('torso_lift_joint')}")




Misc Methods#
There are a few methods that don’t fit any category but could be helpful anyway. The first two are get_color()
and set_color(), as the name implies they can be used to get or set the color for specific links or the whole
Object.
print(f"Pr2 forearm color: {pr2.get_link_color('r_forearm_link')}")


pr2.set_link_color("r_forearm_link", [1, 0, 0])


Lastly, there is get_axis_aligned_bounding_box(), AABB stands for Axis Aligned Bounding Box. This method returns two points in
world coordinates which span a rectangle representing the AABB.
pr2.get_axis_aligned_bounding_box()


To close the BulletWorld again please use the exit() method since it will also terminate threads running in the
background
world.exit()












previous
PyCRAM Introduction




next
Plan Language









 Contents
  


Attachments
Links and Joints
Misc Methods








By Jonas Dech




    
      © Copyright 2024.
      

























Action Designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.md







.pdf



















Action Designator




 Contents 



Navigate Action
Move Torso
Set Gripper
Park Arms
Pick Up and Place
Look At
Detect
Transporting
Opening
Closing









Action Designator#
This example will show the different kinds of Action Designators that are available. We will see how to create Action
Designators and what they do.
Action Designators are high-level descriptions of actions which the robot should execute.
Action Designators are created from an Action Designator Description, which describes the type of action as well as the
parameter for this action. Parameter are given as a list of possible parameters.
For example, if you want to describe the robot moving to a table you would need a
NavigateAction() and a list of poses that are near the table. The Action
Designator Description will then pick one of the poses and return a performable Action Designator which contains the
picked pose.


Navigate Action#
We will start with a simple example of the NavigateAction().
First, we need a BulletWorld with a robot.
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object
from pycram.datastructures.enums import ObjectType, WorldMode

world = BulletWorld(WorldMode.GUI)
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")


To move the robot we need to create a description and resolve it to an actual Designator. The description of navigation
only needs a list of possible poses.
from pycram.designators.action_designator import NavigateAction
from pycram.datastructures.pose import Pose

pose = Pose([1, 0, 0], [0, 0, 0, 1])

# This is the Designator Description
navigate_description = NavigateAction(target_locations=[pose])

# This is the performable Designator
navigate_designator = navigate_description.resolve()


What we now did was: create the pose where we want to move the robot, create a description describing a navigation with
a list of possible poses (in this case the list contains only one pose) and create an action designator from the
description. The action designator contains the pose picked from the list of possible poses and can be performed.
from pycram.process_module import simulated_robot

with simulated_robot:
    navigate_designator.perform()


Every designator that is performed needs to be in an environment that specifies where to perform the designator either
on the real robot or the simulated one. This environment is called simulated_robot()  similar there is also
a real_robot() environment.
There are also decorators which do the same thing but for whole methods, they are called with_real_robot()
and with_simulated_robot().


Move Torso#
This action designator moves the torso up or down, specifically it sets the torso joint to a given value.
We start again by creating a description and resolving it to a designator. Afterwards, the designator is performed in
a simulated_robot() environment.
from pycram.designators.action_designator import MoveTorsoAction
from pycram.process_module import simulated_robot

torso_pose = 0.2

torso_desig = MoveTorsoAction([torso_pose]).resolve()

with simulated_robot:
    torso_desig.perform()




Set Gripper#
As the name implies, this action designator is used to open or close the gripper.
The procedure is similar to the last time, but this time we will shorten it a bit.
from pycram.designators.action_designator import SetGripperAction
from pycram.process_module import simulated_robot
from pycram.datastructures.enums import GripperState, Arms

gripper = Arms.RIGHT
motion = GripperState.OPEN

with simulated_robot:
    SetGripperAction(grippers=[gripper], motions=[motion]).resolve().perform()




Park Arms#
Park arms is used to move one or both arms into the default parking position.
from pycram.designators.action_designator import ParkArmsAction
from pycram.process_module import simulated_robot
from pycram.datastructures.enums import Arms

with simulated_robot:
    ParkArmsAction([Arms.BOTH]).resolve().perform()




Pick Up and Place#
Since these two are dependent on each other, meaning you can only place something when you picked it up beforehand, they
will be shown together.
These action designators use object designators, which will not be further explained in this tutorial so please check
the example on object designators for more details.
To start we need an environment in which we can pick up and place things as well as an object to pick up.
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([1.3, 1, 0.9]))

world.reset_world()


from pycram.designators.action_designator import PickUpAction, PlaceAction, ParkArmsAction, MoveTorsoAction,

NavigateAction
from pycram.designators.object_designator import BelieveObject
from pycram.process_module import simulated_robot
from pycram.datastructures.enums import Arms, Grasp
from pycram.datastructures.pose import Pose

milk_desig = BelieveObject(names=["milk"])
arm = Arms.RIGHT

with simulated_robot:
    ParkArmsAction([Arms.BOTH]).resolve().perform()

    MoveTorsoAction([0.3]).resolve().perform()

    NavigateAction([Pose([0.78, 1, 0.0],
                         [0.0, 0.0, 0.014701099828940344, 0.9998919329926708])]).resolve().perform()

    PickUpAction(object_designator_description=milk_desig,
                 arms=[arm],
                 grasps=[Grasp.RIGHT]).resolve().perform()

    NavigateAction([Pose([-1.90, 0.78, 0.0],
                         [0.0, 0.0, 0.16439898301071468, 0.9863939245479175])]).resolve().perform()

    PlaceAction(object_designator_description=milk_desig,
                target_locations=[Pose([-1.20, 1.0192, 0.9624],
                                       # [0.0, 0.0, 0.6339889056055381, 0.7733421413379024])], 
                                       [0, 0, 0, 1])],
                arms=[arm]).resolve().perform()


world.reset_world()




Look At#
Look at lets the robot look at a specific point, for example if it should look at an object for detecting.
from pycram.designators.action_designator import LookAtAction
from pycram.process_module import simulated_robot
from pycram.datastructures.pose import Pose

target_location = Pose([1, 0, 0.5], [0, 0, 0, 1])
with simulated_robot:
    LookAtAction(targets=[target_location]).resolve().perform()




Detect#
Detect is used to detect objects in the field of vision (FOV) of the robot. We will use the milk used in the pick
up/place example, if you didn’t execute that example you can spawn the milk with the following cell. The detect
designator will return a resolved instance of an ObjectDesignatorDescription.
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([1.3, 1, 0.9]))


from pycram.designators.action_designator import DetectAction, LookAtAction, ParkArmsAction, NavigateAction
from pycram.designators.object_designator import BelieveObject
from pycram.datastructures.enums import Arms
from pycram.process_module import simulated_robot
from pycram.datastructures.pose import Pose

milk_desig = BelieveObject(names=["milk"])

with simulated_robot:
    ParkArmsAction([Arms.BOTH]).resolve().perform()

    NavigateAction([Pose([0, 1, 0], [0, 0, 0, 1])]).resolve().perform()

    LookAtAction(targets=[milk_desig.resolve().pose]).resolve().perform()

    obj_desig = DetectAction(milk_desig).resolve().perform()

    print(obj_desig)




Transporting#
Transporting can transport an object from its current position to another target position. It is similar to the Pick and
Place plan used in the Pick-up and Place example. Since we need an Object which we can transport we spawn a milk, you
don’t need to do this if you already have spawned it in a previous example.
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
milk = Object("milk", ObjectType.MILK, "milk.stl", pose=Pose([1.3, 1, 0.9]))


from pycram.designators.action_designator import *
from pycram.designators.object_designator import *
from pycram.process_module import simulated_robot
from pycram.datastructures.pose import Pose
from pycram.datastructures.enums import Arms

milk_desig = BelieveObject(names=["milk"])

description = TransportAction(milk_desig,
                              [Arms.LEFT],
                              [Pose([-1.35, 0.78, 0.95],
                                    [0.0, 0.0, 0.16439898301071468, 0.9863939245479175])])
with simulated_robot:
    MoveTorsoAction([0.2]).resolve().perform()
    description.resolve().perform()




Opening#
Opening allows the robot to open a drawer, the drawer is identified by an ObjectPart designator which describes the
handle of the drawer that should be grasped.
For the moment this designator works only in the apartment environment, therefore we remove the kitchen and spawn the
apartment.
kitchen.remove()


apartment = Object("apartment", ObjectType.ENVIRONMENT, "apartment.urdf")


from pycram.designators.action_designator import *
from pycram.designators.object_designator import *
from pycram.datastructures.enums import Arms
from pycram.process_module import simulated_robot
from pycram.datastructures.pose import Pose

apartment_desig = BelieveObject(names=["apartment"]).resolve()
handle_deisg = ObjectPart(names=["handle_cab10_t"], part_of=apartment_desig)

with simulated_robot:
    MoveTorsoAction([0.25]).resolve().perform()
    ParkArmsAction([Arms.BOTH]).resolve().perform()
    NavigateAction([Pose([1.7474915981292725, 2.6873629093170166, 0.0],
                         [-0.0, 0.0, 0.5253598267689507, -0.850880163370435])]).resolve().perform()
    OpenAction(handle_deisg, [Arms.RIGHT]).resolve().perform()




Closing#
Closing lets the robot close an open drawer, like opening the drawer is identified by an ObjectPart designator
describing the handle to be grasped.
This action designator only works in the apartment environment for the moment, therefore we remove the kitchen and spawn
the apartment. Additionally, we open the drawer such that we can close it with the action designator.
kitchen.remove()


apartment = Object("apartment", ObjectType.ENVIRONMENT, "apartment.urdf")
apartment.set_joint_state("cabinet10_drawer_top_joint", 0.4)


from pycram.designators.action_designator import *
from pycram.designators.object_designator import *
from pycram.datastructures.enums import Arms
from pycram.process_module import simulated_robot
from pycram.datastructures.pose import Pose

apartment_desig = BelieveObject(names=["apartment"]).resolve()
handle_deisg = ObjectPart(names=["handle_cab10_t"], part_of=apartment_desig)

with simulated_robot:
    MoveTorsoAction([0.25]).resolve().perform()
    ParkArmsAction([Arms.BOTH]).resolve().perform()
    NavigateAction([Pose([1.7474915981292725, 2.8073629093170166, 0.0],
                         [-0.0, 0.0, 0.5253598267689507, -0.850880163370435])]).resolve().perform()
    CloseAction(handle_deisg, [Arms.RIGHT]).resolve().perform()


world.exit()












previous
Designators




next
Object Designator









 Contents
  


Navigate Action
Move Torso
Set Gripper
Park Arms
Pick Up and Place
Look At
Detect
Transporting
Opening
Closing








By Jonas Dech




    
      © Copyright 2024.
      

























Jupyter Notebook Examples — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















Jupyter Notebook Examples




 Contents 



Jupyter Notebook Examples
Running Examples
Adding Examples
Linking directly to source code










Jupyter Notebook Examples#
PyCRAM uses Jupyter Notebooks as a means of providing code examples and tutorials. These examples are located in the
examples directory.
These Notebooks are stored as Myst Markdown files, which provide the advantage of better verison control and easier
integration with Sphinx documentation. However, the Notebooks can be run as usual in Jupyter Notebook.


Running Examples#
Despite the examples being stored as Myst Markdown files, they can still be run as Jupyter Notebooks. To run an example,
simply open the Notebook in Jupyter Notebook and run the cells as you would with any other Notebook.
To run Jupyter Notebook, you need to have Jupyter Notebook installed. You can install Jupyter Notebook using pip:
pip install jupyter


After installing Jupyter Notebook, you can run it by executing the following command in the terminal:
jupyter notebook


Afterwards, a new website will open in your browser, where you can navigate to the examples directory and open the
desired Notebook.


Adding Examples#
If you want to add a new example, you can do so by creating a new Notebook in the examples directory. After creating
and testing the example you need to convert it to the Myst Markdown format. For this step we use the
jupytext tool. To convert a Notebook to Myst Markdown, run the following
command in the examples directory of the project:
jupytext --to markdown your_notebook.ipynb



Linking directly to source code#
Since the examples are stored as Myst Markdown files, you can link directly to the source code documentation. For
example, to link to the source code of the class PickUpAction you can use:
{class}`~pycram.designators.action_designator.PickUpAction`


Alternatively, you can use {meth}, {func}, {attr}, {class}, {mod} and {obj} to link to methods, functions,
attributes, classes, modules and objects, respectively.










previous
Adding a new robot to PyCRAM




next
Designators









 Contents
  


Jupyter Notebook Examples
Running Examples
Adding Examples
Linking directly to source code










By Jonas Dech




    
      © Copyright 2024.
      

























Adding a new robot to PyCRAM — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















Adding a new robot to PyCRAM




 Contents 



Robot Description
Process Modules








Adding a new robot to PyCRAM#

To add a new robot to PyCRAM, you need two things:
A Robot description
Process Modules to control the robot




Robot Description#
The robot description defines certain semantic properties of the robot that can not be extracted from the robot’s URDF automatically.
This includes kinematic chains which the robot can move (like the arms), descriptions of the end-effectors as well as
descriptions of the cameras mounted on the robot.
An overview of the different components of the robot description as well as how these are created can be found in the
following example:
Robot Description example


Process Modules#
Process Modules are the components that actually control the robot. They are responsible for executing actions on the robot
and are the only component of PyCRAM that interacts with the robot directly.
If you want to use the robot in simulation then you can use the provided default process modules which will suffice to
control the robot in simulation. However, should the provided process modules not be sufficient for your use case, you can
implement them yourself. For examples how the process modules are designed please have a look at the already implemented
process modules in pycram.process_modules.










previous
ROS Utils




next
Jupyter Notebook Examples









 Contents
  


Robot Description
Process Modules








By Jonas Dech




    
      © Copyright 2024.
      

























Installation — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















Installation




 Contents 



Installing ROS
Installing Dependencies
PyCRAM on Ubuntu 20.04 (ROS Noetic)
Python Dependencies
Building your ROS workspace
Using PyCRAM
Building the documentation
Setting up PyCRAM with PyCharm
Install PyCharm Professional
Set up virtualenv
Configure PyCharm


Using IPython as REPL
Enable autoreload
Run scripts










Installation#

The setup of PyCRAM can be divided in four steps:
Install ROS
Installing Dependencies
Cloning the PyCRAM repo
Building your ROS workspace



All dependencies are available via PyPi.
PyCRAM is developed and tested currently with Python3.8, Ubuntu 20.04 and ROS Noetic.
This guide expects you to have a GitHub account with an SSH key (you can read about adding a new ssh key
here).

Installing ROS#
PyCRAM uses ROS for a variety of functionality, for this reason you need a working ROS installation on your machine.
For information on how to install ROS please referee to the official
documentation here.


Installing Dependencies#

The dependencies you will need are:
Pip
vcstool



These are available via the Ubuntu apt-repos and can be installed via the terminal:
sudo apt-get install python3-pip python3-vcstool




PyCRAM on Ubuntu 20.04 (ROS Noetic)#
Before installing PyCRAM you need to setup a ROS workspace into which PyCRAM can be cloned.
mkdir -p ~/workspace/ros/src
cd workspace/ros
catkin_make
source devel/setup.bash


If catkin_make does not work this probably means that you did not source your ROS installation.
Source it by invoking:
source /opt/ros/noetic/setup.bash


Now you can install PyCRAM into your ROS workspace.
cd ~/workspace/ros/src
vcs import --input https://raw.githubusercontent.com/cram2/pycram/dev/pycram.rosinstall --recursive
rosdep update
rosdep install --ignore-src --from-paths . -r
cd ..
catkin_make
source devel/setup.bash
echo "source ~/workspace/ros/devel/setup.bash" >> ~/.bashrc


The cloning and setting up can take several minutes. After the command finishes you should see a number of repositories
in your ROS workspace.
Now the last thing that needs to be done is clone the submodules of the PyCRAM repo, this is done via the following
commands.
cd src/pycram
git submodule init
git submodule update


The cloned repository contains the source code for PyCRAM as well as two short demos which demonstrate how to use it.


Python Dependencies#
To install the Python dependencies Pip is used. To install Pip type the following command into a terminal.
sudo apt-get install python3-pip


Now the actual Python packages can be installed, these are summarized in the requirements.txt in the PyCRAM repo.
For this first navigate to your PyCRAM repo.
cd ~/workspace/ros/src/pycram


Then install the Python packages in the requirements.txt file
sudo pip3 install -r requirements.txt
sudo pip3 install -r src/neem_interface_python/requirements.txt




Building your ROS workspace#
Building and sourcing your ROS workspace using catkin compiles all ROS packages and manages the appending to the
respective PATH variables. This is necessary to be able to import PyCRAM via the Python import system and to find the
robot descriptions in the launch file.
If you have been following the tutorial steps until now you can skip this part.
You can build your ROS workspace with the following commands:
cd ~/workspace/ros
catkin_make
source devel/setup.bash




Using PyCRAM#
To start using PyCRAM you first need to launch the ROS launch file. This launchfile is located in the directory “launch”
and is named “ik_and_description.launch”.
The launchfile can be started with the following command:
roslaunch pycram ik_and_description.launch


What the launch file does is start a ROS master, upload the robot URDF to the parameter server as well as starting the
IK solver.


Building the documentation#
The documentation uses jupyter-book as engine.
Building the documentation requires Python 3.9 to avoid dependency conflicts.
To install Python 3.9 on Ubuntu 20.04, use the following commands:
sudo apt install python3.9


It is recommended to use a virtual environment to avoid conflicts with the system Python.
apt-get install python3-virtualenv
virtualenv -p python3.9 --system-site-packages build-doc
source build-doc/bin/activate


Install the requirements in your python interpreter.
cd ~/workspace/ros/src/pycram/doc
pip install -r requirements.txt


Run pycram and build the docs.
cd ~/workspace/ros
roslaunch pycram ik_and_description.launch
cd src/pycram/doc/source
jupyter-book build .


Show the index.
firefox _build/html/index.html




Setting up PyCRAM with PyCharm#
Setting up PyCharm with packages that rely on rospy is non trivial. Follow this guide to get correct syntax highlighting for the PyCRAM project.

Install PyCharm Professional#
First, install PyCharm Professional.
Create a JetBrains account and verify it for educational purpose. Normally, a school email address would suffice, otherwise you would have to upload your student/employee id card. The verification process typically takes 1~2-week time, so until then please use Trial version.
Once your account is verified, you can unlock the PyCharm Professional features in PyCharm.
The next step will set up the virtual Python environment, so it can be used as a project interpreter in PyCharm.


Set up virtualenv#
The virtualenvwrapper allows to manage virtual Python environments, where additional packages can be installed without the risk of breaking the system-wide Python configuration. Install virtualenvwrapper via pip and set it up.
sudo pip3 install virtualenvwrapper


(Optional but recommended) Set virtualenvwrapper’s WORKON_HOME env variable, of which the default value is ~/.virtualenvs
echo "export WORKON_HOME=~/envs" >> ~/.bashrc
mkdir -p $WORKON_HOME


Activate virtualenvwrapper at terminal start
echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc
source ~/.bashrc


Create a virtual env based on the workspaces libraries (see build-ws) and add the –system-site-packages to get them properly. The env will be registered in $WORKON_HOME.
source ~/workspace/ros/devel/setup.bash
mkvirtualenv pycram --system-site-packages
ls $WORKON_HOME


Check if the ROS libraries are available in the virtual env.
workon pycram
python -c "import rospy"


If it complains about python, install the following, to set python to Python 3 by default.
sudo apt install python-is-python3


If it finds python but complains about missing packages, make sure that the workspace is sourced before creating the virtual env. Also remember to create the virtual env with the –system-site-packages flag.
If this returns no errors, you can be sure that rospy is usable in your virtual environment. Next you have to build the
ros workspace including pycram and source it as described in build-ws.


Configure PyCharm#
Always start PyCharm from the terminal via
pycharm-professional


or
~/pycharm/bin/pycharm.sh


Select File | Open and select the root folder of the PyCRAM package.
Next go to File | Settings | Project: pycram | Python Interpreter and set up your virtual environment with rospy and
the sourced workspace available as the python interpreter.
Finally, go to  File | Settings | Project: pycram | Project Structure and mark the src folder as Sources, the test
folder as Tests and the resources as Resources.
To verify that it works, you can execute any Testcase.
Useful tips


Keyboard shortcuts
Keymap, which can be configured in Settings | Keymap. The default is GNOME.





Python interpreter
Python virtual environment




Python packages
Python console
View | Active Editor | Soft-wrap: wrap text inside the editor view
View | Tool Windows | Structure: display structure window for easy content navigation
F12: Open terminal
Double Shift: Quick file search
Alt + Shift + 1: Reveal/Select current file in Project View
Ctrl F/R: Find/Replace text in current file
Ctrl Shift F/R: Find/Replace text in the whole project, module, directory, scope
Settings | Editor | Inspections | Code is compatible with specific Python versions: Enable/Disable Python version-specific warnings




Using IPython as REPL#
If you want to use a REPl with PyCRAM you can use IPython for that. IPython can be installed via
the Ubunutu package manager.
sudo apt install ipython3



Enable autoreload#
To use changes made in the Python file while the Repl is running you need to enable the iPython extension autoreload.
This can be done using the iPython startup files, these are files which are always run if iPython is started.
First run ipython profile create to create a default profile.
Then you will find the startup files located in ~/.ipython/profile_default/startup along with a README file which explains the usage
of the startup files. In this directory create a file called 00-autoreload.ipy and enter the following code to the file.
%load_ext autoreload
%autoreload 2


The first line loads the extension to iPython and the second line configures autoreload to reload all modules before the
code in the shell is executed.


Run scripts#
IPython allows to run Python files and enables the access to created variables. This can be helpful
if you want to create a setup script which initializes things like the BulletWorld, Objects and imports
relevant modules.
To execute a Python script simply run run filename.py in the IPython shell.
Here is an example how a setup script can look like.
from pycram.bullet_world import BulletWorld, Object
from pycram.designators.action_designator import *
from pycram.designators.motion_designator import *
from pycram.designators.location_designator import *
from pycram.designators.object_designator import *
from pycram.process_module import simulated_robot
from pycram.pose import Pose
from pycram.enums import ObjectType

world = BulletWorld()

robot = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
cereal = Object("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", pose=Pose([1.4, 1, 0.95]))













previous
Welcome to pycram’s documentation!




next
ROS Utils









 Contents
  


Installing ROS
Installing Dependencies
PyCRAM on Ubuntu 20.04 (ROS Noetic)
Python Dependencies
Building your ROS workspace
Using PyCRAM
Building the documentation
Setting up PyCRAM with PyCharm
Install PyCharm Professional
Set up virtualenv
Configure PyCharm


Using IPython as REPL
Enable autoreload
Run scripts










By Jonas Dech




    
      © Copyright 2024.
      

























Welcome to pycram’s documentation! — PyCRAM


























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















Welcome to pycram’s documentation!




 Contents 



What is PyCRAM?
Simple Demonstration


Citing PyCRAM
Indices and tables








Welcome to pycram’s documentation!#


What is PyCRAM?#
PyCRAM is the Python 3 re-implementation of CRAM.
PyCRAM is a toolbox for designing, implementing and deploying software on autonomous robots.
The framework provides various tools and libraries for aiding in robot software development as well as geometric
reasoning and fast simulation mechanisms to develop cognition-enabled control programs that achieve high levels of robot
autonomy.
PyCRAM is developed in Python with support for the ROS middleware which is used for communication with different
software components as well as the robot.
This framework is tested with Ubuntu 20.04, ROS Noetic and Python 3.8

Simple Demonstration#
PyCRAM allows the execution of the same high-level plan on different robot platforms. Below you can see an example of
this where the plan is executed on the PR2 and the IAIs Boxy.






Boxy
PR2











The plan that both robots execute is a relatively simple pick and place plan:


They start at the world origin
park their arms
move to the counter
observe the object
pickup the object
move to the kitchen island
place the object
move to the world origin


The code for this plan can be seen below.
from pycram.world.bullet_world import BulletWorld
from pycram.world_concepts.world_concepts import Object
from pycram.process_module import simulated_robot
from pycram.designators.motion_designator import *
from pycram.designators.location_designator import *
from pycram.designators.action_designator import *
from pycram.designators.object_designator import *
from pycram.datastructures.enums import ObjectType, Arms, Grasps

world = BulletWorld()
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
robot = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
cereal = Object("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", position=[1.4, 1, 0.95])

cereal_desig = ObjectDesignatorDescription(names=["cereal"])
kitchen_desig = ObjectDesignatorDescription(names=["kitchen"])
robot_desig = ObjectDesignatorDescription(names=["pr2"]).resolve()

with simulated_robot:
    ParkArmsAction([Arms.BOTH]).resolve().perform()

    MoveTorsoAction([0.3]).resolve().perform()

    pickup_pose = CostmapLocation(target=cereal_desig.resolve(), reachable_for=robot_desig).resolve()
    pickup_arm = pickup_pose.reachable_arms[0]

    NavigateAction(target_locations=[pickup_pose.pose]).resolve().perform()

    PickUpAction(object_designator_description=cereal_desig, arms=[pickup_arm], grasps=[Grasps.FRONT]).resolve().perform()

    ParkArmsAction([Arms.BOTH]).resolve().perform()

    place_island = SemanticCostmapLocation("kitchen_island_surface", kitchen_desig.resolve(), cereal_desig.resolve()).resolve()

    place_stand = CostmapLocation(place_island.pose, reachable_for=robot_desig, reachable_arm=pickup_arm).resolve()

    NavigateAction(target_locations=[place_stand.pose]).resolve().perform()

    PlaceAction(cereal_desig, target_locations=[place_island.pose], arms=[pickup_arm]).resolve().perform()

    ParkArmsAction([Arms.BOTH]).resolve().perform()

world.exit()





Citing PyCRAM#
If you want to cite PyCRAM in your work, you can use the following bibtex entry:
@software{dech2024pycram,
author = {Dech, Jonas},
title = {PyCRAM: A Python framework for cognition-enbabled robtics},
url = {https://github.com/cram2/pycram},
version = {0.2.0},
}




Indices and tables#

Index
Module Index
Search Page




















next
Installation









 Contents
  


What is PyCRAM?
Simple Demonstration


Citing PyCRAM
Indices and tables








By Jonas Dech




    
      © Copyright 2024.
      

























Index — PyCRAM























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue

























Index

_
 | A
 | B
 | C
 | D
 | E
 | F
 | G
 | H
 | I
 | J
 | K
 | L
 | M
 | N
 | O
 | P
 | Q
 | R
 | S
 | T
 | U
 | V
 | W
 | X
 | Y
 | Z

_


__abstract__ (pycram.orm.base.Base attribute)

(pycram.orm.base.MapperArgsMixin attribute)

(pycram.orm.base.PoseMixin attribute)

(pycram.orm.base.PositionMixin attribute)

(pycram.orm.base.QuaternionMixin attribute)

(pycram.orm.object_designator.ObjectMixin attribute)


__add__() (pycram.costmaps.Costmap method)

(pycram.fluent.Fluent method)

(pycram.language.Language method)


__all__ (in module pycram.robot_descriptions)

__all_ontology_concept_holders (pycram.ontology.ontology_common.OntologyConceptHolderStore attribute)

__call__ (pycram.world_concepts.event.Event attribute)

__call__() (pycram.helper.Singleton method)

(pycram.process_module.RealRobot method)

(pycram.process_module.SemiRealRobot method)

(pycram.process_module.SimulatedRobot method)


__copy__() (pycram.description.Joint method)

(pycram.description.Link method)

(pycram.description.RootLink method)

(pycram.world_concepts.constraints.Attachment method)

(pycram.world_concepts.world_object.Object method)


__del__() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.world_concepts.constraints.Attachment method)


__enter__() (pycram.datastructures.world.UseProspectionWorld method)

(pycram.process_module.RealRobot method)

(pycram.process_module.SemiRealRobot method)

(pycram.process_module.SimulatedRobot method)

(pycram.tasktree.SimulatedTaskTree method)

(pycram.utils.suppress_stdout_stderr method)


__eq__() (pycram.datastructures.pose.Pose method)

(pycram.datastructures.pose.Transform method)

(pycram.description.Joint method)

(pycram.description.Link method)

(pycram.fluent.Fluent method)

(pycram.ontology.ontology_common.OntologyConceptHolder method)

(pycram.world_concepts.constraints.Attachment method)

(pycram.world_concepts.world_object.Object method)


__exit__() (pycram.datastructures.world.UseProspectionWorld method)

(pycram.process_module.RealRobot method)

(pycram.process_module.SemiRealRobot method)

(pycram.process_module.SimulatedRobot method)

(pycram.tasktree.SimulatedTaskTree method)

(pycram.utils.suppress_stdout_stderr method)


__geq__() (pycram.fluent.Fluent method)

__gt__() (pycram.fluent.Fluent method)

__hash__() (pycram.description.Joint method)

(pycram.description.Link method)

(pycram.world_concepts.constraints.Attachment method)

(pycram.world_concepts.world_object.Object method)


__iadd__() (pycram.world_concepts.event.Event method)

__isub__() (pycram.world_concepts.event.Event method)

__iter__() (pycram.designator.ActionDesignatorDescription method)

(pycram.designator.ObjectDesignatorDescription method)

(pycram.designators.action_designator.MoveTorsoAction method)

(pycram.designators.action_designator.SetGripperAction method)

(pycram.designators.location_designator.AccessingLocation method)

(pycram.designators.location_designator.CostmapLocation method)

(pycram.designators.location_designator.ObjectRelativeLocation method)

(pycram.designators.location_designator.SemanticCostmapLocation method)

(pycram.designators.object_designator.ObjectPart method)

(pycram.designators.object_designator.RealObject method)

(pycram.designators.specialized_designators.location.database_location.DatabaseCostmapLocation method)

(pycram.designators.specialized_designators.location.giskard_location.GiskardLocation method)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp method)

(pycram.pose_generator_and_validator.PoseGenerator method)


__len__() (pycram.tasktree.TaskTreeNode method)

__leq__() (pycram.fluent.Fluent method)

__lt__() (pycram.fluent.Fluent method)

__mapper_args__ (pycram.orm.object_designator.Object attribute)

(pycram.orm.object_designator.ObjectPart attribute)


__mapper_args__() (pycram.orm.base.Designator method)

(pycram.orm.base.MapperArgsMixin method)


__mul__() (pycram.datastructures.pose.Transform method)

(pycram.fluent.Fluent method)

(pycram.language.Language method)


__ne__() (pycram.fluent.Fluent method)

__object_position (pycram.orm.views.PickUpWithContextView attribute)

__or__() (pycram.language.Language method)

__post_init__() (pycram.designator.ActionDesignatorDescription.Action method)

(pycram.designator.BaseMotion method)

(pycram.designator.ObjectDesignatorDescription.Object method)


__radd__() (pycram.fluent.Fluent method)

__relative_x (pycram.orm.views.PickUpWithContextView attribute)

__relative_y (pycram.orm.views.PickUpWithContextView attribute)

__repr__() (pycram.designator.ObjectDesignatorDescription.Object method)

(pycram.tasktree.NoOperation method)

(pycram.tasktree.TaskTreeNode method)

(pycram.world_concepts.world_object.Object method)


__rmul__() (pycram.fluent.Fluent method)

(pycram.language.Language method)


__robot_pose (pycram.orm.views.PickUpWithContextView attribute)

__robot_position (pycram.orm.views.PickUpWithContextView attribute)

__rshift__() (pycram.language.Language method)

__rsub__() (pycram.fluent.Fluent method)

__rtruediv__() (pycram.fluent.Fluent method)

__str__() (pycram.tasktree.TaskTreeNode method)

__sub__() (pycram.fluent.Fluent method)

(pycram.language.Language method)


__table__ (pycram.orm.views.PickUpWithContextView attribute)

__tablename__() (pycram.orm.base._Base method)

__truediv__() (pycram.fluent.Fluent method)

__version__ (in module pycram)

__xor__() (pycram.language.Language method)

_add_to_world_sync_obj_queue() (pycram.world_concepts.world_object.Object method)

_apply_ik() (in module pycram.utils)

_Base (class in pycram.orm.base)

_calculate_diff_origin() (pycram.costmaps.OccupancyCostmap method)

_children (pycram.fluent.Fluent attribute)

_chunks() (pycram.costmaps.Costmap method)

(pycram.costmaps.OccupancyCostmap method)


_close_lock (pycram.process_modules.boxy_process_modules.BoxyManager attribute)

(pycram.process_modules.BoxyManager attribute)

(pycram.process_modules.default_process_modules.DefaultManager attribute)

(pycram.process_modules.DefaultManager attribute)

(pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)

(pycram.process_modules.pr2_process_modules.Pr2Manager attribute)

(pycram.process_modules.Pr2Manager attribute)

(pycram.process_modules.stretch_process_modules.StretchManager attribute)

(pycram.process_modules.StretchManager attribute)


_compare() (pycram.fluent.Fluent method)

_convert_map() (pycram.costmaps.OccupancyCostmap method)

_create_from_world() (pycram.costmaps.OccupancyCostmap method)

_create_images() (pycram.costmaps.VisibilityCostmap method)

_create_view() (in module pycram.orm.views)

_current_pose (pycram.world_concepts.world_object.Object attribute)

_current_state (pycram.datastructures.world.World attribute)

(pycram.World attribute)


_cv (pycram.fluent.Fluent attribute)

_data (pycram.designator.Designator attribute)

_depth_buffer_to_meter() (pycram.costmaps.VisibilityCostmap method)

_description (pycram.designator.Designator attribute)

_detecting_lock (pycram.process_modules.boxy_process_modules.BoxyManager attribute)

(pycram.process_modules.BoxyManager attribute)

(pycram.process_modules.default_process_modules.DefaultManager attribute)

(pycram.process_modules.DefaultManager attribute)

(pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)

(pycram.process_modules.pr2_process_modules.Pr2Manager attribute)

(pycram.process_modules.Pr2Manager attribute)

(pycram.process_modules.stretch_process_modules.StretchManager attribute)

(pycram.process_modules.StretchManager attribute)


_drop_view() (in module pycram.orm.views)

_effective (pycram.designator.Designator attribute)

_execute() (pycram.process_module.ProcessModule method)

(pycram.process_modules.boxy_process_modules.BoxyClose method)

(pycram.process_modules.boxy_process_modules.BoxyDetecting method)

(pycram.process_modules.boxy_process_modules.BoxyMoveArmJoints method)

(pycram.process_modules.boxy_process_modules.BoxyMoveGripper method)

(pycram.process_modules.boxy_process_modules.BoxyMoveHead method)

(pycram.process_modules.boxy_process_modules.BoxyMoveTCP method)

(pycram.process_modules.boxy_process_modules.BoxyNavigation method)

(pycram.process_modules.boxy_process_modules.BoxyOpen method)

(pycram.process_modules.boxy_process_modules.BoxyParkArms method)

(pycram.process_modules.boxy_process_modules.BoxyWorldStateDetecting method)

(pycram.process_modules.default_process_modules.DefaultClose method)

(pycram.process_modules.default_process_modules.DefaultDetecting method)

(pycram.process_modules.default_process_modules.DefaultMoveArmJoints method)

(pycram.process_modules.default_process_modules.DefaultMoveGripper method)

(pycram.process_modules.default_process_modules.DefaultMoveHead method)

(pycram.process_modules.default_process_modules.DefaultMoveJoints method)

(pycram.process_modules.default_process_modules.DefaultMoveTCP method)

(pycram.process_modules.default_process_modules.DefaultNavigation method)

(pycram.process_modules.default_process_modules.DefaultOpen method)

(pycram.process_modules.default_process_modules.DefaultWorldStateDetecting method)

(pycram.process_modules.donbot_process_modules.DonbotMoveGripper method)

(pycram.process_modules.donbot_process_modules.DonbotMoveHead method)

(pycram.process_modules.donbot_process_modules.DonbotMoveJoints method)

(pycram.process_modules.donbot_process_modules.DonbotMoveTCP method)

(pycram.process_modules.donbot_process_modules.DonbotNavigation method)

(pycram.process_modules.donbot_process_modules.DonbotPlace method)

(pycram.process_modules.donbot_process_modules.DonbotWorldStateDetecting method)

(pycram.process_modules.hsrb_process_modules.HSRBCloseReal method)

(pycram.process_modules.hsrb_process_modules.HSRBDetecting method)

(pycram.process_modules.hsrb_process_modules.HSRBDetectingReal method)

(pycram.process_modules.hsrb_process_modules.HSRBMoveArmJointsReal method)

(pycram.process_modules.hsrb_process_modules.HSRBMoveGripperReal method)

(pycram.process_modules.hsrb_process_modules.HSRBMoveHeadReal method)

(pycram.process_modules.hsrb_process_modules.HSRBMoveJointsReal method)

(pycram.process_modules.hsrb_process_modules.HSRBMoveTCPReal method)

(pycram.process_modules.hsrb_process_modules.HSRBNavigation method)

(pycram.process_modules.hsrb_process_modules.HSRBNavigationReal method)

(pycram.process_modules.hsrb_process_modules.HSRBNavigationSemiReal method)

(pycram.process_modules.hsrb_process_modules.HSRBOpenReal method)

(pycram.process_modules.hsrb_process_modules.HSRBTalkReal method)

(pycram.process_modules.hsrb_process_modules.HSRBTalkSemiReal method)

(pycram.process_modules.pr2_process_modules.Pr2Close method)

(pycram.process_modules.pr2_process_modules.Pr2CloseReal method)

(pycram.process_modules.pr2_process_modules.Pr2Detecting method)

(pycram.process_modules.pr2_process_modules.Pr2DetectingReal method)

(pycram.process_modules.pr2_process_modules.Pr2MoveArmJoints method)

(pycram.process_modules.pr2_process_modules.Pr2MoveArmJointsReal method)

(pycram.process_modules.pr2_process_modules.Pr2MoveGripper method)

(pycram.process_modules.pr2_process_modules.Pr2MoveGripperReal method)

(pycram.process_modules.pr2_process_modules.Pr2MoveHead method)

(pycram.process_modules.pr2_process_modules.Pr2MoveHeadReal method)

(pycram.process_modules.pr2_process_modules.PR2MoveJoints method)

(pycram.process_modules.pr2_process_modules.Pr2MoveJointsReal method)

(pycram.process_modules.pr2_process_modules.Pr2MoveTCP method)

(pycram.process_modules.pr2_process_modules.Pr2MoveTCPReal method)

(pycram.process_modules.pr2_process_modules.Pr2Navigation method)

(pycram.process_modules.pr2_process_modules.Pr2NavigationReal method)

(pycram.process_modules.pr2_process_modules.Pr2Open method)

(pycram.process_modules.pr2_process_modules.Pr2OpenReal method)

(pycram.process_modules.pr2_process_modules.Pr2WorldStateDetecting method)

(pycram.process_modules.stretch_process_modules.StretchClose method)

(pycram.process_modules.stretch_process_modules.StretchCloseReal method)

(pycram.process_modules.stretch_process_modules.StretchDetectingReal method)

(pycram.process_modules.stretch_process_modules.StretchMoveArmJointsReal method)

(pycram.process_modules.stretch_process_modules.StretchMoveGripperReal method)

(pycram.process_modules.stretch_process_modules.StretchMoveHead method)

(pycram.process_modules.stretch_process_modules.StretchMoveHeadReal method)

(pycram.process_modules.stretch_process_modules.StretchMoveJointsReal method)

(pycram.process_modules.stretch_process_modules.StretchMoveTCPReal method)

(pycram.process_modules.stretch_process_modules.StretchNavigationReal method)

(pycram.process_modules.stretch_process_modules.StretchOpen method)

(pycram.process_modules.stretch_process_modules.StretchOpenReal method)




_find_consectuive_line() (pycram.costmaps.Costmap method)

_find_max_box_height() (pycram.costmaps.Costmap method)

_gaussian_window() (pycram.costmaps.GaussianCostmap method)

_generate_map() (pycram.costmaps.VisibilityCostmap method)

_generated (pycram.utils.GeneratorList attribute)

_get_map() (pycram.costmaps.OccupancyCostmap static method)

_get_map_metadata() (pycram.costmaps.OccupancyCostmap static method)

_get_visual_shape() (pycram.object_descriptors.urdf.LinkDescription static method)

_handle_missed (pycram.fluent.Fluent attribute)

_in_contact() (in module pycram.pose_generator_and_validator)

_index (pycram.designator.Designator attribute)

_init_and_sync_prospection_world() (pycram.datastructures.world.World method)

(pycram.World method)


_init_events() (pycram.datastructures.world.World method)

(pycram.World method)


_init_joint_name_and_id_map() (pycram.world_concepts.world_object.Object method)

_init_joints() (pycram.robot_description.KinematicChainDescription method)

(pycram.world_concepts.world_object.Object method)


_init_link_name_and_id_map() (pycram.world_concepts.world_object.Object method)

_init_links() (pycram.robot_description.KinematicChainDescription method)

_init_links_and_update_transforms() (pycram.world_concepts.world_object.Object method)

_init_links_joints() (pycram.robot_description.EndEffectorDescription method)

_init_prospection_world() (pycram.datastructures.world.World method)

(pycram.World method)


_init_world() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


_initialized (pycram.local_transformer.LocalTransformer attribute)

(pycram.robot_description.RobotDescriptionManager attribute)


_instance (pycram.local_transformer.LocalTransformer attribute)

(pycram.process_module.ProcessModuleManager attribute)

(pycram.robot_description.RobotDescriptionManager attribute)


_instances (pycram.helper.Singleton attribute)

_links (pycram.object_descriptors.generic.ObjectDescription attribute)

_load_object_and_get_id() (pycram.world_concepts.world_object.Object method)

(pycram.worlds.bullet_world.BulletWorld method)


_lock (pycram.process_module.ProcessModule attribute)

_looking_lock (pycram.process_modules.boxy_process_modules.BoxyManager attribute)

(pycram.process_modules.BoxyManager attribute)

(pycram.process_modules.default_process_modules.DefaultManager attribute)

(pycram.process_modules.DefaultManager attribute)

(pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)

(pycram.process_modules.pr2_process_modules.Pr2Manager attribute)

(pycram.process_modules.Pr2Manager attribute)

(pycram.process_modules.stretch_process_modules.StretchManager attribute)

(pycram.process_modules.StretchManager attribute)


_loose (pycram.world_concepts.constraints.Attachment attribute)

_make_marker_array() (pycram.ros.viz_marker_publisher.ManualMarkerPublisher method)

(pycram.ros.viz_marker_publisher.VizMarkerPublisher method)


_make_request_msg() (in module pycram.external_interfaces.ik)

_manage_par_motion_goals() (in module pycram.external_interfaces.giskard)

_math() (pycram.fluent.Fluent method)

_move_arm_joints_lock (pycram.process_modules.boxy_process_modules.BoxyManager attribute)

(pycram.process_modules.BoxyManager attribute)

(pycram.process_modules.default_process_modules.DefaultManager attribute)

(pycram.process_modules.DefaultManager attribute)

(pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)

(pycram.process_modules.pr2_process_modules.Pr2Manager attribute)

(pycram.process_modules.Pr2Manager attribute)

(pycram.process_modules.stretch_process_modules.StretchManager attribute)

(pycram.process_modules.StretchManager attribute)


_move_arm_tcp() (in module pycram.process_modules.boxy_process_modules)

(in module pycram.process_modules.default_process_modules)

(in module pycram.process_modules.pr2_process_modules)

(in module pycram.process_modules.stretch_process_modules)


_move_gripper_lock (pycram.process_modules.boxy_process_modules.BoxyManager attribute)

(pycram.process_modules.BoxyManager attribute)

(pycram.process_modules.default_process_modules.DefaultManager attribute)

(pycram.process_modules.DefaultManager attribute)

(pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)

(pycram.process_modules.pr2_process_modules.Pr2Manager attribute)

(pycram.process_modules.Pr2Manager attribute)

(pycram.process_modules.stretch_process_modules.StretchManager attribute)

(pycram.process_modules.StretchManager attribute)


_move_joints_lock (pycram.process_modules.boxy_process_modules.BoxyManager attribute)

(pycram.process_modules.BoxyManager attribute)

(pycram.process_modules.default_process_modules.DefaultManager attribute)

(pycram.process_modules.DefaultManager attribute)

(pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)

(pycram.process_modules.pr2_process_modules.Pr2Manager attribute)

(pycram.process_modules.Pr2Manager attribute)

(pycram.process_modules.stretch_process_modules.StretchManager attribute)

(pycram.process_modules.StretchManager attribute)


_move_tcp_lock (pycram.process_modules.boxy_process_modules.BoxyManager attribute)

(pycram.process_modules.BoxyManager attribute)

(pycram.process_modules.default_process_modules.DefaultManager attribute)

(pycram.process_modules.DefaultManager attribute)

(pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)

(pycram.process_modules.pr2_process_modules.Pr2Manager attribute)

(pycram.process_modules.Pr2Manager attribute)

(pycram.process_modules.stretch_process_modules.StretchManager attribute)

(pycram.process_modules.StretchManager attribute)


_mutex (pycram.designator.Designator attribute)

(pycram.fluent.Fluent attribute)


_name (pycram.object_descriptors.generic.LinkDescription attribute)

_navigate_lock (pycram.process_modules.boxy_process_modules.BoxyManager attribute)

(pycram.process_modules.BoxyManager attribute)

(pycram.process_modules.default_process_modules.DefaultManager attribute)

(pycram.process_modules.DefaultManager attribute)

(pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)

(pycram.process_modules.pr2_process_modules.Pr2Manager attribute)

(pycram.process_modules.Pr2Manager attribute)

(pycram.process_modules.stretch_process_modules.StretchManager attribute)

(pycram.process_modules.StretchManager attribute)


_open_lock (pycram.process_modules.boxy_process_modules.BoxyManager attribute)

(pycram.process_modules.BoxyManager attribute)

(pycram.process_modules.default_process_modules.DefaultManager attribute)

(pycram.process_modules.DefaultManager attribute)

(pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)

(pycram.process_modules.pr2_process_modules.Pr2Manager attribute)

(pycram.process_modules.Pr2Manager attribute)

(pycram.process_modules.stretch_process_modules.StretchManager attribute)

(pycram.process_modules.StretchManager attribute)


_parent (pycram.designator.Designator attribute)

_parent_to_child (pycram.world_concepts.constraints.AbstractConstraint attribute)

_park_arms() (in module pycram.process_modules.donbot_process_modules)

_pick_up_lock (pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)


_place_lock (pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)


_pose (pycram.designator.ObjectDesignatorDescription.Object attribute)

_pose_to_pose_stamped() (in module pycram.external_interfaces.giskard)

_publish() (pycram.ros.force_torque_sensor.ForceTorqueSensor method)

(pycram.ros.joint_state_publisher.JointStatePublisher method)

(pycram.ros.tf_broadcaster.TFBroadcaster method)

(pycram.ros.viz_marker_publisher.ManualMarkerPublisher method)

(pycram.ros.viz_marker_publisher.VizMarkerPublisher method)


_publish_object() (pycram.ros.viz_marker_publisher.ManualMarkerPublisher method)

_publish_pose() (pycram.ros.tf_broadcaster.TFBroadcaster method)

(pycram.ros.viz_marker_publisher.ManualMarkerPublisher method)


_pulses (pycram.fluent.Fluent attribute)

_reference() (pycram.designator.Designator method)

_saved_states (pycram.datastructures.world.StateEntity attribute)

_self (pycram.orm.base.ProcessMetaData attribute)

_set_attached_objects_poses() (pycram.world_concepts.world_object.Object method)

_solutions (pycram.designator.Designator attribute)

_stop_publishing() (pycram.ros.force_torque_sensor.ForceTorqueSensor method)

(pycram.ros.joint_state_publisher.JointStatePublisher method)

(pycram.ros.tf_broadcaster.TFBroadcaster method)

(pycram.ros.viz_marker_publisher.VizMarkerPublisher method)


_stop_subscription() (pycram.ros.robot_state_updater.RobotStateUpdater method)

_subscribe_joint_state() (pycram.ros.robot_state_updater.RobotStateUpdater method)

_subscribe_tf() (pycram.ros.robot_state_updater.RobotStateUpdater method)

_successor (pycram.designator.Designator attribute)

_sync_prospection_world() (pycram.datastructures.world.World method)

(pycram.World method)


_talk_lock (pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)


_update_all_links_poses() (pycram.world_concepts.world_object.Object method)

_update_local_transformer_worlds() (pycram.datastructures.world.World method)

(pycram.World method)


_update_marker() (pycram.ros.viz_marker_publisher.ManualMarkerPublisher method)

_update_objects() (pycram.ros.tf_broadcaster.TFBroadcaster method)

_update_pose() (pycram.description.Link method)

(pycram.description.RootLink method)


_update_position() (pycram.description.Joint method)

_update_static_odom() (pycram.ros.tf_broadcaster.TFBroadcaster method)

_value (pycram.fluent.Fluent attribute)

_whenever_cbs (pycram.fluent.Fluent attribute)

_world_state_detecting_lock (pycram.process_modules.boxy_process_modules.BoxyManager attribute)

(pycram.process_modules.BoxyManager attribute)

(pycram.process_modules.default_process_modules.DefaultManager attribute)

(pycram.process_modules.DefaultManager attribute)

(pycram.process_modules.donbot_process_modules.DonbotManager attribute)

(pycram.process_modules.DonbotManager attribute)

(pycram.process_modules.hsrb_process_modules.HSRBManager attribute)

(pycram.process_modules.HSRBManager attribute)

(pycram.process_modules.pr2_process_modules.Pr2Manager attribute)

(pycram.process_modules.Pr2Manager attribute)

(pycram.process_modules.stretch_process_modules.StretchManager attribute)

(pycram.process_modules.StretchManager attribute)




A


A (pycram.datastructures.dataclasses.Color attribute)

AbstractConstraint (class in pycram.world_concepts.constraints)

AbstractCostmapLocation (class in pycram.designators.specialized_designators.location.database_location)

AccessingLocation (class in pycram.designators.location_designator)

AccessingLocation.Location (class in pycram.designators.location_designator)

AccessingMotion (class in pycram.orm.motion_designator)

achieve_align_planes_goal() (in module pycram.external_interfaces.giskard)

achieve_cartesian_goal() (in module pycram.external_interfaces.giskard)

achieve_close_container_goal() (in module pycram.external_interfaces.giskard)

achieve_joint_goal() (in module pycram.external_interfaces.giskard)

achieve_open_container_goal() (in module pycram.external_interfaces.giskard)

achieve_rotation_goal() (in module pycram.external_interfaces.giskard)

achieve_straight_cartesian_goal() (in module pycram.external_interfaces.giskard)

achieve_straight_translation_goal() (in module pycram.external_interfaces.giskard)

achieve_translation_goal() (in module pycram.external_interfaces.giskard)

Action (class in pycram.orm.action_designator)

action (pycram.orm.tasktree.TaskTreeNode attribute)

(pycram.tasktree.TaskTreeNode attribute)


action_id (pycram.orm.tasktree.TaskTreeNode attribute)

ActionAbstract (class in pycram.designators.action_designator)

ActionDesignatorDescription (class in pycram.designator)

ActionDesignatorDescription.Action (class in pycram.designator)

ActionlibActionTimeout

add() (pycram.world_concepts.event.Event method)

add_camera() (pycram.robot_description.RobotDescription method)

add_camera_description() (pycram.robot_description.RobotDescription method)

add_child() (pycram.fluent.Fluent method)

add_constraint() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


add_fixed_constraint() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.world_concepts.constraints.Attachment method)


add_fixed_constraint_with_link() (pycram.description.Link method)

add_grasp_orientation() (pycram.robot_description.RobotDescription method)

add_grasp_orientations() (pycram.robot_description.RobotDescription method)

add_gripper_groups() (in module pycram.external_interfaces.giskard)

add_kinematic_chain() (pycram.robot_description.RobotDescription method)

add_kinematic_chain_description() (pycram.robot_description.RobotDescription method)

add_obj_queue (pycram.datastructures.world.WorldSync attribute)

add_ontology_concept_holder() (pycram.ontology.ontology_common.OntologyConceptHolderStore method)

add_resource_path() (pycram.datastructures.world.World class method)

(pycram.World class method)


add_static_joint_states() (pycram.robot_description.EndEffectorDescription method)

(pycram.robot_description.KinematicChainDescription method)


add_text() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


add_vis_axis() (pycram.worlds.bullet_world.BulletWorld method)

ALL (pycram.datastructures.enums.PerceptionTechniques attribute)

all_solutions() (in module pycram.external_interfaces.knowrob)

allow_gripper_collision (pycram.designators.motion_designator.MoveGripperMotion attribute)

(pycram.designators.motion_designator.MoveTCPMotion attribute)

(pycram.orm.motion_designator.MoveGripperMotion attribute)

(pycram.orm.motion_designator.MoveTCPMotion attribute)


allow_gripper_collision() (in module pycram.external_interfaces.giskard)

allow_self_collision() (in module pycram.external_interfaces.giskard)



alpha (pycram.orm.base.Color attribute)

ALWAYS (pycram.fluent.Behavior attribute)

AND() (pycram.fluent.Fluent method)

apply_grasp_orientation_to_pose() (in module pycram.external_interfaces.ik)

arm (in module pycram.robot_descriptions.ur5_description)

(pycram.designators.action_designator.CloseActionPerformable attribute)

(pycram.designators.action_designator.GraspingActionPerformable attribute)

(pycram.designators.action_designator.MoveAndPickUpPerformable attribute)

(pycram.designators.action_designator.OpenActionPerformable attribute)

(pycram.designators.action_designator.ParkArmsActionPerformable attribute)

(pycram.designators.action_designator.PickUpActionPerformable attribute)

(pycram.designators.action_designator.PlaceActionPerformable attribute)

(pycram.designators.action_designator.TransportActionPerformable attribute)

(pycram.designators.motion_designator.ClosingMotion attribute)

(pycram.designators.motion_designator.MoveTCPMotion attribute)

(pycram.designators.motion_designator.OpeningMotion attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp.Variables attribute)

(pycram.orm.action_designator.CloseAction attribute)

(pycram.orm.action_designator.GraspingAction attribute)

(pycram.orm.action_designator.OpenAction attribute)

(pycram.orm.action_designator.ParkArmsAction attribute)

(pycram.orm.action_designator.PickUpAction attribute)

(pycram.orm.action_designator.PlaceAction attribute)

(pycram.orm.action_designator.TransportAction attribute)

(pycram.orm.motion_designator.AccessingMotion attribute)

(pycram.orm.motion_designator.ClosingMotion attribute)

(pycram.orm.motion_designator.MoveTCPMotion attribute)

(pycram.orm.motion_designator.OpeningMotion attribute)


arm_description (in module pycram.robot_descriptions.stretch_description)

arm_type (pycram.robot_description.KinematicChainDescription attribute)

ArmFailure

Arms (class in pycram.datastructures.enums)

(class in pycram.designators.specialized_designators.probabilistic.probabilistic_action)


arms (pycram.designators.action_designator.CloseAction attribute)

(pycram.designators.action_designator.GraspingAction attribute)

(pycram.designators.action_designator.OpenAction attribute)

(pycram.designators.action_designator.ParkArmsAction attribute)

(pycram.designators.action_designator.PickUpAction attribute)

(pycram.designators.action_designator.PlaceAction attribute)

(pycram.designators.action_designator.TransportAction attribute)

(pycram.designators.location_designator.AccessingLocation.Location attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp attribute)


attach() (pycram.world_concepts.world_object.Object method)

Attachment (class in pycram.world_concepts.constraints)

attachments (pycram.datastructures.dataclasses.ObjectState attribute)

(pycram.world_concepts.world_object.Object attribute)


available_pms (pycram.process_module.ProcessModuleManager attribute)

avoid_all_collisions() (in module pycram.external_interfaces.giskard)

avoid_collisions() (in module pycram.external_interfaces.giskard)

axis (pycram.description.JointDescription property)

(pycram.object_descriptors.generic.JointDescription property)

(pycram.object_descriptors.urdf.JointDescription property)

(pycram.world_concepts.constraints.Constraint attribute)


axis_angle_to_quaternion() (in module pycram.utils)

axis_as_list (pycram.world_concepts.constraints.Constraint property)

AxisAlignedBoundingBox (class in pycram.datastructures.dataclasses)

AxisIdentifier (class in pycram.datastructures.enums)



B


B (pycram.datastructures.dataclasses.Color attribute)

b (pycram.orm.base.Color attribute)

Base (class in pycram.orm.base)

base (in module pycram.orm.views)

base_link (pycram.robot_description.RobotDescription attribute)

base_origin_shift (pycram.world_concepts.world_object.Object property)

base_pose (pycram.datastructures.dataclasses.MultiBody attribute)

base_visual_shape_index (pycram.datastructures.dataclasses.MultiBody attribute)

BaseMotion (class in pycram.designator)

batch_rollout() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp method)

bcolors (class in pycram.utils)

Behavior (class in pycram.fluent)

BelieveObject (class in pycram.designators.object_designator)

(class in pycram.orm.object_designator)


BelieveObject.Object (class in pycram.designators.object_designator)

bidirectional (pycram.world_concepts.constraints.Attachment attribute)

block_list (pycram.language.Language attribute)

(pycram.process_module.ProcessModule attribute)


blocking() (in module pycram.world_reasoning)

BOLD (pycram.utils.bcolors attribute)



BOTH (pycram.datastructures.enums.Arms attribute)

BOWL (pycram.datastructures.enums.ObjectType attribute)

BOX (pycram.datastructures.enums.Shape attribute)

BoxVisualShape (class in pycram.datastructures.dataclasses)

boxy_description (in module pycram.robot_descriptions.boxy_description)

BoxyClose (class in pycram.process_modules.boxy_process_modules)

BoxyDetecting (class in pycram.process_modules.boxy_process_modules)

BoxyManager (class in pycram.process_modules)

(class in pycram.process_modules.boxy_process_modules)


BoxyMoveArmJoints (class in pycram.process_modules.boxy_process_modules)

BoxyMoveGripper (class in pycram.process_modules.boxy_process_modules)

BoxyMoveHead (class in pycram.process_modules.boxy_process_modules)

BoxyMoveTCP (class in pycram.process_modules.boxy_process_modules)

BoxyNavigation (class in pycram.process_modules.boxy_process_modules)

BoxyOpen (class in pycram.process_modules.boxy_process_modules)

BoxyParkArms (class in pycram.process_modules.boxy_process_modules)

BoxyWorldStateDetecting (class in pycram.process_modules.boxy_process_modules)

BREAKFAST_CEREAL (pycram.datastructures.enums.ObjectType attribute)

browse_ontologies() (pycram.ontology.ontology.OntologyManager static method)

BulletWorld (class in pycram.worlds.bullet_world)



C


cache_dir (pycram.cache_manager.CacheManager attribute)

(pycram.datastructures.world.World attribute)

(pycram.World attribute)


cache_manager (pycram.datastructures.world.World attribute)

(pycram.World attribute)

(pycram.world_concepts.world_object.Object attribute)


CacheManager (class in pycram.cache_manager)

calculate_transform() (pycram.world_concepts.constraints.Attachment method)

call_ik() (in module pycram.external_interfaces.ik)

camera (in module pycram.robot_descriptions.boxy_description)

(in module pycram.robot_descriptions.donbot_description)

(in module pycram.robot_descriptions.pr2_description)

(in module pycram.robot_descriptions.tiago_description)


CameraDescription (class in pycram.robot_description)

cameras (pycram.robot_description.RobotDescription attribute)

cancel_nav() (in module pycram.external_interfaces.move_base)

CapabilityAbsenceFailure

CAPSULE (pycram.datastructures.enums.Shape attribute)

CapsuleVisualShape (class in pycram.datastructures.dataclasses)

center_event() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel method)

chains (pycram.robot_descriptions.DeprecatedRobotDescription property)

CHAIR (pycram.datastructures.enums.ImageEnum attribute)

check_constraints() (pycram.designator.Designator method)

check_for_equal() (pycram.datastructures.world.WorldSync method)

check_for_pause() (pycram.datastructures.world.WorldSync method)

check_with_extension() (pycram.cache_manager.CacheManager method)

check_without_extension() (pycram.cache_manager.CacheManager method)

child_frame_id (pycram.datastructures.pose.Transform attribute)

child_link (pycram.description.Joint property)

(pycram.world_concepts.constraints.AbstractConstraint attribute)


child_link_id (pycram.world_concepts.constraints.AbstractConstraint property)

child_link_name (pycram.description.JointDescription property)

(pycram.object_descriptors.generic.JointDescription property)

(pycram.object_descriptors.urdf.JointDescription property)


child_object_id (pycram.world_concepts.constraints.AbstractConstraint property)

child_to_constraint (pycram.world_concepts.constraints.AbstractConstraint attribute)

clear_all_marker() (pycram.ros.viz_marker_publisher.ManualMarkerPublisher method)

clear_beliefstate() (in module pycram.external_interfaces.knowrob)

CLOSE (pycram.datastructures.enums.GripperState attribute)

close() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.default_process_modules.DefaultManager method)

(pycram.process_modules.DefaultManager method)

(pycram.process_modules.hsrb_process_modules.HSRBManager method)

(pycram.process_modules.HSRBManager method)

(pycram.process_modules.pr2_process_modules.Pr2Manager method)

(pycram.process_modules.Pr2Manager method)

(pycram.process_modules.stretch_process_modules.StretchManager method)

(pycram.process_modules.StretchManager method)


close_visualization() (pycram.costmaps.Costmap method)

CloseAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


CloseActionPerformable (class in pycram.designators.action_designator)

ClosingMotion (class in pycram.designators.motion_designator)

(class in pycram.orm.motion_designator)


cmap (in module pycram.costmaps)

cmd (pycram.designators.motion_designator.TalkingMotion attribute)

Code (class in pycram.language)

coll_callbacks (pycram.datastructures.world.World attribute)

(pycram.World attribute)


collision (pycram.object_descriptors.urdf.LinkDescription property)

collision_check() (in module pycram.pose_generator_and_validator)

CollisionCallbacks (class in pycram.datastructures.dataclasses)

CollisionError

Color (class in pycram.datastructures.dataclasses)

(class in pycram.orm.base)


color (pycram.description.Link property)

(pycram.object_descriptors.generic.LinkDescription property)

(pycram.object_descriptors.generic.ObjectDescription property)

(pycram.world_concepts.world_object.Object attribute)


committed() (pycram.orm.base.ProcessMetaData method)

concept_holder_store (pycram.ontology.ontology_common.OntologyConceptHolder attribute)

ConfigurationNotReached

Constraint (class in pycram.world_concepts.constraints)

constraint_ids (pycram.datastructures.dataclasses.LinkState attribute)

(pycram.description.Link attribute)




contact() (in module pycram.world_reasoning)

contact_points() (pycram.world_concepts.world_object.Object method)

contact_points_simulated() (pycram.world_concepts.world_object.Object method)

CONTINUOUS (pycram.datastructures.enums.JointType attribute)

copy() (pycram.datastructures.pose.Pose method)

(pycram.datastructures.pose.Transform method)

(pycram.designator.Designator method)

(pycram.designator.DesignatorDescription method)


copy_database() (in module pycram.orm.utils)

copy_to_prospection() (pycram.world_concepts.world_object.Object method)

correct_urdf_string() (pycram.object_descriptors.urdf.ObjectDescription method)

Costmap (class in pycram.costmaps)

costmap (pycram.pose_generator_and_validator.PoseGenerator attribute)

CostmapLocation (class in pycram.designators.location_designator)

CostmapLocation.Location (class in pycram.designators.location_designator)

create_box_visual_shape() (pycram.datastructures.world.World method)

(pycram.World method)


create_cache_dir_if_not_exists() (pycram.cache_manager.CacheManager method)

create_capsule_visual_shape() (pycram.datastructures.world.World method)

(pycram.World method)


create_cylinder_visual_shape() (pycram.datastructures.world.World method)

(pycram.World method)


create_main_ontology() (pycram.ontology.ontology.OntologyManager method)

create_main_ontology_world() (pycram.ontology.ontology.OntologyManager method)

create_mesh_visual_shape() (pycram.datastructures.world.World method)

(pycram.World method)


create_model() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel method)

create_model_with_center() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel method)

create_multi_body() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


create_multi_body_from_visual_shapes() (pycram.datastructures.world.World method)

(pycram.World method)


create_nav_action_client() (in module pycram.external_interfaces.move_base)

create_occupancy_rectangles() (pycram.designators.specialized_designators.location.database_location.AbstractCostmapLocation method)

create_ontology_concept_class() (pycram.ontology.ontology.OntologyManager method)

create_ontology_linked_designator() (pycram.ontology.ontology.OntologyManager method)

create_ontology_linked_designator_by_concept() (pycram.ontology.ontology.OntologyManager method)

create_ontology_object_designator_from_type() (pycram.ontology.ontology.OntologyManager method)

create_ontology_property_class() (pycram.ontology.ontology.OntologyManager method)

create_ontology_triple_classes() (pycram.ontology.ontology.OntologyManager method)

create_ontology_world() (pycram.ontology.ontology.OntologyManager static method)

create_plane_visual_shape() (pycram.datastructures.world.World method)

(pycram.World method)


create_query_from_occupancy_costmap() (pycram.designators.specialized_designators.location.database_location.DatabaseCostmapLocation method)

create_rule_reflexivity() (pycram.ontology.ontology.OntologyManager method)

create_rule_symmetry() (pycram.ontology.ontology.OntologyManager method)

create_rule_transitivity() (pycram.ontology.ontology.OntologyManager method)

create_sphere_visual_shape() (pycram.datastructures.world.World method)

(pycram.World method)


create_sub_map() (pycram.costmaps.OccupancyCostmap method)

create_visual_shape() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


CREATED (pycram.datastructures.enums.TaskStatus attribute)

created_at (pycram.orm.base.ProcessMetaData attribute)

created_by (pycram.orm.base.ProcessMetaData attribute)

CreateView (class in pycram.orm.views)

current() (pycram.designator.Designator method)

current_id (pycram.ros.viz_marker_publisher.ManualMarkerPublisher attribute)

current_orientation_generator (pycram.pose_generator_and_validator.PoseGenerator attribute)

current_robot_description (pycram.robot_description.RobotDescription attribute)

current_state (pycram.datastructures.world.StateEntity property)

(pycram.datastructures.world.World property)

(pycram.description.Joint property)

(pycram.description.Link property)

(pycram.World property)

(pycram.world_concepts.world_object.Object property)


current_world (pycram.datastructures.world.World attribute)

(pycram.World attribute)


CUSTOM (pycram.datastructures.enums.GripperType attribute)

CYLINDER (pycram.datastructures.enums.Shape attribute)

CylinderVisualShape (class in pycram.datastructures.dataclasses)



D


damping (pycram.description.JointDescription property)

(pycram.object_descriptors.urdf.JointDescription property)


data_directory (pycram.cache_manager.CacheManager attribute)

(pycram.datastructures.world.World attribute)

(pycram.World attribute)


DatabaseCostmapLocation (class in pycram.designators.specialized_designators.location.database_location)

default_policy() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp method)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.ProbabilisticAction method)


DefaultClose (class in pycram.process_modules.default_process_modules)

DefaultDetecting (class in pycram.process_modules.default_process_modules)

DefaultManager (class in pycram.process_modules)

(class in pycram.process_modules.default_process_modules)


DefaultMoveArmJoints (class in pycram.process_modules.default_process_modules)

DefaultMoveGripper (class in pycram.process_modules.default_process_modules)

DefaultMoveHead (class in pycram.process_modules.default_process_modules)

DefaultMoveJoints (class in pycram.process_modules.default_process_modules)

DefaultMoveTCP (class in pycram.process_modules.default_process_modules)

DefaultNavigation (class in pycram.process_modules.default_process_modules)

DefaultOpen (class in pycram.process_modules.default_process_modules)

DefaultWorldStateDetecting (class in pycram.process_modules.default_process_modules)

DeliveringFailed

DeprecatedRobotDescription (class in pycram.robot_descriptions)

description (pycram.orm.base.ProcessMetaData attribute)

(pycram.world_concepts.world_object.Object attribute)


descriptions (pycram.robot_description.RobotDescriptionManager attribute)

Designator (class in pycram.designator)

(class in pycram.orm.base)


designator_description (pycram.failure_handling.FailureHandling attribute)

DesignatorDescription (class in pycram.designator)

DesignatorError

designators (pycram.ontology.ontology_common.OntologyConceptHolder attribute)

destroy_ontology_class() (pycram.ontology.ontology.OntologyManager static method)

detach() (pycram.world_concepts.world_object.Object method)

detach_all() (pycram.world_concepts.world_object.Object method)

DetectAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


DetectActionPerformable (class in pycram.designators.action_designator)

detecting() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.boxy_process_modules.BoxyManager method)

(pycram.process_modules.BoxyManager method)

(pycram.process_modules.default_process_modules.DefaultManager method)

(pycram.process_modules.DefaultManager method)

(pycram.process_modules.donbot_process_modules.DonbotManager method)

(pycram.process_modules.DonbotManager method)

(pycram.process_modules.hsrb_process_modules.HSRBManager method)

(pycram.process_modules.HSRBManager method)

(pycram.process_modules.pr2_process_modules.Pr2Manager method)

(pycram.process_modules.Pr2Manager method)

(pycram.process_modules.stretch_process_modules.StretchManager method)

(pycram.process_modules.StretchManager method)




DetectingMotion (class in pycram.designators.motion_designator)

(class in pycram.orm.motion_designator)


DIRECT (pycram.datastructures.enums.WorldMode attribute)

disable_force_torque_sensor() (pycram.description.Joint method)

disable_joint_force_torque_sensor() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


disconnect_from_physics_server() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


DISH (pycram.datastructures.enums.ImageEnum attribute)

dist() (pycram.datastructures.pose.Pose method)

distance (pycram.orm.motion_designator.AccessingMotion attribute)

distance_to_center (pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel attribute)

do_not_use_giskard (pycram.language.Language attribute)

donbot_description (in module pycram.robot_descriptions.donbot_description)

DonbotManager (class in pycram.process_modules)

(class in pycram.process_modules.donbot_process_modules)


DonbotMoveGripper (class in pycram.process_modules.donbot_process_modules)

DonbotMoveHead (class in pycram.process_modules.donbot_process_modules)

DonbotMoveJoints (class in pycram.process_modules.donbot_process_modules)

DonbotMoveTCP (class in pycram.process_modules.donbot_process_modules)

DonbotNavigation (class in pycram.process_modules.donbot_process_modules)

DonbotPlace (class in pycram.process_modules.donbot_process_modules)

DonbotWorldStateDetecting (class in pycram.process_modules.donbot_process_modules)

DONE (pycram.datastructures.enums.ImageEnum attribute)

drawer_handle (pycram.orm.motion_designator.AccessingMotion attribute)

drawer_joint (pycram.orm.motion_designator.AccessingMotion attribute)

DRIVINGBACK (pycram.datastructures.enums.ImageEnum attribute)

DROP (pycram.datastructures.enums.ImageEnum attribute)

DropView (class in pycram.orm.views)

dtype (pycram.orm.action_designator.Action attribute)

(pycram.orm.motion_designator.Motion attribute)

(pycram.orm.object_designator.Object attribute)


dtype() (pycram.orm.base.Designator method)

DualArmPickupAction (class in pycram.designators.specialized_designators.action.dual_arm_pickup_action)

dul (pycram.ontology.ontology.OntologyManager attribute)

DUL_ONTOLOGY_NAMESPACE (in module pycram.ontology.ontology)



E


effort (pycram.designators.action_designator.GripActionPerformable attribute)

(pycram.orm.action_designator.GripAction attribute)


efforts (pycram.designators.action_designator.GripAction attribute)

EMPTY_SET (pycram.designators.specialized_designators.probabilistic.probabilistic_action.Arms attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.Grasp attribute)


enable_force_torque_sensor() (pycram.description.Joint method)

enable_joint_force_torque_sensor() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


end_effector (pycram.robot_description.KinematicChainDescription attribute)

end_effector_type (pycram.robot_description.EndEffectorDescription attribute)

end_link (pycram.robot_description.KinematicChainDescription attribute)

end_time (pycram.orm.tasktree.TaskTreeNode attribute)

(pycram.tasktree.TaskTreeNode attribute)


ENDC (pycram.utils.bcolors attribute)

EndEffectorDescription (class in pycram.robot_description)

EndEffectorFailure

EntityDescription (class in pycram.description)

ENVIRONMENT (pycram.datastructures.enums.ObjectType attribute)

EnvironmentManipulationGoalNotReached



EnvironmentManipulationImpossible

EnvironmentUnreachable

equal() (pycram.designator.Designator method)

equal_states (pycram.datastructures.world.WorldSync attribute)

equate() (pycram.designator.Designator method)

error (pycram.designator.ResolutionError attribute)

Event (class in pycram.world_concepts.event)

events_from_occupancy_and_visibility_costmap() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp method)

exception_queue (pycram.language.Monitor attribute)

exceptions (pycram.language.Language attribute)

execute() (pycram.language.Code method)

(pycram.process_module.ProcessModule method)


executing_thread (pycram.language.Language attribute)

execution_delay (pycram.process_module.ProcessModule attribute)

execution_type (pycram.process_module.ProcessModuleManager attribute)

ExecutionType (class in pycram.datastructures.enums)

exit() (pycram.datastructures.world.World method)

(pycram.World method)


exit_prospection_world_if_exists() (pycram.datastructures.world.World method)

(pycram.World method)


extension (pycram.worlds.bullet_world.BulletWorld attribute)



F


FaceAtAction (class in pycram.orm.action_designator)

FaceAtPerformable (class in pycram.designators.action_designator)

FAIL (pycram.utils.bcolors attribute)

FAILED (pycram.datastructures.enums.State attribute)

(pycram.datastructures.enums.TaskStatus attribute)


FailureDiagnosis

FailureHandling (class in pycram.failure_handling)

FetchingFailed

file_name (pycram.datastructures.dataclasses.MeshVisualShape attribute)

filename (in module pycram.robot_descriptions.boxy_description)

(in module pycram.robot_descriptions.donbot_description)

(in module pycram.robot_descriptions.hsrb_description)

(in module pycram.robot_descriptions.pr2_description)

(in module pycram.robot_descriptions.stretch_description)

(in module pycram.robot_descriptions.tiago_description)

(in module pycram.robot_descriptions.turtlebot_description)

(in module pycram.robot_descriptions.ur5_description)


find_joint_above_link() (pycram.world_concepts.world_object.Object method)

FINGER (pycram.datastructures.enums.GripperType attribute)

fire() (pycram.world_concepts.event.Event method)

first() (pycram.designator.Designator method)

fix_link_attributes() (pycram.object_descriptors.urdf.ObjectDescription static method)

fix_missing_inertial() (pycram.object_descriptors.urdf.ObjectDescription static method)

FIXED (pycram.datastructures.enums.JointType attribute)

FLOATING (pycram.datastructures.enums.JointType attribute)



Fluent (class in pycram.fluent)

FOLLOWING (pycram.datastructures.enums.ImageEnum attribute)

FOLLOWSTOP (pycram.datastructures.enums.ImageEnum attribute)

for_object (pycram.designators.location_designator.SemanticCostmapLocation attribute)

ForceTorqueSensor (class in pycram.ros.force_torque_sensor)

frame (pycram.datastructures.pose.Pose property)

(pycram.datastructures.pose.Transform property)

(pycram.orm.base.Pose attribute)


frame_id (pycram.datastructures.pose.Pose attribute)

(pycram.datastructures.pose.Transform attribute)


friction (pycram.description.JointDescription property)

(pycram.object_descriptors.urdf.JointDescription property)


from_list() (pycram.datastructures.dataclasses.Color class method)

from_min_max() (pycram.datastructures.dataclasses.AxisAlignedBoundingBox class method)

from_pose_and_child_frame() (pycram.datastructures.pose.Transform class method)

from_pose_stamped() (pycram.datastructures.pose.Pose static method)

from_rgb() (pycram.datastructures.dataclasses.Color class method)

from_rgba() (pycram.datastructures.dataclasses.Color class method)

from_transform_stamped() (pycram.datastructures.pose.Transform static method)

FRONT (pycram.datastructures.enums.Grasp attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.Grasp attribute)


front_facing_axis (pycram.robot_description.CameraDescription attribute)

frozen_copy() (pycram.designator.ObjectDesignatorDescription.Object method)

fts_joint_idx (pycram.ros.force_torque_sensor.ForceTorqueSensor attribute)

fts_pub (pycram.ros.force_torque_sensor.ForceTorqueSensor attribute)

function (pycram.language.Code attribute)



G


G (pycram.datastructures.dataclasses.Color attribute)

g (pycram.orm.base.Color attribute)

gau (pycram.costmaps.GaussianCostmap attribute)

GaussianCostmap (class in pycram.costmaps)

GaussianCostmapModel (class in pycram.designators.specialized_designators.probabilistic.probabilistic_action)

generate_description_and_write_to_cache() (pycram.cache_manager.CacheManager method)

generate_description_from_file() (pycram.description.ObjectDescription method)

generate_from_description_file() (pycram.description.ObjectDescription class method)

(pycram.object_descriptors.generic.ObjectDescription class method)

(pycram.object_descriptors.urdf.ObjectDescription method)


generate_from_mesh_file() (pycram.description.ObjectDescription class method)

(pycram.object_descriptors.generic.ObjectDescription class method)

(pycram.object_descriptors.urdf.ObjectDescription method)


generate_from_parameter_server() (pycram.description.ObjectDescription class method)

(pycram.object_descriptors.generic.ObjectDescription class method)

(pycram.object_descriptors.urdf.ObjectDescription method)


generate_map() (pycram.costmaps.SemanticCostmap method)

generate_orientation() (pycram.pose_generator_and_validator.PoseGenerator static method)

GeneratorList (class in pycram.utils)

GENERIC_OBJECT (pycram.datastructures.enums.ObjectType attribute)

geometry (pycram.description.LinkDescription property)

(pycram.object_descriptors.generic.LinkDescription property)

(pycram.object_descriptors.urdf.LinkDescription property)


get() (pycram.utils.GeneratorList method)

get_aabb_for_link() (pycram.costmaps.SemanticCostmap method)

get_all_frames() (pycram.local_transformer.LocalTransformer method)

get_applied_joint_motor_torque() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


get_applied_motor_torque() (pycram.description.Joint method)

get_arm_chain() (pycram.robot_description.RobotDescription method)

get_axis_aligned_bounding_box() (pycram.description.Link method)

(pycram.world_concepts.world_object.Object method)


get_base_origin() (pycram.world_concepts.world_object.Object method)

get_base_position_as_list() (pycram.world_concepts.world_object.Object method)

get_camera_frame() (pycram.robot_description.RobotDescription method)

get_chain() (pycram.description.ObjectDescription method)

(pycram.object_descriptors.generic.ObjectDescription method)

(pycram.object_descriptors.urdf.ObjectDescription method)


get_child() (pycram.robot_description.RobotDescription method)

get_color() (pycram.world_concepts.world_object.Object method)

get_colors_of_object_links() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


get_contact_points_between_two_objects() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


get_default_camera() (pycram.robot_description.RobotDescription method)

get_default_designator() (pycram.ontology.ontology_common.OntologyConceptHolder method)

get_default_ontology_concept() (pycram.designator.DesignatorDescription method)

get_default_ontology_search_path() (pycram.ontology.ontology.OntologyManager static method)

get_designators_by_subject_predicate() (pycram.ontology.ontology.OntologyManager static method)

get_designators_of_ontology_concept() (pycram.ontology.ontology_common.OntologyConceptHolderStore method)

get_file_extension() (pycram.description.ObjectDescription static method)

(pycram.object_descriptors.generic.ObjectDescription static method)

(pycram.object_descriptors.urdf.ObjectDescription static method)


get_file_name() (pycram.description.ObjectDescription method)

get_gripper_group_names() (in module pycram.external_interfaces.giskard)

get_images_for_target() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


get_inverse() (pycram.world_concepts.constraints.Attachment method)

get_joint_axis() (pycram.world_concepts.world_object.Object method)

get_joint_by_id() (pycram.world_concepts.world_object.Object method)

get_joint_by_name() (pycram.description.ObjectDescription method)

(pycram.object_descriptors.generic.ObjectDescription method)

(pycram.object_descriptors.urdf.ObjectDescription method)


get_joint_child_link() (pycram.world_concepts.world_object.Object method)

get_joint_damping() (pycram.world_concepts.world_object.Object method)

get_joint_id() (pycram.world_concepts.world_object.Object method)

get_joint_limits() (pycram.world_concepts.world_object.Object method)

get_joint_lower_limit() (pycram.world_concepts.world_object.Object method)

get_joint_parent_link() (pycram.world_concepts.world_object.Object method)

get_joint_position() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.world_concepts.world_object.Object method)

(pycram.worlds.bullet_world.BulletWorld method)


get_joint_reaction_force_torque() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


get_joint_type() (pycram.world_concepts.world_object.Object method)

get_joint_upper_limit() (pycram.world_concepts.world_object.Object method)

get_joints() (pycram.robot_description.KinematicChainDescription method)

get_link() (pycram.world_concepts.world_object.Object method)

get_link_axis_aligned_bounding_box() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.world_concepts.world_object.Object method)

(pycram.worlds.bullet_world.BulletWorld method)


get_link_by_id() (pycram.world_concepts.world_object.Object method)

get_link_by_name() (pycram.description.ObjectDescription method)

(pycram.object_descriptors.generic.ObjectDescription method)

(pycram.object_descriptors.urdf.ObjectDescription method)


get_link_color() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.world_concepts.world_object.Object method)

(pycram.worlds.bullet_world.BulletWorld method)


get_link_geometry() (pycram.world_concepts.world_object.Object method)

get_link_id() (pycram.world_concepts.world_object.Object method)

get_link_orientation() (pycram.world_concepts.world_object.Object method)

get_link_orientation_as_list() (pycram.world_concepts.world_object.Object method)

get_link_origin() (pycram.world_concepts.world_object.Object method)

get_link_origin_transform() (pycram.world_concepts.world_object.Object method)

get_link_pose() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.world_concepts.world_object.Object method)

(pycram.worlds.bullet_world.BulletWorld method)


get_link_position() (pycram.world_concepts.world_object.Object method)

get_link_position_as_list() (pycram.world_concepts.world_object.Object method)

get_link_tf_frame() (pycram.world_concepts.world_object.Object method)

get_link_transform() (pycram.world_concepts.world_object.Object method)

get_links() (pycram.robot_description.KinematicChainDescription method)

get_main_ontology_dir() (pycram.ontology.ontology.OntologyManager method)

get_manager() (pycram.process_module.ProcessModuleManager static method)

get_manipulator_chains() (pycram.robot_description.RobotDescription method)

get_max() (pycram.datastructures.dataclasses.AxisAlignedBoundingBox method)

get_max_point() (pycram.datastructures.dataclasses.AxisAlignedBoundingBox method)

get_min() (pycram.datastructures.dataclasses.AxisAlignedBoundingBox method)

get_min_max() (pycram.datastructures.dataclasses.AxisAlignedBoundingBox method)

get_min_max_points() (pycram.datastructures.dataclasses.AxisAlignedBoundingBox method)

get_min_point() (pycram.datastructures.dataclasses.AxisAlignedBoundingBox method)

get_normalized_quaternion() (in module pycram.datastructures.pose)

get_object_axis_aligned_bounding_box() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


get_object_by_id() (pycram.datastructures.world.World method)

(pycram.World method)


get_object_by_name() (pycram.datastructures.world.World method)

(pycram.World method)


get_object_by_type() (pycram.datastructures.world.World method)

(pycram.World method)


get_object_contact_points() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)




get_object_for_prospection_object() (pycram.datastructures.world.World method)

(pycram.World method)


get_object_id() (pycram.description.Joint method)

get_object_joint_names() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


get_object_link_names() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


get_object_name_for_frame() (pycram.local_transformer.LocalTransformer method)

get_object_number_of_joints (pycram.worlds.bullet_world.BulletWorld attribute)

get_object_number_of_links() (pycram.worlds.bullet_world.BulletWorld method)

get_object_pose() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


get_ontology_class() (pycram.ontology.ontology.OntologyManager method)

get_ontology_class_by_ontology() (pycram.ontology.ontology.OntologyManager static method)

get_ontology_classes_by_condition() (pycram.ontology.ontology.OntologyManager method)

get_ontology_classes_by_namespace() (pycram.ontology.ontology.OntologyManager method)

get_ontology_classes_by_subname() (pycram.ontology.ontology.OntologyManager method)

get_ontology_concept_by_name() (pycram.ontology.ontology_common.OntologyConceptHolderStore method)

get_ontology_concept_holder_by_name() (pycram.ontology.ontology_common.OntologyConceptHolderStore method)

get_ontology_concept_holders_by_class() (pycram.ontology.ontology_common.OntologyConceptHolderStore method)

get_ontology_concepts_by_class() (pycram.ontology.ontology_common.OntologyConceptHolderStore method)

get_ontology_concepts_of_designator() (pycram.ontology.ontology_common.OntologyConceptHolderStore static method)

get_ontology_descendant_classes() (pycram.ontology.ontology.OntologyManager method)

get_ontology_general_class_axioms() (pycram.ontology.ontology.OntologyManager method)

get_orientation() (pycram.world_concepts.world_object.Object method)

get_orientation_as_list() (pycram.world_concepts.world_object.Object method)

get_origin_transform() (pycram.description.Link method)

get_parent() (pycram.robot_description.RobotDescription method)

get_point_as_list() (in module pycram.datastructures.dataclasses)

get_pose() (pycram.world_concepts.world_object.Object method)

get_pose_wrt_link() (pycram.description.Link method)

get_position() (pycram.world_concepts.world_object.Object method)

get_position_as_list() (pycram.world_concepts.world_object.Object method)

get_positions_of_all_joints() (pycram.world_concepts.world_object.Object method)

get_prospection_object_for_object() (pycram.datastructures.world.World method)

(pycram.World method)


get_pycram_version_from_git() (in module pycram.orm.base)

get_reaction_force_torque() (pycram.description.Joint method)

get_rgb() (pycram.datastructures.dataclasses.Color method)

get_rgba() (pycram.datastructures.dataclasses.Color method)

get_root() (pycram.description.ObjectDescription method)

(pycram.object_descriptors.generic.ObjectDescription method)

(pycram.object_descriptors.urdf.ObjectDescription method)


get_root_link_description() (pycram.world_concepts.world_object.Object method)

get_root_link_id() (pycram.world_concepts.world_object.Object method)

get_slots() (pycram.designator.DesignatorDescription method)

get_static_gripper_state() (pycram.robot_description.KinematicChainDescription method)

get_static_joint_chain() (pycram.robot_description.RobotDescription method)

get_static_joint_states() (pycram.robot_description.KinematicChainDescription method)

get_tool_frame() (pycram.robot_description.KinematicChainDescription method)

get_transform_between_links() (pycram.world_concepts.world_object.Object method)

get_transform_from_link() (pycram.description.Link method)

get_transform_to_link() (pycram.description.Link method)

get_value() (pycram.fluent.Fluent method)

get_visible_objects() (in module pycram.world_reasoning)

giskard_lock (in module pycram.external_interfaces.giskard)

giskard_rlock (in module pycram.external_interfaces.giskard)

giskard_update_service (in module pycram.external_interfaces.giskard)

giskard_wrapper (in module pycram.external_interfaces.giskard)

GiskardLocation (class in pycram.designators.specialized_designators.location.giskard_location)

Grasp (class in pycram.datastructures.enums)

(class in pycram.designators.specialized_designators.probabilistic.probabilistic_action)


grasp (pycram.designators.action_designator.MoveAndPickUpPerformable attribute)

(pycram.designators.action_designator.PickUpActionPerformable attribute)

(pycram.designators.specialized_designators.location.database_location.Location attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp.Variables attribute)

(pycram.orm.action_designator.PickUpAction attribute)


grasp_pose() (in module pycram.external_interfaces.knowrob)

Grasping

GraspingAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


GraspingActionPerformable (class in pycram.designators.action_designator)

grasps (pycram.designators.action_designator.PickUpAction attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp attribute)

(pycram.robot_description.RobotDescription attribute)


GripAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


GripActionPerformable (class in pycram.designators.action_designator)

gripper (in module pycram.robot_descriptions.ur5_description)

(pycram.designators.action_designator.GripActionPerformable attribute)

(pycram.designators.action_designator.ReleaseActionPerformable attribute)

(pycram.designators.action_designator.SetGripperActionPerformable attribute)

(pycram.designators.motion_designator.MoveGripperMotion attribute)

(pycram.orm.action_designator.GripAction attribute)

(pycram.orm.action_designator.Release attribute)

(pycram.orm.action_designator.SetGripperAction attribute)

(pycram.orm.motion_designator.AccessingMotion attribute)

(pycram.orm.motion_designator.MoveGripperMotion attribute)


gripper_description (in module pycram.robot_descriptions.stretch_description)

gripper_list (pycram.designators.specialized_designators.action.dual_arm_pickup_action.DualArmPickupAction attribute)

GripperClosedCompletely

GripperGoalNotReached

GripperLowLevelFailure

grippers (pycram.designators.action_designator.GripAction attribute)

(pycram.designators.action_designator.ReleaseAction attribute)

(pycram.designators.action_designator.SetGripperAction attribute)


GripperState (class in pycram.datastructures.enums)

GripperType (class in pycram.datastructures.enums)

ground() (pycram.designator.ActionDesignatorDescription method)

(pycram.designator.DesignatorDescription method)

(pycram.designator.LocationDesignatorDescription method)

(pycram.designator.ObjectDesignatorDescription method)

(pycram.designators.action_designator.CloseAction method)

(pycram.designators.action_designator.DetectAction method)

(pycram.designators.action_designator.GraspingAction method)

(pycram.designators.action_designator.GripAction method)

(pycram.designators.action_designator.LookAtAction method)

(pycram.designators.action_designator.MoveTorsoAction method)

(pycram.designators.action_designator.NavigateAction method)

(pycram.designators.action_designator.OpenAction method)

(pycram.designators.action_designator.ParkArmsAction method)

(pycram.designators.action_designator.PickUpAction method)

(pycram.designators.action_designator.PlaceAction method)

(pycram.designators.action_designator.ReleaseAction method)

(pycram.designators.action_designator.SetGripperAction method)

(pycram.designators.action_designator.TransportAction method)

(pycram.designators.location_designator.AccessingLocation method)

(pycram.designators.location_designator.CostmapLocation method)

(pycram.designators.location_designator.Location method)

(pycram.designators.location_designator.ObjectRelativeLocation method)

(pycram.designators.location_designator.SemanticCostmapLocation method)

(pycram.designators.object_designator.ObjectPart method)

(pycram.designators.specialized_designators.action.dual_arm_pickup_action.DualArmPickupAction method)


ground_model() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp method)

Gui (class in pycram.worlds.bullet_world)

GUI (pycram.datastructures.enums.WorldMode attribute)



H


half_extents (pycram.datastructures.dataclasses.BoxVisualShape attribute)

hand_camera (in module pycram.robot_descriptions.hsrb_description)

handle (pycram.designators.location_designator.AccessingLocation attribute)

handlers (pycram.world_concepts.event.Event attribute)

HANDOVER (pycram.datastructures.enums.ImageEnum attribute)

has() (pycram.utils.GeneratorList method)

has_designator() (pycram.ontology.ontology_common.OntologyConceptHolder method)

has_limits (pycram.description.JointDescription property)

(pycram.object_descriptors.generic.JointDescription property)

(pycram.object_descriptors.urdf.JointDescription property)


head (pycram.designator.ResolutionError attribute)

head_center_camera (in module pycram.robot_descriptions.hsrb_description)

head_l_camera (in module pycram.robot_descriptions.hsrb_description)

head_r_camera (in module pycram.robot_descriptions.hsrb_description)

head_rgbd_camera (in module pycram.robot_descriptions.hsrb_description)

HEADER (pycram.utils.bcolors attribute)

height (pycram.costmaps.Costmap attribute)

(pycram.costmaps.SemanticCostmap attribute)


height_generator() (pycram.pose_generator_and_validator.PoseGenerator static method)

HI (pycram.datastructures.enums.ImageEnum attribute)

HighLevelFailure



horizontal_angle (pycram.robot_description.CameraDescription attribute)

hsrb_description (in module pycram.robot_descriptions.hsrb_description)

HSRBCloseReal (class in pycram.process_modules.hsrb_process_modules)

HSRBDetecting (class in pycram.process_modules.hsrb_process_modules)

HSRBDetectingReal (class in pycram.process_modules.hsrb_process_modules)

HSRBManager (class in pycram.process_modules)

(class in pycram.process_modules.hsrb_process_modules)


HSRBMoveArmJointsReal (class in pycram.process_modules.hsrb_process_modules)

HSRBMoveGripperReal (class in pycram.process_modules.hsrb_process_modules)

HSRBMoveHeadReal (class in pycram.process_modules.hsrb_process_modules)

HSRBMoveJointsReal (class in pycram.process_modules.hsrb_process_modules)

HSRBMoveTCPReal (class in pycram.process_modules.hsrb_process_modules)

HSRBNavigation (class in pycram.process_modules.hsrb_process_modules)

HSRBNavigationReal (class in pycram.process_modules.hsrb_process_modules)

HSRBNavigationSemiReal (class in pycram.process_modules.hsrb_process_modules)

HSRBOpenReal (class in pycram.process_modules.hsrb_process_modules)

HSRBTalkReal (class in pycram.process_modules.hsrb_process_modules)

HSRBTalkSemiReal (class in pycram.process_modules.hsrb_process_modules)

HUMAN (pycram.datastructures.enums.ObjectType attribute)

(pycram.datastructures.enums.PerceptionTechniques attribute)


HYDRAULIC (pycram.datastructures.enums.GripperType attribute)



I


id (pycram.datastructures.world.World attribute)

(pycram.datastructures.world.WorldEntity attribute)

(pycram.orm.action_designator.Action attribute)

(pycram.orm.action_designator.CloseAction attribute)

(pycram.orm.action_designator.DetectAction attribute)

(pycram.orm.action_designator.FaceAtAction attribute)

(pycram.orm.action_designator.GraspingAction attribute)

(pycram.orm.action_designator.GripAction attribute)

(pycram.orm.action_designator.LookAtAction attribute)

(pycram.orm.action_designator.MoveTorsoAction attribute)

(pycram.orm.action_designator.NavigateAction attribute)

(pycram.orm.action_designator.OpenAction attribute)

(pycram.orm.action_designator.ParkArmsAction attribute)

(pycram.orm.action_designator.PickUpAction attribute)

(pycram.orm.action_designator.PlaceAction attribute)

(pycram.orm.action_designator.Release attribute)

(pycram.orm.action_designator.SetGripperAction attribute)

(pycram.orm.action_designator.TransportAction attribute)

(pycram.orm.base._Base attribute)

(pycram.orm.motion_designator.AccessingMotion attribute)

(pycram.orm.motion_designator.ClosingMotion attribute)

(pycram.orm.motion_designator.DetectingMotion attribute)

(pycram.orm.motion_designator.LookingMotion attribute)

(pycram.orm.motion_designator.Motion attribute)

(pycram.orm.motion_designator.MoveGripperMotion attribute)

(pycram.orm.motion_designator.MoveMotion attribute)

(pycram.orm.motion_designator.MoveTCPMotion attribute)

(pycram.orm.motion_designator.OpeningMotion attribute)

(pycram.orm.motion_designator.WorldStateDetectingMotion attribute)

(pycram.orm.object_designator.BelieveObject attribute)

(pycram.orm.object_designator.ObjectPart attribute)

(pycram.orm.tasktree.TaskTreeNode attribute)

(pycram.World attribute)

(pycram.world_concepts.constraints.Attachment attribute)


IKError

IllPosedGoalFailure

ImageEnum (class in pycram.datastructures.enums)

include_fixed_joints (pycram.robot_description.KinematicChainDescription attribute)

init_giskard_interface() (in module pycram.external_interfaces.giskard)

init_nav_interface() (in module pycram.external_interfaces.move_base)

init_ontology_concepts() (pycram.designator.ActionDesignatorDescription method)

init_robokudo_interface() (in module pycram.external_interfaces.robokudo)

init_tmc_interface() (in module pycram.external_interfaces.tmc)

initial_adding_objects() (in module pycram.external_interfaces.giskard)

initialized() (pycram.ontology.ontology.OntologyManager method)

insert() (pycram.datastructures.pose.Pose method)

(pycram.designator.ActionDesignatorDescription.Action method)

(pycram.designator.BaseMotion method)

(pycram.designator.ObjectDesignatorDescription.Object method)

(pycram.designators.action_designator.ActionAbstract method)

(pycram.designators.motion_designator.ClosingMotion method)

(pycram.designators.motion_designator.DetectingMotion method)

(pycram.designators.motion_designator.LookingMotion method)

(pycram.designators.motion_designator.MoveArmJointsMotion method)

(pycram.designators.motion_designator.MoveGripperMotion method)

(pycram.designators.motion_designator.MoveJointsMotion method)

(pycram.designators.motion_designator.MoveMotion method)

(pycram.designators.motion_designator.MoveTCPMotion method)

(pycram.designators.motion_designator.OpeningMotion method)

(pycram.designators.motion_designator.TalkingMotion method)

(pycram.designators.motion_designator.WorldStateDetectingMotion method)

(pycram.designators.object_designator.BelieveObject.Object method)

(pycram.designators.object_designator.ObjectPart.Object method)

(pycram.orm.base.ProcessMetaData method)

(pycram.tasktree.TaskTreeNode method)




INSPECT (pycram.datastructures.enums.ImageEnum attribute)

instances_of() (in module pycram.external_interfaces.knowrob)

interrupt() (pycram.language.Code method)

(pycram.language.Language method)

(pycram.language.Monitor method)

(pycram.language.Parallel method)

(pycram.language.Repeat method)

(pycram.language.Sequential method)

(pycram.language.TryAll method)

(pycram.language.TryInOrder method)


INTERRUPTED (pycram.datastructures.enums.State attribute)

interrupted (pycram.language.Language attribute)

interval (pycram.ros.force_torque_sensor.ForceTorqueSensor attribute)

(pycram.ros.joint_state_publisher.JointStatePublisher attribute)

(pycram.ros.tf_broadcaster.TFBroadcaster attribute)

(pycram.ros.viz_marker_publisher.ManualMarkerPublisher attribute)

(pycram.ros.viz_marker_publisher.VizMarkerPublisher attribute)


inverse_times() (pycram.datastructures.pose.Transform method)

invert() (pycram.datastructures.pose.Transform method)

IS() (pycram.fluent.Fluent method)

is_cached() (pycram.cache_manager.CacheManager method)

is_init (in module pycram.external_interfaces.giskard)

(in module pycram.external_interfaces.move_base)

(in module pycram.external_interfaces.robokudo)

(in module pycram.external_interfaces.tmc)


IS_NOT() (pycram.fluent.Fluent method)

is_prospection_world (pycram.datastructures.world.World attribute)

(pycram.World attribute)


is_reversed (pycram.world_concepts.constraints.Attachment property)

is_root (pycram.description.Link property)

iter_with_mode() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp method)

iterate_without_occupancy_costmap() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp method)



J


JEROEN_CUP (pycram.datastructures.enums.ObjectType attribute)

join_gui_thread_if_exists() (pycram.worlds.bullet_world.BulletWorld method)

join_threads() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


Joint (class in pycram.description)

(in module pycram.worlds.bullet_world)


joint_name (pycram.ros.force_torque_sensor.ForceTorqueSensor attribute)

joint_names (pycram.robot_description.EndEffectorDescription attribute)

(pycram.robot_description.KinematicChainDescription attribute)

(pycram.world_concepts.world_object.Object property)


joint_state_pub (pycram.ros.joint_state_publisher.JointStatePublisher attribute)

joint_state_timer (pycram.ros.robot_state_updater.RobotStateUpdater attribute)

joint_state_topic (pycram.ros.robot_state_updater.RobotStateUpdater attribute)

joint_states (pycram.datastructures.dataclasses.ObjectState attribute)

(pycram.world_concepts.world_object.Object property)




JointDescription (class in pycram.description)

(class in pycram.object_descriptors.generic)

(class in pycram.object_descriptors.urdf)


joints (pycram.description.ObjectDescription property)

(pycram.object_descriptors.generic.ObjectDescription property)

(pycram.object_descriptors.urdf.ObjectDescription property)

(pycram.robot_description.EndEffectorDescription property)

(pycram.robot_description.KinematicChainDescription property)

(pycram.robot_description.RobotDescription attribute)

(pycram.robot_descriptions.DeprecatedRobotDescription property)


JointState (class in pycram.datastructures.dataclasses)

JointStatePublisher (class in pycram.ros.joint_state_publisher)

JointType (class in pycram.datastructures.enums)

JREPEAT (pycram.datastructures.enums.ImageEnum attribute)



K


kill_event (pycram.language.Monitor attribute)

(pycram.ros.force_torque_sensor.ForceTorqueSensor attribute)

(pycram.ros.joint_state_publisher.JointStatePublisher attribute)

(pycram.ros.tf_broadcaster.TFBroadcaster attribute)

(pycram.ros.viz_marker_publisher.VizMarkerPublisher attribute)




kinematic_chains (pycram.robot_description.RobotDescription attribute)

KinematicChainDescription (class in pycram.robot_description)

knowrob_string_to_pose() (in module pycram.external_interfaces.knowrob)

kwargs (pycram.language.Code attribute)



L


Language (class in pycram.language)

LEFT (pycram.datastructures.enums.Arms attribute)

(pycram.datastructures.enums.Grasp attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.Arms attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.Grasp attribute)


left_arm (in module pycram.robot_descriptions.boxy_description)

(in module pycram.robot_descriptions.hsrb_description)

(in module pycram.robot_descriptions.pr2_description)

(in module pycram.robot_descriptions.tiago_description)


left_arm_poses (pycram.designators.motion_designator.MoveArmJointsMotion attribute)

left_gripper (in module pycram.robot_descriptions.boxy_description)

(in module pycram.robot_descriptions.hsrb_description)

(in module pycram.robot_descriptions.pr2_description)

(in module pycram.robot_descriptions.tiago_description)

(pycram.designators.specialized_designators.action.dual_arm_pickup_action.DualArmPickupAction attribute)


length (pycram.datastructures.dataclasses.CapsuleVisualShape attribute)

limits (pycram.description.JointDescription property)

Link (class in pycram.description)

(in module pycram.world_concepts.world_object)

(in module pycram.worlds.bullet_world)


link (pycram.costmaps.SemanticCostmap attribute)

link_collision_shape_indices (pycram.datastructures.dataclasses.MultiBody attribute)

link_inertial_frame_poses (pycram.datastructures.dataclasses.MultiBody attribute)

link_joint_axis (pycram.datastructures.dataclasses.MultiBody attribute)

link_joint_types (pycram.datastructures.dataclasses.MultiBody attribute)

link_masses (pycram.datastructures.dataclasses.MultiBody attribute)

link_name (pycram.robot_description.CameraDescription attribute)

link_names (pycram.robot_description.EndEffectorDescription attribute)

(pycram.robot_description.KinematicChainDescription attribute)

(pycram.world_concepts.world_object.Object property)


link_parent_indices (pycram.datastructures.dataclasses.MultiBody attribute)

link_pose_for_joint_config() (in module pycram.world_reasoning)

link_poses (pycram.datastructures.dataclasses.MultiBody attribute)

link_states (pycram.datastructures.dataclasses.ObjectState attribute)

(pycram.world_concepts.world_object.Object property)


link_visual_shape_indices (pycram.datastructures.dataclasses.MultiBody attribute)

LinkDescription (class in pycram.description)

(class in pycram.object_descriptors.generic)

(class in pycram.object_descriptors.urdf)


links (pycram.description.ObjectDescription property)

(pycram.object_descriptors.generic.ObjectDescription property)

(pycram.object_descriptors.urdf.ObjectDescription property)

(pycram.robot_description.EndEffectorDescription property)

(pycram.robot_description.KinematicChainDescription property)

(pycram.robot_description.RobotDescription attribute)


links_colors (pycram.world_concepts.world_object.Object property)

LinkState (class in pycram.datastructures.dataclasses)

load_beliefstate() (in module pycram.external_interfaces.knowrob)

load_description() (pycram.description.ObjectDescription method)

(pycram.object_descriptors.generic.ObjectDescription method)

(pycram.object_descriptors.urdf.ObjectDescription method)

(pycram.robot_description.RobotDescriptionManager method)




load_generic_object_and_get_id() (pycram.worlds.bullet_world.BulletWorld method)

load_object_and_get_id() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


load_ontology() (pycram.ontology.ontology.OntologyManager method)

load_owl() (in module pycram.external_interfaces.knowrob)

local_transformer (pycram.costmaps.Costmap attribute)

(pycram.datastructures.world.World attribute)

(pycram.description.Link attribute)

(pycram.World attribute)

(pycram.world_concepts.world_object.Object attribute)


LocalTransformer (class in pycram.local_transformer)

LocatedObject (class in pycram.designators.object_designator)

LocatedObject.Object (class in pycram.designators.object_designator)

Location (class in pycram.designators.location_designator)

(class in pycram.designators.specialized_designators.location.database_location)


Location.Location (class in pycram.designators.location_designator)

LocationDesignatorDescription (class in pycram.designator)

LocationDesignatorDescription.Location (class in pycram.designator)

lock (pycram.failure_handling.RetryMonitor attribute)

LocomotorFailure

log_message (pycram.ros.viz_marker_publisher.ManualMarkerPublisher attribute)

logger (in module pycram.external_interfaces.knowrob)

look_for_file_in_data_dir() (pycram.cache_manager.CacheManager method)

LookAtAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


LookAtActionPerformable (class in pycram.designators.action_designator)

Looking

looking() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.boxy_process_modules.BoxyManager method)

(pycram.process_modules.BoxyManager method)

(pycram.process_modules.default_process_modules.DefaultManager method)

(pycram.process_modules.DefaultManager method)

(pycram.process_modules.donbot_process_modules.DonbotManager method)

(pycram.process_modules.DonbotManager method)

(pycram.process_modules.hsrb_process_modules.HSRBManager method)

(pycram.process_modules.HSRBManager method)

(pycram.process_modules.pr2_process_modules.Pr2Manager method)

(pycram.process_modules.Pr2Manager method)

(pycram.process_modules.stretch_process_modules.StretchManager method)

(pycram.process_modules.StretchManager method)


LookingHighLevelFailure

LookingMotion (class in pycram.designators.motion_designator)

(class in pycram.orm.motion_designator)


lookup_transform_from_source_to_target_frame() (pycram.local_transformer.LocalTransformer method)

loose (pycram.world_concepts.constraints.Attachment property)

lower_limit (pycram.description.JointDescription property)

(pycram.object_descriptors.generic.JointDescription property)

(pycram.object_descriptors.urdf.JointDescription property)


LowLevelFailure



M


main_ontology (pycram.ontology.ontology.OntologyManager attribute)

main_ontology_iri (pycram.ontology.ontology.OntologyManager attribute)

main_ontology_namespace (pycram.ontology.ontology.OntologyManager attribute)

main_ontology_world (pycram.ontology.ontology.OntologyManager attribute)

main_world (pycram.ros.viz_marker_publisher.VizMarkerPublisher attribute)

make_dictionary() (pycram.designator.Designator method)

(pycram.designator.DesignatorDescription method)


make_effective() (pycram.designator.Designator method)

make_point_stamped() (in module pycram.external_interfaces.giskard)

make_quaternion_stamped() (in module pycram.external_interfaces.giskard)

make_vector_stamped() (in module pycram.external_interfaces.giskard)

make_world_body() (in module pycram.external_interfaces.giskard)

ManipulationGoalInCollision

ManipulationGoalNotReached

ManipulationLowLevelFailure

ManipulationPoseUnreachable

ManualMarkerPublisher (class in pycram.ros.viz_marker_publisher)

map (pycram.costmaps.Costmap attribute)

(pycram.costmaps.GaussianCostmap attribute)

(pycram.costmaps.SemanticCostmap attribute)

(pycram.costmaps.VisibilityCostmap attribute)


MapperArgsMixin (class in pycram.orm.base)

marker_array (pycram.ros.viz_marker_publisher.ManualMarkerPublisher attribute)

marker_array_pub (pycram.ros.viz_marker_publisher.ManualMarkerPublisher attribute)

marker_overview (pycram.ros.viz_marker_publisher.ManualMarkerPublisher attribute)

max_height (pycram.costmaps.VisibilityCostmap attribute)

max_tries (pycram.failure_handling.Retry attribute)

(pycram.failure_handling.RetryMonitor attribute)


max_x (pycram.datastructures.dataclasses.AxisAlignedBoundingBox attribute)

max_y (pycram.datastructures.dataclasses.AxisAlignedBoundingBox attribute)

max_z (pycram.datastructures.dataclasses.AxisAlignedBoundingBox attribute)

maximal_height (pycram.robot_description.CameraDescription attribute)

merge() (pycram.costmaps.Costmap method)

merge_nodes() (pycram.language.Language static method)

MESH (pycram.datastructures.enums.Shape attribute)

mesh_extensions (pycram.cache_manager.CacheManager attribute)

(pycram.description.ObjectDescription attribute)


MeshVisualShape (class in pycram.datastructures.dataclasses)

message (pycram.designator.ResolutionError attribute)

(pycram.plan_failures.IKError attribute)


METALMUG (pycram.datastructures.enums.ObjectType attribute)

migrate_neems() (in module pycram.orm.utils)

MILK (pycram.datastructures.enums.ObjectType attribute)

min_height (pycram.costmaps.VisibilityCostmap attribute)

min_x (pycram.datastructures.dataclasses.AxisAlignedBoundingBox attribute)

min_y (pycram.datastructures.dataclasses.AxisAlignedBoundingBox attribute)

min_z (pycram.datastructures.dataclasses.AxisAlignedBoundingBox attribute)

minimal_height (pycram.robot_description.CameraDescription attribute)

missing (pycram.designator.ResolutionError attribute)

mode (pycram.datastructures.world.World attribute)

(pycram.World attribute)

(pycram.worlds.bullet_world.Gui attribute)



    module

      
pycram

pycram.cache_manager

pycram.costmaps

pycram.datastructures

pycram.datastructures.dataclasses

pycram.datastructures.enums

pycram.datastructures.pose

pycram.datastructures.world

pycram.description

pycram.designator

pycram.designators

pycram.designators.action_designator

pycram.designators.location_designator

pycram.designators.motion_designator

pycram.designators.object_designator

pycram.designators.specialized_designators

pycram.designators.specialized_designators.action

pycram.designators.specialized_designators.action.dual_arm_pickup_action

pycram.designators.specialized_designators.location

pycram.designators.specialized_designators.location.database_location

pycram.designators.specialized_designators.location.giskard_location

pycram.designators.specialized_designators.probabilistic

pycram.designators.specialized_designators.probabilistic.probabilistic_action

pycram.external_interfaces

pycram.external_interfaces.giskard

pycram.external_interfaces.ik

pycram.external_interfaces.knowrob

pycram.external_interfaces.move_base

pycram.external_interfaces.robokudo

pycram.external_interfaces.tmc

pycram.failure_handling

pycram.fluent

pycram.helper

pycram.language

pycram.local_transformer

pycram.object_descriptors

pycram.object_descriptors.generic

pycram.object_descriptors.urdf

pycram.ontology

pycram.ontology.ontology

pycram.ontology.ontology_common

pycram.orm

pycram.orm.action_designator

pycram.orm.base

pycram.orm.motion_designator

pycram.orm.object_designator

pycram.orm.tasktree

pycram.orm.utils

pycram.orm.views

pycram.plan_failures

pycram.pose_generator_and_validator

pycram.process_module

pycram.process_modules

pycram.process_modules.boxy_process_modules

pycram.process_modules.default_process_modules

pycram.process_modules.donbot_process_modules

pycram.process_modules.hsrb_process_modules

pycram.process_modules.pr2_process_modules

pycram.process_modules.stretch_process_modules

pycram.robot_description

pycram.robot_descriptions

pycram.robot_descriptions.boxy_description

pycram.robot_descriptions.donbot_description

pycram.robot_descriptions.hsrb_description

pycram.robot_descriptions.pr2_description

pycram.robot_descriptions.stretch_description

pycram.robot_descriptions.tiago_description

pycram.robot_descriptions.turtlebot_description

pycram.robot_descriptions.ur5_description

pycram.ros

pycram.ros.force_torque_sensor

pycram.ros.joint_state_publisher

pycram.ros.robot_state_updater

pycram.ros.tf_broadcaster

pycram.ros.viz_marker_publisher

pycram.tasktree

pycram.utils

pycram.world_concepts

pycram.world_concepts.constraints

pycram.world_concepts.event

pycram.world_concepts.world_object

pycram.world_reasoning

pycram.worlds

pycram.worlds.bullet_world




modules (in module pycram.robot_descriptions)

Monitor (class in pycram.language)

Motion (class in pycram.orm.motion_designator)

motion (pycram.designators.action_designator.SetGripperActionPerformable attribute)

(pycram.designators.motion_designator.MoveGripperMotion attribute)

(pycram.orm.action_designator.SetGripperAction attribute)

(pycram.orm.motion_designator.MoveGripperMotion attribute)


motions (pycram.designators.action_designator.SetGripperAction attribute)

move_arm_joints() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.boxy_process_modules.BoxyManager method)

(pycram.process_modules.BoxyManager method)

(pycram.process_modules.default_process_modules.DefaultManager method)

(pycram.process_modules.DefaultManager method)

(pycram.process_modules.donbot_process_modules.DonbotManager method)

(pycram.process_modules.DonbotManager method)

(pycram.process_modules.hsrb_process_modules.HSRBManager method)

(pycram.process_modules.HSRBManager method)

(pycram.process_modules.pr2_process_modules.Pr2Manager method)

(pycram.process_modules.Pr2Manager method)

(pycram.process_modules.stretch_process_modules.StretchManager method)

(pycram.process_modules.StretchManager method)


move_base_to_origin_pose() (pycram.world_concepts.world_object.Object method)

move_gripper() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.boxy_process_modules.BoxyManager method)

(pycram.process_modules.BoxyManager method)

(pycram.process_modules.default_process_modules.DefaultManager method)

(pycram.process_modules.DefaultManager method)

(pycram.process_modules.donbot_process_modules.DonbotManager method)

(pycram.process_modules.DonbotManager method)

(pycram.process_modules.hsrb_process_modules.HSRBManager method)

(pycram.process_modules.HSRBManager method)

(pycram.process_modules.pr2_process_modules.Pr2Manager method)

(pycram.process_modules.Pr2Manager method)

(pycram.process_modules.stretch_process_modules.StretchManager method)

(pycram.process_modules.StretchManager method)


move_joints() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.default_process_modules.DefaultManager method)

(pycram.process_modules.DefaultManager method)

(pycram.process_modules.hsrb_process_modules.HSRBManager method)

(pycram.process_modules.HSRBManager method)

(pycram.process_modules.pr2_process_modules.Pr2Manager method)

(pycram.process_modules.Pr2Manager method)

(pycram.process_modules.stretch_process_modules.StretchManager method)

(pycram.process_modules.StretchManager method)


move_tcp() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.boxy_process_modules.BoxyManager method)

(pycram.process_modules.BoxyManager method)

(pycram.process_modules.default_process_modules.DefaultManager method)

(pycram.process_modules.DefaultManager method)

(pycram.process_modules.donbot_process_modules.DonbotManager method)

(pycram.process_modules.DonbotManager method)

(pycram.process_modules.hsrb_process_modules.HSRBManager method)

(pycram.process_modules.HSRBManager method)

(pycram.process_modules.pr2_process_modules.Pr2Manager method)

(pycram.process_modules.Pr2Manager method)

(pycram.process_modules.stretch_process_modules.StretchManager method)

(pycram.process_modules.StretchManager method)


MoveAndPickUp (class in pycram.designators.specialized_designators.probabilistic.probabilistic_action)

MoveAndPickUp.Variables (class in pycram.designators.specialized_designators.probabilistic.probabilistic_action)

MoveAndPickUpPerformable (class in pycram.designators.action_designator)

MoveArmJointsMotion (class in pycram.designators.motion_designator)

MoveGripperMotion (class in pycram.designators.motion_designator)

(class in pycram.orm.motion_designator)


MoveJointsMotion (class in pycram.designators.motion_designator)

MoveMotion (class in pycram.designators.motion_designator)

(class in pycram.orm.motion_designator)


MoveTCPMotion (class in pycram.designators.motion_designator)

(class in pycram.orm.motion_designator)


MoveTorsoAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


MoveTorsoActionPerformable (class in pycram.designators.action_designator)

MultiBody (class in pycram.datastructures.dataclasses)

multiply_quaternions() (pycram.datastructures.pose.Pose method)



N


name (pycram.description.EntityDescription property)

(pycram.designator.ObjectDesignatorDescription.Object attribute)

(pycram.language.Language attribute)

(pycram.object_descriptors.generic.JointDescription property)

(pycram.object_descriptors.generic.LinkDescription property)

(pycram.object_descriptors.generic.ObjectDescription property)

(pycram.object_descriptors.urdf.JointDescription property)

(pycram.object_descriptors.urdf.LinkDescription property)

(pycram.object_descriptors.urdf.ObjectDescription property)

(pycram.ontology.ontology_common.OntologyConceptHolder property)

(pycram.orm.object_designator.Object attribute)

(pycram.orm.views.CreateView attribute)

(pycram.orm.views.DropView attribute)

(pycram.robot_description.CameraDescription attribute)

(pycram.robot_description.EndEffectorDescription attribute)

(pycram.robot_description.KinematicChainDescription attribute)

(pycram.robot_description.RobotDescription attribute)

(pycram.robot_descriptions.DeprecatedRobotDescription property)

(pycram.tasktree.TaskTreeNode property)

(pycram.world_concepts.world_object.Object attribute)


names (pycram.designator.ObjectDesignatorDescription attribute)

(pycram.designators.motion_designator.MoveJointsMotion attribute)

(pycram.designators.object_designator.ObjectPart attribute)

(pycram.designators.object_designator.RealObject attribute)


nav_action_client (in module pycram.external_interfaces.move_base)

navigate() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.boxy_process_modules.BoxyManager method)

(pycram.process_modules.BoxyManager method)

(pycram.process_modules.default_process_modules.DefaultManager method)

(pycram.process_modules.DefaultManager method)

(pycram.process_modules.donbot_process_modules.DonbotManager method)

(pycram.process_modules.DonbotManager method)

(pycram.process_modules.hsrb_process_modules.HSRBManager method)

(pycram.process_modules.HSRBManager method)

(pycram.process_modules.pr2_process_modules.Pr2Manager method)

(pycram.process_modules.Pr2Manager method)

(pycram.process_modules.stretch_process_modules.StretchManager method)

(pycram.process_modules.StretchManager method)




NavigateAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


NavigateActionPerformable (class in pycram.designators.action_designator)

NavigationGoalInCollision

NavigationGoalNotReached

NavigationHighLevelFailure

NavigationLowLevelFailure

NavigationPoseUnreachable

neck (in module pycram.robot_descriptions.hsrb_description)

(in module pycram.robot_descriptions.stretch_description)


neem_interface (in module pycram.external_interfaces.knowrob)

NEVER (pycram.fluent.Behavior attribute)

new_iri() (in module pycram.external_interfaces.knowrob)

newest_effective() (pycram.designator.Designator method)

next_solution() (pycram.designator.Designator method)

no_collision_cb (pycram.datastructures.dataclasses.CollisionCallbacks attribute)

NoOperation (class in pycram.tasktree)

normal (pycram.datastructures.dataclasses.PlaneVisualShape attribute)

NOT() (pycram.fluent.Fluent method)

NotALanguageExpression

null_fds (pycram.utils.suppress_stdout_stderr attribute)

number_of_par_goals (in module pycram.external_interfaces.giskard)

(in module pycram.external_interfaces.robokudo)


number_of_samples (pycram.pose_generator_and_validator.PoseGenerator attribute)



O


obj_type (pycram.designator.ObjectDesignatorDescription.Object attribute)

(pycram.orm.object_designator.Object attribute)

(pycram.world_concepts.world_object.Object attribute)


Object (class in pycram.orm.object_designator)

(class in pycram.world_concepts.world_object)


object (pycram.costmaps.SemanticCostmap attribute)

(pycram.description.ObjectEntity attribute)

(pycram.orm.motion_designator.AccessingMotion attribute)


object() (pycram.orm.object_designator.ObjectMixin method)

object_at_execution (pycram.designators.action_designator.PickUpActionPerformable attribute)

object_description (pycram.designators.action_designator.GraspingAction attribute)

object_desig (pycram.designators.action_designator.GraspingActionPerformable attribute)

object_designator (pycram.designators.action_designator.CloseActionPerformable attribute)

(pycram.designators.action_designator.DetectActionPerformable attribute)

(pycram.designators.action_designator.GripActionPerformable attribute)

(pycram.designators.action_designator.MoveAndPickUpPerformable attribute)

(pycram.designators.action_designator.OpenActionPerformable attribute)

(pycram.designators.action_designator.PickUpActionPerformable attribute)

(pycram.designators.action_designator.PlaceActionPerformable attribute)

(pycram.designators.action_designator.ReleaseActionPerformable attribute)

(pycram.designators.action_designator.TransportActionPerformable attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp attribute)


object_designator_description (pycram.designators.action_designator.CloseAction attribute)

(pycram.designators.action_designator.DetectAction attribute)

(pycram.designators.action_designator.GripAction attribute)

(pycram.designators.action_designator.OpenAction attribute)

(pycram.designators.action_designator.PickUpAction attribute)

(pycram.designators.action_designator.PlaceAction attribute)

(pycram.designators.action_designator.ReleaseAction attribute)

(pycram.designators.action_designator.TransportAction attribute)

(pycram.designators.specialized_designators.action.dual_arm_pickup_action.DualArmPickupAction attribute)


object_id (pycram.description.ObjectEntity property)

object_id() (pycram.orm.object_designator.ObjectMixin method)

object_mapping (pycram.datastructures.world.WorldSync attribute)

object_part (pycram.designators.motion_designator.ClosingMotion attribute)

(pycram.designators.motion_designator.OpeningMotion attribute)


object_pose() (in module pycram.external_interfaces.knowrob)

object_states (pycram.datastructures.dataclasses.WorldState attribute)

(pycram.datastructures.world.World property)

(pycram.World property)


object_to_init (pycram.orm.object_designator.ObjectMixin attribute)

object_type (pycram.designators.motion_designator.DetectingMotion attribute)

(pycram.designators.motion_designator.WorldStateDetectingMotion attribute)

(pycram.orm.motion_designator.DetectingMotion attribute)

(pycram.orm.motion_designator.WorldStateDetectingMotion attribute)


object_type() (in module pycram.external_interfaces.knowrob)

ObjectDescription (class in pycram.description)

(class in pycram.object_descriptors.generic)

(class in pycram.object_descriptors.urdf)


ObjectDescription.Joint (class in pycram.description)

(class in pycram.object_descriptors.generic)

(class in pycram.object_descriptors.urdf)


ObjectDescription.Link (class in pycram.description)

(class in pycram.object_descriptors.generic)

(class in pycram.object_descriptors.urdf)


ObjectDescription.RootLink (class in pycram.description)

(class in pycram.object_descriptors.generic)

(class in pycram.object_descriptors.urdf)


ObjectDesignatorDescription (class in pycram.designator)

ObjectDesignatorDescription.Object (class in pycram.designator)

ObjectEntity (class in pycram.description)

ObjectLost

ObjectMixin (class in pycram.orm.object_designator)

ObjectNotFound

ObjectNowhereToBeFound

ObjectPart (class in pycram.designators.object_designator)

(class in pycram.orm.object_designator)


ObjectPart.Object (class in pycram.designators.object_designator)

ObjectPoseMisestimation

ObjectRelativeLocation (class in pycram.designators.location_designator)

ObjectRelativeLocation.Location (class in pycram.designators.location_designator)

objects (pycram.datastructures.world.World attribute)

(pycram.World attribute)


ObjectState (class in pycram.datastructures.dataclasses)

ObjectType (class in pycram.datastructures.enums)

ObjectUnavailable



ObjectUndeliverable

ObjectUnfetchable

ObjectUnreachable

occluding() (in module pycram.world_reasoning)

OccupancyCostmap (class in pycram.costmaps)

odom_frame (pycram.ros.tf_broadcaster.TFBroadcaster attribute)

OKBLUE (pycram.utils.bcolors attribute)

OKCYAN (pycram.utils.bcolors attribute)

OKGREEN (pycram.utils.bcolors attribute)

on_collision_cb (pycram.datastructures.dataclasses.CollisionCallbacks attribute)

ONCE (pycram.fluent.Behavior attribute)

once() (in module pycram.external_interfaces.knowrob)

ontologies (pycram.ontology.ontology.OntologyManager attribute)

ontology_concept (pycram.ontology.ontology_common.OntologyConceptHolder attribute)

ontology_concept_holders (pycram.designator.DesignatorDescription attribute)

ONTOLOGY_OWL_FILE_EXTENSION (in module pycram.ontology.ontology_common)

ONTOLOGY_SQL_BACKEND_FILE_EXTENSION (in module pycram.ontology.ontology_common)

OntologyConceptHolder (class in pycram.ontology.ontology_common)

OntologyConceptHolderStore (class in pycram.ontology.ontology_common)

OntologyManager (class in pycram.ontology.ontology)

OPEN (pycram.datastructures.enums.GripperState attribute)

open() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.default_process_modules.DefaultManager method)

(pycram.process_modules.DefaultManager method)

(pycram.process_modules.hsrb_process_modules.HSRBManager method)

(pycram.process_modules.HSRBManager method)

(pycram.process_modules.pr2_process_modules.Pr2Manager method)

(pycram.process_modules.Pr2Manager method)

(pycram.process_modules.stretch_process_modules.StretchManager method)

(pycram.process_modules.StretchManager method)


OpenAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


OpenActionPerformable (class in pycram.designators.action_designator)

opening_distance (pycram.robot_description.EndEffectorDescription attribute)

OpeningMotion (class in pycram.designators.motion_designator)

(class in pycram.orm.motion_designator)


OR() (pycram.fluent.Fluent method)

ORDER (pycram.datastructures.enums.ImageEnum attribute)

orientation (pycram.datastructures.pose.Pose property)

(pycram.description.Link property)


orientation() (pycram.orm.base.QuaternionMixin method)

orientation_as_list (pycram.description.Link property)

orientation_as_list() (pycram.datastructures.pose.Pose method)

orientation_generator (pycram.pose_generator_and_validator.PoseGenerator attribute)

orientation_id() (pycram.orm.base.QuaternionMixin method)

orientation_to_init (pycram.orm.base.QuaternionMixin attribute)

orientation_wrt_child_as_list (pycram.world_concepts.constraints.AbstractConstraint property)

orientation_wrt_parent_as_list (pycram.world_concepts.constraints.AbstractConstraint property)

origin (pycram.costmaps.Costmap attribute)

(pycram.costmaps.GaussianCostmap attribute)

(pycram.costmaps.SemanticCostmap attribute)

(pycram.costmaps.VisibilityCostmap attribute)

(pycram.description.EntityDescription property)

(pycram.object_descriptors.generic.JointDescription property)

(pycram.object_descriptors.generic.LinkDescription property)

(pycram.object_descriptors.generic.ObjectDescription property)

(pycram.object_descriptors.urdf.JointDescription property)

(pycram.object_descriptors.urdf.LinkDescription property)

(pycram.object_descriptors.urdf.ObjectDescription property)


origin_transform (pycram.description.Link property)

original_pose (pycram.world_concepts.world_object.Object attribute)

orm_class (pycram.designators.action_designator.ActionAbstract attribute)

(pycram.designators.action_designator.CloseActionPerformable attribute)

(pycram.designators.action_designator.DetectActionPerformable attribute)

(pycram.designators.action_designator.FaceAtPerformable attribute)

(pycram.designators.action_designator.GraspingActionPerformable attribute)

(pycram.designators.action_designator.LookAtActionPerformable attribute)

(pycram.designators.action_designator.MoveTorsoActionPerformable attribute)

(pycram.designators.action_designator.NavigateActionPerformable attribute)

(pycram.designators.action_designator.OpenActionPerformable attribute)

(pycram.designators.action_designator.ParkArmsActionPerformable attribute)

(pycram.designators.action_designator.PickUpActionPerformable attribute)

(pycram.designators.action_designator.PlaceActionPerformable attribute)

(pycram.designators.action_designator.SetGripperActionPerformable attribute)

(pycram.designators.action_designator.TransportActionPerformable attribute)


override_orientation_generator (pycram.pose_generator_and_validator.PoseGenerator attribute)

owlready2 (in module pycram.designator)



P


par_threads (in module pycram.external_interfaces.giskard)

(in module pycram.external_interfaces.robokudo)


Parallel (class in pycram.language)

PARALLEL (pycram.datastructures.enums.GripperType attribute)

parallel_blocklist (pycram.language.Language attribute)

parent (pycram.language.Language attribute)

(pycram.orm.tasktree.TaskTreeNode attribute)

(pycram.tasktree.TaskTreeNode attribute)


parent_id (pycram.orm.tasktree.TaskTreeNode attribute)

parent_link (pycram.description.Joint property)

(pycram.world_concepts.constraints.AbstractConstraint attribute)


parent_link_id (pycram.world_concepts.constraints.AbstractConstraint property)

parent_link_name (pycram.description.JointDescription property)

(pycram.object_descriptors.generic.JointDescription property)

(pycram.object_descriptors.urdf.JointDescription property)


parent_object_id (pycram.world_concepts.constraints.AbstractConstraint property)

parent_to_child_transform (pycram.world_concepts.constraints.AbstractConstraint property)

parent_to_constraint (pycram.world_concepts.constraints.AbstractConstraint attribute)

(pycram.world_concepts.constraints.Constraint attribute)


ParkArmsAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


ParkArmsActionPerformable (class in pycram.designators.action_designator)

parsed_description (pycram.description.JointDescription attribute)

(pycram.description.LinkDescription attribute)

(pycram.description.ObjectDescription property)

(pycram.object_descriptors.generic.LinkDescription attribute)


part_of (pycram.designators.location_designator.SemanticCostmapLocation attribute)

(pycram.designators.object_designator.ObjectPart attribute)

(pycram.orm.motion_designator.AccessingMotion attribute)


part_pose (pycram.designators.object_designator.ObjectPart.Object attribute)

partitioning_rectangles() (pycram.costmaps.Costmap method)

pause_sync (pycram.datastructures.world.WorldSync attribute)

PerceptionLowLevelFailure

PerceptionObjectNotFound

PerceptionObjectNotInWorld

PerceptionTechniques (class in pycram.datastructures.enums)

perform (pycram.language.Code attribute)

perform() (pycram.designator.ActionDesignatorDescription.Action method)

(pycram.designator.BaseMotion method)

(pycram.designators.action_designator.ActionAbstract method)

(pycram.designators.action_designator.CloseActionPerformable method)

(pycram.designators.action_designator.DetectActionPerformable method)

(pycram.designators.action_designator.FaceAtPerformable method)

(pycram.designators.action_designator.GraspingActionPerformable method)

(pycram.designators.action_designator.GripActionPerformable method)

(pycram.designators.action_designator.LookAtActionPerformable method)

(pycram.designators.action_designator.MoveAndPickUpPerformable method)

(pycram.designators.action_designator.MoveTorsoActionPerformable method)

(pycram.designators.action_designator.NavigateActionPerformable method)

(pycram.designators.action_designator.OpenActionPerformable method)

(pycram.designators.action_designator.ParkArmsActionPerformable method)

(pycram.designators.action_designator.PickUpActionPerformable method)

(pycram.designators.action_designator.PlaceActionPerformable method)

(pycram.designators.action_designator.ReleaseActionPerformable method)

(pycram.designators.action_designator.SetGripperActionPerformable method)

(pycram.designators.action_designator.TransportActionPerformable method)

(pycram.designators.motion_designator.ClosingMotion method)

(pycram.designators.motion_designator.DetectingMotion method)

(pycram.designators.motion_designator.LookingMotion method)

(pycram.designators.motion_designator.MoveArmJointsMotion method)

(pycram.designators.motion_designator.MoveGripperMotion method)

(pycram.designators.motion_designator.MoveJointsMotion method)

(pycram.designators.motion_designator.MoveMotion method)

(pycram.designators.motion_designator.MoveTCPMotion method)

(pycram.designators.motion_designator.OpeningMotion method)

(pycram.designators.motion_designator.TalkingMotion method)

(pycram.designators.motion_designator.WorldStateDetectingMotion method)

(pycram.failure_handling.FailureHandling method)

(pycram.failure_handling.Retry method)

(pycram.failure_handling.RetryMonitor method)

(pycram.language.Language method)

(pycram.language.Monitor method)

(pycram.language.Parallel method)

(pycram.language.Repeat method)

(pycram.language.Sequential method)

(pycram.language.TryAll method)

(pycram.language.TryInOrder method)

(pycram.tasktree.NoOperation method)


perform_collision_detection() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


pick_up() (pycram.process_module.ProcessModuleManager method)

PICKING (pycram.datastructures.enums.ImageEnum attribute)

PickUpAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


PickUpActionPerformable (class in pycram.designators.action_designator)

PickUpWithContextView (class in pycram.orm.views)

place() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.donbot_process_modules.DonbotManager method)

(pycram.process_modules.DonbotManager method)


PlaceAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


PlaceActionPerformable (class in pycram.designators.action_designator)

PLACING (pycram.datastructures.enums.ImageEnum attribute)

PLANAR (pycram.datastructures.enums.JointType attribute)

PLANE (pycram.datastructures.enums.Shape attribute)

PlaneVisualShape (class in pycram.datastructures.dataclasses)

PlanFailure

plot_grid() (in module pycram.costmaps)

PNEUMATIC (pycram.datastructures.enums.GripperType attribute)

policy (pycram.designators.specialized_designators.probabilistic.probabilistic_action.ProbabilisticAction attribute)

Pose (class in pycram.datastructures.pose)

(class in pycram.orm.base)


pose (pycram.datastructures.dataclasses.ObjectState attribute)

(pycram.description.Joint property)

(pycram.description.Link property)

(pycram.description.ObjectEntity property)

(pycram.designator.LocationDesignatorDescription.Location attribute)

(pycram.designator.ObjectDesignatorDescription.Object property)

(pycram.designators.action_designator.FaceAtPerformable attribute)

(pycram.designators.location_designator.Location attribute)

(pycram.designators.object_designator.RealObject.Object attribute)

(pycram.designators.specialized_designators.location.database_location.Location attribute)

(pycram.world_concepts.world_object.Object property)


pose() (pycram.orm.base.PoseMixin method)

pose_as_list (pycram.description.Link property)

pose_id() (pycram.orm.base.PoseMixin method)

pose_to_init (pycram.orm.base.PoseMixin attribute)

pose_wrt_child (pycram.world_concepts.constraints.AbstractConstraint property)

pose_wrt_parent (pycram.world_concepts.constraints.AbstractConstraint property)

PoseGenerator (class in pycram.pose_generator_and_validator)

PoseMixin (class in pycram.orm.base)

Position (class in pycram.orm.base)

position (pycram.datastructures.dataclasses.JointState attribute)

(pycram.datastructures.pose.Pose property)

(pycram.description.Joint property)

(pycram.description.Link property)

(pycram.designators.action_designator.MoveTorsoActionPerformable attribute)

(pycram.orm.action_designator.MoveTorsoAction attribute)


position() (pycram.orm.base.PositionMixin method)

position_as_list (pycram.description.Link property)

position_as_list() (pycram.datastructures.pose.Pose method)

position_id() (pycram.orm.base.PositionMixin method)

position_to_init (pycram.orm.base.PositionMixin attribute)

position_wrt_child_as_list (pycram.world_concepts.constraints.AbstractConstraint property)

position_wrt_parent_as_list (pycram.world_concepts.constraints.AbstractConstraint property)

PositionMixin (class in pycram.orm.base)

positions (pycram.designators.action_designator.MoveTorsoAction attribute)

(pycram.designators.motion_designator.MoveJointsMotion attribute)


pr2_description (in module pycram.robot_descriptions.pr2_description)

Pr2Close (class in pycram.process_modules.pr2_process_modules)

Pr2CloseReal (class in pycram.process_modules.pr2_process_modules)

Pr2Detecting (class in pycram.process_modules.pr2_process_modules)

Pr2DetectingReal (class in pycram.process_modules.pr2_process_modules)

Pr2Manager (class in pycram.process_modules)

(class in pycram.process_modules.pr2_process_modules)


Pr2MoveArmJoints (class in pycram.process_modules.pr2_process_modules)

Pr2MoveArmJointsReal (class in pycram.process_modules.pr2_process_modules)

Pr2MoveGripper (class in pycram.process_modules.pr2_process_modules)

Pr2MoveGripperReal (class in pycram.process_modules.pr2_process_modules)

Pr2MoveHead (class in pycram.process_modules.pr2_process_modules)

Pr2MoveHeadReal (class in pycram.process_modules.pr2_process_modules)

PR2MoveJoints (class in pycram.process_modules.pr2_process_modules)

Pr2MoveJointsReal (class in pycram.process_modules.pr2_process_modules)

Pr2MoveTCP (class in pycram.process_modules.pr2_process_modules)

Pr2MoveTCPReal (class in pycram.process_modules.pr2_process_modules)

Pr2Navigation (class in pycram.process_modules.pr2_process_modules)

Pr2NavigationReal (class in pycram.process_modules.pr2_process_modules)

Pr2Open (class in pycram.process_modules.pr2_process_modules)

Pr2OpenReal (class in pycram.process_modules.pr2_process_modules)

Pr2WorldStateDetecting (class in pycram.process_modules.pr2_process_modules)

pre (pycram.process_module.RealRobot attribute)

(pycram.process_module.SemiRealRobot attribute)

(pycram.process_module.SimulatedRobot attribute)


pre_delay (pycram.process_module.RealRobot attribute)

prev_world (pycram.datastructures.world.UseProspectionWorld attribute)

PRINGLES (pycram.datastructures.enums.ObjectType attribute)

print_database() (in module pycram.orm.utils)

print_ontology_class() (pycram.ontology.ontology.OntologyManager static method)

print_ontology_property() (pycram.ontology.ontology.OntologyManager static method)

PRISMATIC (pycram.datastructures.enums.JointType attribute)

ProbabilisticAction (class in pycram.designators.specialized_designators.probabilistic.probabilistic_action)

ProbabilisticAction.Variables (class in pycram.designators.specialized_designators.probabilistic.probabilistic_action)

process_metadata() (pycram.orm.base.Base method)

process_metadata_id() (pycram.orm.base.Base method)

ProcessMetaData (class in pycram.orm.base)

ProcessModule (class in pycram.process_module)

ProcessModuleManager (class in pycram.process_module)

projection_cartesian_goal() (in module pycram.external_interfaces.giskard)

projection_cartesian_goal_with_approach() (in module pycram.external_interfaces.giskard)



projection_joint_goal() (in module pycram.external_interfaces.giskard)

projection_namespace (pycram.ros.tf_broadcaster.TFBroadcaster attribute)

prop_value() (pycram.designator.Designator method)

prospection_world (pycram.datastructures.world.WorldSync attribute)

(pycram.local_transformer.LocalTransformer attribute)


prospection_world_prefix (pycram.world_concepts.world_object.Object attribute)

pub (pycram.ros.viz_marker_publisher.VizMarkerPublisher attribute)

publish() (pycram.ros.viz_marker_publisher.ManualMarkerPublisher method)

pulse() (pycram.fluent.Fluent method)

pulsed() (pycram.fluent.Fluent method)

PUSHBUTTONS (pycram.datastructures.enums.ImageEnum attribute)


    pycram

      
module



    pycram.cache_manager

      
module



    pycram.costmaps

      
module



    pycram.datastructures

      
module



    pycram.datastructures.dataclasses

      
module



    pycram.datastructures.enums

      
module



    pycram.datastructures.pose

      
module



    pycram.datastructures.world

      
module



    pycram.description

      
module



    pycram.designator

      
module



    pycram.designators

      
module



    pycram.designators.action_designator

      
module



    pycram.designators.location_designator

      
module



    pycram.designators.motion_designator

      
module



    pycram.designators.object_designator

      
module



    pycram.designators.specialized_designators

      
module



    pycram.designators.specialized_designators.action

      
module



    pycram.designators.specialized_designators.action.dual_arm_pickup_action

      
module



    pycram.designators.specialized_designators.location

      
module



    pycram.designators.specialized_designators.location.database_location

      
module



    pycram.designators.specialized_designators.location.giskard_location

      
module



    pycram.designators.specialized_designators.probabilistic

      
module



    pycram.designators.specialized_designators.probabilistic.probabilistic_action

      
module



    pycram.external_interfaces

      
module



    pycram.external_interfaces.giskard

      
module



    pycram.external_interfaces.ik

      
module



    pycram.external_interfaces.knowrob

      
module



    pycram.external_interfaces.move_base

      
module



    pycram.external_interfaces.robokudo

      
module



    pycram.external_interfaces.tmc

      
module



    pycram.failure_handling

      
module



    pycram.fluent

      
module



    pycram.helper

      
module



    pycram.language

      
module



    pycram.local_transformer

      
module



    pycram.object_descriptors

      
module



    pycram.object_descriptors.generic

      
module



    pycram.object_descriptors.urdf

      
module



    pycram.ontology

      
module



    pycram.ontology.ontology

      
module



    pycram.ontology.ontology_common

      
module



    pycram.orm

      
module



    pycram.orm.action_designator

      
module



    pycram.orm.base

      
module



    pycram.orm.motion_designator

      
module



    pycram.orm.object_designator

      
module



    pycram.orm.tasktree

      
module



    pycram.orm.utils

      
module



    pycram.orm.views

      
module



    pycram.plan_failures

      
module



    pycram.pose_generator_and_validator

      
module



    pycram.process_module

      
module



    pycram.process_modules

      
module



    pycram.process_modules.boxy_process_modules

      
module



    pycram.process_modules.default_process_modules

      
module



    pycram.process_modules.donbot_process_modules

      
module



    pycram.process_modules.hsrb_process_modules

      
module



    pycram.process_modules.pr2_process_modules

      
module



    pycram.process_modules.stretch_process_modules

      
module



    pycram.robot_description

      
module



    pycram.robot_descriptions

      
module



    pycram.robot_descriptions.boxy_description

      
module



    pycram.robot_descriptions.donbot_description

      
module



    pycram.robot_descriptions.hsrb_description

      
module



    pycram.robot_descriptions.pr2_description

      
module



    pycram.robot_descriptions.stretch_description

      
module



    pycram.robot_descriptions.tiago_description

      
module



    pycram.robot_descriptions.turtlebot_description

      
module



    pycram.robot_descriptions.ur5_description

      
module



    pycram.ros

      
module



    pycram.ros.force_torque_sensor

      
module



    pycram.ros.joint_state_publisher

      
module



    pycram.ros.robot_state_updater

      
module



    pycram.ros.tf_broadcaster

      
module



    pycram.ros.viz_marker_publisher

      
module



    pycram.tasktree

      
module



    pycram.utils

      
module



    pycram.world_concepts

      
module



    pycram.world_concepts.constraints

      
module



    pycram.world_concepts.event

      
module



    pycram.world_concepts.world_object

      
module



    pycram.world_reasoning

      
module



    pycram.worlds

      
module



    pycram.worlds.bullet_world

      
module


pycram_version (pycram.orm.base.ProcessMetaData attribute)



Q


Quaternion (class in pycram.orm.base)

QuaternionMixin (class in pycram.orm.base)

query_for_database() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp static method)

query_human() (in module pycram.external_interfaces.robokudo)



query_human_attributes() (in module pycram.external_interfaces.robokudo)

query_object() (in module pycram.external_interfaces.robokudo)

query_pose_nav() (in module pycram.external_interfaces.move_base)

query_specific_region() (in module pycram.external_interfaces.robokudo)

query_waving_human() (in module pycram.external_interfaces.robokudo)



R


R (pycram.datastructures.dataclasses.Color attribute)

r (pycram.orm.base.Color attribute)

radius (pycram.datastructures.dataclasses.CapsuleVisualShape attribute)

(pycram.datastructures.dataclasses.SphereVisualShape attribute)


raise_error() (pycram.robot_descriptions.DeprecatedRobotDescription method)

ray_test() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


ray_test_batch() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


rdm (in module pycram.robot_descriptions.boxy_description)

(in module pycram.robot_descriptions.donbot_description)

(in module pycram.robot_descriptions.hsrb_description)

(in module pycram.robot_descriptions.pr2_description)

(in module pycram.robot_descriptions.stretch_description)

(in module pycram.robot_descriptions.tiago_description)

(in module pycram.robot_descriptions.turtlebot_description)

(in module pycram.robot_descriptions.ur5_description)


reachability_validator() (in module pycram.pose_generator_and_validator)

ReachabilityFailure

reachable() (in module pycram.world_reasoning)

reachable_arm (pycram.designators.location_designator.CostmapLocation attribute)

(pycram.designators.specialized_designators.location.database_location.Location attribute)


reachable_arms (pycram.designators.location_designator.CostmapLocation.Location attribute)

reachable_for (pycram.designators.location_designator.CostmapLocation attribute)

REAL (pycram.datastructures.enums.ExecutionType attribute)

real_robot (in module pycram.process_module)

RealObject (class in pycram.designators.object_designator)

RealObject.Object (class in pycram.designators.object_designator)

RealRobot (class in pycram.process_module)

realsense_color (in module pycram.robot_descriptions.stretch_description)

realsense_depth (in module pycram.robot_descriptions.stretch_description)

realsense_infra1 (in module pycram.robot_descriptions.stretch_description)

realsense_infra2 (in module pycram.robot_descriptions.stretch_description)

reason (pycram.orm.tasktree.TaskTreeNode attribute)

(pycram.tasktree.TaskTreeNode attribute)


reason() (pycram.ontology.ontology.OntologyManager method)

ReasoningError

recovery (pycram.failure_handling.RetryMonitor attribute)

Rectangle (class in pycram.costmaps)

reference() (pycram.designator.Designator method)

reference_frame (pycram.designators.object_designator.LocatedObject.Object attribute)

reference_frames (pycram.designators.object_designator.LocatedObject attribute)

reference_object (pycram.designators.location_designator.ObjectRelativeLocation attribute)

(pycram.designators.location_designator.ObjectRelativeLocation.Location attribute)


register_description() (pycram.robot_description.RobotDescriptionManager method)

register_two_objects_collision_callbacks() (pycram.datastructures.world.World method)

(pycram.World method)


relative_pose (pycram.designators.location_designator.ObjectRelativeLocation attribute)

(pycram.designators.location_designator.ObjectRelativeLocation.Location attribute)


relative_x (pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp.Variables attribute)


relative_y (pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp.Variables attribute)


Release (class in pycram.orm.action_designator)

ReleaseAction (class in pycram.designators.action_designator)

ReleaseActionPerformable (class in pycram.designators.action_designator)

remove() (pycram.world_concepts.event.Event method)

(pycram.world_concepts.world_object.Object method)


remove_constraint() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


remove_constraint_if_exists() (pycram.world_concepts.constraints.Attachment method)

remove_constraint_with_link() (pycram.description.Link method)

remove_error_tags() (pycram.object_descriptors.urdf.ObjectDescription static method)

remove_joints_saved_states() (pycram.world_concepts.world_object.Object method)

remove_links_saved_states() (pycram.world_concepts.world_object.Object method)

remove_marker() (pycram.ros.viz_marker_publisher.ManualMarkerPublisher method)

remove_obj_queue (pycram.datastructures.world.WorldSync attribute)

remove_object() (in module pycram.external_interfaces.giskard)

(pycram.datastructures.world.World method)

(pycram.World method)


remove_object_by_id() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


remove_object_from_simulator() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


remove_ontology_concept() (pycram.ontology.ontology_common.OntologyConceptHolderStore method)

remove_physics_simulator_state() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


remove_saved_states() (pycram.datastructures.world.StateEntity method)

(pycram.datastructures.world.World method)

(pycram.World method)

(pycram.world_concepts.world_object.Object method)


remove_text() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


remove_vis_axis() (pycram.worlds.bullet_world.BulletWorld method)



removing_of_objects() (in module pycram.external_interfaces.giskard)

rename_prop() (pycram.designator.Designator method)

Repeat (class in pycram.language)

REPEAT (pycram.datastructures.enums.ImageEnum attribute)

repeat (pycram.language.Repeat attribute)

request_giskard_ik() (in module pycram.external_interfaces.ik)

request_ik() (in module pycram.external_interfaces.ik)

request_kdl_ik() (in module pycram.external_interfaces.ik)

reset() (pycram.orm.base.ProcessMetaData class method)

(pycram.world_concepts.world_object.Object method)


reset_all_joints_positions() (pycram.world_concepts.world_object.Object method)

reset_base_pose() (pycram.world_concepts.world_object.Object method)

reset_current_world() (pycram.datastructures.world.World method)

(pycram.World method)


reset_joint_position() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


reset_object_base_pose() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


reset_position() (pycram.description.Joint method)

reset_robot() (pycram.datastructures.world.World method)

(pycram.World method)


reset_tree() (in module pycram.tasktree)

reset_world() (pycram.datastructures.world.World method)

(pycram.World method)


resolution (pycram.costmaps.Costmap attribute)

(pycram.costmaps.SemanticCostmap attribute)

(pycram.costmaps.VisibilityCostmap attribute)


ResolutionError

resolve (pycram.ontology.ontology_common.OntologyConceptHolder attribute)

resolve() (pycram.language.Language method)

resolvers (pycram.designator.Designator attribute)

restore_physics_simulator_state() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


restore_state() (pycram.datastructures.world.StateEntity method)

Retry (class in pycram.failure_handling)

RetryMonitor (class in pycram.failure_handling)

REVOLUTE (pycram.datastructures.enums.JointType attribute)

rgba_color (pycram.datastructures.dataclasses.VisualShape attribute)

RIGHT (pycram.datastructures.enums.Arms attribute)

(pycram.datastructures.enums.Grasp attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.Arms attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.Grasp attribute)


right_arm (in module pycram.robot_descriptions.boxy_description)

(in module pycram.robot_descriptions.donbot_description)

(in module pycram.robot_descriptions.pr2_description)

(in module pycram.robot_descriptions.tiago_description)


right_arm_poses (pycram.designators.motion_designator.MoveArmJointsMotion attribute)

right_gripper (in module pycram.robot_descriptions.boxy_description)

(in module pycram.robot_descriptions.donbot_description)

(in module pycram.robot_descriptions.pr2_description)

(in module pycram.robot_descriptions.tiago_description)

(pycram.designators.specialized_designators.action.dual_arm_pickup_action.DualArmPickupAction attribute)


robokudo_lock (in module pycram.external_interfaces.robokudo)

robokudo_rlock (in module pycram.external_interfaces.robokudo)

ROBOT (pycram.datastructures.enums.ObjectType attribute)

robot (pycram.datastructures.world.World attribute)

(pycram.designators.location_designator.AccessingLocation attribute)

(pycram.World attribute)


robot_description (in module pycram.robot_descriptions)

robot_is_set() (pycram.datastructures.world.World static method)

(pycram.World static method)


robot_name (pycram.process_module.ProcessModuleManager attribute)

robot_position (pycram.designator.ActionDesignatorDescription.Action attribute)

robot_state (pycram.orm.action_designator.Action attribute)

robot_state_id (pycram.orm.action_designator.Action attribute)

robot_torso_height (pycram.designator.ActionDesignatorDescription.Action attribute)

robot_type (pycram.designator.ActionDesignatorDescription.Action attribute)

RobotDescription (class in pycram.robot_description)

RobotDescriptionManager (class in pycram.robot_description)

RobotState (class in pycram.orm.base)

RobotStateUpdater (class in pycram.ros.robot_state_updater)

root_link (pycram.world_concepts.world_object.Object property)

root_link_name (pycram.world_concepts.world_object.Object property)

RootLink (class in pycram.description)

(in module pycram.worlds.bullet_world)


rospack (in module pycram.robot_descriptions.boxy_description)

(in module pycram.robot_descriptions.donbot_description)

(in module pycram.robot_descriptions.hsrb_description)

(in module pycram.robot_descriptions.pr2_description)

(in module pycram.robot_descriptions.stretch_description)

(in module pycram.robot_descriptions.tiago_description)

(in module pycram.robot_descriptions.turtlebot_description)

(in module pycram.robot_descriptions.ur5_description)


rotation (pycram.datastructures.pose.Transform property)

rotation_as_list() (pycram.datastructures.pose.Transform method)

run() (pycram.datastructures.world.WorldSync method)

(pycram.worlds.bullet_world.Gui method)


RUNNING (pycram.datastructures.enums.State attribute)

(pycram.datastructures.enums.TaskStatus attribute)




S


sample_amount (pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp attribute)

sample_to_action() (pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp method)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.ProbabilisticAction method)


sample_to_location() (pycram.designators.specialized_designators.location.database_location.DatabaseCostmapLocation method)

save() (pycram.ontology.ontology.OntologyManager method)

save_fds (pycram.utils.suppress_stdout_stderr attribute)

save_joints_states() (pycram.world_concepts.world_object.Object method)

save_links_states() (pycram.world_concepts.world_object.Object method)

save_objects_state() (pycram.datastructures.world.World method)

(pycram.World method)


save_physics_simulator_state() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


save_state() (pycram.datastructures.world.StateEntity method)

(pycram.datastructures.world.World method)

(pycram.World method)

(pycram.world_concepts.world_object.Object method)


saved_states (pycram.datastructures.world.StateEntity property)

scale (pycram.datastructures.dataclasses.MeshVisualShape attribute)

scale() (pycram.costmaps.Rectangle method)

SCRIPT_DIR (in module pycram.external_interfaces.knowrob)

SEARCH (pycram.datastructures.enums.ImageEnum attribute)

SearchingFailed

select_statement() (pycram.designators.specialized_designators.location.database_location.DatabaseCostmapLocation static method)

selectable (pycram.orm.views.CreateView attribute)

SemanticCostmap (class in pycram.costmaps)

SemanticCostmapLocation (class in pycram.designators.location_designator)

SemanticCostmapLocation.Location (class in pycram.designators.location_designator)

SEMI_REAL (pycram.datastructures.enums.ExecutionType attribute)

semi_real_robot (in module pycram.process_module)

SemiRealRobot (class in pycram.process_module)

send_query() (in module pycram.external_interfaces.robokudo)

SensorFailure

Sequential (class in pycram.language)

session (pycram.designators.specialized_designators.location.database_location.DatabaseCostmapLocation attribute)

set_attachments() (pycram.world_concepts.world_object.Object method)

set_color() (pycram.world_concepts.world_object.Object method)

set_gravity() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


set_joint_position() (pycram.world_concepts.world_object.Object method)

set_joint_positions() (pycram.world_concepts.world_object.Object method)

set_link_color() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.world_concepts.world_object.Object method)

(pycram.worlds.bullet_world.BulletWorld method)


set_ontology_concept_designator_connection() (pycram.ontology.ontology.OntologyManager static method)

set_ontology_relation() (pycram.ontology.ontology.OntologyManager static method)

set_orientation() (pycram.datastructures.pose.Pose method)

(pycram.world_concepts.world_object.Object method)


set_orientation_from_euler() (pycram.datastructures.pose.Pose method)

set_pose() (pycram.world_concepts.world_object.Object method)

set_position() (pycram.datastructures.pose.Pose method)

(pycram.world_concepts.world_object.Object method)


set_realtime() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


set_robot() (pycram.datastructures.world.World static method)

(pycram.World static method)


set_robot_if_not_set() (pycram.datastructures.world.World method)

(pycram.World method)


set_rotation() (pycram.datastructures.pose.Transform method)

set_translation() (pycram.datastructures.pose.Transform method)

set_value() (pycram.fluent.Fluent method)

SetGripperAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


SetGripperActionPerformable (class in pycram.designators.action_designator)

Shape (class in pycram.datastructures.enums)

shape_data (pycram.object_descriptors.generic.ObjectDescription property)

shape_data() (pycram.datastructures.dataclasses.BoxVisualShape method)

(pycram.datastructures.dataclasses.CapsuleVisualShape method)

(pycram.datastructures.dataclasses.MeshVisualShape method)

(pycram.datastructures.dataclasses.PlaneVisualShape method)

(pycram.datastructures.dataclasses.SphereVisualShape method)

(pycram.datastructures.dataclasses.VisualShape method)


signal_handler() (in module pycram)

simplify() (pycram.language.Language method)

simulate() (pycram.datastructures.world.World method)

(pycram.World method)


SIMULATED (pycram.datastructures.enums.ExecutionType attribute)



simulated_robot (in module pycram.process_module)

SimulatedRobot (class in pycram.process_module)

SimulatedTaskTree (class in pycram.tasktree)

simulation_frequency (pycram.datastructures.world.World attribute)

(pycram.World attribute)


simulation_time_step (pycram.datastructures.world.World property)

(pycram.World property)


simulator_state_id (pycram.datastructures.dataclasses.WorldState attribute)

Singleton (class in pycram.helper)

size (pycram.costmaps.Costmap attribute)

(pycram.costmaps.GaussianCostmap attribute)

(pycram.costmaps.VisibilityCostmap attribute)

(pycram.datastructures.dataclasses.BoxVisualShape property)


SOFA (pycram.datastructures.enums.ImageEnum attribute)

solutions() (pycram.designator.Designator method)

soma (pycram.designator.ActionDesignatorDescription attribute)

(pycram.ontology.ontology.OntologyManager attribute)


SOMA_HOME_ONTOLOGY_IRI (in module pycram.ontology.ontology)

SOMA_ONTOLOGY_IRI (in module pycram.ontology.ontology)

SOMA_ONTOLOGY_NAMESPACE (in module pycram.ontology.ontology)

spawn_mesh() (in module pycram.external_interfaces.giskard)

spawn_object() (in module pycram.external_interfaces.giskard)

spawn_urdf() (in module pycram.external_interfaces.giskard)

SPECIAL_KNOWLEDGE (in module pycram.designator)

special_knowledge_adjustment_pose() (pycram.designator.ObjectDesignatorDescription.Object method)

SPHERE (pycram.datastructures.enums.Shape attribute)

SphereVisualShape (class in pycram.datastructures.dataclasses)

SPHERICAL (pycram.datastructures.enums.JointType attribute)

SPOON (pycram.datastructures.enums.ObjectType attribute)

stable() (in module pycram.world_reasoning)

stamp (pycram.datastructures.pose.Pose attribute)

(pycram.datastructures.pose.Transform attribute)


standing_position (pycram.designators.action_designator.MoveAndPickUpPerformable attribute)

start_link (pycram.robot_description.EndEffectorDescription attribute)

(pycram.robot_description.KinematicChainDescription attribute)


start_time (pycram.orm.tasktree.TaskTreeNode attribute)

(pycram.ros.viz_marker_publisher.ManualMarkerPublisher attribute)

(pycram.tasktree.TaskTreeNode attribute)


State (class in pycram.datastructures.dataclasses)

(class in pycram.datastructures.enums)


state (pycram.language.Language attribute)

StateEntity (class in pycram.datastructures.world)

static_joint_states (pycram.robot_description.EndEffectorDescription attribute)

(pycram.robot_description.KinematicChainDescription attribute)


status (pycram.orm.tasktree.TaskTreeNode attribute)

(pycram.tasktree.TaskTreeNode attribute)


step() (pycram.datastructures.world.World method)

(pycram.World method)

(pycram.worlds.bullet_world.BulletWorld method)


stop_query() (in module pycram.external_interfaces.robokudo)

stretch_description (in module pycram.robot_descriptions.stretch_description)

StretchClose (class in pycram.process_modules.stretch_process_modules)

StretchCloseReal (class in pycram.process_modules.stretch_process_modules)

StretchDetecting (class in pycram.process_modules.stretch_process_modules)

StretchDetectingReal (class in pycram.process_modules.stretch_process_modules)

StretchManager (class in pycram.process_modules)

(class in pycram.process_modules.stretch_process_modules)


StretchMoveArmJoints (class in pycram.process_modules.stretch_process_modules)

StretchMoveArmJointsReal (class in pycram.process_modules.stretch_process_modules)

StretchMoveGripper (class in pycram.process_modules.stretch_process_modules)

StretchMoveGripperReal (class in pycram.process_modules.stretch_process_modules)

StretchMoveHead (class in pycram.process_modules.stretch_process_modules)

StretchMoveHeadReal (class in pycram.process_modules.stretch_process_modules)

StretchMoveJoints (class in pycram.process_modules.stretch_process_modules)

StretchMoveJointsReal (class in pycram.process_modules.stretch_process_modules)

StretchMoveTCP (class in pycram.process_modules.stretch_process_modules)

StretchMoveTCPReal (class in pycram.process_modules.stretch_process_modules)

StretchNavigate (class in pycram.process_modules.stretch_process_modules)

StretchNavigationReal (class in pycram.process_modules.stretch_process_modules)

StretchOpen (class in pycram.process_modules.stretch_process_modules)

StretchOpenReal (class in pycram.process_modules.stretch_process_modules)

StretchWorldStateDetecting (class in pycram.process_modules.stretch_process_modules)

SUCCEEDED (pycram.datastructures.enums.State attribute)

(pycram.datastructures.enums.TaskStatus attribute)


SuccessfulCompletion

SUCTION (pycram.datastructures.enums.GripperType attribute)

supporting() (in module pycram.world_reasoning)

suppress_stdout_stderr (class in pycram.utils)

SustainedFailure

sync_worlds() (in module pycram.external_interfaces.giskard)

(pycram.datastructures.world.UseProspectionWorld method)




T


tab (pycram.designator.ResolutionError attribute)

TALK (pycram.datastructures.enums.ImageEnum attribute)

talk() (pycram.process_modules.hsrb_process_modules.HSRBManager method)

(pycram.process_modules.HSRBManager method)


TalkingMotion (class in pycram.designators.motion_designator)

target (pycram.designators.action_designator.LookAtActionPerformable attribute)

(pycram.designators.location_designator.CostmapLocation attribute)

(pycram.designators.motion_designator.LookingMotion attribute)

(pycram.designators.motion_designator.MoveMotion attribute)

(pycram.designators.motion_designator.MoveTCPMotion attribute)


target_location (pycram.designators.action_designator.NavigateActionPerformable attribute)

(pycram.designators.action_designator.PlaceActionPerformable attribute)

(pycram.designators.action_designator.TransportActionPerformable attribute)


target_locations (pycram.designators.action_designator.NavigateAction attribute)

(pycram.designators.action_designator.PlaceAction attribute)

(pycram.designators.action_designator.TransportAction attribute)


targets (pycram.designators.action_designator.LookAtAction attribute)

Task

task_tree (in module pycram.tasktree)

TaskStatus (class in pycram.datastructures.enums)

TaskTreeNode (class in pycram.orm.tasktree)

(class in pycram.tasktree)


terminate (pycram.datastructures.world.WorldSync attribute)

terminate_world_sync() (pycram.datastructures.world.World method)

(pycram.World method)


tf_frame (pycram.description.Joint property)

(pycram.description.Link property)

(pycram.description.ObjectEntity property)

(pycram.description.RootLink property)

(pycram.world_concepts.world_object.Object attribute)


tf_listener (pycram.ros.robot_state_updater.RobotStateUpdater attribute)

tf_publisher (pycram.ros.tf_broadcaster.TFBroadcaster attribute)

tf_static_publisher (pycram.ros.tf_broadcaster.TFBroadcaster attribute)

tf_timer (pycram.ros.robot_state_updater.RobotStateUpdater attribute)

tf_topic (pycram.ros.robot_state_updater.RobotStateUpdater attribute)

TFBroadcaster (class in pycram.ros.tf_broadcaster)

thread (pycram.ros.force_torque_sensor.ForceTorqueSensor attribute)

(pycram.ros.joint_state_publisher.JointStatePublisher attribute)

(pycram.ros.tf_broadcaster.TFBroadcaster attribute)

(pycram.ros.viz_marker_publisher.VizMarkerPublisher attribute)


thread_safe() (in module pycram.external_interfaces.giskard)

(in module pycram.external_interfaces.robokudo)


threads (pycram.language.Language attribute)

tiago_description (in module pycram.robot_descriptions.tiago_description)

time (pycram.orm.base.Pose attribute)

Timeout

timestamp (pycram.designator.Designator attribute)

(pycram.designators.object_designator.LocatedObject.Object attribute)


timestamps (pycram.designators.object_designator.LocatedObject attribute)

tmc_gripper_control() (in module pycram.external_interfaces.tmc)

tmc_talk() (in module pycram.external_interfaces.tmc)

to_list() (pycram.datastructures.pose.Pose method)

to_pose() (pycram.datastructures.pose.Transform method)

to_sql() (pycram.datastructures.pose.Pose method)

(pycram.designator.ActionDesignatorDescription.Action method)

(pycram.designator.BaseMotion method)

(pycram.designator.ObjectDesignatorDescription.Object method)

(pycram.designators.action_designator.ActionAbstract method)

(pycram.designators.motion_designator.ClosingMotion method)

(pycram.designators.motion_designator.DetectingMotion method)

(pycram.designators.motion_designator.LookingMotion method)

(pycram.designators.motion_designator.MoveArmJointsMotion method)

(pycram.designators.motion_designator.MoveGripperMotion method)

(pycram.designators.motion_designator.MoveJointsMotion method)

(pycram.designators.motion_designator.MoveMotion method)

(pycram.designators.motion_designator.MoveTCPMotion method)

(pycram.designators.motion_designator.OpeningMotion method)

(pycram.designators.motion_designator.TalkingMotion method)

(pycram.designators.motion_designator.WorldStateDetectingMotion method)

(pycram.designators.object_designator.BelieveObject.Object method)

(pycram.designators.object_designator.ObjectPart.Object method)

(pycram.tasktree.TaskTreeNode method)




to_transform() (pycram.datastructures.pose.Pose method)

tool_frame (pycram.robot_description.EndEffectorDescription attribute)

TOP (pycram.datastructures.enums.Grasp attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.Grasp attribute)


topic_name (pycram.ros.viz_marker_publisher.VizMarkerPublisher attribute)

torso_height (pycram.designators.specialized_designators.location.database_location.Location attribute)

(pycram.orm.base.RobotState attribute)


torso_joint (pycram.robot_description.RobotDescription attribute)

(pycram.robot_descriptions.DeprecatedRobotDescription property)


torso_link (pycram.robot_description.RobotDescription attribute)

(pycram.robot_descriptions.DeprecatedRobotDescription property)


TorsoFailure

TorsoGoalNotReached

TorsoGoalUnreachable

TorsoLowLevelFailure

Transform (class in pycram.datastructures.pose)

transform (pycram.description.ObjectEntity property)

transform_pose() (pycram.local_transformer.LocalTransformer method)

transform_to_object_frame() (pycram.local_transformer.LocalTransformer method)

transformPose() (pycram.local_transformer.LocalTransformer method)

translate() (pycram.costmaps.Rectangle method)

translation (pycram.datastructures.pose.Transform property)

translation_as_list() (pycram.datastructures.pose.Transform method)

TransportAction (class in pycram.designators.action_designator)

(class in pycram.orm.action_designator)


TransportActionPerformable (class in pycram.designators.action_designator)

try_to_reach() (in module pycram.external_interfaces.ik)

try_to_reach_with_grasp() (in module pycram.external_interfaces.ik)

TryAll (class in pycram.language)

TryInOrder (class in pycram.language)

turtlebot (in module pycram.robot_descriptions.turtlebot_description)

type (pycram.description.JointDescription property)

(pycram.designators.object_designator.ObjectPart attribute)

(pycram.object_descriptors.generic.JointDescription property)

(pycram.object_descriptors.urdf.JointDescription property)

(pycram.orm.base.RobotState attribute)

(pycram.world_concepts.constraints.AbstractConstraint attribute)


type_annotation_map (pycram.orm.base._Base attribute)

TYPES (pycram.datastructures.enums.PerceptionTechniques attribute)

types (pycram.designator.ObjectDesignatorDescription attribute)

(pycram.designators.object_designator.RealObject attribute)




U


UNDERLINE (pycram.utils.bcolors attribute)

UNKNOWN (pycram.datastructures.enums.JointType attribute)

update() (pycram.ros.tf_broadcaster.TFBroadcaster method)

update_all_objects_poses() (pycram.datastructures.world.World method)

(pycram.World method)


update_attachment_with_object() (pycram.world_concepts.world_object.Object method)

update_cache_dir_with_object() (pycram.cache_manager.CacheManager method)

(pycram.datastructures.world.World method)

(pycram.World method)


update_constraint() (pycram.world_concepts.constraints.Attachment method)

update_description_from_file() (pycram.description.ObjectDescription method)

update_link_transforms() (pycram.world_concepts.world_object.Object method)

update_pose() (in module pycram.external_interfaces.giskard)

(pycram.world_concepts.world_object.Object method)


update_primary_key() (in module pycram.orm.utils)

update_primary_key_constrains() (in module pycram.orm.utils)



update_transform() (pycram.description.Link method)

(pycram.world_concepts.constraints.Attachment method)


update_transform_and_constraint() (pycram.world_concepts.constraints.Attachment method)

update_transforms() (pycram.local_transformer.LocalTransformer method)

update_transforms_for_objects() (pycram.local_transformer.LocalTransformer method)

update_transforms_for_objects_in_current_world() (pycram.datastructures.world.World method)

(pycram.World method)


upper_limit (pycram.description.JointDescription property)

(pycram.object_descriptors.generic.JointDescription property)

(pycram.object_descriptors.urdf.JointDescription property)


ur5_description (in module pycram.robot_descriptions.ur5_description)

urdf_link_name (pycram.designators.location_designator.SemanticCostmapLocation attribute)

urdf_object (pycram.robot_description.EndEffectorDescription attribute)

(pycram.robot_description.KinematicChainDescription attribute)

(pycram.robot_description.RobotDescription attribute)


urdf_type_map (pycram.object_descriptors.urdf.JointDescription attribute)

UseProspectionWorld (class in pycram.datastructures.world)



V


variables (pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp attribute)

(pycram.designators.specialized_designators.probabilistic.probabilistic_action.ProbabilisticAction attribute)


variance (pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel attribute)

vertical_angle (pycram.robot_description.CameraDescription attribute)

view() (in module pycram.orm.views)

view_doesnt_exist() (in module pycram.orm.views)

view_exists() (in module pycram.orm.views)

vis_axis (pycram.worlds.bullet_world.BulletWorld attribute)

vis_ids (pycram.costmaps.Costmap attribute)

visibility_validator() (in module pycram.pose_generator_and_validator)

VisibilityCostmap (class in pycram.costmaps)

visible() (in module pycram.world_reasoning)



visible_for (pycram.designators.location_designator.CostmapLocation attribute)

visual_frame_position (pycram.datastructures.dataclasses.VisualShape attribute)

visual_geometry_type (pycram.datastructures.dataclasses.BoxVisualShape property)

(pycram.datastructures.dataclasses.CapsuleVisualShape property)

(pycram.datastructures.dataclasses.CylinderVisualShape property)

(pycram.datastructures.dataclasses.MeshVisualShape property)

(pycram.datastructures.dataclasses.PlaneVisualShape property)

(pycram.datastructures.dataclasses.SphereVisualShape property)

(pycram.datastructures.dataclasses.VisualShape property)


visualize() (pycram.costmaps.Costmap method)

VisualShape (class in pycram.datastructures.dataclasses)

VizMarkerPublisher (class in pycram.ros.viz_marker_publisher)



W


w (pycram.orm.base.Quaternion attribute)

wait_for() (pycram.fluent.Fluent method)

WAIT_TIME_FOR_ADDING_QUEUE (pycram.datastructures.world.UseProspectionWorld attribute)

WARNING (pycram.utils.bcolors attribute)

WAVING (pycram.datastructures.enums.ImageEnum attribute)

whenever() (pycram.fluent.Fluent method)

width (pycram.costmaps.Costmap attribute)

(pycram.costmaps.SemanticCostmap attribute)


with_real_robot() (in module pycram.process_module)

with_simulated_robot() (in module pycram.process_module)

with_tree() (in module pycram.tasktree)

World (class in pycram)

(class in pycram.datastructures.world)


world (pycram.costmaps.Costmap attribute)

(pycram.costmaps.OccupancyCostmap attribute)

(pycram.costmaps.SemanticCostmap attribute)

(pycram.costmaps.VisibilityCostmap attribute)

(pycram.datastructures.world.WorldEntity attribute)

(pycram.datastructures.world.WorldSync attribute)

(pycram.local_transformer.LocalTransformer attribute)

(pycram.ros.force_torque_sensor.ForceTorqueSensor attribute)

(pycram.ros.joint_state_publisher.JointStatePublisher attribute)

(pycram.ros.tf_broadcaster.TFBroadcaster attribute)

(pycram.worlds.bullet_world.Gui attribute)




world_object (pycram.designator.ObjectDesignatorDescription.Object attribute)

(pycram.designators.object_designator.RealObject attribute)


world_state_detecting() (pycram.process_module.ProcessModuleManager method)

(pycram.process_modules.boxy_process_modules.BoxyManager method)

(pycram.process_modules.BoxyManager method)

(pycram.process_modules.default_process_modules.DefaultManager method)

(pycram.process_modules.DefaultManager method)

(pycram.process_modules.donbot_process_modules.DonbotManager method)

(pycram.process_modules.DonbotManager method)

(pycram.process_modules.pr2_process_modules.Pr2Manager method)

(pycram.process_modules.Pr2Manager method)

(pycram.process_modules.stretch_process_modules.StretchManager method)

(pycram.process_modules.StretchManager method)


world_sync (pycram.datastructures.world.WorldSync attribute)

WorldEntity (class in pycram.datastructures.world)

WorldMode (class in pycram.datastructures.enums)

WorldState (class in pycram.datastructures.dataclasses)

WorldStateDetectingMotion (class in pycram.designators.motion_designator)

(class in pycram.orm.motion_designator)


WorldSync (class in pycram.datastructures.world)

write_database_to_file() (in module pycram.orm.utils)

write_to_cache() (pycram.cache_manager.CacheManager static method)

wrong (pycram.designator.ResolutionError attribute)



X


X (pycram.datastructures.enums.AxisIdentifier attribute)

x (pycram.orm.base.Position attribute)

(pycram.orm.base.Quaternion attribute)




x_lower (pycram.costmaps.Rectangle attribute)

x_upper (pycram.costmaps.Rectangle attribute)



Y


Y (pycram.datastructures.enums.AxisIdentifier attribute)

y (pycram.orm.base.Position attribute)

(pycram.orm.base.Quaternion attribute)




y_lower (pycram.costmaps.Rectangle attribute)

y_upper (pycram.costmaps.Rectangle attribute)



Z


Z (pycram.datastructures.enums.AxisIdentifier attribute)



z (pycram.orm.base.Position attribute)

(pycram.orm.base.Quaternion attribute)















By Jonas Dech




    
      © Copyright 2024.
      

























External Interface — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf
















External Interface









External Interface#











previous
Robot Description




next
Giskard interface in PyCRAM











By Jonas Dech




    
      © Copyright 2024.
      

























Designators — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















Designators




 Contents 



Object Designator
Contributing Object Designators


Action Designator
Motion Designator
Location Designator
Creating your own Designator








Designators#
Designators are CRAMs and PyCRAMs way of representing actions, motions, objects and locations.
In general, PyCRAM-Designators consist of a description and a specified element.
Descriptions describe sets of designators and designators are one thing in the described set.
For example, such a description could describe an action where the robot moves to a location
from where it can grasp an object. The specific location in this case is not relevant as long
as the robot can reach the object.
The designator description will be resolved during runtime which results in a designator with
specific parameter, the resulting designator can also be performed to let the robot perform the
desired behaviour.
To stay on the example of an action designator which should move the robot to a location from
where it can grasp an object, we will create a NavigateAction description with a list of possible
poses.
poses = [Pose([1, 0, 0], [0, 0, 0, 1]), Pose([1.2, 0.2, 0], [0, 0, 1, 0])]
NavigateAction(target_locations=poses)


This is a description of an action which moves the robot to a pose in the environment.
In this case the description describes a set of action designators which have a pose of the poses
list as target location.
By resolving the description it will return a single designator with specific parameter.
This can look like this:
designator = NavigateAction(target_locations=poses).resolve()


The resolver will check the available parameter and return a designator with appropriate parameter
which can then be performed. The designator returned by the resolver will always be a sub-class
of the description, in this way the designator can be assigned the type of action it performs.
The resolved designator can also contain new parameter which might be relevant for performing the
designator and will be inferred while resolving. A resolved action designator for a navigate
action looks like this:
NavigateActionPerformable(robot_position=(Pose([0.0, 0.0, 0.0] [0.0, 0.0, 0.0, 1.0]), target_location=Pose([1, 0, 0], [0, 0, 0, 1]))


A visual representation of the whole idea of designator and designator descriptions can be
seen in the following image.

There are four types of designators in PyCRAM:


pycram.designators.action_designator
pycram.designators.object_designator
pycram.designators.location_designator
pycram.designators.motion_designator



Object Designator#
Object designators represent objects in (simulated) world.
The description of object designators can take names and types that the object should match.
The ground() method returns an object with all
its data attached that matches the description.
The __iter__() method iterates over all objects
that match the description.

Contributing Object Designators#
Object Designators should always be part of an object designator description.
The general class structure is seen in ObjectDesignatorDescription.
New object description need to inherit from the general object description. If the object they ground to differs from
the base object, a dataclass. should be created inside the new
description. The dataclass is one element that matches the description.
If ORM logging of the new objects is wanted a to_sql() and insert() method has to be implemented
(see orm for more details).



Action Designator#
Action designators describe complex actions that are executable for an agent. Action designators can be seen as higher
level plans that include failure handling and parametrization.
An action designator description always takes the parameter as a list of possible parameter, when
resolving the description to a single designator one parameter out of the given list will be picked.


Motion Designator#
Motion designators describe atomic actions that are executable for an agent. In contrast to action
designators there is no failure handling or other action designators. Furthermore, the perform()
method passes the resolved motion designator to the respective Process Module for execution on the robot.
Another difference to action designator is that motion designators only take a single parameter instead of a
list, this parameter is also strictly typed.


Location Designator#
Location designator describe a set of locations in regards to specific constrains. These constrains can be things
like reachable or visible. The pose returned by a location designator is a single pose of the set defined
by the constrains given to the location designator description.
Similar to object designator poses location designator also a __iter__()
method which can iterate over all possible solutions for this description.


Creating your own Designator#
Creating your own designator is fairly easy, you only need to extend the base class of the respective description.


ActionDesignatorDescription
ObjectDesignatorDescription
LocationDesignatorDescription
BaseMotion


Afterwards you need to implement your own ground method which is the default resolver and for location and object
designator it makes sense to also implement a __iter__ method. The ground and __iter__ methods should return
the designator sub-class so you also need to implement these with the parameter your designator needs.
The sub-class can already contain some parameters, this is usually the case if the parameter is the same for every designator
of this type. For example, Location
contains a pose parameter since every location designator contains a resolved pose.
For action and motion designator the sub-class is also the place where the perform method is written which contains
the behaviour of the designator.










previous
Jupyter Notebook Examples




next
Troubleshooting









 Contents
  


Object Designator
Contributing Object Designators


Action Designator
Motion Designator
Location Designator
Creating your own Designator








By Jonas Dech




    
      © Copyright 2024.
      

























Designators — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf
















Designators









Designators#











previous
Local Transformer




next
Action Designator











By Jonas Dech




    
      © Copyright 2024.
      

























Datastructure — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf
















Datastructure









Datastructure#











previous
Migrate NEEMs




next
Pose











By Jonas Dech




    
      © Copyright 2024.
      

























pycram.worlds — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.worlds




 Contents 



Submodules








pycram.worlds#

Submodules#


pycram.worlds.bullet_world












previous
pycram.world_concepts.world_object




next
pycram.worlds.bullet_world









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.worlds.bullet_world — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.worlds.bullet_world




 Contents 



Attributes
Classes
Module Contents
Link
RootLink
Joint
BulletWorld
BulletWorld.extension
BulletWorld.vis_axis
BulletWorld._init_world()
BulletWorld.load_generic_object_and_get_id()
BulletWorld.load_object_and_get_id()
BulletWorld._load_object_and_get_id()
BulletWorld.remove_object_from_simulator()
BulletWorld.remove_object_by_id()
BulletWorld.add_constraint()
BulletWorld.remove_constraint()
BulletWorld.get_joint_position()
BulletWorld.get_object_joint_names()
BulletWorld.get_link_pose()
BulletWorld.get_object_link_names()
BulletWorld.get_object_number_of_links()
BulletWorld.get_object_number_of_joints
BulletWorld.perform_collision_detection()
BulletWorld.get_object_contact_points()
BulletWorld.get_contact_points_between_two_objects()
BulletWorld.reset_joint_position()
BulletWorld.reset_object_base_pose()
BulletWorld.step()
BulletWorld.get_object_pose()
BulletWorld.set_link_color()
BulletWorld.get_link_color()
BulletWorld.get_colors_of_object_links()
BulletWorld.get_object_axis_aligned_bounding_box()
BulletWorld.get_link_axis_aligned_bounding_box()
BulletWorld.set_realtime()
BulletWorld.set_gravity()
BulletWorld.disconnect_from_physics_server()
BulletWorld.join_threads()
BulletWorld.join_gui_thread_if_exists()
BulletWorld.save_physics_simulator_state()
BulletWorld.restore_physics_simulator_state()
BulletWorld.remove_physics_simulator_state()
BulletWorld.add_vis_axis()
BulletWorld.remove_vis_axis()
BulletWorld.ray_test()
BulletWorld.ray_test_batch()
BulletWorld.create_visual_shape()
BulletWorld.create_multi_body()
BulletWorld.get_images_for_target()
BulletWorld.add_text()
BulletWorld.remove_text()
BulletWorld.enable_joint_force_torque_sensor()
BulletWorld.disable_joint_force_torque_sensor()
BulletWorld.get_joint_reaction_force_torque()
BulletWorld.get_applied_joint_motor_torque()


Gui
Gui.world
Gui.mode
Gui.run()












pycram.worlds.bullet_world#

Attributes#


Link


RootLink


Joint







Classes#


BulletWorld
This class represents a BulletWorld, which is a simulation environment that uses the Bullet Physics Engine. This

Gui
For internal use only. Creates a new thread for the physics simulation that is active until closed by






Module Contents#


pycram.worlds.bullet_world.Link#



pycram.worlds.bullet_world.RootLink#



pycram.worlds.bullet_world.Joint#



class pycram.worlds.bullet_world.BulletWorld(mode: pycram.datastructures.enums.WorldMode = WorldMode.DIRECT, is_prospection_world: bool = False, sim_frequency=240)#
Bases: pycram.datastructures.world.World
This class represents a BulletWorld, which is a simulation environment that uses the Bullet Physics Engine. This
class is the main interface to the Bullet Physics Engine and should be used to spawn Objects, simulate Physic and
manipulate the Bullet World.


extension: str#



vis_axis: typing_extensions.List[int] = []#



_init_world(mode: pycram.datastructures.enums.WorldMode)#
Initializes the physics simulation.



load_generic_object_and_get_id(description: pycram.object_descriptors.generic.ObjectDescription) → int#
Creates a visual and collision box in the simulation.



load_object_and_get_id(path: typing_extensions.Optional[str] = None, pose: typing_extensions.Optional[pycram.datastructures.pose.Pose] = None) → int#
Loads a description file (e.g. URDF) at the given pose and returns the id of the loaded object.

Parameters:

path – The path to the description file, if None the description file is assumed to be already loaded.
pose – The pose at which the object should be loaded.


Returns:
The id of the loaded object.





_load_object_and_get_id(path: str, pose: pycram.datastructures.pose.Pose) → int#



remove_object_from_simulator(obj: pycram.world_concepts.world_object.Object) → None#
Removes an object from the physics simulator.

Parameters:
obj – The object to be removed.





remove_object_by_id(obj_id: int) → None#
Removes the object with the given id from the world.

Parameters:
obj_id – The unique id of the object to be removed.





add_constraint(constraint: pycram.world_concepts.constraints.Constraint) → int#
Add a constraint between two objects links so that they become attached for example.

Parameters:
constraint – The constraint data used to create the constraint.





remove_constraint(constraint_id)#
Remove a constraint by its ID.

Parameters:
constraint_id – The unique id of the constraint to be removed.





get_joint_position(joint: pycram.object_descriptors.urdf.ObjectDescription.Joint) → float#
Get the position of a joint of an articulated object

Parameters:
joint – The joint to get the position for.

Returns:
The joint position as a float.





get_object_joint_names(obj: pycram.world_concepts.world_object.Object) → typing_extensions.List[str]#
Returns the names of all joints of this object.

Parameters:
obj – The object.

Returns:
A list of joint names.





get_link_pose(link: pycram.object_descriptors.urdf.ObjectDescription.Link) → pycram.datastructures.pose.Pose#
Get the pose of a link of an articulated object with respect to the world frame.

Parameters:
link – The link as a AbstractLink object.

Returns:
The pose of the link as a Pose object.





get_object_link_names(obj: pycram.world_concepts.world_object.Object) → typing_extensions.List[str]#
Returns the names of all links of this object.

Parameters:
obj – The object.

Returns:
A list of link names.





get_object_number_of_links(obj: pycram.world_concepts.world_object.Object) → int#



get_object_number_of_joints#



perform_collision_detection() → None#
Checks for collisions between all objects in the World and updates the contact points.



get_object_contact_points(obj: pycram.world_concepts.world_object.Object) → typing_extensions.List#

For a more detailed explanation of thereturned list please look at:
PyBullet Doc





get_contact_points_between_two_objects(obj1: pycram.world_concepts.world_object.Object, obj2: pycram.world_concepts.world_object.Object) → typing_extensions.List#
Returns a list of contact points between obj1 and obj2.

Parameters:

obj1 – The first object.
obj2 – The second object.


Returns:
A list of all contact points between the two objects.





reset_joint_position(joint: pycram.object_descriptors.urdf.ObjectDescription.Joint, joint_position: str) → None#
Reset the joint position instantly without physics simulation

Parameters:

joint – The joint to reset the position for.
joint_position – The new joint pose.






reset_object_base_pose(obj: pycram.world_concepts.world_object.Object, pose: pycram.datastructures.pose.Pose) → None#
Reset the world position and orientation of the base of the object instantaneously,
not through physics simulation. (x,y,z) position vector and (x,y,z,w) quaternion orientation.

Parameters:

obj – The object.
pose – The new pose as a Pose object.






step()#
Step the world simulation using forward dynamics



get_object_pose(obj: pycram.world_concepts.world_object.Object) → pycram.datastructures.pose.Pose#
Get the pose of an object in the world frame from the current object pose in the simulator.



set_link_color(link: pycram.object_descriptors.urdf.ObjectDescription.Link, rgba_color: pycram.datastructures.dataclasses.Color)#
Changes the rgba_color of a link of this object, the rgba_color has to be given as Color object.

Parameters:

link – The link which should be colored.
rgba_color – The rgba_color as Color object with RGBA values between 0 and 1.






get_link_color(link: pycram.object_descriptors.urdf.ObjectDescription.Link) → pycram.datastructures.dataclasses.Color#
This method returns the rgba_color of this link.

Parameters:
link – The link for which the rgba_color should be returned.

Returns:
The rgba_color as Color object with RGBA values between 0 and 1.





get_colors_of_object_links(obj: pycram.world_concepts.world_object.Object) → typing_extensions.Dict[str, pycram.datastructures.dataclasses.Color]#
Get the RGBA colors of each link in the object as a dictionary from link name to rgba_color.

Parameters:
obj – The object

Returns:
A dictionary with link names as keys and a Color object for each link as value.





get_object_axis_aligned_bounding_box(obj: pycram.world_concepts.world_object.Object) → pycram.datastructures.dataclasses.AxisAlignedBoundingBox#
Returns the axis aligned bounding box of this object. The return of this method are two points in
world coordinate frame which define a bounding box.

Parameters:
obj – The object for which the bounding box should be returned.

Returns:
AxisAlignedBoundingBox object containing the min and max points of the bounding box.





get_link_axis_aligned_bounding_box(link: pycram.object_descriptors.urdf.ObjectDescription.Link) → pycram.datastructures.dataclasses.AxisAlignedBoundingBox#
Returns the axis aligned bounding box of the link. The return of this method are two points in
world coordinate frame which define a bounding box.



set_realtime(real_time: bool) → None#
Enables the real time simulation of Physics in the World. By default, this is disabled and Physics is only
simulated to reason about it.

Parameters:
real_time – Whether the World should simulate Physics in real time.





set_gravity(gravity_vector: typing_extensions.List[float]) → None#

Sets the gravity that is used in the World. By default, it is set to the gravity on earth ([0, 0, -9.8]).Gravity is given as a vector in x,y,z. Gravity is only applied while simulating Physic.



Parameters:
gravity_vector – The gravity vector that should be used in the World.





disconnect_from_physics_server()#
Disconnects the world from the physics server.



join_threads()#
Joins the GUI thread if it exists.



join_gui_thread_if_exists()#



save_physics_simulator_state() → int#
Saves the state of the physics simulator and returns the unique id of the state.

Returns:
The unique id representing the state.





restore_physics_simulator_state(state_id)#

Restores the objects and environment state in the physics simulator according tothe given state using the unique state id.



Parameters:
state_id – The unique id representing the state.





remove_physics_simulator_state(state_id: int)#
Removes the state of the physics simulator with the given id.

Parameters:
state_id – The unique id representing the state.





add_vis_axis(pose: pycram.datastructures.pose.Pose, length: typing_extensions.Optional[float] = 0.2) → None#
Creates a Visual object which represents the coordinate frame at the given
position and orientation. There can be an unlimited amount of vis axis objects.

Parameters:

pose – The pose at which the axis should be spawned
length – Optional parameter to configure the length of the axes






remove_vis_axis() → None#
Removes all spawned vis axis objects that are currently in this BulletWorld.



ray_test(from_position: typing_extensions.List[float], to_position: typing_extensions.List[float]) → int#
Cast a ray and return the first object hit, if any.

Parameters:

from_position – The starting position of the ray in Cartesian world coordinates.
to_position – The ending position of the ray in Cartesian world coordinates.


Returns:
The object id of the first object hit, or -1 if no object was hit.





ray_test_batch(from_positions: typing_extensions.List[typing_extensions.List[float]], to_positions: typing_extensions.List[typing_extensions.List[float]], num_threads: int = 1) → typing_extensions.List[int]#

Cast a batch of rays and return the result for each of the rays (first object hit, if any. or -1)
Takes optional argument num_threads to specify the number of threads to use
to compute the ray intersections for the batch. Specify 0 to let simulator decide, 1 (default) for singlecore execution, 2 or more to select the number of threads to use.







Parameters:

from_positions – The starting positions of the rays in Cartesian world coordinates.
to_positions – The ending positions of the rays in Cartesian world coordinates.
num_threads – The number of threads to use to compute the ray intersections for the batch.






create_visual_shape(visual_shape: pycram.datastructures.dataclasses.VisualShape) → int#
Creates a visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
visual_shape – The visual shape to be created, uses the VisualShape dataclass defined in world_dataclasses

Returns:
The unique id of the created shape.





create_multi_body(multi_body: pycram.datastructures.dataclasses.MultiBody) → int#
Creates a multi body in the physics simulator and returns the unique id of the created multi body. The multibody
is created by joining multiple links/shapes together with joints.

Parameters:
multi_body – The multi body to be created, uses the MultiBody dataclass defined in world_dataclasses.

Returns:
The unique id of the created multi body.





get_images_for_target(target_pose: pycram.datastructures.pose.Pose, cam_pose: pycram.datastructures.pose.Pose, size: typing_extensions.Optional[int] = 256) → typing_extensions.List[numpy.ndarray]#
Calculates the view and projection Matrix and returns 3 images:

An RGB image
A depth image
A segmentation Mask, the segmentation mask indicates for every pixel the visible Object


Parameters:

target_pose – The pose to which the camera should point.
cam_pose – The pose of the camera.
size – The height and width of the images in pixels.


Returns:
A list containing an RGB and depth image as well as a segmentation mask, in this order.





add_text(text: str, position: typing_extensions.List[float], orientation: typing_extensions.Optional[typing_extensions.List[float]] = None, size: typing_extensions.Optional[float] = None, color: typing_extensions.Optional[pycram.datastructures.dataclasses.Color] = Color(), life_time: typing_extensions.Optional[float] = 0, parent_object_id: typing_extensions.Optional[int] = None, parent_link_id: typing_extensions.Optional[int] = None) → int#
Adds text to the world.

Parameters:

text – The text to be added.
position – The position of the text in the world.
orientation – By default, debug text will always face the camera, automatically rotation. By specifying a text orientation (quaternion), the orientation will be fixed in world space or local space (when parent is specified).
size – The size of the text.
color – The color of the text.
life_time – The lifetime in seconds of the text to remain in the world, if 0 the text will remain in the world until it is removed manually.
parent_object_id – The id of the object to which the text should be attached.
parent_link_id – The id of the link to which the text should be attached.


Returns:
The id of the added text.





remove_text(text_id: typing_extensions.Optional[int] = None) → None#
Removes text from the world using the given id. if no id is given all text will be removed.

Parameters:
text_id – The id of the text to be removed.





enable_joint_force_torque_sensor(obj: pycram.world_concepts.world_object.Object, fts_joint_idx: int) → None#
You can enable a joint force/torque sensor in each joint. Once enabled, if you perform
a simulation step, the get_joint_reaction_force_torque will report the joint reaction forces in
the fixed degrees of freedom: a fixed joint will measure all 6DOF joint forces/torques.
A revolute/hinge joint force/torque sensor will measure 5DOF reaction forces along all axis except
the hinge axis. The applied force by a joint motor is available through get_applied_joint_motor_torque.

Parameters:

obj – The object in which the joint is located.
fts_joint_idx – The index of the joint for which the force torque sensor should be enabled.






disable_joint_force_torque_sensor(obj: pycram.world_concepts.world_object.Object, joint_id: int) → None#
Disables the force torque sensor of a joint.

Parameters:

obj – The object in which the joint is located.
joint_id – The id of the joint for which the force torque sensor should be disabled.






get_joint_reaction_force_torque(obj: pycram.world_concepts.world_object.Object, joint_id: int) → typing_extensions.List[float]#
Returns the joint reaction forces and torques of the specified joint.

Parameters:

obj – The object in which the joint is located.
joint_id – The id of the joint for which the force torque should be returned.


Returns:
The joint reaction forces and torques of the specified joint.





get_applied_joint_motor_torque(obj: pycram.world_concepts.world_object.Object, joint_id: int) → float#
Returns the applied torque by a joint motor.

Parameters:

obj – The object in which the joint is located.
joint_id – The id of the joint for which the applied motor torque should be returned.


Returns:
The applied torque by a joint motor.






class pycram.worlds.bullet_world.Gui(world: pycram.datastructures.world.World, mode: pycram.datastructures.enums.WorldMode)#
Bases: threading.Thread
For internal use only. Creates a new thread for the physics simulation that is active until closed by
exit()
Also contains the code for controlling the camera.


world#



mode: pycram.datastructures.enums.WorldMode#



run()#
Initializes the new simulation and checks in an endless loop
if it is still active. If it is the thread will be suspended for 1/80 seconds, if it is not the method and
thus the thread terminates. The loop also checks for mouse and keyboard inputs to control the camera.












previous
pycram.worlds




next
pycram.cache_manager









 Contents
  


Attributes
Classes
Module Contents
Link
RootLink
Joint
BulletWorld
BulletWorld.extension
BulletWorld.vis_axis
BulletWorld._init_world()
BulletWorld.load_generic_object_and_get_id()
BulletWorld.load_object_and_get_id()
BulletWorld._load_object_and_get_id()
BulletWorld.remove_object_from_simulator()
BulletWorld.remove_object_by_id()
BulletWorld.add_constraint()
BulletWorld.remove_constraint()
BulletWorld.get_joint_position()
BulletWorld.get_object_joint_names()
BulletWorld.get_link_pose()
BulletWorld.get_object_link_names()
BulletWorld.get_object_number_of_links()
BulletWorld.get_object_number_of_joints
BulletWorld.perform_collision_detection()
BulletWorld.get_object_contact_points()
BulletWorld.get_contact_points_between_two_objects()
BulletWorld.reset_joint_position()
BulletWorld.reset_object_base_pose()
BulletWorld.step()
BulletWorld.get_object_pose()
BulletWorld.set_link_color()
BulletWorld.get_link_color()
BulletWorld.get_colors_of_object_links()
BulletWorld.get_object_axis_aligned_bounding_box()
BulletWorld.get_link_axis_aligned_bounding_box()
BulletWorld.set_realtime()
BulletWorld.set_gravity()
BulletWorld.disconnect_from_physics_server()
BulletWorld.join_threads()
BulletWorld.join_gui_thread_if_exists()
BulletWorld.save_physics_simulator_state()
BulletWorld.restore_physics_simulator_state()
BulletWorld.remove_physics_simulator_state()
BulletWorld.add_vis_axis()
BulletWorld.remove_vis_axis()
BulletWorld.ray_test()
BulletWorld.ray_test_batch()
BulletWorld.create_visual_shape()
BulletWorld.create_multi_body()
BulletWorld.get_images_for_target()
BulletWorld.add_text()
BulletWorld.remove_text()
BulletWorld.enable_joint_force_torque_sensor()
BulletWorld.disable_joint_force_torque_sensor()
BulletWorld.get_joint_reaction_force_torque()
BulletWorld.get_applied_joint_motor_torque()


Gui
Gui.world
Gui.mode
Gui.run()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.world_reasoning — PyCRAM
























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.world_reasoning




 Contents 



Functions
Module Contents
stable()
contact()
get_visible_objects()
visible()
occluding()
reachable()
blocking()
supporting()
link_pose_for_joint_config()










pycram.world_reasoning#

Functions#


stable(→ bool)
Checks if an object is stable in the world. Stable meaning that it's position will not change after simulating

contact(→ typing_extensions.Union[bool, ...)
Checks if two objects are in contact or not. If the links should be returned then the output will also contain a

get_visible_objects(...)
Returns a segmentation mask of the objects that are visible from the given camera pose and the front facing axis.

visible(→ bool)
Checks if an object is visible from a given position. This will be achieved by rendering the object

occluding(...)
Lists all objects which are occluding the given object. This works similar to 'visible'.

reachable(→ bool)
Checks if the robot can reach a given position. To determine this the inverse kinematics are

blocking(...)
Checks if any objects are blocking another object when a robot tries to pick it. This works

supporting(→ bool)
Checks if one object is supporting another object. An object supports another object if they are in

link_pose_for_joint_config(...)
Returns the pose a link would be in if the given joint configuration would be applied to the object.






Module Contents#


pycram.world_reasoning.stable(obj: pycram.world_concepts.world_object.Object) → bool#
Checks if an object is stable in the world. Stable meaning that it’s position will not change after simulating
physics in the World. This will be done by simulating the world for 10 seconds and compare
the previous coordinates with the coordinates after the simulation.

Parameters:
obj – The object which should be checked

Returns:
True if the given object is stable in the world False else





pycram.world_reasoning.contact(object1: pycram.world_concepts.world_object.Object, object2: pycram.world_concepts.world_object.Object, return_links: bool = False) → typing_extensions.Union[bool, typing_extensions.Tuple[bool, typing_extensions.List]]#
Checks if two objects are in contact or not. If the links should be returned then the output will also contain a
list of tuples where the first element is the link name of ‘object1’ and the second element is the link name of
‘object2’.

Parameters:

object1 – The first object
object2 – The second object
return_links – If the respective links on the objects that are in contact should be returned.


Returns:
True if the two objects are in contact False else. If links should be returned a list of links in contact





pycram.world_reasoning.get_visible_objects(camera_pose: pycram.datastructures.pose.Pose, front_facing_axis: typing_extensions.Optional[typing_extensions.List[float]] = None) → typing_extensions.Tuple[numpy.ndarray, pycram.datastructures.pose.Pose]#
Returns a segmentation mask of the objects that are visible from the given camera pose and the front facing axis.

Parameters:

camera_pose – The pose of the camera in world coordinate frame.
front_facing_axis – The axis, of the camera frame, which faces to the front of the robot. Given as list of xyz


Returns:
A segmentation mask of the objects that are visible and the pose of the point at exactly 2 meters in front of the camera in the direction of the front facing axis with respect to the world coordinate frame.





pycram.world_reasoning.visible(obj: pycram.world_concepts.world_object.Object, camera_pose: pycram.datastructures.pose.Pose, front_facing_axis: typing_extensions.Optional[typing_extensions.List[float]] = None, threshold: float = 0.8) → bool#
Checks if an object is visible from a given position. This will be achieved by rendering the object
alone and counting the visible pixel, then rendering the complete scene and compare the visible pixels with the
absolut count of pixels.

Parameters:

obj – The object for which the visibility should be checked
camera_pose – The pose of the camera in map frame
front_facing_axis – The axis, of the camera frame, which faces to the front of the robot. Given as list of xyz
threshold – The minimum percentage of the object that needs to be visible for this method to return true.


Returns:
True if the object is visible from the camera_position False if not





pycram.world_reasoning.occluding(obj: pycram.world_concepts.world_object.Object, camera_pose: pycram.datastructures.pose.Pose, front_facing_axis: typing_extensions.Optional[typing_extensions.List[float]] = None) → typing_extensions.List[pycram.world_concepts.world_object.Object]#
Lists all objects which are occluding the given object. This works similar to ‘visible’.
First the object alone will be rendered and the position of the pixels of the object in the picture will be saved.
After that the complete scene will be rendered and the previous saved pixel positions will be compared to the
actual pixels, if in one pixel another object is visible ot will be saved as occluding.

Parameters:

obj – The object for which occlusion should be checked
camera_pose – The pose of the camera in world coordinate frame
front_facing_axis – The axis, of the camera frame, which faces to the front of the robot. Given as list of xyz


Returns:
A list of occluding objects





pycram.world_reasoning.reachable(pose_or_object: typing_extensions.Union[pycram.world_concepts.world_object.Object, pycram.datastructures.pose.Pose], robot: pycram.world_concepts.world_object.Object, gripper_name: str, threshold: float = 0.01) → bool#
Checks if the robot can reach a given position. To determine this the inverse kinematics are
calculated and applied. Afterward the distance between the position and the given end effector is calculated, if
it is smaller than the threshold the reasoning query returns True, if not it returns False.

Parameters:

pose_or_object – The position and rotation or Object for which reachability should be checked or an Object
robot – The robot that should reach for the position
gripper_name – The name of the end effector
threshold – The threshold between the end effector and the position.


Returns:
True if the end effector is closer than the threshold to the target position, False in every other case





pycram.world_reasoning.blocking(pose_or_object: typing_extensions.Union[pycram.world_concepts.world_object.Object, pycram.datastructures.pose.Pose], robot: pycram.world_concepts.world_object.Object, gripper_name: str, grasp: str = None) → typing_extensions.Union[typing_extensions.List[pycram.world_concepts.world_object.Object], None]#
Checks if any objects are blocking another object when a robot tries to pick it. This works
similar to the reachable predicate. First the inverse kinematics between the robot and the object will be
calculated and applied. Then it will be checked if the robot is in contact with any object except the given one.
If the given pose or Object is not reachable None will be returned

Parameters:

pose_or_object – The object or pose for which blocking objects should be found
robot – The robot Object who reaches for the object
gripper_name – The name of the end effector of the robot
grasp – The grasp type with which the object should be grasped


Returns:
A list of objects the robot is in collision with when reaching for the specified object or None if the pose or object is not reachable.





pycram.world_reasoning.supporting(object1: pycram.world_concepts.world_object.Object, object2: pycram.world_concepts.world_object.Object) → bool#
Checks if one object is supporting another object. An object supports another object if they are in
contact and the second object is above the first one. (e.g. a Bottle will be supported by a table)

Parameters:

object1 – Object that is supported
object2 – Object that supports the first object


Returns:
True if the second object is in contact with the first one and the second is above the first else False





pycram.world_reasoning.link_pose_for_joint_config(obj: pycram.world_concepts.world_object.Object, joint_config: typing_extensions.Dict[str, float], link_name: str) → pycram.datastructures.pose.Pose#
Returns the pose a link would be in if the given joint configuration would be applied to the object.
This is done by using the respective object in the prospection world and applying the joint configuration
to this one. After applying the joint configuration the link position is taken from there.

Parameters:

obj – Object of which the link is a part
joint_config – Dict with the goal joint configuration
link_name – Name of the link for which the pose should be returned


Returns:
The pose of the link after applying the joint configuration













previous
pycram.utils








 Contents
  


Functions
Module Contents
stable()
contact()
get_visible_objects()
visible()
occluding()
reachable()
blocking()
supporting()
link_pose_for_joint_config()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.world_concepts.world_object — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.world_concepts.world_object




 Contents 



Attributes
Classes
Module Contents
Link
Object
Object.prospection_world_prefix
Object.name
Object.obj_type
Object.color
Object.description
Object.cache_manager
Object.local_transformer
Object.original_pose
Object._current_pose
Object.tf_frame
Object.attachments
Object.pose
Object._load_object_and_get_id()
Object._init_joint_name_and_id_map()
Object._init_link_name_and_id_map()
Object._init_links_and_update_transforms()
Object._init_joints()
Object._add_to_world_sync_obj_queue()
Object.link_names
Object.joint_names
Object.get_link()
Object.get_link_pose()
Object.get_link_position()
Object.get_link_position_as_list()
Object.get_link_orientation()
Object.get_link_orientation_as_list()
Object.get_link_tf_frame()
Object.get_link_axis_aligned_bounding_box()
Object.get_transform_between_links()
Object.get_link_color()
Object.set_link_color()
Object.get_link_geometry()
Object.get_link_transform()
Object.get_link_origin()
Object.get_link_origin_transform()
Object.base_origin_shift
Object.__repr__()
Object.remove()
Object.reset()
Object.attach()
Object.detach()
Object.detach_all()
Object.update_attachment_with_object()
Object.get_position()
Object.get_orientation()
Object.get_position_as_list()
Object.get_base_position_as_list()
Object.get_orientation_as_list()
Object.get_pose()
Object.set_pose()
Object.reset_base_pose()
Object.update_pose()
Object._update_all_links_poses()
Object.move_base_to_origin_pose()
Object.save_state()
Object.save_links_states()
Object.save_joints_states()
Object.current_state
Object.set_attachments()
Object.link_states
Object.joint_states
Object.remove_saved_states()
Object.remove_links_saved_states()
Object.remove_joints_saved_states()
Object._set_attached_objects_poses()
Object.set_position()
Object.set_orientation()
Object.get_joint_id()
Object.get_root_link_description()
Object.root_link
Object.root_link_name
Object.get_root_link_id()
Object.get_link_id()
Object.get_link_by_id()
Object.reset_all_joints_positions()
Object.set_joint_positions()
Object.set_joint_position()
Object.get_joint_position()
Object.get_joint_damping()
Object.get_joint_upper_limit()
Object.get_joint_lower_limit()
Object.get_joint_axis()
Object.get_joint_type()
Object.get_joint_limits()
Object.get_joint_child_link()
Object.get_joint_parent_link()
Object.find_joint_above_link()
Object.get_positions_of_all_joints()
Object.update_link_transforms()
Object.contact_points()
Object.contact_points_simulated()
Object.set_color()
Object.get_color()
Object.links_colors
Object.get_axis_aligned_bounding_box()
Object.get_base_origin()
Object.get_joint_by_id()
Object.copy_to_prospection()
Object.__copy__()
Object.__eq__()
Object.__hash__()












pycram.world_concepts.world_object#

Attributes#


Link







Classes#


Object
Represents a spawned Object in the World.






Module Contents#


pycram.world_concepts.world_object.Link#



class pycram.world_concepts.world_object.Object(name: str, obj_type: pycram.datastructures.enums.ObjectType, path: str, description: typing_extensions.Optional[typing_extensions.Type[pycram.description.ObjectDescription]] = URDFObject, pose: typing_extensions.Optional[pycram.datastructures.pose.Pose] = None, world: typing_extensions.Optional[pycram.datastructures.world.World] = None, color: typing_extensions.Optional[pycram.datastructures.dataclasses.Color] = Color(), ignore_cached_files: typing_extensions.Optional[bool] = False)#
Bases: pycram.datastructures.world.WorldEntity
Represents a spawned Object in the World.


prospection_world_prefix: str = 'prospection/'#
The ObjectDescription of the object, this contains the name and type of the object as well as the path to the source
file.



name: str#



obj_type: pycram.datastructures.enums.ObjectType#



color: pycram.datastructures.dataclasses.Color#



description#



cache_manager#



local_transformer#



original_pose#



_current_pose#



tf_frame#



attachments: typing_extensions.Dict[Object, pycram.world_concepts.constraints.Attachment]#



property pose#



_load_object_and_get_id(path: typing_extensions.Optional[str] = None, ignore_cached_files: typing_extensions.Optional[bool] = False) → typing_extensions.Tuple[int, typing_extensions.Union[str, None]]#
Loads an object to the given World with the given position and orientation. The rgba_color will only be
used when an .obj or .stl file is given.
If a .obj or .stl file is given, before spawning, an urdf file with the .obj or .stl as mesh will be created
and this URDf file will be loaded instead.
When spawning a URDf file a new file will be created in the cache directory, if there exists none.
This new file will have resolved mesh file paths, meaning there will be no references
to ROS packges instead there will be absolute file paths.

Parameters:

path – The path to the description file, if None then no file will be loaded, this is useful when the PyCRAM is not responsible for loading the file but another system is.
ignore_cached_files – Whether to ignore files in the cache directory.


Returns:
The unique id of the object and the path of the file that was loaded.





_init_joint_name_and_id_map() → None#
Creates a dictionary which maps the joint names to their unique ids and vice versa.



_init_link_name_and_id_map() → None#
Creates a dictionary which maps the link names to their unique ids and vice versa.



_init_links_and_update_transforms() → None#
Initializes the link objects from the URDF file and creates a dictionary which maps the link names to the
corresponding link objects.



_init_joints()#
Initialize the joint objects from the URDF file and creates a dictionary which mas the joint names to the
corresponding joint objects



_add_to_world_sync_obj_queue() → None#
Adds this object to the objects queue of the WorldSync object of the World.



property link_names: typing_extensions.List[str]#

Returns:
The name of each link as a list.





property joint_names: typing_extensions.List[str]#

Returns:
The name of each joint as a list.





get_link(link_name: str) → pycram.description.ObjectDescription.Link#
Returns the link object with the given name.

Parameters:
link_name – The name of the link.

Returns:
The link object.





get_link_pose(link_name: str) → pycram.datastructures.pose.Pose#
Returns the pose of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The pose of the link.





get_link_position(link_name: str) → geometry_msgs.msg.Point#
Returns the position of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The position of the link.





get_link_position_as_list(link_name: str) → typing_extensions.List[float]#
Returns the position of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The position of the link.





get_link_orientation(link_name: str) → geometry_msgs.msg.Quaternion#
Returns the orientation of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The orientation of the link.





get_link_orientation_as_list(link_name: str) → typing_extensions.List[float]#
Returns the orientation of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The orientation of the link.





get_link_tf_frame(link_name: str) → str#
Returns the tf frame of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The tf frame of the link.





get_link_axis_aligned_bounding_box(link_name: str) → pycram.datastructures.dataclasses.AxisAlignedBoundingBox#
Returns the axis aligned bounding box of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The axis aligned bounding box of the link.





get_transform_between_links(from_link: str, to_link: str) → pycram.datastructures.pose.Transform#
Returns the transform between two links.

Parameters:

from_link – The name of the link from which the transform should be calculated.
to_link – The name of the link to which the transform should be calculated.






get_link_color(link_name: str) → pycram.datastructures.dataclasses.Color#
Returns the color of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The color of the link.





set_link_color(link_name: str, color: typing_extensions.List[float]) → None#
Sets the color of the link with the given name.

Parameters:

link_name – The name of the link.
color – The new color of the link.






get_link_geometry(link_name: str) → typing_extensions.Union[pycram.datastructures.dataclasses.VisualShape, None]#
Returns the geometry of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The geometry of the link.





get_link_transform(link_name: str) → pycram.datastructures.pose.Transform#
Returns the transform of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The transform of the link.





get_link_origin(link_name: str) → pycram.datastructures.pose.Pose#
Returns the origin of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The origin of the link as a ‘Pose’.





get_link_origin_transform(link_name: str) → pycram.datastructures.pose.Transform#
Returns the origin transform of the link with the given name.

Parameters:
link_name – The name of the link.

Returns:
The origin transform of the link.





property base_origin_shift: numpy.ndarray#
The shift between the base of the object and the origin of the object.

Returns:
A numpy array with the shift between the base of the object and the origin of the object.





__repr__()#



remove() → None#
Removes this object from the World it currently resides in.
For the object to be removed it has to be detached from all objects it
is currently attached to. After this is done a call to world remove object is done
to remove this Object from the simulation/world.



reset(remove_saved_states=True) → None#
Resets the Object to the state it was first spawned in.
All attached objects will be detached, all joints will be set to the
default position of 0 and the object will be set to the position and
orientation in which it was spawned.

Parameters:
remove_saved_states – If True the saved states will be removed.





attach(child_object: Object, parent_link: typing_extensions.Optional[str] = None, child_link: typing_extensions.Optional[str] = None, bidirectional: typing_extensions.Optional[bool] = True) → None#
Attaches another object to this object. This is done by
saving the transformation between the given link, if there is one, and
the base pose of the other object. Additionally, the name of the link, to
which the object is attached, will be saved.
Furthermore, a simulator constraint will be created so the attachment
also works while simulation.
Loose attachments means that the attachment will only be one-directional. For example, if this object moves the
other, attached, object will also move but not the other way around.

Parameters:

child_object – The other object that should be attached.
parent_link – The link name of this object.
child_link – The link name of the other object.
bidirectional – If the attachment should be a loose attachment.






detach(child_object: Object) → None#
Detaches another object from this object. This is done by
deleting the attachment from the attachments dictionary of both objects
and deleting the constraint of the simulator.
Afterward the detachment event of the corresponding World will be fired.

Parameters:
child_object – The object which should be detached





detach_all() → None#
Detach all objects attached to this object.



update_attachment_with_object(child_object: Object)#



get_position() → geometry_msgs.msg.Point#
Returns the position of this Object as a list of xyz.

Returns:
The current position of this object





get_orientation() → pycram.datastructures.pose.Pose.orientation#
Returns the orientation of this object as a list of xyzw, representing a quaternion.

Returns:
A list of xyzw





get_position_as_list() → typing_extensions.List[float]#
Returns the position of this Object as a list of xyz.

Returns:
The current position of this object





get_base_position_as_list() → typing_extensions.List[float]#
Returns the position of this Object as a list of xyz.

Returns:
The current position of this object





get_orientation_as_list() → typing_extensions.List[float]#
Returns the orientation of this object as a list of xyzw, representing a quaternion.

Returns:
A list of xyzw





get_pose() → pycram.datastructures.pose.Pose#
Returns the position of this object as a list of xyz. Alias for get_position().

Returns:
The current pose of this object





set_pose(pose: pycram.datastructures.pose.Pose, base: typing_extensions.Optional[bool] = False, set_attachments: typing_extensions.Optional[bool] = True) → None#
Sets the Pose of the object.

Parameters:

pose – New Pose for the object
base – If True places the object base instead of origin at the specified position and orientation
set_attachments – Whether to set the poses of the attached objects to this object or not.






reset_base_pose(pose: pycram.datastructures.pose.Pose)#



update_pose()#
Updates the current pose of this object from the world, and updates the poses of all links.



_update_all_links_poses()#
Updates the poses of all links by getting them from the simulator.



move_base_to_origin_pose() → None#
Move the object such that its base will be at the current origin position.
This is useful when placing objects on surfaces where you want the object base in contact with the surface.



save_state(state_id) → None#
Saves the state of this object by saving the state of all links and attachments.

Parameters:
state_id – The unique id of the state.





save_links_states(state_id: int) → None#
Saves the state of all links of this object.

Parameters:
state_id – The unique id of the state.





save_joints_states(state_id: int) → None#
Saves the state of all joints of this object.

Parameters:
state_id – The unique id of the state.





property current_state: pycram.datastructures.dataclasses.ObjectState#



set_attachments(attachments: typing_extensions.Dict[Object, pycram.world_concepts.constraints.Attachment]) → None#
Sets the attachments of this object to the given attachments.

Parameters:
attachments – A dictionary with the object as key and the attachment as value.





property link_states: typing_extensions.Dict[int, pycram.datastructures.dataclasses.LinkState]#
Returns the current state of all links of this object.

Returns:
A dictionary with the link id as key and the current state of the link as value.





property joint_states: typing_extensions.Dict[int, pycram.datastructures.dataclasses.JointState]#
Returns the current state of all joints of this object.

Returns:
A dictionary with the joint id as key and the current state of the joint as value.





remove_saved_states() → None#
Removes all saved states of this object.



remove_links_saved_states() → None#
Removes all saved states of the links of this object.



remove_joints_saved_states() → None#
Removes all saved states of the joints of this object.



_set_attached_objects_poses(already_moved_objects: typing_extensions.Optional[typing_extensions.List[Object]] = None) → None#
Updates the positions of all attached objects. This is done
by calculating the new pose in world coordinate frame and setting the
base pose of the attached objects to this new pose.
After this the _set_attached_objects method of all attached objects
will be called.

Parameters:
already_moved_objects – A list of Objects that were already moved, these will be excluded to prevent loops in the update.





set_position(position: typing_extensions.Union[pycram.datastructures.pose.Pose, geometry_msgs.msg.Point, typing_extensions.List], base=False) → None#
Sets this Object to the given position, if base is true the bottom of the Object will be placed at the position
instead of the origin in the center of the Object. The given position can either be a Pose,
in this case only the position is used or a geometry_msgs.msg/Point which is the position part of a Pose.

Parameters:

position – Target position as xyz.
base – If the bottom of the Object should be placed or the origin in the center.






set_orientation(orientation: typing_extensions.Union[pycram.datastructures.pose.Pose, geometry_msgs.msg.Quaternion, typing_extensions.List, typing_extensions.Tuple, numpy.ndarray]) → None#
Sets the orientation of the Object to the given orientation. Orientation can either be a Pose, in this case only
the orientation of this pose is used or a geometry_msgs.msg/Quaternion which is the orientation of a Pose.

Parameters:
orientation – Target orientation given as a list of xyzw.





get_joint_id(name: str) → int#
Returns the unique id for a joint name. As used by the world/simulator.

Parameters:
name – The joint name

Returns:
The unique id





get_root_link_description() → pycram.description.LinkDescription#
Returns the root link of the URDF of this object.

Returns:
The root link as defined in the URDF of this object.





property root_link: pycram.description.ObjectDescription.Link#
Returns the root link of this object.

Returns:
The root link of this object.





property root_link_name: str#
Returns the name of the root link of this object.

Returns:
The name of the root link of this object.





get_root_link_id() → int#
Returns the unique id of the root link of this object.

Returns:
The unique id of the root link of this object.





get_link_id(link_name: str) → int#
Returns a unique id for a link name.

Parameters:
link_name – The name of the link.

Returns:
The unique id of the link.





get_link_by_id(link_id: int) → pycram.description.ObjectDescription.Link#
Returns the link for a given unique link id

Parameters:
link_id – The unique id of the link.

Returns:
The link object.





reset_all_joints_positions() → None#
Sets the current position of all joints to 0. This is useful if the joints should be reset to their default



set_joint_positions(joint_poses: dict) → None#
Sets the current position of multiple joints at once, this method should be preferred when setting
multiple joints at once instead of running set_joint_position() in a loop.

Parameters:
joint_poses





set_joint_position(joint_name: str, joint_position: float) → None#
Sets the position of the given joint to the given joint pose and updates the poses of all attached objects.

Parameters:

joint_name – The name of the joint
joint_position – The target pose for this joint






get_joint_position(joint_name: str) → float#

Parameters:
joint_name – The name of the joint

Returns:
The current position of the given joint





get_joint_damping(joint_name: str) → float#

Parameters:
joint_name – The name of the joint

Returns:
The damping of the given joint





get_joint_upper_limit(joint_name: str) → float#

Parameters:
joint_name – The name of the joint

Returns:
The upper limit of the given joint





get_joint_lower_limit(joint_name: str) → float#

Parameters:
joint_name – The name of the joint

Returns:
The lower limit of the given joint





get_joint_axis(joint_name: str) → geometry_msgs.msg.Point#

Parameters:
joint_name – The name of the joint

Returns:
The axis of the given joint





get_joint_type(joint_name: str) → pycram.datastructures.enums.JointType#

Parameters:
joint_name – The name of the joint

Returns:
The type of the given joint





get_joint_limits(joint_name: str) → typing_extensions.Tuple[float, float]#

Parameters:
joint_name – The name of the joint

Returns:
The lower and upper limits of the given joint





get_joint_child_link(joint_name: str) → pycram.description.ObjectDescription.Link#

Parameters:
joint_name – The name of the joint

Returns:
The child link of the given joint





get_joint_parent_link(joint_name: str) → pycram.description.ObjectDescription.Link#

Parameters:
joint_name – The name of the joint

Returns:
The parent link of the given joint





find_joint_above_link(link_name: str, joint_type: pycram.datastructures.enums.JointType) → str#
Traverses the chain from ‘link’ to the URDF origin and returns the first joint that is of type ‘joint_type’.

Parameters:

link_name – AbstractLink name above which the joint should be found
joint_type – Joint type that should be searched for


Returns:
Name of the first joint which has the given type





get_positions_of_all_joints() → typing_extensions.Dict[str, float]#
Returns the positions of all joints of the object as a dictionary of joint names and joint positions.

Returns:
A dictionary with all joints positions’.





update_link_transforms(transform_time: typing_extensions.Optional[rospy.Time] = None) → None#
Updates the transforms of all links of this object using time ‘transform_time’ or the current ros time.



contact_points() → typing_extensions.List#
Returns a list of contact points of this Object with other Objects.

Returns:
A list of all contact points with other objects





contact_points_simulated() → typing_extensions.List#
Returns a list of all contact points between this Object and other Objects after stepping the simulation once.

Returns:
A list of contact points between this Object and other Objects





set_color(rgba_color: pycram.datastructures.dataclasses.Color) → None#
Changes the color of this object, the color has to be given as a list
of RGBA values.

Parameters:
rgba_color – The color as Color object with RGBA values between 0 and 1





get_color() → typing_extensions.Union[pycram.datastructures.dataclasses.Color, typing_extensions.Dict[str, pycram.datastructures.dataclasses.Color]]#
This method returns the rgba_color of this object. The return is either:



A Color object with RGBA values, this is the case if the object only has one link (thishappens for example if the object is spawned from a .obj or .stl file)




A dict with the link name as key and the rgba_color as value. The rgba_color is given as a Color Object.
Please keep in mind that not every link may have a rgba_color. This is dependent on the URDF from whichthe object is spawned.








Returns:
The rgba_color as Color object with RGBA values between 0 and 1 or a dict with the link name as key and the rgba_color as value.





property links_colors: typing_extensions.Dict[str, pycram.datastructures.dataclasses.Color]#
The color of each link as a dictionary with link names as keys and RGBA colors as values.



get_axis_aligned_bounding_box() → pycram.datastructures.dataclasses.AxisAlignedBoundingBox#

Returns:
The axis aligned bounding box of this object.





get_base_origin() → pycram.datastructures.pose.Pose#

Returns:
the origin of the base/bottom of this object.





get_joint_by_id(joint_id: int) → pycram.description.Joint#
Returns the joint object with the given id.

Parameters:
joint_id – The unique id of the joint.

Returns:
The joint object.





copy_to_prospection() → Object#
Copies this object to the prospection world.

Returns:
The copied object in the prospection world.





__copy__() → Object#
Returns a copy of this object. The copy will have the same name, type, path, description, pose, world and color.

Returns:
A copy of this object.





__eq__(other)#



__hash__()#












previous
pycram.world_concepts.event




next
pycram.worlds









 Contents
  


Attributes
Classes
Module Contents
Link
Object
Object.prospection_world_prefix
Object.name
Object.obj_type
Object.color
Object.description
Object.cache_manager
Object.local_transformer
Object.original_pose
Object._current_pose
Object.tf_frame
Object.attachments
Object.pose
Object._load_object_and_get_id()
Object._init_joint_name_and_id_map()
Object._init_link_name_and_id_map()
Object._init_links_and_update_transforms()
Object._init_joints()
Object._add_to_world_sync_obj_queue()
Object.link_names
Object.joint_names
Object.get_link()
Object.get_link_pose()
Object.get_link_position()
Object.get_link_position_as_list()
Object.get_link_orientation()
Object.get_link_orientation_as_list()
Object.get_link_tf_frame()
Object.get_link_axis_aligned_bounding_box()
Object.get_transform_between_links()
Object.get_link_color()
Object.set_link_color()
Object.get_link_geometry()
Object.get_link_transform()
Object.get_link_origin()
Object.get_link_origin_transform()
Object.base_origin_shift
Object.__repr__()
Object.remove()
Object.reset()
Object.attach()
Object.detach()
Object.detach_all()
Object.update_attachment_with_object()
Object.get_position()
Object.get_orientation()
Object.get_position_as_list()
Object.get_base_position_as_list()
Object.get_orientation_as_list()
Object.get_pose()
Object.set_pose()
Object.reset_base_pose()
Object.update_pose()
Object._update_all_links_poses()
Object.move_base_to_origin_pose()
Object.save_state()
Object.save_links_states()
Object.save_joints_states()
Object.current_state
Object.set_attachments()
Object.link_states
Object.joint_states
Object.remove_saved_states()
Object.remove_links_saved_states()
Object.remove_joints_saved_states()
Object._set_attached_objects_poses()
Object.set_position()
Object.set_orientation()
Object.get_joint_id()
Object.get_root_link_description()
Object.root_link
Object.root_link_name
Object.get_root_link_id()
Object.get_link_id()
Object.get_link_by_id()
Object.reset_all_joints_positions()
Object.set_joint_positions()
Object.set_joint_position()
Object.get_joint_position()
Object.get_joint_damping()
Object.get_joint_upper_limit()
Object.get_joint_lower_limit()
Object.get_joint_axis()
Object.get_joint_type()
Object.get_joint_limits()
Object.get_joint_child_link()
Object.get_joint_parent_link()
Object.find_joint_above_link()
Object.get_positions_of_all_joints()
Object.update_link_transforms()
Object.contact_points()
Object.contact_points_simulated()
Object.set_color()
Object.get_color()
Object.links_colors
Object.get_axis_aligned_bounding_box()
Object.get_base_origin()
Object.get_joint_by_id()
Object.copy_to_prospection()
Object.__copy__()
Object.__eq__()
Object.__hash__()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.world_concepts — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.world_concepts




 Contents 



Submodules








pycram.world_concepts#

Submodules#


pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object












previous
pycram.ros.viz_marker_publisher




next
pycram.world_concepts.constraints









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.world_concepts.event — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.world_concepts.event




 Contents 



Classes
Module Contents
Event
Event.handlers
Event.add()
Event.remove()
Event.fire()
Event.__iadd__()
Event.__isub__()
Event.__call__












pycram.world_concepts.event#

Classes#


Event
Base implementation of events in PyCRAM.






Module Contents#


class pycram.world_concepts.event.Event#
Base implementation of events in PyCRAM.
Events allow to attach handler methods to events that fire for specific occurences in the world.

Variables:
handler – List of methods that are called when this event is fired.




handlers: typing_extensions.List[typing_extensions.Callable] = []#



add(handler: typing_extensions.Callable) → None#
Adds a new handler to the list of handlers. All handler methods are called when this event is fired.
Handler have to take the event sender as parameter as well as args* which can contain further parameter.

Parameters:
handler – A method that should be added





remove(handler: typing_extensions.Callable) → None#
Removes a method from the list of handlers, the method will not be called when the event is fired.

Parameters:
handler – The method that should be removed.





fire(sender: typing_extensions.Any, earg: typing_extensions.Optional[typing_extensions.Any] = None) → None#
Fire this event, this causes every method to be called with a sender as well as additional args.

Parameters:

sender – The entity that fired the event.
earg – Additional arguments.






__iadd__(other: typing_extensions.Callable) → Event#
Operator overload that allows to add handlers by the ‘+=’ operator.

Parameters:
other – The handler that should be added.

Returns:
This instance





__isub__(other: typing_extensions.Callable) → Event#
Operator overload that allows to remove methods as handlers by using the ‘-=’ operator.

Parameters:
other – The method that should be removed as handler.

Returns:
This instance





__call__#
Allows to directly call the reference.












previous
pycram.world_concepts.constraints




next
pycram.world_concepts.world_object









 Contents
  


Classes
Module Contents
Event
Event.handlers
Event.add()
Event.remove()
Event.fire()
Event.__iadd__()
Event.__isub__()
Event.__call__












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.world_concepts.constraints — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.world_concepts.constraints




 Contents 



Classes
Module Contents
AbstractConstraint
AbstractConstraint.parent_link
AbstractConstraint.child_link
AbstractConstraint.type
AbstractConstraint.parent_to_constraint
AbstractConstraint.child_to_constraint
AbstractConstraint._parent_to_child
AbstractConstraint.parent_to_child_transform
AbstractConstraint.parent_object_id
AbstractConstraint.child_object_id
AbstractConstraint.parent_link_id
AbstractConstraint.child_link_id
AbstractConstraint.position_wrt_parent_as_list
AbstractConstraint.orientation_wrt_parent_as_list
AbstractConstraint.pose_wrt_parent
AbstractConstraint.position_wrt_child_as_list
AbstractConstraint.orientation_wrt_child_as_list
AbstractConstraint.pose_wrt_child


Constraint
Constraint.parent_to_constraint
Constraint.axis
Constraint.axis_as_list


Attachment
Attachment.id
Attachment.bidirectional
Attachment._loose
Attachment.update_transform_and_constraint()
Attachment.update_transform()
Attachment.update_constraint()
Attachment.add_fixed_constraint()
Attachment.calculate_transform()
Attachment.remove_constraint_if_exists()
Attachment.get_inverse()
Attachment.loose
Attachment.is_reversed
Attachment.__del__()
Attachment.__copy__()
Attachment.__eq__()
Attachment.__hash__()












pycram.world_concepts.constraints#

Classes#


AbstractConstraint
Represents an abstract constraint concept, this could be used to create joints for example or any kind of constraint

Constraint
Represents a constraint between two links in the World.

Attachment
Represents an abstract constraint concept, this could be used to create joints for example or any kind of constraint






Module Contents#


class pycram.world_concepts.constraints.AbstractConstraint(parent_link: pycram.description.Link, child_link: pycram.description.Link, _type: pycram.datastructures.enums.JointType, parent_to_constraint: pycram.datastructures.pose.Transform, child_to_constraint: pycram.datastructures.pose.Transform)#
Represents an abstract constraint concept, this could be used to create joints for example or any kind of constraint
between two links in the world.


parent_link: pycram.description.Link#



child_link: pycram.description.Link#



type: pycram.datastructures.enums.JointType#



parent_to_constraint#



child_to_constraint#



_parent_to_child = None#



property parent_to_child_transform: typing_extensions.Union[pycram.datastructures.pose.Transform, None]#



property parent_object_id: int#
Returns the id of the parent object of the constraint.

Returns:
The id of the parent object of the constraint





property child_object_id: int#
Returns the id of the child object of the constraint.

Returns:
The id of the child object of the constraint





property parent_link_id: int#
Returns the id of the parent link of the constraint.

Returns:
The id of the parent link of the constraint





property child_link_id: int#
Returns the id of the child link of the constraint.

Returns:
The id of the child link of the constraint





property position_wrt_parent_as_list: typing_extensions.List[float]#
Returns the constraint frame pose with respect to the parent origin as a list.

Returns:
The constraint frame pose with respect to the parent origin as a list





property orientation_wrt_parent_as_list: typing_extensions.List[float]#
Returns the constraint frame orientation with respect to the parent origin as a list.

Returns:
The constraint frame orientation with respect to the parent origin as a list





property pose_wrt_parent: pycram.datastructures.pose.Pose#
Returns the joint frame pose with respect to the parent origin.

Returns:
The joint frame pose with respect to the parent origin





property position_wrt_child_as_list: typing_extensions.List[float]#
Returns the constraint frame pose with respect to the child origin as a list.

Returns:
The constraint frame pose with respect to the child origin as a list





property orientation_wrt_child_as_list: typing_extensions.List[float]#
Returns the constraint frame orientation with respect to the child origin as a list.

Returns:
The constraint frame orientation with respect to the child origin as a list





property pose_wrt_child: pycram.datastructures.pose.Pose#
Returns the joint frame pose with respect to the child origin.

Returns:
The joint frame pose with respect to the child origin






class pycram.world_concepts.constraints.Constraint(parent_link: pycram.description.Link, child_link: pycram.description.Link, _type: pycram.datastructures.enums.JointType, axis_in_child_frame: geometry_msgs.msg.Point, constraint_to_parent: pycram.datastructures.pose.Transform, child_to_constraint: pycram.datastructures.pose.Transform)#
Bases: AbstractConstraint
Represents a constraint between two links in the World.


parent_to_constraint#



axis: geometry_msgs.msg.Point#



property axis_as_list: typing_extensions.List[float]#
Returns the axis of this constraint as a list.

Returns:
The axis of this constraint as a list of xyz






class pycram.world_concepts.constraints.Attachment(parent_link: pycram.description.Link, child_link: pycram.description.Link, bidirectional: typing_extensions.Optional[bool] = False, parent_to_child_transform: typing_extensions.Optional[pycram.datastructures.pose.Transform] = None, constraint_id: typing_extensions.Optional[int] = None)#
Bases: AbstractConstraint
Represents an abstract constraint concept, this could be used to create joints for example or any kind of constraint
between two links in the world.


id#



bidirectional: bool#



_loose: bool = False#



update_transform_and_constraint() → None#
Updates the transform and constraint of this attachment.



update_transform() → None#
Updates the transform of this attachment by calculating the transform from the parent link to the child link.



update_constraint() → None#
Updates the constraint of this attachment by removing the old constraint if one exists and adding a new one.



add_fixed_constraint() → None#
Adds a fixed constraint between the parent link and the child link.



calculate_transform() → pycram.datastructures.pose.Transform#
Calculates the transform from the parent link to the child link.



remove_constraint_if_exists() → None#
Removes the constraint between the parent and the child links if one exists.



get_inverse() → Attachment#

Returns:
A new Attachment object with the parent and child links swapped.





property loose: bool#
If true, then the child object will not move when parent moves.



property is_reversed: bool#

Returns:
True if the parent and child links are swapped.





__del__() → None#
Removes the constraint between the parent and the child links if one exists when the attachment is deleted.



__copy__()#



__eq__(other)#
Return self==value.



__hash__()#
Return hash(self).












previous
pycram.world_concepts




next
pycram.world_concepts.event









 Contents
  


Classes
Module Contents
AbstractConstraint
AbstractConstraint.parent_link
AbstractConstraint.child_link
AbstractConstraint.type
AbstractConstraint.parent_to_constraint
AbstractConstraint.child_to_constraint
AbstractConstraint._parent_to_child
AbstractConstraint.parent_to_child_transform
AbstractConstraint.parent_object_id
AbstractConstraint.child_object_id
AbstractConstraint.parent_link_id
AbstractConstraint.child_link_id
AbstractConstraint.position_wrt_parent_as_list
AbstractConstraint.orientation_wrt_parent_as_list
AbstractConstraint.pose_wrt_parent
AbstractConstraint.position_wrt_child_as_list
AbstractConstraint.orientation_wrt_child_as_list
AbstractConstraint.pose_wrt_child


Constraint
Constraint.parent_to_constraint
Constraint.axis
Constraint.axis_as_list


Attachment
Attachment.id
Attachment.bidirectional
Attachment._loose
Attachment.update_transform_and_constraint()
Attachment.update_transform()
Attachment.update_constraint()
Attachment.add_fixed_constraint()
Attachment.calculate_transform()
Attachment.remove_constraint_if_exists()
Attachment.get_inverse()
Attachment.loose
Attachment.is_reversed
Attachment.__del__()
Attachment.__copy__()
Attachment.__eq__()
Attachment.__hash__()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.utils — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.utils




 Contents 



Classes
Functions
Module Contents
bcolors
bcolors.HEADER
bcolors.OKBLUE
bcolors.OKCYAN
bcolors.OKGREEN
bcolors.WARNING
bcolors.FAIL
bcolors.ENDC
bcolors.BOLD
bcolors.UNDERLINE


_apply_ik()
GeneratorList
GeneratorList._generated
GeneratorList.get()
GeneratorList.has()


axis_angle_to_quaternion()
suppress_stdout_stderr
suppress_stdout_stderr.null_fds
suppress_stdout_stderr.save_fds
suppress_stdout_stderr.__enter__()
suppress_stdout_stderr.__exit__()












pycram.utils#
Implementation of helper functions and classes for internal usage only.
Functions:
_block – wrap multiple statements into a single block.
Classes:
GeneratorList – implementation of generator list wrappers.

Classes#


bcolors
Color codes which can be used to highlight Text in the Terminal. For example,

GeneratorList
Implementation of generator list wrappers.

suppress_stdout_stderr
A context manager for doing a "deep suppression" of stdout and stderr in






Functions#


_apply_ik(→ None)
Apllies a list of joint poses calculated by an inverse kinematics solver to a robot

axis_angle_to_quaternion(→ typing_extensions.Tuple)
Convert axis-angle to quaternion.






Module Contents#


class pycram.utils.bcolors#
Color codes which can be used to highlight Text in the Terminal. For example,
for warnings.
Usage:
Firstly import the class into the file.
print(f’{bcolors.WARNING} Some Text {bcolors.ENDC}’)


HEADER = '\x1b[95m'#



OKBLUE = '\x1b[94m'#



OKCYAN = '\x1b[96m'#



OKGREEN = '\x1b[92m'#



WARNING = '\x1b[93m'#



FAIL = '\x1b[91m'#



ENDC = '\x1b[0m'#



BOLD = '\x1b[1m'#



UNDERLINE = '\x1b[4m'#




pycram.utils._apply_ik(robot: pycram.world_concepts.WorldObject, pose_and_joint_poses: typing_extensions.Tuple[pycram.datastructures.pose.Pose, typing_extensions.Dict[str, float]]) → None#
Apllies a list of joint poses calculated by an inverse kinematics solver to a robot

Parameters:

robot – The robot the joint poses should be applied on
pose_and_joint_poses – The base pose and joint states as returned by the ik solver


Returns:
None





class pycram.utils.GeneratorList(generator: typing_extensions.Callable)#
Implementation of generator list wrappers.
Generator lists store the elements of a generator, so these can be fetched multiple times.
Methods:
get – get the element at a specific index.
has – check if an element at a specific index exists.


_generated = []#



get(index: int = 0)#
Get the element at a specific index or raise StopIteration if it doesn’t exist.
Arguments:
index – the index to get the element of.



has(index: int) → bool#
Check if an element at a specific index exists and return True or False.
Arguments:
index – the index to check for.




pycram.utils.axis_angle_to_quaternion(axis: typing_extensions.List, angle: float) → typing_extensions.Tuple#
Convert axis-angle to quaternion.

Parameters:

axis – (x, y, z) tuple representing rotation axis.
angle – rotation angle in degree


Returns:
The quaternion representing the axis angle





class pycram.utils.suppress_stdout_stderr#
Bases: object
A context manager for doing a “deep suppression” of stdout and stderr in
Python, i.e. will suppress all prints, even if the print originates in a
compiled C/Fortran sub-function.
This will not suppress raised exceptions, since exceptions are printed
to stderr just before a script exits, and after the context manager has
exited (at least, I think that is why it lets exceptions through).
Copied from https://stackoverflow.com/questions/11130156/suppress-stdout-stderr-print-from-python-functions


null_fds#



save_fds#



__enter__()#



__exit__(*_)#












previous
pycram.tasktree




next
pycram.world_reasoning









 Contents
  


Classes
Functions
Module Contents
bcolors
bcolors.HEADER
bcolors.OKBLUE
bcolors.OKCYAN
bcolors.OKGREEN
bcolors.WARNING
bcolors.FAIL
bcolors.ENDC
bcolors.BOLD
bcolors.UNDERLINE


_apply_ik()
GeneratorList
GeneratorList._generated
GeneratorList.get()
GeneratorList.has()


axis_angle_to_quaternion()
suppress_stdout_stderr
suppress_stdout_stderr.null_fds
suppress_stdout_stderr.save_fds
suppress_stdout_stderr.__enter__()
suppress_stdout_stderr.__exit__()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.tasktree — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.tasktree




 Contents 



Attributes
Classes
Functions
Module Contents
NoOperation
NoOperation.perform()
NoOperation.__repr__()


TaskTreeNode
TaskTreeNode.action
TaskTreeNode.status
TaskTreeNode.start_time
TaskTreeNode.end_time
TaskTreeNode.parent
TaskTreeNode.reason
TaskTreeNode.name
TaskTreeNode.__str__()
TaskTreeNode.__repr__()
TaskTreeNode.__len__()
TaskTreeNode.to_sql()
TaskTreeNode.insert()


SimulatedTaskTree
SimulatedTaskTree.__enter__()
SimulatedTaskTree.__exit__()


task_tree
reset_tree()
with_tree()










pycram.tasktree#
Implementation of TaskTrees using anytree.

Attributes#


task_tree
Current TaskTreeNode






Classes#


NoOperation


TaskTreeNode
TaskTreeNode represents one function that was called during a pycram plan.

SimulatedTaskTree
TaskTree for execution in a 'new' simulation.






Functions#


reset_tree(→ None)
Reset the current task tree to an empty root (NoOperation) node.

with_tree(→ typing_extensions.Callable)
Decorator that records the function name, arguments and execution metadata in the task tree.






Module Contents#


class pycram.tasktree.NoOperation#


perform()#



__repr__()#
Return repr(self).




class pycram.tasktree.TaskTreeNode(action: typing_extensions.Optional[pycram.designators.performables.Action] = NoOperation(), parent: typing_extensions.Optional[TaskTreeNode] = None, children: typing_extensions.Optional[typing_extensions.List[TaskTreeNode]] = None, reason: typing_extensions.Optional[Exception] = None)#
Bases: anytree.NodeMixin
TaskTreeNode represents one function that was called during a pycram plan.
Additionally, meta information is stored.


action: typing_extensions.Optional[pycram.designators.performables.Action]#
The action and that is performed or None if nothing was performed



status: pycram.datastructures.enums.TaskStatus#
The status of the node from the TaskStatus enum.



start_time: typing_extensions.Optional[datetime.datetime]#
The starting time of the function, optional



end_time: typing_extensions.Optional[datetime.datetime]#
The ending time of the function, optional



parent#



reason: typing_extensions.Optional[Exception]#



property name#



__str__()#



__repr__()#



__len__()#
Get the number of nodes that are in this subtree.



to_sql() → pycram.orm.tasktree.TaskTreeNode#
Convert this object to the corresponding object in the pycram.orm package.

Returns:
corresponding pycram.orm.task.TaskTreeNode object





insert(session: sqlalchemy.orm.session.Session, recursive: bool = True, parent: typing_extensions.Optional[TaskTreeNode] = None, use_progress_bar: bool = True, progress_bar: typing_extensions.Optional[tqdm.tqdm] = None) → pycram.orm.tasktree.TaskTreeNode#
Insert this node into the database.

Parameters:

session – The current session with the database.
recursive – Rather if the entire tree should be inserted or just this node, defaults to True
parent – The parent node, defaults to None
use_progress_bar – Rather to use a progressbar or not
progress_bar – The progressbar to update. If a progress bar is desired and this is None, a new one will be
created.


Returns:
The ORM object that got inserted






class pycram.tasktree.SimulatedTaskTree#
TaskTree for execution in a ‘new’ simulation.


__enter__()#
At the beginning of a with statement the current task tree and world will be suspended and remembered.
Fresh structures are then available inside the with statement.



__exit__(exc_type, exc_val, exc_tb)#
Restore the old state at the end of a with block.




pycram.tasktree.task_tree: typing_extensions.Optional[TaskTreeNode] = None#
Current TaskTreeNode



pycram.tasktree.reset_tree() → None#
Reset the current task tree to an empty root (NoOperation) node.



pycram.tasktree.with_tree(fun: typing_extensions.Callable) → typing_extensions.Callable#
Decorator that records the function name, arguments and execution metadata in the task tree.

Parameters:
fun – The function to record the data from.













previous
pycram.robot_description




next
pycram.utils









 Contents
  


Attributes
Classes
Functions
Module Contents
NoOperation
NoOperation.perform()
NoOperation.__repr__()


TaskTreeNode
TaskTreeNode.action
TaskTreeNode.status
TaskTreeNode.start_time
TaskTreeNode.end_time
TaskTreeNode.parent
TaskTreeNode.reason
TaskTreeNode.name
TaskTreeNode.__str__()
TaskTreeNode.__repr__()
TaskTreeNode.__len__()
TaskTreeNode.to_sql()
TaskTreeNode.insert()


SimulatedTaskTree
SimulatedTaskTree.__enter__()
SimulatedTaskTree.__exit__()


task_tree
reset_tree()
with_tree()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.ros.viz_marker_publisher — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.ros.viz_marker_publisher




 Contents 



Classes
Module Contents
VizMarkerPublisher
VizMarkerPublisher.topic_name
VizMarkerPublisher.interval
VizMarkerPublisher.pub
VizMarkerPublisher.thread
VizMarkerPublisher.kill_event
VizMarkerPublisher.main_world
VizMarkerPublisher._publish()
VizMarkerPublisher._make_marker_array()
VizMarkerPublisher._stop_publishing()


ManualMarkerPublisher
ManualMarkerPublisher.start_time
ManualMarkerPublisher.marker_array_pub
ManualMarkerPublisher.marker_array
ManualMarkerPublisher.marker_overview
ManualMarkerPublisher.current_id
ManualMarkerPublisher.interval
ManualMarkerPublisher.log_message
ManualMarkerPublisher.publish()
ManualMarkerPublisher._publish()
ManualMarkerPublisher._publish_pose()
ManualMarkerPublisher._publish_object()
ManualMarkerPublisher._make_marker_array()
ManualMarkerPublisher._update_marker()
ManualMarkerPublisher.remove_marker()
ManualMarkerPublisher.clear_all_marker()












pycram.ros.viz_marker_publisher#

Classes#


VizMarkerPublisher
Publishes an Array of visualization marker which represent the situation in the World

ManualMarkerPublisher
Class to manually add and remove marker of objects and poses.






Module Contents#


class pycram.ros.viz_marker_publisher.VizMarkerPublisher(topic_name='/pycram/viz_marker', interval=0.1)#
Publishes an Array of visualization marker which represent the situation in the World


topic_name#



interval#



pub#



thread#



kill_event#



main_world#



_publish() → None#
Constantly publishes the Marker Array. To the given topic name at a fixed rate.



_make_marker_array() → visualization_msgs.msg.MarkerArray#
Creates the Marker Array to be published. There is one Marker for link for each object in the Array, each Object
creates a name space in the visualization Marker. The type of Visualization Marker is decided by the collision
tag of the URDF.

Returns:
An Array of Visualization Marker





_stop_publishing() → None#
Stops the publishing of the Visualization Marker update by setting the kill event and collecting the thread.




class pycram.ros.viz_marker_publisher.ManualMarkerPublisher(topic_name: str = '/pycram/manual_marker', interval: float = 0.1)#
Class to manually add and remove marker of objects and poses.


start_time = None#



marker_array_pub#



marker_array#



marker_overview#



current_id = 0#



interval#



log_message = None#



publish(pose: pycram.datastructures.pose.Pose, color: List | None = None, bw_object: pycram.designator.ObjectDesignatorDescription | None = None, name: str | None = None)#
Publish a pose or an object into the MarkerArray.
Priorities to add an object if possible

Parameters:

pose – Pose of the marker
color – Color of the marker if no object is given
bw_object – Object to add as a marker
name – Name of the marker






_publish(pose: pycram.datastructures.pose.Pose, bw_object: pycram.designator.ObjectDesignatorDescription | None = None, name: str | None = None, color: List | None = None)#
Publish the marker into the MarkerArray



_publish_pose(name: str, pose: pycram.datastructures.pose.Pose, color: List | None = None)#
Publish a Pose as a marker

Parameters:

name – Name of the marker
pose – Pose of the marker
color – Color of the marker






_publish_object(name: str | None, pose: pycram.datastructures.pose.Pose, bw_object: pycram.designator.ObjectDesignatorDescription)#
Publish an Object as a marker

Parameters:

name – Name of the marker
pose – Pose of the marker
bw_object – ObjectDesignatorDescription for the marker






_make_marker_array(name, marker_type: int, marker_pose: pycram.datastructures.pose.Pose, marker_scales: Tuple = (1.0, 1.0, 1.0), color_rgba: std_msgs.msg.ColorRGBA = ColorRGBA(*[1.0, 1.0, 1.0, 1.0]), path_to_resource: Optional[str] = None)#
Create a Marker and add it to the MarkerArray

Parameters:

name – Name of the Marker
marker_type – Type of the marker to create
marker_pose – Pose of the marker
marker_scales – individual scaling of the markers axes
color_rgba – Color of the marker as RGBA
path_to_resource – Path to the resource of a Bulletworld object






_update_marker(marker_id: int, new_pose: pycram.datastructures.pose.Pose) → bool#
Update an existing marker to a new pose

Parameters:

marker_id – id of the marker that should be updated
new_pose – Pose where the updated marker is set


Returns:
True if update was successful, False otherwise





remove_marker(bw_object: pycram.designator.ObjectDesignatorDescription | None = None, name: str | None = None)#
Remove a marker by object or name

Parameters:

bw_object – Object which marker should be removed
name – Name of object that should be removed






clear_all_marker()#
Clear all existing markers












previous
pycram.ros.tf_broadcaster




next
pycram.world_concepts









 Contents
  


Classes
Module Contents
VizMarkerPublisher
VizMarkerPublisher.topic_name
VizMarkerPublisher.interval
VizMarkerPublisher.pub
VizMarkerPublisher.thread
VizMarkerPublisher.kill_event
VizMarkerPublisher.main_world
VizMarkerPublisher._publish()
VizMarkerPublisher._make_marker_array()
VizMarkerPublisher._stop_publishing()


ManualMarkerPublisher
ManualMarkerPublisher.start_time
ManualMarkerPublisher.marker_array_pub
ManualMarkerPublisher.marker_array
ManualMarkerPublisher.marker_overview
ManualMarkerPublisher.current_id
ManualMarkerPublisher.interval
ManualMarkerPublisher.log_message
ManualMarkerPublisher.publish()
ManualMarkerPublisher._publish()
ManualMarkerPublisher._publish_pose()
ManualMarkerPublisher._publish_object()
ManualMarkerPublisher._make_marker_array()
ManualMarkerPublisher._update_marker()
ManualMarkerPublisher.remove_marker()
ManualMarkerPublisher.clear_all_marker()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.ros.tf_broadcaster — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.ros.tf_broadcaster




 Contents 



Classes
Module Contents
TFBroadcaster
TFBroadcaster.world
TFBroadcaster.tf_static_publisher
TFBroadcaster.tf_publisher
TFBroadcaster.thread
TFBroadcaster.kill_event
TFBroadcaster.interval
TFBroadcaster.projection_namespace
TFBroadcaster.odom_frame
TFBroadcaster.update()
TFBroadcaster._update_objects()
TFBroadcaster._update_static_odom()
TFBroadcaster._publish_pose()
TFBroadcaster._publish()
TFBroadcaster._stop_publishing()












pycram.ros.tf_broadcaster#

Classes#


TFBroadcaster
Broadcaster that publishes TF frames for every object in the World.






Module Contents#


class pycram.ros.tf_broadcaster.TFBroadcaster(projection_namespace=ExecutionType.SIMULATED, odom_frame='odom', interval=0.1)#
Broadcaster that publishes TF frames for every object in the World.


world#



tf_static_publisher#



tf_publisher#



thread#



kill_event#



interval#



projection_namespace#



odom_frame#



update()#
Updates the TFs for the static odom frame and all objects currently in the World.



_update_objects() → None#
Publishes the current pose of all objects in the World. As well as the poses of all links of these objects.



_update_static_odom() → None#
Publishes a static odom frame to the tf_static topic.



_publish_pose(child_frame_id: str, pose: pycram.datastructures.pose.Pose, static=False) → None#
Publishes the given pose to the ROS TF topic. First the pose is converted to a Transform between pose.frame and
the given child_frame_id. Afterward, the frames of the Transform are prefixed with the projection namespace.

Parameters:

child_frame_id – Name of the TF frame which the pose points to
pose – Pose that should be published
static – If the pose should be published to the tf_static topic






_publish() → None#
Constantly publishes the positions of all objects in the World.



_stop_publishing() → None#
Called when the process ends, sets the kill_event which terminates the thread that publishes to the TF topic.












previous
pycram.ros.robot_state_updater




next
pycram.ros.viz_marker_publisher









 Contents
  


Classes
Module Contents
TFBroadcaster
TFBroadcaster.world
TFBroadcaster.tf_static_publisher
TFBroadcaster.tf_publisher
TFBroadcaster.thread
TFBroadcaster.kill_event
TFBroadcaster.interval
TFBroadcaster.projection_namespace
TFBroadcaster.odom_frame
TFBroadcaster.update()
TFBroadcaster._update_objects()
TFBroadcaster._update_static_odom()
TFBroadcaster._publish_pose()
TFBroadcaster._publish()
TFBroadcaster._stop_publishing()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.ros.robot_state_updater — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.ros.robot_state_updater




 Contents 



Classes
Module Contents
RobotStateUpdater
RobotStateUpdater.tf_listener
RobotStateUpdater.tf_topic
RobotStateUpdater.joint_state_topic
RobotStateUpdater.tf_timer
RobotStateUpdater.joint_state_timer
RobotStateUpdater._subscribe_tf()
RobotStateUpdater._subscribe_joint_state()
RobotStateUpdater._stop_subscription()












pycram.ros.robot_state_updater#

Classes#


RobotStateUpdater
Updates the robot in the World with information of the real robot published to ROS topics.






Module Contents#


class pycram.ros.robot_state_updater.RobotStateUpdater(tf_topic: str, joint_state_topic: str)#
Updates the robot in the World with information of the real robot published to ROS topics.
Infos used to update the robot are:


The current pose of the robot
The current joint state of the robot




tf_listener#



tf_topic#



joint_state_topic#



tf_timer#



joint_state_timer#



_subscribe_tf(msg: geometry_msgs.msg.TransformStamped) → None#
Callback for the TF timer, will do a lookup of the transform between map frame and the robot base frame.

Parameters:
msg – TransformStamped message published to the topic





_subscribe_joint_state(msg: sensor_msgs.msg.JointState) → None#
Sets the current joint configuration of the robot in the world to the configuration published on the
topic. Since this uses rospy.wait_for_message which can have errors when used with threads there might be an
attribute error in the rospy implementation.

Parameters:
msg – JointState message published to the topic.





_stop_subscription() → None#
Stops the Timer for TF and joint states and therefore the updating of the robot in the world.












previous
pycram.ros.joint_state_publisher




next
pycram.ros.tf_broadcaster









 Contents
  


Classes
Module Contents
RobotStateUpdater
RobotStateUpdater.tf_listener
RobotStateUpdater.tf_topic
RobotStateUpdater.joint_state_topic
RobotStateUpdater.tf_timer
RobotStateUpdater.joint_state_timer
RobotStateUpdater._subscribe_tf()
RobotStateUpdater._subscribe_joint_state()
RobotStateUpdater._stop_subscription()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.ros.joint_state_publisher — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.ros.joint_state_publisher




 Contents 



Classes
Module Contents
JointStatePublisher
JointStatePublisher.world
JointStatePublisher.joint_state_pub
JointStatePublisher.interval
JointStatePublisher.kill_event
JointStatePublisher.thread
JointStatePublisher._publish()
JointStatePublisher._stop_publishing()












pycram.ros.joint_state_publisher#

Classes#


JointStatePublisher
Joint state publisher for the robot currently loaded in the World






Module Contents#


class pycram.ros.joint_state_publisher.JointStatePublisher(joint_state_topic='/pycram/joint_state', interval=0.1)#
Joint state publisher for the robot currently loaded in the World


world#



joint_state_pub#



interval#



kill_event#



thread#



_publish() → None#
Publishes the current joint states of the robot in an infinite loop.
The joint states are published as long as the kill_event is not set by _stop_publishing()



_stop_publishing() → None#
Sets the kill_event to terminate the publishing thread and joins the thread.












previous
pycram.ros.force_torque_sensor




next
pycram.ros.robot_state_updater









 Contents
  


Classes
Module Contents
JointStatePublisher
JointStatePublisher.world
JointStatePublisher.joint_state_pub
JointStatePublisher.interval
JointStatePublisher.kill_event
JointStatePublisher.thread
JointStatePublisher._publish()
JointStatePublisher._stop_publishing()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.ros — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.ros




 Contents 



Submodules








pycram.ros#

Submodules#


pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher












previous
pycram.robot_descriptions.ur5_description




next
pycram.ros.force_torque_sensor









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.ros.force_torque_sensor — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.ros.force_torque_sensor




 Contents 



Classes
Module Contents
ForceTorqueSensor
ForceTorqueSensor.world
ForceTorqueSensor.fts_joint_idx
ForceTorqueSensor.joint_name
ForceTorqueSensor.fts_pub
ForceTorqueSensor.interval
ForceTorqueSensor.kill_event
ForceTorqueSensor.thread
ForceTorqueSensor._publish()
ForceTorqueSensor._stop_publishing()












pycram.ros.force_torque_sensor#

Classes#


ForceTorqueSensor
Simulated force-torque sensor for a joint with a given name.






Module Contents#


class pycram.ros.force_torque_sensor.ForceTorqueSensor(joint_name, fts_topic='/pycram/fts', interval=0.1)#
Simulated force-torque sensor for a joint with a given name.
Reads simulated forces and torques at that joint from world and publishes geometry_msgs/Wrench messages
to the given topic.


world#



fts_joint_idx = None#



joint_name#



fts_pub#



interval#



kill_event#



thread#



_publish() → None#
Continuously publishes the force-torque values for the simulated joint. Values are published as long as the
kill_event is not set.



_stop_publishing() → None#
Sets the kill_event and therefore terminates the Thread publishing the force-torque values as well as join the
threads.












previous
pycram.ros




next
pycram.ros.joint_state_publisher









 Contents
  


Classes
Module Contents
ForceTorqueSensor
ForceTorqueSensor.world
ForceTorqueSensor.fts_joint_idx
ForceTorqueSensor.joint_name
ForceTorqueSensor.fts_pub
ForceTorqueSensor.interval
ForceTorqueSensor.kill_event
ForceTorqueSensor.thread
ForceTorqueSensor._publish()
ForceTorqueSensor._stop_publishing()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.robot_descriptions.ur5_description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.robot_descriptions.ur5_description




 Contents 



Attributes
Module Contents
rospack
filename
ur5_description
arm
gripper
rdm










pycram.robot_descriptions.ur5_description#

Attributes#


rospack


filename


ur5_description


arm


gripper


rdm







Module Contents#


pycram.robot_descriptions.ur5_description.rospack#



pycram.robot_descriptions.ur5_description.filename#



pycram.robot_descriptions.ur5_description.ur5_description#



pycram.robot_descriptions.ur5_description.arm#



pycram.robot_descriptions.ur5_description.gripper#



pycram.robot_descriptions.ur5_description.rdm#











previous
pycram.robot_descriptions.turtlebot_description




next
pycram.ros









 Contents
  


Attributes
Module Contents
rospack
filename
ur5_description
arm
gripper
rdm










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.robot_descriptions.turtlebot_description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.robot_descriptions.turtlebot_description




 Contents 



Attributes
Module Contents
rospack
filename
turtlebot
rdm










pycram.robot_descriptions.turtlebot_description#

Attributes#


rospack


filename


turtlebot


rdm







Module Contents#


pycram.robot_descriptions.turtlebot_description.rospack#



pycram.robot_descriptions.turtlebot_description.filename#



pycram.robot_descriptions.turtlebot_description.turtlebot#



pycram.robot_descriptions.turtlebot_description.rdm#











previous
pycram.robot_descriptions.tiago_description




next
pycram.robot_descriptions.ur5_description









 Contents
  


Attributes
Module Contents
rospack
filename
turtlebot
rdm










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.robot_descriptions.tiago_description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.robot_descriptions.tiago_description




 Contents 



Attributes
Module Contents
rospack
filename
tiago_description
left_arm
left_gripper
right_arm
right_gripper
camera
rdm










pycram.robot_descriptions.tiago_description#

Attributes#


rospack


filename


tiago_description


left_arm


left_gripper


right_arm


right_gripper


camera


rdm







Module Contents#


pycram.robot_descriptions.tiago_description.rospack#



pycram.robot_descriptions.tiago_description.filename#



pycram.robot_descriptions.tiago_description.tiago_description#



pycram.robot_descriptions.tiago_description.left_arm#



pycram.robot_descriptions.tiago_description.left_gripper#



pycram.robot_descriptions.tiago_description.right_arm#



pycram.robot_descriptions.tiago_description.right_gripper#



pycram.robot_descriptions.tiago_description.camera#



pycram.robot_descriptions.tiago_description.rdm#











previous
pycram.robot_descriptions.stretch_description




next
pycram.robot_descriptions.turtlebot_description









 Contents
  


Attributes
Module Contents
rospack
filename
tiago_description
left_arm
left_gripper
right_arm
right_gripper
camera
rdm










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.robot_descriptions.stretch_description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.robot_descriptions.stretch_description




 Contents 



Attributes
Module Contents
rospack
filename
stretch_description
arm_description
gripper_description
neck
realsense_color
realsense_depth
realsense_infra1
realsense_infra2
rdm










pycram.robot_descriptions.stretch_description#

Attributes#


rospack


filename


stretch_description


arm_description


gripper_description


neck


realsense_color


realsense_depth


realsense_infra1


realsense_infra2


rdm







Module Contents#


pycram.robot_descriptions.stretch_description.rospack#



pycram.robot_descriptions.stretch_description.filename#



pycram.robot_descriptions.stretch_description.stretch_description#



pycram.robot_descriptions.stretch_description.arm_description#



pycram.robot_descriptions.stretch_description.gripper_description#



pycram.robot_descriptions.stretch_description.neck#



pycram.robot_descriptions.stretch_description.realsense_color#



pycram.robot_descriptions.stretch_description.realsense_depth#



pycram.robot_descriptions.stretch_description.realsense_infra1#



pycram.robot_descriptions.stretch_description.realsense_infra2#



pycram.robot_descriptions.stretch_description.rdm#











previous
pycram.robot_descriptions.pr2_description




next
pycram.robot_descriptions.tiago_description









 Contents
  


Attributes
Module Contents
rospack
filename
stretch_description
arm_description
gripper_description
neck
realsense_color
realsense_depth
realsense_infra1
realsense_infra2
rdm










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.robot_descriptions.pr2_description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.robot_descriptions.pr2_description




 Contents 



Attributes
Module Contents
rospack
filename
pr2_description
left_arm
left_gripper
right_arm
right_gripper
camera
rdm










pycram.robot_descriptions.pr2_description#

Attributes#


rospack


filename


pr2_description


left_arm


left_gripper


right_arm


right_gripper


camera


rdm







Module Contents#


pycram.robot_descriptions.pr2_description.rospack#



pycram.robot_descriptions.pr2_description.filename#



pycram.robot_descriptions.pr2_description.pr2_description#



pycram.robot_descriptions.pr2_description.left_arm#



pycram.robot_descriptions.pr2_description.left_gripper#



pycram.robot_descriptions.pr2_description.right_arm#



pycram.robot_descriptions.pr2_description.right_gripper#



pycram.robot_descriptions.pr2_description.camera#



pycram.robot_descriptions.pr2_description.rdm#











previous
pycram.robot_descriptions.hsrb_description




next
pycram.robot_descriptions.stretch_description









 Contents
  


Attributes
Module Contents
rospack
filename
pr2_description
left_arm
left_gripper
right_arm
right_gripper
camera
rdm










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.robot_descriptions — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.robot_descriptions




 Contents 



Submodules
Attributes
Classes
Package Contents
modules
__all__
DeprecatedRobotDescription
DeprecatedRobotDescription.raise_error()
DeprecatedRobotDescription.name
DeprecatedRobotDescription.chains
DeprecatedRobotDescription.joints
DeprecatedRobotDescription.torso_joint
DeprecatedRobotDescription.torso_link


robot_description










pycram.robot_descriptions#

Submodules#


pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description




Attributes#


modules


__all__


robot_description







Classes#


DeprecatedRobotDescription







Package Contents#


pycram.robot_descriptions.modules#



pycram.robot_descriptions.__all__#



class pycram.robot_descriptions.DeprecatedRobotDescription#


raise_error()#



property name#



property chains#



property joints#



property torso_joint#



property torso_link#




pycram.robot_descriptions.robot_description#











previous
pycram.process_modules.stretch_process_modules




next
pycram.robot_descriptions.boxy_description









 Contents
  


Submodules
Attributes
Classes
Package Contents
modules
__all__
DeprecatedRobotDescription
DeprecatedRobotDescription.raise_error()
DeprecatedRobotDescription.name
DeprecatedRobotDescription.chains
DeprecatedRobotDescription.joints
DeprecatedRobotDescription.torso_joint
DeprecatedRobotDescription.torso_link


robot_description










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.robot_descriptions.hsrb_description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.robot_descriptions.hsrb_description




 Contents 



Attributes
Module Contents
rospack
filename
hsrb_description
left_arm
left_gripper
head_center_camera
head_r_camera
head_l_camera
head_rgbd_camera
hand_camera
neck
rdm










pycram.robot_descriptions.hsrb_description#

Attributes#


rospack


filename


hsrb_description


left_arm


left_gripper


head_center_camera


head_r_camera


head_l_camera


head_rgbd_camera


hand_camera


neck


rdm







Module Contents#


pycram.robot_descriptions.hsrb_description.rospack#



pycram.robot_descriptions.hsrb_description.filename#



pycram.robot_descriptions.hsrb_description.hsrb_description#



pycram.robot_descriptions.hsrb_description.left_arm#



pycram.robot_descriptions.hsrb_description.left_gripper#



pycram.robot_descriptions.hsrb_description.head_center_camera#



pycram.robot_descriptions.hsrb_description.head_r_camera#



pycram.robot_descriptions.hsrb_description.head_l_camera#



pycram.robot_descriptions.hsrb_description.head_rgbd_camera#



pycram.robot_descriptions.hsrb_description.hand_camera#



pycram.robot_descriptions.hsrb_description.neck#



pycram.robot_descriptions.hsrb_description.rdm#











previous
pycram.robot_descriptions.donbot_description




next
pycram.robot_descriptions.pr2_description









 Contents
  


Attributes
Module Contents
rospack
filename
hsrb_description
left_arm
left_gripper
head_center_camera
head_r_camera
head_l_camera
head_rgbd_camera
hand_camera
neck
rdm










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.robot_descriptions.donbot_description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.robot_descriptions.donbot_description




 Contents 



Attributes
Module Contents
rospack
filename
donbot_description
right_arm
right_gripper
camera
rdm










pycram.robot_descriptions.donbot_description#

Attributes#


rospack


filename


donbot_description


right_arm


right_gripper


camera


rdm







Module Contents#


pycram.robot_descriptions.donbot_description.rospack#



pycram.robot_descriptions.donbot_description.filename#



pycram.robot_descriptions.donbot_description.donbot_description#



pycram.robot_descriptions.donbot_description.right_arm#



pycram.robot_descriptions.donbot_description.right_gripper#



pycram.robot_descriptions.donbot_description.camera#



pycram.robot_descriptions.donbot_description.rdm#











previous
pycram.robot_descriptions.boxy_description




next
pycram.robot_descriptions.hsrb_description









 Contents
  


Attributes
Module Contents
rospack
filename
donbot_description
right_arm
right_gripper
camera
rdm










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.robot_descriptions.boxy_description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.robot_descriptions.boxy_description




 Contents 



Attributes
Module Contents
rospack
filename
boxy_description
right_arm
right_gripper
left_arm
left_gripper
camera
rdm










pycram.robot_descriptions.boxy_description#

Attributes#


rospack


filename


boxy_description


right_arm


right_gripper


left_arm


left_gripper


camera


rdm







Module Contents#


pycram.robot_descriptions.boxy_description.rospack#



pycram.robot_descriptions.boxy_description.filename#



pycram.robot_descriptions.boxy_description.boxy_description#



pycram.robot_descriptions.boxy_description.right_arm#



pycram.robot_descriptions.boxy_description.right_gripper#



pycram.robot_descriptions.boxy_description.left_arm#



pycram.robot_descriptions.boxy_description.left_gripper#



pycram.robot_descriptions.boxy_description.camera#



pycram.robot_descriptions.boxy_description.rdm#











previous
pycram.robot_descriptions




next
pycram.robot_descriptions.donbot_description









 Contents
  


Attributes
Module Contents
rospack
filename
boxy_description
right_arm
right_gripper
left_arm
left_gripper
camera
rdm










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.robot_description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.robot_description




 Contents 



Classes
Module Contents
RobotDescriptionManager
RobotDescriptionManager._instance
RobotDescriptionManager.descriptions
RobotDescriptionManager._initialized
RobotDescriptionManager.load_description()
RobotDescriptionManager.register_description()


RobotDescription
RobotDescription.current_robot_description
RobotDescription.name
RobotDescription.base_link
RobotDescription.torso_link
RobotDescription.torso_joint
RobotDescription.urdf_object
RobotDescription.kinematic_chains
RobotDescription.cameras
RobotDescription.grasps
RobotDescription.links
RobotDescription.joints
RobotDescription.add_kinematic_chain_description()
RobotDescription.add_kinematic_chain()
RobotDescription.add_camera_description()
RobotDescription.add_camera()
RobotDescription.add_grasp_orientation()
RobotDescription.add_grasp_orientations()
RobotDescription.get_manipulator_chains()
RobotDescription.get_camera_frame()
RobotDescription.get_default_camera()
RobotDescription.get_static_joint_chain()
RobotDescription.get_parent()
RobotDescription.get_child()
RobotDescription.get_arm_chain()


KinematicChainDescription
KinematicChainDescription.name
KinematicChainDescription.start_link
KinematicChainDescription.end_link
KinematicChainDescription.urdf_object
KinematicChainDescription.include_fixed_joints
KinematicChainDescription.link_names
KinematicChainDescription.joint_names
KinematicChainDescription.end_effector
KinematicChainDescription.arm_type
KinematicChainDescription.static_joint_states
KinematicChainDescription._init_links()
KinematicChainDescription._init_joints()
KinematicChainDescription.get_joints()
KinematicChainDescription.get_links()
KinematicChainDescription.links
KinematicChainDescription.joints
KinematicChainDescription.add_static_joint_states()
KinematicChainDescription.get_static_joint_states()
KinematicChainDescription.get_tool_frame()
KinematicChainDescription.get_static_gripper_state()


CameraDescription
CameraDescription.name
CameraDescription.link_name
CameraDescription.minimal_height
CameraDescription.maximal_height
CameraDescription.horizontal_angle
CameraDescription.vertical_angle
CameraDescription.front_facing_axis


EndEffectorDescription
EndEffectorDescription.name
EndEffectorDescription.start_link
EndEffectorDescription.tool_frame
EndEffectorDescription.urdf_object
EndEffectorDescription.link_names
EndEffectorDescription.joint_names
EndEffectorDescription.static_joint_states
EndEffectorDescription.end_effector_type
EndEffectorDescription.opening_distance
EndEffectorDescription._init_links_joints()
EndEffectorDescription.add_static_joint_states()
EndEffectorDescription.links
EndEffectorDescription.joints












pycram.robot_description#

Classes#


RobotDescriptionManager
Singleton class to manage multiple robot descriptions. Stores all robot descriptions and loads a robot description

RobotDescription
Base class of a robot description. Contains all necessary information about a robot, like the URDF, the base link,

KinematicChainDescription
Represents a kinematic chain of a robot. A Kinematic chain is a chain of links and joints that are connected to each

CameraDescription
Represents a camera mounted on a robot. Contains all necessary information about the camera, like the link name,

EndEffectorDescription
Describes an end effector of robot. Contains all necessary information about the end effector, like the






Module Contents#


class pycram.robot_description.RobotDescriptionManager#
Singleton class to manage multiple robot descriptions. Stores all robot descriptions and loads a robot description
according to the name of the loaded robot.


_instance = None#



descriptions: typing_extensions.Dict[str, RobotDescription]#



_initialized = True#



load_description(name: str)#
Loads a robot description according to the name of the robot. This required that a robot description with the
corresponding name is registered.

Parameters:
name – Name of the robot to which the description should be loaded.

Returns:
The loaded robot description.





register_description(description: RobotDescription)#
Register a robot description to the RobotDescriptionManager. The description is stored with the name of the
description as key. This will later be used to load the description.

Parameters:
description – RobotDescription to register.






class pycram.robot_description.RobotDescription(name: str, base_link: str, torso_link: str, torso_joint: str, urdf_path: str)#
Base class of a robot description. Contains all necessary information about a robot, like the URDF, the base link,
the torso link and joint, the kinematic chains and cameras.


current_robot_description: RobotDescription = None#
The currently loaded robot description.



name: str#
Name of the robot



base_link: str#
Base link of the robot



torso_link: str#
Torso link of the robot



torso_joint: str#
Torso joint of the robot



urdf_object: urdf_parser_py.urdf.URDF#
Parsed URDF of the robot



kinematic_chains: typing_extensions.Dict[str, KinematicChainDescription]#
All kinematic chains defined for this robot



cameras: typing_extensions.Dict[str, CameraDescription]#
All cameras defined for this robot



grasps: typing_extensions.Dict[pycram.datastructures.enums.Grasp, typing_extensions.List[float]]#
The orientations of the end effector for different grasps



links: typing_extensions.List[str]#
All links defined in the URDF



joints: typing_extensions.List[str]#
All joints defined in the URDF, by default fixed joints are not included



add_kinematic_chain_description(chain: KinematicChainDescription)#
Adds a KinematicChainDescription object to the RobotDescription. The chain is stored with the name of the chain
as key.

Parameters:
chain – KinematicChainDescription object to add





add_kinematic_chain(name: str, start_link: str, end_link: str)#
Creates and adds a KinematicChainDescription object to the RobotDescription.

Parameters:

name – Name of the KinematicChainDescription object
start_link – First link of the chain
end_link – Last link of the chain






add_camera_description(camera: CameraDescription)#
Adds a CameraDescription object to the RobotDescription. The camera is stored with the name of the camera as key.
:param camera: The CameraDescription object to add



add_camera(name: str, camera_link: str, minimal_height: float, maximal_height: float)#
Creates and adds a CameraDescription object to the RobotDescription. Minimal and maximal height of the camera are
relevant if the robot has a moveable torso or the camera is mounted on a moveable part of the robot. Otherwise
both values can be the same.

Parameters:

name – Name of the CameraDescription object
camera_link – Link of the camera in the URDF
minimal_height – Minimal height of the camera
maximal_height – Maximal height of the camera


Returns:






add_grasp_orientation(grasp: pycram.datastructures.enums.Grasp, orientation: typing_extensions.List[float])#
Adds a grasp orientation to the robot description. This is used to define the orientation of the end effector
when grasping an object.

Parameters:

grasp – Gasp from the Grasp enum which should be added
orientation – List of floats representing the orientation






add_grasp_orientations(orientations: typing_extensions.Dict[pycram.datastructures.enums.Grasp, typing_extensions.List[float]])#
Adds multiple grasp orientations to the robot description. This is used to define the orientation of the end effector
when grasping an object.

Parameters:
orientations – Dictionary of grasp orientations





get_manipulator_chains() → typing_extensions.List[KinematicChainDescription]#
Returns a list of all manipulator chains of the robot which posses an end effector.

Returns:
A list of KinematicChainDescription objects





get_camera_frame() → str#
Quick method to get the name of a link of a camera. Uses the first camera in the list of cameras.

Returns:
A name of the link of a camera





get_default_camera() → CameraDescription#
Returns the first camera in the list of cameras.

Returns:
A CameraDescription object





get_static_joint_chain(kinematic_chain_name: str, configuration_name: str)#
Returns the static joint states of a kinematic chain for a specific configuration. When trying to access one of
the robot arms the function :func: get_arm_chain should be used.

Parameters:

kinematic_chain_name
configuration_name


Returns:






get_parent(name: str) → str#
Returns the parent of a link or joint in the URDF. Always returns the imeadiate parent, for a link this is a joint
and vice versa.

Parameters:
name – Name of the link or joint in the URDF

Returns:
Name of the parent link or joint





get_child(name: str, return_multiple_children: bool = False) → typing_extensions.Union[str, typing_extensions.List[str]]#
Returns the child of a link or joint in the URDF. Always returns the immediate child, for a link this is a joint
and vice versa. Since a link can have multiple children, the return_multiple_children parameter can be set to
True to get a list of all children.

Parameters:

name – Name of the link or joint in the URDF
return_multiple_children – If True, a list of all children is returned


Returns:
Name of the child link or joint or a list of all children





get_arm_chain(arm: pycram.datastructures.enums.Arms) → typing_extensions.Union[KinematicChainDescription, typing_extensions.List[KinematicChainDescription]]#
Returns the kinematic chain of a specific arm. If the arm is set to BOTH, all kinematic chains are returned.

Parameters:
arm – Arm for which the chain should be returned

Returns:
KinematicChainDescription object of the arm






class pycram.robot_description.KinematicChainDescription(name: str, start_link: str, end_link: str, urdf_object: urdf_parser_py.urdf.URDF, arm_type: pycram.datastructures.enums.Arms = None, include_fixed_joints=False)#
Represents a kinematic chain of a robot. A Kinematic chain is a chain of links and joints that are connected to each
other and can be moved.
This class contains all necessary information about the chain, like the start and end
link, the URDF object and the joints of the chain.


name: str#
Name of the chain



start_link: str#
First link of the chain



end_link: str#
Last link of the chain



urdf_object: urdf_parser_py.urdf.URDF#
Parsed URDF of the robot



include_fixed_joints: bool#
If True, fixed joints are included in the chain



link_names: typing_extensions.List[str]#
List of all links in the chain



joint_names: typing_extensions.List[str]#
List of all joints in the chain



end_effector: EndEffectorDescription#
End effector of the chain, if there is one



arm_type: pycram.datastructures.enums.Arms#
Type of the arm, if the chain is an arm



static_joint_states: typing_extensions.Dict[str, typing_extensions.Dict[str, float]]#
Dictionary of static joint states for the chain



_init_links()#
Initializes the links of the chain by getting the chain from the URDF object.



_init_joints()#
Initializes the joints of the chain by getting the chain from the URDF object.



get_joints() → typing_extensions.List[str]#
Returns a list of all joints of the chain.

Returns:
List of joint names





get_links() → typing_extensions.List[str]#
Returns a list of all links of the chain.

Returns:
List of link names





property links: typing_extensions.List[str]#
Property to get the links of the chain.

Returns:
List of link names





property joints: typing_extensions.List[str]#
Property to get the joints of the chain.

Returns:
List of joint names





add_static_joint_states(name: str, states: dict)#
Adds static joint states to the chain. These define a specific configuration of the chain.

Parameters:

name – Name of the static joint states
states – Dictionary of joint names and their values






get_static_joint_states(name: str) → typing_extensions.Dict[str, float]#
Returns the dictionary of static joint states for a given name of the static joint states.

Parameters:
name – Name of the static joint states

Returns:
Dictionary of joint names and their values





get_tool_frame() → str#
Returns the name of the tool frame of the end effector of this chain, if it has an end effector.

Returns:
The name of the link of the tool frame in the URDF.





get_static_gripper_state(state: pycram.datastructures.enums.GripperState) → typing_extensions.Dict[str, float]#
Returns the static joint states for the gripper of the chain.

Parameters:
state – Name of the static joint states

Returns:
Dictionary of joint names and their values






class pycram.robot_description.CameraDescription(name: str, link_name: str, minimal_height: float, maximal_height: float, horizontal_angle: float = 20, vertical_angle: float = 20, front_facing_axis: typing_extensions.List[float] = None)#
Represents a camera mounted on a robot. Contains all necessary information about the camera, like the link name,
minimal and maximal height, horizontal and vertical angle and the front facing axis.


name: str#
Name of the camera



link_name: str#
Name of the link in the URDF



minimal_height: float#
Minimal height the camera can be at



maximal_height: float#
Maximal height the camera can be at



horizontal_angle: float#
Horizontal opening angle of the camera



vertical_angle: float#
Vertical opening angle of the camera



front_facing_axis: typing_extensions.List[int]#
Axis along which the camera is taking the image




class pycram.robot_description.EndEffectorDescription(name: str, start_link: str, tool_frame: str, urdf_object: urdf_parser_py.urdf.URDF)#
Describes an end effector of robot. Contains all necessary information about the end effector, like the
base link, the tool frame, the URDF object and the static joint states.


name: str#
Name of the end effector



start_link: str#
Root link of the end effector, every link below this link in the URDF is part of the end effector



tool_frame: str#
Name of the tool frame link in the URDf



urdf_object: urdf_parser_py.urdf.URDF#
Parsed URDF of the robot



link_names: typing_extensions.List[str]#
List of all links in the end effector



joint_names: typing_extensions.List[str]#
List of all joints in the end effector



static_joint_states: typing_extensions.Dict[pycram.datastructures.enums.GripperState, typing_extensions.Dict[str, float]]#
Dictionary of static joint states for the end effector



end_effector_type: pycram.datastructures.enums.GripperType#
Type of the gripper



opening_distance: float#
Distance the gripper can open, in cm



_init_links_joints()#
Traverses the URDF object to get all links and joints of the end effector below the start link.1



add_static_joint_states(name: pycram.datastructures.enums.GripperState, states: dict)#
Adds static joint states to the end effector. These define a specific configuration of the end effector. Like
open and close configurations of a gripper.

Parameters:

name – Name of the static joint states
states – Dictionary of joint names and their values






property links: typing_extensions.List[str]#
Property to get the links of the chain.

Returns:
List of link names





property joints: typing_extensions.List[str]#
Property to get the joints of the chain.

Returns:
List of joint names














previous
pycram.process_module




next
pycram.tasktree









 Contents
  


Classes
Module Contents
RobotDescriptionManager
RobotDescriptionManager._instance
RobotDescriptionManager.descriptions
RobotDescriptionManager._initialized
RobotDescriptionManager.load_description()
RobotDescriptionManager.register_description()


RobotDescription
RobotDescription.current_robot_description
RobotDescription.name
RobotDescription.base_link
RobotDescription.torso_link
RobotDescription.torso_joint
RobotDescription.urdf_object
RobotDescription.kinematic_chains
RobotDescription.cameras
RobotDescription.grasps
RobotDescription.links
RobotDescription.joints
RobotDescription.add_kinematic_chain_description()
RobotDescription.add_kinematic_chain()
RobotDescription.add_camera_description()
RobotDescription.add_camera()
RobotDescription.add_grasp_orientation()
RobotDescription.add_grasp_orientations()
RobotDescription.get_manipulator_chains()
RobotDescription.get_camera_frame()
RobotDescription.get_default_camera()
RobotDescription.get_static_joint_chain()
RobotDescription.get_parent()
RobotDescription.get_child()
RobotDescription.get_arm_chain()


KinematicChainDescription
KinematicChainDescription.name
KinematicChainDescription.start_link
KinematicChainDescription.end_link
KinematicChainDescription.urdf_object
KinematicChainDescription.include_fixed_joints
KinematicChainDescription.link_names
KinematicChainDescription.joint_names
KinematicChainDescription.end_effector
KinematicChainDescription.arm_type
KinematicChainDescription.static_joint_states
KinematicChainDescription._init_links()
KinematicChainDescription._init_joints()
KinematicChainDescription.get_joints()
KinematicChainDescription.get_links()
KinematicChainDescription.links
KinematicChainDescription.joints
KinematicChainDescription.add_static_joint_states()
KinematicChainDescription.get_static_joint_states()
KinematicChainDescription.get_tool_frame()
KinematicChainDescription.get_static_gripper_state()


CameraDescription
CameraDescription.name
CameraDescription.link_name
CameraDescription.minimal_height
CameraDescription.maximal_height
CameraDescription.horizontal_angle
CameraDescription.vertical_angle
CameraDescription.front_facing_axis


EndEffectorDescription
EndEffectorDescription.name
EndEffectorDescription.start_link
EndEffectorDescription.tool_frame
EndEffectorDescription.urdf_object
EndEffectorDescription.link_names
EndEffectorDescription.joint_names
EndEffectorDescription.static_joint_states
EndEffectorDescription.end_effector_type
EndEffectorDescription.opening_distance
EndEffectorDescription._init_links_joints()
EndEffectorDescription.add_static_joint_states()
EndEffectorDescription.links
EndEffectorDescription.joints












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.process_modules.stretch_process_modules — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.process_modules.stretch_process_modules




 Contents 



Classes
Functions
Module Contents
StretchNavigate
StretchMoveHead
StretchMoveHead._execute()


StretchMoveGripper
StretchDetecting
StretchMoveTCP
StretchMoveArmJoints
StretchMoveJoints
StretchWorldStateDetecting
StretchOpen
StretchOpen._execute()


StretchClose
StretchClose._execute()


_move_arm_tcp()
StretchNavigationReal
StretchNavigationReal._execute()


StretchMoveHeadReal
StretchMoveHeadReal._execute()


StretchDetectingReal
StretchDetectingReal._execute()


StretchMoveTCPReal
StretchMoveTCPReal._execute()


StretchMoveArmJointsReal
StretchMoveArmJointsReal._execute()


StretchMoveJointsReal
StretchMoveJointsReal._execute()


StretchMoveGripperReal
StretchMoveGripperReal._execute()


StretchOpenReal
StretchOpenReal._execute()


StretchCloseReal
StretchCloseReal._execute()


StretchManager
StretchManager._navigate_lock
StretchManager._looking_lock
StretchManager._detecting_lock
StretchManager._move_tcp_lock
StretchManager._move_arm_joints_lock
StretchManager._world_state_detecting_lock
StretchManager._move_joints_lock
StretchManager._move_gripper_lock
StretchManager._open_lock
StretchManager._close_lock
StretchManager.navigate()
StretchManager.looking()
StretchManager.detecting()
StretchManager.move_tcp()
StretchManager.move_arm_joints()
StretchManager.world_state_detecting()
StretchManager.move_joints()
StretchManager.move_gripper()
StretchManager.open()
StretchManager.close()












pycram.process_modules.stretch_process_modules#

Classes#


StretchNavigate
Process module for the simulated Stretch that sends a cartesian goal to the robot to move the robot base

StretchMoveHead
Process module for the simulated Stretch that moves the head such that it looks at the given position

StretchMoveGripper
Process module for the simulated Stretch that opens or closes the gripper

StretchDetecting
Process Module for the simulated Stretch that tries to detect an object fitting the given object description

StretchMoveTCP
Process module for the simulated Stretch that moves the tool center point of the robot

StretchMoveArmJoints
Process module for the simulated Stretch that moves the arm joints of the robot

StretchMoveJoints
Process module for the simulated Stretch that moves any joint of the robot

StretchWorldStateDetecting
Process Module for the simulated Stretch that tries to detect an object using the world state

StretchOpen
Process module for the simulated Stretch that opens an already grasped container

StretchClose
Process module for the simulated Stretch that closes an already grasped container

StretchNavigationReal
Process module for the real Stretch that sends a cartesian goal to giskard to move the robot base

StretchMoveHeadReal
Process module for the real robot to move that such that it looks at the given position. Uses the same calculation

StretchDetectingReal
Process Module for the real Stretch that tries to detect an object fitting the given object description. Uses Robokudo

StretchMoveTCPReal
Moves the tool center point of the real Stretch while avoiding all collisions

StretchMoveArmJointsReal
Moves the arm joints of the real Stretch to the given configuration while avoiding all collisions

StretchMoveJointsReal
Moves any joint using giskard, avoids all collisions while doint this.

StretchMoveGripperReal
Opens or closes the gripper of the real Stretch, gripper uses an action server for this instead of giskard

StretchOpenReal
Tries to open an already grasped container

StretchCloseReal
Tries to close an already grasped container

StretchManager







Functions#


_move_arm_tcp(→ None)







Module Contents#


class pycram.process_modules.stretch_process_modules.StretchNavigate(lock)#
Bases: pycram.process_modules.default_process_modules.DefaultNavigation
Process module for the simulated Stretch that sends a cartesian goal to the robot to move the robot base



class pycram.process_modules.stretch_process_modules.StretchMoveHead(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Process module for the simulated Stretch that moves the head such that it looks at the given position


_execute(designator: MoveMotion) → Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchMoveGripper(lock)#
Bases: pycram.process_modules.default_process_modules.DefaultMoveGripper
Process module for the simulated Stretch that opens or closes the gripper



class pycram.process_modules.stretch_process_modules.StretchDetecting(lock)#
Bases: pycram.process_modules.default_process_modules.DefaultDetecting
Process Module for the simulated Stretch that tries to detect an object fitting the given object description



class pycram.process_modules.stretch_process_modules.StretchMoveTCP(lock)#
Bases: pycram.process_modules.default_process_modules.DefaultMoveTCP
Process module for the simulated Stretch that moves the tool center point of the robot



class pycram.process_modules.stretch_process_modules.StretchMoveArmJoints(lock)#
Bases: pycram.process_modules.default_process_modules.DefaultMoveArmJoints
Process module for the simulated Stretch that moves the arm joints of the robot



class pycram.process_modules.stretch_process_modules.StretchMoveJoints(lock)#
Bases: pycram.process_modules.default_process_modules.DefaultMoveJoints
Process module for the simulated Stretch that moves any joint of the robot



class pycram.process_modules.stretch_process_modules.StretchWorldStateDetecting(lock)#
Bases: pycram.process_modules.default_process_modules.DefaultWorldStateDetecting
Process Module for the simulated Stretch that tries to detect an object using the world state



class pycram.process_modules.stretch_process_modules.StretchOpen(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Process module for the simulated Stretch that opens an already grasped container


_execute(desig: OpeningMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchClose(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Process module for the simulated Stretch that closes an already grasped container


_execute(desig: ClosingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




pycram.process_modules.stretch_process_modules._move_arm_tcp(target: Pose, robot: pycram.process_modules.default_process_modules.Object, arm: Arms) → None#



class pycram.process_modules.stretch_process_modules.StretchNavigationReal(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Process module for the real Stretch that sends a cartesian goal to giskard to move the robot base


_execute(designator: MoveMotion) → Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchMoveHeadReal(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Process module for the real robot to move that such that it looks at the given position. Uses the same calculation
as the simulated one


_execute(desig: LookingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchDetectingReal(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Process Module for the real Stretch that tries to detect an object fitting the given object description. Uses Robokudo
for perception of the environment.


_execute(designator: DetectingMotion) → Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchMoveTCPReal(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Moves the tool center point of the real Stretch while avoiding all collisions


_execute(designator: MoveTCPMotion) → Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchMoveArmJointsReal(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Moves the arm joints of the real Stretch to the given configuration while avoiding all collisions


_execute(designator: MoveArmJointsMotion) → Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchMoveJointsReal(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Moves any joint using giskard, avoids all collisions while doint this.


_execute(designator: MoveJointsMotion) → Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchMoveGripperReal(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Opens or closes the gripper of the real Stretch, gripper uses an action server for this instead of giskard


_execute(designator: MoveGripperMotion) → Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchOpenReal(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Tries to open an already grasped container


_execute(designator: OpeningMotion) → Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchCloseReal(lock)#
Bases: pycram.process_modules.default_process_modules.ProcessModule
Tries to close an already grasped container


_execute(designator: ClosingMotion) → Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.stretch_process_modules.StretchManager#
Bases: ProcessModuleManager


_navigate_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



navigate()#



looking()#



detecting()#



move_tcp()#



move_arm_joints()#



world_state_detecting()#



move_joints()#



move_gripper()#



open()#



close()#












previous
pycram.process_modules.pr2_process_modules




next
pycram.robot_descriptions









 Contents
  


Classes
Functions
Module Contents
StretchNavigate
StretchMoveHead
StretchMoveHead._execute()


StretchMoveGripper
StretchDetecting
StretchMoveTCP
StretchMoveArmJoints
StretchMoveJoints
StretchWorldStateDetecting
StretchOpen
StretchOpen._execute()


StretchClose
StretchClose._execute()


_move_arm_tcp()
StretchNavigationReal
StretchNavigationReal._execute()


StretchMoveHeadReal
StretchMoveHeadReal._execute()


StretchDetectingReal
StretchDetectingReal._execute()


StretchMoveTCPReal
StretchMoveTCPReal._execute()


StretchMoveArmJointsReal
StretchMoveArmJointsReal._execute()


StretchMoveJointsReal
StretchMoveJointsReal._execute()


StretchMoveGripperReal
StretchMoveGripperReal._execute()


StretchOpenReal
StretchOpenReal._execute()


StretchCloseReal
StretchCloseReal._execute()


StretchManager
StretchManager._navigate_lock
StretchManager._looking_lock
StretchManager._detecting_lock
StretchManager._move_tcp_lock
StretchManager._move_arm_joints_lock
StretchManager._world_state_detecting_lock
StretchManager._move_joints_lock
StretchManager._move_gripper_lock
StretchManager._open_lock
StretchManager._close_lock
StretchManager.navigate()
StretchManager.looking()
StretchManager.detecting()
StretchManager.move_tcp()
StretchManager.move_arm_joints()
StretchManager.world_state_detecting()
StretchManager.move_joints()
StretchManager.move_gripper()
StretchManager.open()
StretchManager.close()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.process_modules.pr2_process_modules — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.process_modules.pr2_process_modules




 Contents 



Classes
Functions
Module Contents
Pr2Navigation
Pr2Navigation._execute()


Pr2MoveHead
Pr2MoveHead._execute()


Pr2MoveGripper
Pr2MoveGripper._execute()


Pr2Detecting
Pr2Detecting._execute()


Pr2MoveTCP
Pr2MoveTCP._execute()


Pr2MoveArmJoints
Pr2MoveArmJoints._execute()


PR2MoveJoints
PR2MoveJoints._execute()


Pr2WorldStateDetecting
Pr2WorldStateDetecting._execute()


Pr2Open
Pr2Open._execute()


Pr2Close
Pr2Close._execute()


_move_arm_tcp()
Pr2NavigationReal
Pr2NavigationReal._execute()


Pr2MoveHeadReal
Pr2MoveHeadReal._execute()


Pr2DetectingReal
Pr2DetectingReal._execute()


Pr2MoveTCPReal
Pr2MoveTCPReal._execute()


Pr2MoveArmJointsReal
Pr2MoveArmJointsReal._execute()


Pr2MoveJointsReal
Pr2MoveJointsReal._execute()


Pr2MoveGripperReal
Pr2MoveGripperReal._execute()


Pr2OpenReal
Pr2OpenReal._execute()


Pr2CloseReal
Pr2CloseReal._execute()


Pr2Manager
Pr2Manager._navigate_lock
Pr2Manager._looking_lock
Pr2Manager._detecting_lock
Pr2Manager._move_tcp_lock
Pr2Manager._move_arm_joints_lock
Pr2Manager._world_state_detecting_lock
Pr2Manager._move_joints_lock
Pr2Manager._move_gripper_lock
Pr2Manager._open_lock
Pr2Manager._close_lock
Pr2Manager.navigate()
Pr2Manager.looking()
Pr2Manager.detecting()
Pr2Manager.move_tcp()
Pr2Manager.move_arm_joints()
Pr2Manager.world_state_detecting()
Pr2Manager.move_joints()
Pr2Manager.move_gripper()
Pr2Manager.open()
Pr2Manager.close()












pycram.process_modules.pr2_process_modules#

Classes#


Pr2Navigation
The process module to move the robot from one position to another.

Pr2MoveHead
This process module moves the head to look at a specific point in the world coordinate frame.

Pr2MoveGripper
This process module controls the gripper of the robot. They can either be opened or closed.

Pr2Detecting
This process module tries to detect an object with the given type. To be detected the object has to be in

Pr2MoveTCP
This process moves the tool center point of either the right or the left arm.

Pr2MoveArmJoints
This process modules moves the joints of either the right or the left arm. The joint states can be given as

PR2MoveJoints
Process Module for generic joint movements, is not confined to the arms but can move any joint of the robot

Pr2WorldStateDetecting
This process module detectes an object even if it is not in the field of view of the robot.

Pr2Open
Low-level implementation of opening a container in the simulation. Assumes the handle is already grasped.

Pr2Close
Low-level implementation that lets the robot close a grasped container, in simulation

Pr2NavigationReal
Process module for the real PR2 that sends a cartesian goal to giskard to move the robot base

Pr2MoveHeadReal
Process module for the real robot to move that such that it looks at the given position. Uses the same calculation

Pr2DetectingReal
Process Module for the real Pr2 that tries to detect an object fitting the given object description. Uses Robokudo

Pr2MoveTCPReal
Moves the tool center point of the real PR2 while avoiding all collisions

Pr2MoveArmJointsReal
Moves the arm joints of the real PR2 to the given configuration while avoiding all collisions

Pr2MoveJointsReal
Moves any joint using giskard, avoids all collisions while doint this.

Pr2MoveGripperReal
Opens or closes the gripper of the real PR2, gripper uses an action server for this instead of giskard

Pr2OpenReal
Tries to open an already grasped container

Pr2CloseReal
Tries to close an already grasped container

Pr2Manager
Base class for managing process modules, any new process modules have to implement this class to register the






Functions#


_move_arm_tcp(→ None)







Module Contents#


class pycram.process_modules.pr2_process_modules.Pr2Navigation(lock)#
Bases: pycram.process_module.ProcessModule
The process module to move the robot from one position to another.


_execute(desig: pycram.designators.motion_designator.MoveMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2MoveHead(lock)#
Bases: pycram.process_module.ProcessModule
This process module moves the head to look at a specific point in the world coordinate frame.
This point can either be a position or an object.


_execute(desig: pycram.designators.motion_designator.LookingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2MoveGripper(lock)#
Bases: pycram.process_module.ProcessModule
This process module controls the gripper of the robot. They can either be opened or closed.
Furthermore, it can only moved one gripper at a time.


_execute(desig: pycram.designators.motion_designator.MoveGripperMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2Detecting(lock)#
Bases: pycram.process_module.ProcessModule
This process module tries to detect an object with the given type. To be detected the object has to be in
the field of view of the robot.


_execute(desig: pycram.designators.motion_designator.DetectingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2MoveTCP(lock)#
Bases: pycram.process_module.ProcessModule
This process moves the tool center point of either the right or the left arm.


_execute(desig: pycram.designators.motion_designator.MoveTCPMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2MoveArmJoints(lock)#
Bases: pycram.process_module.ProcessModule
This process modules moves the joints of either the right or the left arm. The joint states can be given as
list that should be applied or a pre-defined position can be used, such as “parking”


_execute(desig: pycram.designators.motion_designator.MoveArmJointsMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.PR2MoveJoints(lock)#
Bases: pycram.process_module.ProcessModule
Process Module for generic joint movements, is not confined to the arms but can move any joint of the robot


_execute(desig: pycram.designators.motion_designator.MoveJointsMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2WorldStateDetecting(lock)#
Bases: pycram.process_module.ProcessModule
This process module detectes an object even if it is not in the field of view of the robot.


_execute(desig: pycram.designators.motion_designator.WorldStateDetectingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2Open(lock)#
Bases: pycram.process_module.ProcessModule
Low-level implementation of opening a container in the simulation. Assumes the handle is already grasped.


_execute(desig: pycram.designators.motion_designator.OpeningMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2Close(lock)#
Bases: pycram.process_module.ProcessModule
Low-level implementation that lets the robot close a grasped container, in simulation


_execute(desig: pycram.designators.motion_designator.ClosingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




pycram.process_modules.pr2_process_modules._move_arm_tcp(target: pycram.datastructures.pose.Pose, robot: pycram.world_concepts.world_object.Object, arm: pycram.datastructures.enums.Arms) → None#



class pycram.process_modules.pr2_process_modules.Pr2NavigationReal(lock)#
Bases: pycram.process_module.ProcessModule
Process module for the real PR2 that sends a cartesian goal to giskard to move the robot base


_execute(designator: pycram.designators.motion_designator.MoveMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2MoveHeadReal(lock)#
Bases: pycram.process_module.ProcessModule
Process module for the real robot to move that such that it looks at the given position. Uses the same calculation
as the simulated one


_execute(desig: pycram.designators.motion_designator.LookingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2DetectingReal(lock)#
Bases: pycram.process_module.ProcessModule
Process Module for the real Pr2 that tries to detect an object fitting the given object description. Uses Robokudo
for perception of the environment.


_execute(designator: pycram.designators.motion_designator.DetectingMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2MoveTCPReal(lock)#
Bases: pycram.process_module.ProcessModule
Moves the tool center point of the real PR2 while avoiding all collisions


_execute(designator: pycram.designators.motion_designator.MoveTCPMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2MoveArmJointsReal(lock)#
Bases: pycram.process_module.ProcessModule
Moves the arm joints of the real PR2 to the given configuration while avoiding all collisions


_execute(designator: pycram.designators.motion_designator.MoveArmJointsMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2MoveJointsReal(lock)#
Bases: pycram.process_module.ProcessModule
Moves any joint using giskard, avoids all collisions while doint this.


_execute(designator: pycram.designators.motion_designator.MoveJointsMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2MoveGripperReal(lock)#
Bases: pycram.process_module.ProcessModule
Opens or closes the gripper of the real PR2, gripper uses an action server for this instead of giskard


_execute(designator: pycram.designators.motion_designator.MoveGripperMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2OpenReal(lock)#
Bases: pycram.process_module.ProcessModule
Tries to open an already grasped container


_execute(designator: pycram.designators.motion_designator.OpeningMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2CloseReal(lock)#
Bases: pycram.process_module.ProcessModule
Tries to close an already grasped container


_execute(designator: pycram.designators.motion_designator.ClosingMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.pr2_process_modules.Pr2Manager#
Bases: pycram.process_module.ProcessModuleManager
Base class for managing process modules, any new process modules have to implement this class to register the
Process Modules


_navigate_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



navigate()#

Returns the Process Module for navigating the robot with respect tothe execution_type



Returns:
The Process Module for navigating





looking()#

Returns the Process Module for looking at a point with respect tothe execution_type



Returns:
The Process Module for looking at a specific point





detecting()#

Returns the Process Module for detecting an object with respect tothe execution_type



Returns:
The Process Module for detecting an object





move_tcp()#

Returns the Process Module for moving the Tool Center Point with respect tothe execution_type



Returns:
The Process Module for moving the TCP





move_arm_joints()#
Returns the Process Module for moving the joints of the robot arm
with respect to the execution_type

Returns:
The Process Module for moving the arm joints





world_state_detecting()#
Returns the Process Module for detecting an object using the world state with respect to the
execution_type

Returns:
The Process Module for world state detecting





move_joints()#
Returns the Process Module for moving any joint of the robot with respect to the
execution_type

Returns:
The Process Module for moving joints





move_gripper()#

Returns the Process Module for moving the gripper with respect tothe execution_type



Returns:
The Process Module for moving the gripper





open()#

Returns the Process Module for opening drawers with respect tothe execution_type



Returns:
The Process Module for opening drawers





close()#

Returns the Process Module for closing drawers with respect tothe execution_type



Returns:
The Process Module for closing drawers














previous
pycram.process_modules.hsrb_process_modules




next
pycram.process_modules.stretch_process_modules









 Contents
  


Classes
Functions
Module Contents
Pr2Navigation
Pr2Navigation._execute()


Pr2MoveHead
Pr2MoveHead._execute()


Pr2MoveGripper
Pr2MoveGripper._execute()


Pr2Detecting
Pr2Detecting._execute()


Pr2MoveTCP
Pr2MoveTCP._execute()


Pr2MoveArmJoints
Pr2MoveArmJoints._execute()


PR2MoveJoints
PR2MoveJoints._execute()


Pr2WorldStateDetecting
Pr2WorldStateDetecting._execute()


Pr2Open
Pr2Open._execute()


Pr2Close
Pr2Close._execute()


_move_arm_tcp()
Pr2NavigationReal
Pr2NavigationReal._execute()


Pr2MoveHeadReal
Pr2MoveHeadReal._execute()


Pr2DetectingReal
Pr2DetectingReal._execute()


Pr2MoveTCPReal
Pr2MoveTCPReal._execute()


Pr2MoveArmJointsReal
Pr2MoveArmJointsReal._execute()


Pr2MoveJointsReal
Pr2MoveJointsReal._execute()


Pr2MoveGripperReal
Pr2MoveGripperReal._execute()


Pr2OpenReal
Pr2OpenReal._execute()


Pr2CloseReal
Pr2CloseReal._execute()


Pr2Manager
Pr2Manager._navigate_lock
Pr2Manager._looking_lock
Pr2Manager._detecting_lock
Pr2Manager._move_tcp_lock
Pr2Manager._move_arm_joints_lock
Pr2Manager._world_state_detecting_lock
Pr2Manager._move_joints_lock
Pr2Manager._move_gripper_lock
Pr2Manager._open_lock
Pr2Manager._close_lock
Pr2Manager.navigate()
Pr2Manager.looking()
Pr2Manager.detecting()
Pr2Manager.move_tcp()
Pr2Manager.move_arm_joints()
Pr2Manager.world_state_detecting()
Pr2Manager.move_joints()
Pr2Manager.move_gripper()
Pr2Manager.open()
Pr2Manager.close()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.process_modules — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.process_modules




 Contents 



Submodules
Classes
Package Contents
Pr2Manager
Pr2Manager._navigate_lock
Pr2Manager._looking_lock
Pr2Manager._detecting_lock
Pr2Manager._move_tcp_lock
Pr2Manager._move_arm_joints_lock
Pr2Manager._world_state_detecting_lock
Pr2Manager._move_joints_lock
Pr2Manager._move_gripper_lock
Pr2Manager._open_lock
Pr2Manager._close_lock
Pr2Manager.navigate()
Pr2Manager.looking()
Pr2Manager.detecting()
Pr2Manager.move_tcp()
Pr2Manager.move_arm_joints()
Pr2Manager.world_state_detecting()
Pr2Manager.move_joints()
Pr2Manager.move_gripper()
Pr2Manager.open()
Pr2Manager.close()


BoxyManager
BoxyManager._navigate_lock
BoxyManager._looking_lock
BoxyManager._detecting_lock
BoxyManager._move_tcp_lock
BoxyManager._move_arm_joints_lock
BoxyManager._world_state_detecting_lock
BoxyManager._move_joints_lock
BoxyManager._move_gripper_lock
BoxyManager._open_lock
BoxyManager._close_lock
BoxyManager.navigate()
BoxyManager.looking()
BoxyManager.detecting()
BoxyManager.move_tcp()
BoxyManager.move_arm_joints()
BoxyManager.world_state_detecting()
BoxyManager.move_gripper()


DonbotManager
DonbotManager._navigate_lock
DonbotManager._pick_up_lock
DonbotManager._place_lock
DonbotManager._looking_lock
DonbotManager._detecting_lock
DonbotManager._move_tcp_lock
DonbotManager._move_arm_joints_lock
DonbotManager._world_state_detecting_lock
DonbotManager._move_joints_lock
DonbotManager._move_gripper_lock
DonbotManager._open_lock
DonbotManager._close_lock
DonbotManager.navigate()
DonbotManager.place()
DonbotManager.looking()
DonbotManager.detecting()
DonbotManager.move_tcp()
DonbotManager.move_arm_joints()
DonbotManager.world_state_detecting()
DonbotManager.move_gripper()


HSRBManager
HSRBManager._navigate_lock
HSRBManager._pick_up_lock
HSRBManager._place_lock
HSRBManager._looking_lock
HSRBManager._detecting_lock
HSRBManager._move_tcp_lock
HSRBManager._move_arm_joints_lock
HSRBManager._world_state_detecting_lock
HSRBManager._move_joints_lock
HSRBManager._move_gripper_lock
HSRBManager._open_lock
HSRBManager._close_lock
HSRBManager._talk_lock
HSRBManager.navigate()
HSRBManager.looking()
HSRBManager.detecting()
HSRBManager.move_tcp()
HSRBManager.move_arm_joints()
HSRBManager.move_joints()
HSRBManager.move_gripper()
HSRBManager.open()
HSRBManager.close()
HSRBManager.talk()


DefaultManager
DefaultManager._navigate_lock
DefaultManager._looking_lock
DefaultManager._detecting_lock
DefaultManager._move_tcp_lock
DefaultManager._move_arm_joints_lock
DefaultManager._world_state_detecting_lock
DefaultManager._move_joints_lock
DefaultManager._move_gripper_lock
DefaultManager._open_lock
DefaultManager._close_lock
DefaultManager.navigate()
DefaultManager.looking()
DefaultManager.detecting()
DefaultManager.move_tcp()
DefaultManager.move_arm_joints()
DefaultManager.world_state_detecting()
DefaultManager.move_joints()
DefaultManager.move_gripper()
DefaultManager.open()
DefaultManager.close()


StretchManager
StretchManager._navigate_lock
StretchManager._looking_lock
StretchManager._detecting_lock
StretchManager._move_tcp_lock
StretchManager._move_arm_joints_lock
StretchManager._world_state_detecting_lock
StretchManager._move_joints_lock
StretchManager._move_gripper_lock
StretchManager._open_lock
StretchManager._close_lock
StretchManager.navigate()
StretchManager.looking()
StretchManager.detecting()
StretchManager.move_tcp()
StretchManager.move_arm_joints()
StretchManager.world_state_detecting()
StretchManager.move_joints()
StretchManager.move_gripper()
StretchManager.open()
StretchManager.close()












pycram.process_modules#

Submodules#


pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules




Classes#


Pr2Manager
Base class for managing process modules, any new process modules have to implement this class to register the

BoxyManager
Base class for managing process modules, any new process modules have to implement this class to register the

DonbotManager
Base class for managing process modules, any new process modules have to implement this class to register the

HSRBManager


DefaultManager


StretchManager







Package Contents#


class pycram.process_modules.Pr2Manager#
Bases: pycram.process_module.ProcessModuleManager
Base class for managing process modules, any new process modules have to implement this class to register the
Process Modules


_navigate_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



navigate()#

Returns the Process Module for navigating the robot with respect tothe execution_type



Returns:
The Process Module for navigating





looking()#

Returns the Process Module for looking at a point with respect tothe execution_type



Returns:
The Process Module for looking at a specific point





detecting()#

Returns the Process Module for detecting an object with respect tothe execution_type



Returns:
The Process Module for detecting an object





move_tcp()#

Returns the Process Module for moving the Tool Center Point with respect tothe execution_type



Returns:
The Process Module for moving the TCP





move_arm_joints()#
Returns the Process Module for moving the joints of the robot arm
with respect to the execution_type

Returns:
The Process Module for moving the arm joints





world_state_detecting()#
Returns the Process Module for detecting an object using the world state with respect to the
execution_type

Returns:
The Process Module for world state detecting





move_joints()#
Returns the Process Module for moving any joint of the robot with respect to the
execution_type

Returns:
The Process Module for moving joints





move_gripper()#

Returns the Process Module for moving the gripper with respect tothe execution_type



Returns:
The Process Module for moving the gripper





open()#

Returns the Process Module for opening drawers with respect tothe execution_type



Returns:
The Process Module for opening drawers





close()#

Returns the Process Module for closing drawers with respect tothe execution_type



Returns:
The Process Module for closing drawers






class pycram.process_modules.BoxyManager#
Bases: pycram.process_module.ProcessModuleManager
Base class for managing process modules, any new process modules have to implement this class to register the
Process Modules


_navigate_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



navigate()#

Returns the Process Module for navigating the robot with respect tothe execution_type



Returns:
The Process Module for navigating





looking()#

Returns the Process Module for looking at a point with respect tothe execution_type



Returns:
The Process Module for looking at a specific point





detecting()#

Returns the Process Module for detecting an object with respect tothe execution_type



Returns:
The Process Module for detecting an object





move_tcp()#

Returns the Process Module for moving the Tool Center Point with respect tothe execution_type



Returns:
The Process Module for moving the TCP





move_arm_joints()#
Returns the Process Module for moving the joints of the robot arm
with respect to the execution_type

Returns:
The Process Module for moving the arm joints





world_state_detecting()#
Returns the Process Module for detecting an object using the world state with respect to the
execution_type

Returns:
The Process Module for world state detecting





move_gripper()#

Returns the Process Module for moving the gripper with respect tothe execution_type



Returns:
The Process Module for moving the gripper






class pycram.process_modules.DonbotManager#
Bases: pycram.process_module.ProcessModuleManager
Base class for managing process modules, any new process modules have to implement this class to register the
Process Modules


_navigate_lock#



_pick_up_lock#



_place_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



navigate()#

Returns the Process Module for navigating the robot with respect tothe execution_type



Returns:
The Process Module for navigating





place()#
Returns the Process Module for placing with respect to the execution_type

Returns:
The Process Module for placing an Object





looking()#

Returns the Process Module for looking at a point with respect tothe execution_type



Returns:
The Process Module for looking at a specific point





detecting()#

Returns the Process Module for detecting an object with respect tothe execution_type



Returns:
The Process Module for detecting an object





move_tcp()#

Returns the Process Module for moving the Tool Center Point with respect tothe execution_type



Returns:
The Process Module for moving the TCP





move_arm_joints()#
Returns the Process Module for moving the joints of the robot arm
with respect to the execution_type

Returns:
The Process Module for moving the arm joints





world_state_detecting()#
Returns the Process Module for detecting an object using the world state with respect to the
execution_type

Returns:
The Process Module for world state detecting





move_gripper()#

Returns the Process Module for moving the gripper with respect tothe execution_type



Returns:
The Process Module for moving the gripper






class pycram.process_modules.HSRBManager#
Bases: ProcessModuleManager


_navigate_lock#



_pick_up_lock#



_place_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



_talk_lock#



navigate()#



looking()#



detecting()#



move_tcp()#



move_arm_joints()#



move_joints()#



move_gripper()#



open()#



close()#



talk()#




class pycram.process_modules.DefaultManager#
Bases: ProcessModuleManager


_navigate_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



navigate()#



looking()#



detecting()#



move_tcp()#



move_arm_joints()#



world_state_detecting()#



move_joints()#



move_gripper()#



open()#



close()#




class pycram.process_modules.StretchManager#
Bases: ProcessModuleManager


_navigate_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



navigate()#



looking()#



detecting()#



move_tcp()#



move_arm_joints()#



world_state_detecting()#



move_joints()#



move_gripper()#



open()#



close()#












previous
pycram.orm.views




next
pycram.process_modules.boxy_process_modules









 Contents
  


Submodules
Classes
Package Contents
Pr2Manager
Pr2Manager._navigate_lock
Pr2Manager._looking_lock
Pr2Manager._detecting_lock
Pr2Manager._move_tcp_lock
Pr2Manager._move_arm_joints_lock
Pr2Manager._world_state_detecting_lock
Pr2Manager._move_joints_lock
Pr2Manager._move_gripper_lock
Pr2Manager._open_lock
Pr2Manager._close_lock
Pr2Manager.navigate()
Pr2Manager.looking()
Pr2Manager.detecting()
Pr2Manager.move_tcp()
Pr2Manager.move_arm_joints()
Pr2Manager.world_state_detecting()
Pr2Manager.move_joints()
Pr2Manager.move_gripper()
Pr2Manager.open()
Pr2Manager.close()


BoxyManager
BoxyManager._navigate_lock
BoxyManager._looking_lock
BoxyManager._detecting_lock
BoxyManager._move_tcp_lock
BoxyManager._move_arm_joints_lock
BoxyManager._world_state_detecting_lock
BoxyManager._move_joints_lock
BoxyManager._move_gripper_lock
BoxyManager._open_lock
BoxyManager._close_lock
BoxyManager.navigate()
BoxyManager.looking()
BoxyManager.detecting()
BoxyManager.move_tcp()
BoxyManager.move_arm_joints()
BoxyManager.world_state_detecting()
BoxyManager.move_gripper()


DonbotManager
DonbotManager._navigate_lock
DonbotManager._pick_up_lock
DonbotManager._place_lock
DonbotManager._looking_lock
DonbotManager._detecting_lock
DonbotManager._move_tcp_lock
DonbotManager._move_arm_joints_lock
DonbotManager._world_state_detecting_lock
DonbotManager._move_joints_lock
DonbotManager._move_gripper_lock
DonbotManager._open_lock
DonbotManager._close_lock
DonbotManager.navigate()
DonbotManager.place()
DonbotManager.looking()
DonbotManager.detecting()
DonbotManager.move_tcp()
DonbotManager.move_arm_joints()
DonbotManager.world_state_detecting()
DonbotManager.move_gripper()


HSRBManager
HSRBManager._navigate_lock
HSRBManager._pick_up_lock
HSRBManager._place_lock
HSRBManager._looking_lock
HSRBManager._detecting_lock
HSRBManager._move_tcp_lock
HSRBManager._move_arm_joints_lock
HSRBManager._world_state_detecting_lock
HSRBManager._move_joints_lock
HSRBManager._move_gripper_lock
HSRBManager._open_lock
HSRBManager._close_lock
HSRBManager._talk_lock
HSRBManager.navigate()
HSRBManager.looking()
HSRBManager.detecting()
HSRBManager.move_tcp()
HSRBManager.move_arm_joints()
HSRBManager.move_joints()
HSRBManager.move_gripper()
HSRBManager.open()
HSRBManager.close()
HSRBManager.talk()


DefaultManager
DefaultManager._navigate_lock
DefaultManager._looking_lock
DefaultManager._detecting_lock
DefaultManager._move_tcp_lock
DefaultManager._move_arm_joints_lock
DefaultManager._world_state_detecting_lock
DefaultManager._move_joints_lock
DefaultManager._move_gripper_lock
DefaultManager._open_lock
DefaultManager._close_lock
DefaultManager.navigate()
DefaultManager.looking()
DefaultManager.detecting()
DefaultManager.move_tcp()
DefaultManager.move_arm_joints()
DefaultManager.world_state_detecting()
DefaultManager.move_joints()
DefaultManager.move_gripper()
DefaultManager.open()
DefaultManager.close()


StretchManager
StretchManager._navigate_lock
StretchManager._looking_lock
StretchManager._detecting_lock
StretchManager._move_tcp_lock
StretchManager._move_arm_joints_lock
StretchManager._world_state_detecting_lock
StretchManager._move_joints_lock
StretchManager._move_gripper_lock
StretchManager._open_lock
StretchManager._close_lock
StretchManager.navigate()
StretchManager.looking()
StretchManager.detecting()
StretchManager.move_tcp()
StretchManager.move_arm_joints()
StretchManager.world_state_detecting()
StretchManager.move_joints()
StretchManager.move_gripper()
StretchManager.open()
StretchManager.close()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.process_modules.hsrb_process_modules — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.process_modules.hsrb_process_modules




 Contents 



Classes
Module Contents
HSRBNavigation
HSRBNavigation._execute()


HSRBDetecting
HSRBDetecting._execute()


HSRBNavigationReal
HSRBNavigationReal._execute()


HSRBMoveHeadReal
HSRBMoveHeadReal._execute()


HSRBDetectingReal
HSRBDetectingReal._execute()


HSRBMoveTCPReal
HSRBMoveTCPReal._execute()


HSRBMoveArmJointsReal
HSRBMoveArmJointsReal._execute()


HSRBMoveJointsReal
HSRBMoveJointsReal._execute()


HSRBMoveGripperReal
HSRBMoveGripperReal._execute()


HSRBOpenReal
HSRBOpenReal._execute()


HSRBCloseReal
HSRBCloseReal._execute()


HSRBTalkReal
HSRBTalkReal._execute()


HSRBNavigationSemiReal
HSRBNavigationSemiReal._execute()


HSRBTalkSemiReal
HSRBTalkSemiReal._execute()


HSRBManager
HSRBManager._navigate_lock
HSRBManager._pick_up_lock
HSRBManager._place_lock
HSRBManager._looking_lock
HSRBManager._detecting_lock
HSRBManager._move_tcp_lock
HSRBManager._move_arm_joints_lock
HSRBManager._world_state_detecting_lock
HSRBManager._move_joints_lock
HSRBManager._move_gripper_lock
HSRBManager._open_lock
HSRBManager._close_lock
HSRBManager._talk_lock
HSRBManager.navigate()
HSRBManager.looking()
HSRBManager.detecting()
HSRBManager.move_tcp()
HSRBManager.move_arm_joints()
HSRBManager.move_joints()
HSRBManager.move_gripper()
HSRBManager.open()
HSRBManager.close()
HSRBManager.talk()












pycram.process_modules.hsrb_process_modules#

Classes#


HSRBNavigation
The process module to move the robot from one position to another.

HSRBDetecting
This process module tries to detect an object with the given type. To be detected the object has to be in

HSRBNavigationReal
Process module for the real HSRB that sends a cartesian goal to giskard to move the robot base

HSRBMoveHeadReal
Process module for the real HSRB that sends a pose goal to giskard to move the robot head

HSRBDetectingReal
Process Module for the real HSRB that tries to detect an object fitting the given object description. Uses Robokudo

HSRBMoveTCPReal
Moves the tool center point of the real HSRB while avoiding all collisions via giskard

HSRBMoveArmJointsReal
Moves the arm joints of the real HSRB to the given configuration while avoiding all collisions via giskard

HSRBMoveJointsReal
Moves any joint using giskard, avoids all collisions while doint this.

HSRBMoveGripperReal
Opens or closes the gripper of the real HSRB with the help of giskard.

HSRBOpenReal
This process Modules tries to open an already grasped container via giskard

HSRBCloseReal
This process module executes close a an already grasped container via giskard

HSRBTalkReal
Let the robot speak over tmc interface.

HSRBNavigationSemiReal
Process module for the real HSRB that sends a cartesian goal to giskard to move the robot base

HSRBTalkSemiReal
Low Level implementation to let the robot talk using gTTS and pydub.

HSRBManager







Module Contents#


class pycram.process_modules.hsrb_process_modules.HSRBNavigation(lock)#
Bases: pycram.process_module.ProcessModule
The process module to move the robot from one position to another.


_execute(desig: MoveMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBDetecting(lock)#
Bases: pycram.process_module.ProcessModule
This process module tries to detect an object with the given type. To be detected the object has to be in
the field of view of the robot.


_execute(desig: DetectingMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBNavigationReal(lock)#
Bases: pycram.process_module.ProcessModule
Process module for the real HSRB that sends a cartesian goal to giskard to move the robot base


_execute(designator: MoveMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBMoveHeadReal(lock)#
Bases: pycram.process_module.ProcessModule
Process module for the real HSRB that sends a pose goal to giskard to move the robot head


_execute(desig: LookingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBDetectingReal(lock)#
Bases: pycram.process_module.ProcessModule
Process Module for the real HSRB that tries to detect an object fitting the given object description. Uses Robokudo
for perception of the environment.


_execute(desig: DetectingMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBMoveTCPReal(lock)#
Bases: pycram.process_module.ProcessModule
Moves the tool center point of the real HSRB while avoiding all collisions via giskard


_execute(designator: MoveTCPMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBMoveArmJointsReal(lock)#
Bases: pycram.process_module.ProcessModule
Moves the arm joints of the real HSRB to the given configuration while avoiding all collisions via giskard


_execute(designator: MoveArmJointsMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBMoveJointsReal(lock)#
Bases: pycram.process_module.ProcessModule
Moves any joint using giskard, avoids all collisions while doint this.


_execute(designator: MoveJointsMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBMoveGripperReal(lock)#
Bases: pycram.process_module.ProcessModule
Opens or closes the gripper of the real HSRB with the help of giskard.


_execute(designator: MoveGripperMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBOpenReal(lock)#
Bases: pycram.process_module.ProcessModule
This process Modules tries to open an already grasped container via giskard


_execute(designator: OpeningMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBCloseReal(lock)#
Bases: pycram.process_module.ProcessModule
This process module executes close a an already grasped container via giskard


_execute(designator: ClosingMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBTalkReal(lock)#
Bases: pycram.process_module.ProcessModule
Let the robot speak over tmc interface.


_execute(designator: TalkingMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBNavigationSemiReal(lock)#
Bases: pycram.process_module.ProcessModule
Process module for the real HSRB that sends a cartesian goal to giskard to move the robot base


_execute(designator: MoveMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.hsrb_process_modules.HSRBTalkSemiReal(lock)#
Bases: pycram.process_module.ProcessModule
Low Level implementation to let the robot talk using gTTS and pydub.


_execute(designator: TalkingMotion) → typing_extensions.Any#
Convert text to speech using gTTS, modify the pitch and play it without saving to disk.




class pycram.process_modules.hsrb_process_modules.HSRBManager#
Bases: ProcessModuleManager


_navigate_lock#



_pick_up_lock#



_place_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



_talk_lock#



navigate()#



looking()#



detecting()#



move_tcp()#



move_arm_joints()#



move_joints()#



move_gripper()#



open()#



close()#



talk()#












previous
pycram.process_modules.donbot_process_modules




next
pycram.process_modules.pr2_process_modules









 Contents
  


Classes
Module Contents
HSRBNavigation
HSRBNavigation._execute()


HSRBDetecting
HSRBDetecting._execute()


HSRBNavigationReal
HSRBNavigationReal._execute()


HSRBMoveHeadReal
HSRBMoveHeadReal._execute()


HSRBDetectingReal
HSRBDetectingReal._execute()


HSRBMoveTCPReal
HSRBMoveTCPReal._execute()


HSRBMoveArmJointsReal
HSRBMoveArmJointsReal._execute()


HSRBMoveJointsReal
HSRBMoveJointsReal._execute()


HSRBMoveGripperReal
HSRBMoveGripperReal._execute()


HSRBOpenReal
HSRBOpenReal._execute()


HSRBCloseReal
HSRBCloseReal._execute()


HSRBTalkReal
HSRBTalkReal._execute()


HSRBNavigationSemiReal
HSRBNavigationSemiReal._execute()


HSRBTalkSemiReal
HSRBTalkSemiReal._execute()


HSRBManager
HSRBManager._navigate_lock
HSRBManager._pick_up_lock
HSRBManager._place_lock
HSRBManager._looking_lock
HSRBManager._detecting_lock
HSRBManager._move_tcp_lock
HSRBManager._move_arm_joints_lock
HSRBManager._world_state_detecting_lock
HSRBManager._move_joints_lock
HSRBManager._move_gripper_lock
HSRBManager._open_lock
HSRBManager._close_lock
HSRBManager._talk_lock
HSRBManager.navigate()
HSRBManager.looking()
HSRBManager.detecting()
HSRBManager.move_tcp()
HSRBManager.move_arm_joints()
HSRBManager.move_joints()
HSRBManager.move_gripper()
HSRBManager.open()
HSRBManager.close()
HSRBManager.talk()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.process_modules.donbot_process_modules — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.process_modules.donbot_process_modules




 Contents 



Classes
Functions
Module Contents
_park_arms()
DonbotNavigation
DonbotNavigation._execute()


DonbotPlace
DonbotPlace._execute()


DonbotMoveHead
DonbotMoveHead._execute()


DonbotMoveGripper
DonbotMoveGripper._execute()


DonbotMoveTCP
DonbotMoveTCP._execute()


DonbotMoveJoints
DonbotMoveJoints._execute()


DonbotWorldStateDetecting
DonbotWorldStateDetecting._execute()


DonbotManager
DonbotManager._navigate_lock
DonbotManager._pick_up_lock
DonbotManager._place_lock
DonbotManager._looking_lock
DonbotManager._detecting_lock
DonbotManager._move_tcp_lock
DonbotManager._move_arm_joints_lock
DonbotManager._world_state_detecting_lock
DonbotManager._move_joints_lock
DonbotManager._move_gripper_lock
DonbotManager._open_lock
DonbotManager._close_lock
DonbotManager.navigate()
DonbotManager.place()
DonbotManager.looking()
DonbotManager.detecting()
DonbotManager.move_tcp()
DonbotManager.move_arm_joints()
DonbotManager.world_state_detecting()
DonbotManager.move_gripper()












pycram.process_modules.donbot_process_modules#

Classes#


DonbotNavigation
The process module to move the robot from one position to another.

DonbotPlace
This process module places an object at the given position in world coordinate frame.

DonbotMoveHead
This process module moves the head to look at a specific point in the world coordinate frame.

DonbotMoveGripper
This process module controls the gripper of the robot. They can either be opened or closed.

DonbotMoveTCP
This process moves the tool center point of either the right or the left arm.

DonbotMoveJoints
This process modules moves the joints of either the right or the left arm. The joint states can be given as

DonbotWorldStateDetecting
This process module detectes an object even if it is not in the field of view of the robot.

DonbotManager
Base class for managing process modules, any new process modules have to implement this class to register the






Functions#


_park_arms(arm)
Defines the joint poses for the parking positions of the arm of Donbot and applies them to the






Module Contents#


pycram.process_modules.donbot_process_modules._park_arms(arm)#
Defines the joint poses for the parking positions of the arm of Donbot and applies them to the
in the World defined robot.
:return: None



class pycram.process_modules.donbot_process_modules.DonbotNavigation(lock)#
Bases: pycram.process_module.ProcessModule
The process module to move the robot from one position to another.


_execute(desig)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.donbot_process_modules.DonbotPlace(lock)#
Bases: pycram.process_module.ProcessModule
This process module places an object at the given position in world coordinate frame.


_execute(desig)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.donbot_process_modules.DonbotMoveHead(lock)#
Bases: pycram.process_module.ProcessModule
This process module moves the head to look at a specific point in the world coordinate frame.
This point can either be a position or an object.


_execute(desig)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.donbot_process_modules.DonbotMoveGripper(lock)#
Bases: pycram.process_module.ProcessModule
This process module controls the gripper of the robot. They can either be opened or closed.
Furthermore, it can only move one gripper at a time.


_execute(desig)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.donbot_process_modules.DonbotMoveTCP(lock)#
Bases: pycram.process_module.ProcessModule
This process moves the tool center point of either the right or the left arm.


_execute(desig)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.donbot_process_modules.DonbotMoveJoints(lock)#
Bases: pycram.process_module.ProcessModule
This process modules moves the joints of either the right or the left arm. The joint states can be given as
list that should be applied or a pre-defined position can be used, such as “parking”


_execute(desig: pycram.designators.motion_designator.MoveArmJointsMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.donbot_process_modules.DonbotWorldStateDetecting(lock)#
Bases: pycram.process_module.ProcessModule
This process module detectes an object even if it is not in the field of view of the robot.


_execute(desig: pycram.designators.motion_designator.WorldStateDetectingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.donbot_process_modules.DonbotManager#
Bases: pycram.process_module.ProcessModuleManager
Base class for managing process modules, any new process modules have to implement this class to register the
Process Modules


_navigate_lock#



_pick_up_lock#



_place_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



navigate()#

Returns the Process Module for navigating the robot with respect tothe execution_type



Returns:
The Process Module for navigating





place()#
Returns the Process Module for placing with respect to the execution_type

Returns:
The Process Module for placing an Object





looking()#

Returns the Process Module for looking at a point with respect tothe execution_type



Returns:
The Process Module for looking at a specific point





detecting()#

Returns the Process Module for detecting an object with respect tothe execution_type



Returns:
The Process Module for detecting an object





move_tcp()#

Returns the Process Module for moving the Tool Center Point with respect tothe execution_type



Returns:
The Process Module for moving the TCP





move_arm_joints()#
Returns the Process Module for moving the joints of the robot arm
with respect to the execution_type

Returns:
The Process Module for moving the arm joints





world_state_detecting()#
Returns the Process Module for detecting an object using the world state with respect to the
execution_type

Returns:
The Process Module for world state detecting





move_gripper()#

Returns the Process Module for moving the gripper with respect tothe execution_type



Returns:
The Process Module for moving the gripper














previous
pycram.process_modules.default_process_modules




next
pycram.process_modules.hsrb_process_modules









 Contents
  


Classes
Functions
Module Contents
_park_arms()
DonbotNavigation
DonbotNavigation._execute()


DonbotPlace
DonbotPlace._execute()


DonbotMoveHead
DonbotMoveHead._execute()


DonbotMoveGripper
DonbotMoveGripper._execute()


DonbotMoveTCP
DonbotMoveTCP._execute()


DonbotMoveJoints
DonbotMoveJoints._execute()


DonbotWorldStateDetecting
DonbotWorldStateDetecting._execute()


DonbotManager
DonbotManager._navigate_lock
DonbotManager._pick_up_lock
DonbotManager._place_lock
DonbotManager._looking_lock
DonbotManager._detecting_lock
DonbotManager._move_tcp_lock
DonbotManager._move_arm_joints_lock
DonbotManager._world_state_detecting_lock
DonbotManager._move_joints_lock
DonbotManager._move_gripper_lock
DonbotManager._open_lock
DonbotManager._close_lock
DonbotManager.navigate()
DonbotManager.place()
DonbotManager.looking()
DonbotManager.detecting()
DonbotManager.move_tcp()
DonbotManager.move_arm_joints()
DonbotManager.world_state_detecting()
DonbotManager.move_gripper()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.process_modules.default_process_modules — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.process_modules.default_process_modules




 Contents 



Classes
Functions
Module Contents
DefaultNavigation
DefaultNavigation._execute()


DefaultMoveHead
DefaultMoveHead._execute()


DefaultMoveGripper
DefaultMoveGripper._execute()


DefaultDetecting
DefaultDetecting._execute()


DefaultMoveTCP
DefaultMoveTCP._execute()


DefaultMoveArmJoints
DefaultMoveArmJoints._execute()


DefaultMoveJoints
DefaultMoveJoints._execute()


DefaultWorldStateDetecting
DefaultWorldStateDetecting._execute()


DefaultOpen
DefaultOpen._execute()


DefaultClose
DefaultClose._execute()


_move_arm_tcp()
DefaultManager
DefaultManager._navigate_lock
DefaultManager._looking_lock
DefaultManager._detecting_lock
DefaultManager._move_tcp_lock
DefaultManager._move_arm_joints_lock
DefaultManager._world_state_detecting_lock
DefaultManager._move_joints_lock
DefaultManager._move_gripper_lock
DefaultManager._open_lock
DefaultManager._close_lock
DefaultManager.navigate()
DefaultManager.looking()
DefaultManager.detecting()
DefaultManager.move_tcp()
DefaultManager.move_arm_joints()
DefaultManager.world_state_detecting()
DefaultManager.move_joints()
DefaultManager.move_gripper()
DefaultManager.open()
DefaultManager.close()












pycram.process_modules.default_process_modules#

Classes#


DefaultNavigation
The process module to move the robot from one position to another.

DefaultMoveHead
This process module moves the head to look at a specific point in the world coordinate frame.

DefaultMoveGripper
This process module controls the gripper of the robot. They can either be opened or closed.

DefaultDetecting
This process module tries to detect an object with the given type. To be detected the object has to be in

DefaultMoveTCP
This process moves the tool center point of either the right or the left arm.

DefaultMoveArmJoints
This process modules moves the joints of either the right or the left arm. The joint states can be given as

DefaultMoveJoints
Implementation of process modules. Process modules are the part that communicate with the outer world to execute

DefaultWorldStateDetecting
This process moduledetectes an object even if it is not in the field of view of the robot.

DefaultOpen
Low-level implementation of opening a container in the simulation. Assumes the handle is already grasped.

DefaultClose
Low-level implementation that lets the robot close a grasped container, in simulation

DefaultManager







Functions#


_move_arm_tcp(→ None)







Module Contents#


class pycram.process_modules.default_process_modules.DefaultNavigation(lock)#
Bases: pycram.process_module.ProcessModule
The process module to move the robot from one position to another.


_execute(desig: MoveMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.default_process_modules.DefaultMoveHead(lock)#
Bases: pycram.process_module.ProcessModule
This process module moves the head to look at a specific point in the world coordinate frame.
This point can either be a position or an object.


_execute(desig: LookingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.default_process_modules.DefaultMoveGripper(lock)#
Bases: pycram.process_module.ProcessModule
This process module controls the gripper of the robot. They can either be opened or closed.
Furthermore, it can only moved one gripper at a time.


_execute(desig: MoveGripperMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.default_process_modules.DefaultDetecting(lock)#
Bases: pycram.process_module.ProcessModule
This process module tries to detect an object with the given type. To be detected the object has to be in
the field of view of the robot.


_execute(desig: DetectingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.default_process_modules.DefaultMoveTCP(lock)#
Bases: pycram.process_module.ProcessModule
This process moves the tool center point of either the right or the left arm.


_execute(desig: MoveTCPMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.default_process_modules.DefaultMoveArmJoints(lock)#
Bases: pycram.process_module.ProcessModule
This process modules moves the joints of either the right or the left arm. The joint states can be given as
list that should be applied or a pre-defined position can be used, such as “parking”


_execute(desig: MoveArmJointsMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.default_process_modules.DefaultMoveJoints(lock)#
Bases: pycram.process_module.ProcessModule

Implementation of process modules. Process modules are the part that communicate with the outer world to executedesignators.




_execute(desig: MoveJointsMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.default_process_modules.DefaultWorldStateDetecting(lock)#
Bases: pycram.process_module.ProcessModule
This process moduledetectes an object even if it is not in the field of view of the robot.


_execute(desig: WorldStateDetectingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.default_process_modules.DefaultOpen(lock)#
Bases: pycram.process_module.ProcessModule
Low-level implementation of opening a container in the simulation. Assumes the handle is already grasped.


_execute(desig: OpeningMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.default_process_modules.DefaultClose(lock)#
Bases: pycram.process_module.ProcessModule
Low-level implementation that lets the robot close a grasped container, in simulation


_execute(desig: ClosingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




pycram.process_modules.default_process_modules._move_arm_tcp(target: Pose, robot: pycram.world_concepts.world_object.Object, arm: Arms) → None#



class pycram.process_modules.default_process_modules.DefaultManager#
Bases: ProcessModuleManager


_navigate_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



navigate()#



looking()#



detecting()#



move_tcp()#



move_arm_joints()#



world_state_detecting()#



move_joints()#



move_gripper()#



open()#



close()#












previous
pycram.process_modules.boxy_process_modules




next
pycram.process_modules.donbot_process_modules









 Contents
  


Classes
Functions
Module Contents
DefaultNavigation
DefaultNavigation._execute()


DefaultMoveHead
DefaultMoveHead._execute()


DefaultMoveGripper
DefaultMoveGripper._execute()


DefaultDetecting
DefaultDetecting._execute()


DefaultMoveTCP
DefaultMoveTCP._execute()


DefaultMoveArmJoints
DefaultMoveArmJoints._execute()


DefaultMoveJoints
DefaultMoveJoints._execute()


DefaultWorldStateDetecting
DefaultWorldStateDetecting._execute()


DefaultOpen
DefaultOpen._execute()


DefaultClose
DefaultClose._execute()


_move_arm_tcp()
DefaultManager
DefaultManager._navigate_lock
DefaultManager._looking_lock
DefaultManager._detecting_lock
DefaultManager._move_tcp_lock
DefaultManager._move_arm_joints_lock
DefaultManager._world_state_detecting_lock
DefaultManager._move_joints_lock
DefaultManager._move_gripper_lock
DefaultManager._open_lock
DefaultManager._close_lock
DefaultManager.navigate()
DefaultManager.looking()
DefaultManager.detecting()
DefaultManager.move_tcp()
DefaultManager.move_arm_joints()
DefaultManager.world_state_detecting()
DefaultManager.move_joints()
DefaultManager.move_gripper()
DefaultManager.open()
DefaultManager.close()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.process_modules.boxy_process_modules — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.process_modules.boxy_process_modules




 Contents 



Classes
Functions
Module Contents
BoxyNavigation
BoxyNavigation._execute()


BoxyOpen
BoxyOpen._execute()


BoxyClose
BoxyClose._execute()


BoxyParkArms
BoxyParkArms._execute()


BoxyMoveHead
BoxyMoveHead._execute()


BoxyMoveGripper
BoxyMoveGripper._execute()


BoxyDetecting
BoxyDetecting._execute()


BoxyMoveTCP
BoxyMoveTCP._execute()


BoxyMoveArmJoints
BoxyMoveArmJoints._execute()


BoxyWorldStateDetecting
BoxyWorldStateDetecting._execute()


_move_arm_tcp()
BoxyManager
BoxyManager._navigate_lock
BoxyManager._looking_lock
BoxyManager._detecting_lock
BoxyManager._move_tcp_lock
BoxyManager._move_arm_joints_lock
BoxyManager._world_state_detecting_lock
BoxyManager._move_joints_lock
BoxyManager._move_gripper_lock
BoxyManager._open_lock
BoxyManager._close_lock
BoxyManager.navigate()
BoxyManager.looking()
BoxyManager.detecting()
BoxyManager.move_tcp()
BoxyManager.move_arm_joints()
BoxyManager.world_state_detecting()
BoxyManager.move_gripper()












pycram.process_modules.boxy_process_modules#

Classes#


BoxyNavigation
The process module to move the robot from one position to another.

BoxyOpen
Low-level implementation of opening a container in the simulation. Assumes the handle is already grasped.

BoxyClose
Low-level implementation that lets the robot close a grasped container, in simulation

BoxyParkArms
This process module is for moving the arms in a parking position.

BoxyMoveHead
This process module moves the head to look at a specific point in the world coordinate frame.

BoxyMoveGripper
This process module controls the gripper of the robot. They can either be opened or closed.

BoxyDetecting
This process module tries to detect an object with the given type. To be detected the object has to be in

BoxyMoveTCP
This process moves the tool center point of either the right or the left arm.

BoxyMoveArmJoints
This process modules moves the joints of either the right or the left arm. The joint states can be given as

BoxyWorldStateDetecting
This process module detectes an object even if it is not in the field of view of the robot.

BoxyManager
Base class for managing process modules, any new process modules have to implement this class to register the






Functions#


_move_arm_tcp(→ None)







Module Contents#


class pycram.process_modules.boxy_process_modules.BoxyNavigation(lock)#
Bases: pycram.process_module.ProcessModule
The process module to move the robot from one position to another.


_execute(desig: MoveMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.boxy_process_modules.BoxyOpen(lock)#
Bases: pycram.process_module.ProcessModule
Low-level implementation of opening a container in the simulation. Assumes the handle is already grasped.


_execute(desig: OpeningMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.boxy_process_modules.BoxyClose(lock)#
Bases: pycram.process_module.ProcessModule
Low-level implementation that lets the robot close a grasped container, in simulation


_execute(desig: ClosingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.boxy_process_modules.BoxyParkArms(lock)#
Bases: pycram.process_module.ProcessModule
This process module is for moving the arms in a parking position.
It is currently not used.


_execute(desig)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.boxy_process_modules.BoxyMoveHead(lock)#
Bases: pycram.process_module.ProcessModule
This process module moves the head to look at a specific point in the world coordinate frame.
This point can either be a position or an object.


_execute(desig)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.boxy_process_modules.BoxyMoveGripper(lock)#
Bases: pycram.process_module.ProcessModule
This process module controls the gripper of the robot. They can either be opened or closed.
Furthermore, it can only move one gripper at a time.


_execute(desig)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.boxy_process_modules.BoxyDetecting(lock)#
Bases: pycram.process_module.ProcessModule
This process module tries to detect an object with the given type. To be detected the object has to be in
the field of view of the robot.


_execute(desig)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.boxy_process_modules.BoxyMoveTCP(lock)#
Bases: pycram.process_module.ProcessModule
This process moves the tool center point of either the right or the left arm.


_execute(desig: MoveTCPMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.boxy_process_modules.BoxyMoveArmJoints(lock)#
Bases: pycram.process_module.ProcessModule
This process modules moves the joints of either the right or the left arm. The joint states can be given as
list that should be applied or a pre-defined position can be used, such as “parking”


_execute(desig: MoveArmJointsMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




class pycram.process_modules.boxy_process_modules.BoxyWorldStateDetecting(lock)#
Bases: pycram.process_module.ProcessModule
This process module detectes an object even if it is not in the field of view of the robot.


_execute(desig: WorldStateDetectingMotion)#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.




pycram.process_modules.boxy_process_modules._move_arm_tcp(target: Pose, robot: pycram.world_concepts.world_object.Object, arm: Arms) → None#



class pycram.process_modules.boxy_process_modules.BoxyManager#
Bases: pycram.process_module.ProcessModuleManager
Base class for managing process modules, any new process modules have to implement this class to register the
Process Modules


_navigate_lock#



_looking_lock#



_detecting_lock#



_move_tcp_lock#



_move_arm_joints_lock#



_world_state_detecting_lock#



_move_joints_lock#



_move_gripper_lock#



_open_lock#



_close_lock#



navigate()#

Returns the Process Module for navigating the robot with respect tothe execution_type



Returns:
The Process Module for navigating





looking()#

Returns the Process Module for looking at a point with respect tothe execution_type



Returns:
The Process Module for looking at a specific point





detecting()#

Returns the Process Module for detecting an object with respect tothe execution_type



Returns:
The Process Module for detecting an object





move_tcp()#

Returns the Process Module for moving the Tool Center Point with respect tothe execution_type



Returns:
The Process Module for moving the TCP





move_arm_joints()#
Returns the Process Module for moving the joints of the robot arm
with respect to the execution_type

Returns:
The Process Module for moving the arm joints





world_state_detecting()#
Returns the Process Module for detecting an object using the world state with respect to the
execution_type

Returns:
The Process Module for world state detecting





move_gripper()#

Returns the Process Module for moving the gripper with respect tothe execution_type



Returns:
The Process Module for moving the gripper














previous
pycram.process_modules




next
pycram.process_modules.default_process_modules









 Contents
  


Classes
Functions
Module Contents
BoxyNavigation
BoxyNavigation._execute()


BoxyOpen
BoxyOpen._execute()


BoxyClose
BoxyClose._execute()


BoxyParkArms
BoxyParkArms._execute()


BoxyMoveHead
BoxyMoveHead._execute()


BoxyMoveGripper
BoxyMoveGripper._execute()


BoxyDetecting
BoxyDetecting._execute()


BoxyMoveTCP
BoxyMoveTCP._execute()


BoxyMoveArmJoints
BoxyMoveArmJoints._execute()


BoxyWorldStateDetecting
BoxyWorldStateDetecting._execute()


_move_arm_tcp()
BoxyManager
BoxyManager._navigate_lock
BoxyManager._looking_lock
BoxyManager._detecting_lock
BoxyManager._move_tcp_lock
BoxyManager._move_arm_joints_lock
BoxyManager._world_state_detecting_lock
BoxyManager._move_joints_lock
BoxyManager._move_gripper_lock
BoxyManager._open_lock
BoxyManager._close_lock
BoxyManager.navigate()
BoxyManager.looking()
BoxyManager.detecting()
BoxyManager.move_tcp()
BoxyManager.move_arm_joints()
BoxyManager.world_state_detecting()
BoxyManager.move_gripper()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.process_module — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.process_module




 Contents 



Attributes
Classes
Functions
Module Contents
ProcessModule
ProcessModule.execution_delay
ProcessModule.block_list
ProcessModule._lock
ProcessModule._execute()
ProcessModule.execute()


RealRobot
RealRobot.pre
RealRobot.pre_delay
RealRobot.__enter__()
RealRobot.__exit__()
RealRobot.__call__()


SimulatedRobot
SimulatedRobot.pre
SimulatedRobot.__enter__()
SimulatedRobot.__exit__()
SimulatedRobot.__call__()


SemiRealRobot
SemiRealRobot.pre
SemiRealRobot.__enter__()
SemiRealRobot.__exit__()
SemiRealRobot.__call__()


with_real_robot()
with_simulated_robot()
simulated_robot
real_robot
semi_real_robot
ProcessModuleManager
ProcessModuleManager.execution_type
ProcessModuleManager.available_pms
ProcessModuleManager._instance
ProcessModuleManager.robot_name
ProcessModuleManager.get_manager()
ProcessModuleManager.navigate()
ProcessModuleManager.pick_up()
ProcessModuleManager.place()
ProcessModuleManager.looking()
ProcessModuleManager.detecting()
ProcessModuleManager.move_tcp()
ProcessModuleManager.move_arm_joints()
ProcessModuleManager.world_state_detecting()
ProcessModuleManager.move_joints()
ProcessModuleManager.move_gripper()
ProcessModuleManager.open()
ProcessModuleManager.close()












pycram.process_module#
Implementation of process modules.
Classes:
ProcessModule – implementation of process modules.

Attributes#


simulated_robot


real_robot


semi_real_robot







Classes#


ProcessModule
Implementation of process modules. Process modules are the part that communicate with the outer world to execute

RealRobot
Management class for executing designators on the real robot. This is intended to be used in a with environment.

SimulatedRobot
Management class for executing designators on the simulated robot. This is intended to be used in

SemiRealRobot
Management class for executing designators on the semi-real robot. This is intended to be used in a with environment.

ProcessModuleManager
Base class for managing process modules, any new process modules have to implement this class to register the






Functions#


with_real_robot(→ typing_extensions.Callable)
Decorator to execute designators in the decorated class on the real robot.

with_simulated_robot(→ typing_extensions.Callable)
Decorator to execute designators in the decorated class on the simulated robot.






Module Contents#


class pycram.process_module.ProcessModule(lock)#

Implementation of process modules. Process modules are the part that communicate with the outer world to executedesignators.




execution_delay = False#
Adds a delay of 0.5 seconds after executing a process module, to make the execution in simulation more realistic



block_list = []#
List of thread ids for which no Process Modules should be executed. This is used as an interrupt mechanism for
Designators



_lock#



_execute(designator: pycram.designators.motion_designator.BaseMotion) → typing_extensions.Any#
Helper method for internal usage only.
This method is to be overwritten instead of the execute method.



execute(designator: pycram.designators.motion_designator.BaseMotion) → typing_extensions.Any#
Execute the given designator. If there is already another process module of the same kind the self._lock will
lock this thread until the execution of that process module is finished. This implicitly queues the execution of
process modules.

Parameters:
designator – The designator to execute.

Returns:
Return of the Process Module if there is any






class pycram.process_module.RealRobot#
Management class for executing designators on the real robot. This is intended to be used in a with environment.
When importing this class an instance is imported instead.
Example:
with real_robot:
    some designators




pre: str = ''#



pre_delay: bool = False#



__enter__()#
Entering function for ‘with’ scope, saves the previously set execution_type and
sets it to ‘real’



__exit__(_type, value, traceback)#
Exit method for the ‘with’ scope, sets the execution_type to the previously
used one.



__call__()#




class pycram.process_module.SimulatedRobot#
Management class for executing designators on the simulated robot. This is intended to be used in
a with environment. When importing this class an instance is imported instead.
Example:
with simulated_robot:
    some designators




pre: str = ''#



__enter__()#
Entering function for ‘with’ scope, saves the previously set execution_type and
sets it to ‘simulated’



__exit__(_type, value, traceback)#
Exit method for the ‘with’ scope, sets the execution_type to the previously
used one.



__call__()#




class pycram.process_module.SemiRealRobot#
Management class for executing designators on the semi-real robot. This is intended to be used in a with environment.
When importing this class an instance is imported instead.
Example:
with semi_real_robot:
    some designators




pre: str = ''#



__enter__()#
Entering function for ‘with’ scope, saves the previously set execution_type and
sets it to ‘semi_real’



__exit__(type, value, traceback)#
Exit method for the ‘with’ scope, sets the execution_type to the previously
used one.



__call__()#




pycram.process_module.with_real_robot(func: typing_extensions.Callable) → typing_extensions.Callable#
Decorator to execute designators in the decorated class on the real robot.
Example:
@with_real_robot
def plan():
    some designators



Parameters:
func – Function this decorator is annotating

Returns:
The decorated function wrapped into the decorator





pycram.process_module.with_simulated_robot(func: typing_extensions.Callable) → typing_extensions.Callable#
Decorator to execute designators in the decorated class on the simulated robot.
Example:
@with_simulated_robot
def plan():
    some designators



Parameters:
func – Function this decorator is annotating

Returns:
The decorated function wrapped into the decorator





pycram.process_module.simulated_robot#



pycram.process_module.real_robot#



pycram.process_module.semi_real_robot#



class pycram.process_module.ProcessModuleManager(robot_name)#
Bases: abc.ABC
Base class for managing process modules, any new process modules have to implement this class to register the
Process Modules


execution_type = None#
Whether the robot for which the process module is intended for is real or a simulated one



available_pms = []#
List of all available Process Module Managers



_instance = None#
Singelton instance of this Process Module Manager



robot_name#



static get_manager() → typing_extensions.Union[ProcessModuleManager, None]#
Returns the Process Module manager for the currently loaded robot or None if there is no Manager.

Returns:
ProcessModuleManager instance of the current robot





abstract navigate() → typing_extensions.Type[ProcessModule]#

Returns the Process Module for navigating the robot with respect tothe execution_type



Returns:
The Process Module for navigating





abstract pick_up() → typing_extensions.Type[ProcessModule]#
Returns the Process Module for picking up with respect to the execution_type

Returns:
The Process Module for picking up an object





abstract place() → typing_extensions.Type[ProcessModule]#
Returns the Process Module for placing with respect to the execution_type

Returns:
The Process Module for placing an Object





abstract looking() → typing_extensions.Type[ProcessModule]#

Returns the Process Module for looking at a point with respect tothe execution_type



Returns:
The Process Module for looking at a specific point





abstract detecting() → typing_extensions.Type[ProcessModule]#

Returns the Process Module for detecting an object with respect tothe execution_type



Returns:
The Process Module for detecting an object





abstract move_tcp() → typing_extensions.Type[ProcessModule]#

Returns the Process Module for moving the Tool Center Point with respect tothe execution_type



Returns:
The Process Module for moving the TCP





abstract move_arm_joints() → typing_extensions.Type[ProcessModule]#
Returns the Process Module for moving the joints of the robot arm
with respect to the execution_type

Returns:
The Process Module for moving the arm joints





abstract world_state_detecting() → typing_extensions.Type[ProcessModule]#
Returns the Process Module for detecting an object using the world state with respect to the
execution_type

Returns:
The Process Module for world state detecting





abstract move_joints() → typing_extensions.Type[ProcessModule]#
Returns the Process Module for moving any joint of the robot with respect to the
execution_type

Returns:
The Process Module for moving joints





abstract move_gripper() → typing_extensions.Type[ProcessModule]#

Returns the Process Module for moving the gripper with respect tothe execution_type



Returns:
The Process Module for moving the gripper





abstract open() → typing_extensions.Type[ProcessModule]#

Returns the Process Module for opening drawers with respect tothe execution_type



Returns:
The Process Module for opening drawers





abstract close() → typing_extensions.Type[ProcessModule]#

Returns the Process Module for closing drawers with respect tothe execution_type



Returns:
The Process Module for closing drawers














previous
pycram.pose_generator_and_validator




next
pycram.robot_description









 Contents
  


Attributes
Classes
Functions
Module Contents
ProcessModule
ProcessModule.execution_delay
ProcessModule.block_list
ProcessModule._lock
ProcessModule._execute()
ProcessModule.execute()


RealRobot
RealRobot.pre
RealRobot.pre_delay
RealRobot.__enter__()
RealRobot.__exit__()
RealRobot.__call__()


SimulatedRobot
SimulatedRobot.pre
SimulatedRobot.__enter__()
SimulatedRobot.__exit__()
SimulatedRobot.__call__()


SemiRealRobot
SemiRealRobot.pre
SemiRealRobot.__enter__()
SemiRealRobot.__exit__()
SemiRealRobot.__call__()


with_real_robot()
with_simulated_robot()
simulated_robot
real_robot
semi_real_robot
ProcessModuleManager
ProcessModuleManager.execution_type
ProcessModuleManager.available_pms
ProcessModuleManager._instance
ProcessModuleManager.robot_name
ProcessModuleManager.get_manager()
ProcessModuleManager.navigate()
ProcessModuleManager.pick_up()
ProcessModuleManager.place()
ProcessModuleManager.looking()
ProcessModuleManager.detecting()
ProcessModuleManager.move_tcp()
ProcessModuleManager.move_arm_joints()
ProcessModuleManager.world_state_detecting()
ProcessModuleManager.move_joints()
ProcessModuleManager.move_gripper()
ProcessModuleManager.open()
ProcessModuleManager.close()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.pose_generator_and_validator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.pose_generator_and_validator




 Contents 



Classes
Functions
Module Contents
PoseGenerator
PoseGenerator.current_orientation_generator
PoseGenerator.override_orientation_generator
PoseGenerator.costmap
PoseGenerator.number_of_samples
PoseGenerator.orientation_generator
PoseGenerator.__iter__()
PoseGenerator.height_generator()
PoseGenerator.generate_orientation()


visibility_validator()
_in_contact()
reachability_validator()
collision_check()










pycram.pose_generator_and_validator#

Classes#


PoseGenerator
Crates pose candidates from a given costmap. The generator






Functions#


visibility_validator(→ bool)
This method validates if the robot can see the target position from a given

_in_contact(→ bool)
This method checks if a given robot is in contact with a given object.

reachability_validator(→ typing_extensions.Tuple[bool, ...)
This method validates if a target position is reachable for a pose candidate.

collision_check(robot, allowed_collision)
This method checks if a given robot collides with any object within the world






Module Contents#


class pycram.pose_generator_and_validator.PoseGenerator(costmap: pycram.costmaps.Costmap, number_of_samples=100, orientation_generator=None)#
Crates pose candidates from a given costmap. The generator
selects the highest values, amount is given by number_of_sample, and returns the corresponding positions.
Orientations are calculated such that the Robot faces the center of the costmap.


current_orientation_generator = None#
If no orientation generator is given, this generator is used to generate the orientation of the robot.



override_orientation_generator = None#
Override the orientation generator with a custom generator, which will be used regardless of the current_orientation_generator.



costmap#



number_of_samples#



orientation_generator#



__iter__() → typing_extensions.Iterable#
A generator that crates pose candidates from a given costmap. The generator
selects the highest 100 values and returns the corresponding positions.
Orientations are calculated such that the Robot faces the center of the costmap.

Yield:
A tuple of position and orientation





static height_generator() → float#



static generate_orientation(position: typing_extensions.List[float], origin: pycram.datastructures.pose.Pose) → typing_extensions.List[float]#
This method generates the orientation for a given position in a costmap. The
orientation is calculated such that the robot faces the origin of the costmap.
This generation is done by simply calculating the arctan between the position,
in the costmap, and the origin of the costmap.

Parameters:

position – The position in the costmap. This position is already converted to the world coordinate frame.
origin – The origin of the costmap. This is also the point which the robot should face.


Returns:
A quaternion of the calculated orientation






pycram.pose_generator_and_validator.visibility_validator(pose: pycram.datastructures.pose.Pose, robot: pycram.world_concepts.world_object.Object, object_or_pose: typing_extensions.Union[pycram.world_concepts.world_object.Object, pycram.datastructures.pose.Pose], world: pycram.datastructures.world.World) → bool#
This method validates if the robot can see the target position from a given
pose candidate. The target position can either be a position, in world coordinate
system, or an object in the World. The validation is done by shooting a
ray from the camera to the target position and checking that it does not collide
with anything else.

Parameters:

pose – The pose candidate that should be validated
robot – The robot object for which this should be validated
object_or_pose – The target position or object for which the pose candidate should be validated.
world – The World instance in which this should be validated.


Returns:
True if the target is visible for the robot, None in any other case.





pycram.pose_generator_and_validator._in_contact(robot: pycram.world_concepts.world_object.Object, obj: pycram.world_concepts.world_object.Object, allowed_collision: typing_extensions.Dict[pycram.world_concepts.world_object.Object, typing_extensions.List[str]], allowed_robot_links: typing_extensions.List[str]) → bool#
This method checks if a given robot is in contact with a given object.

Parameters:

robot – The robot object that should be checked for contact.
obj – The object that should be checked for contact with the robot.
allowed_collision – A dictionary that contains the allowed collisions for links of each object in the world.
allowed_robot_links – A list of links of the robot that are allowed to be in contact with the object.


Returns:
True if the robot is in contact with the object and False otherwise.





pycram.pose_generator_and_validator.reachability_validator(pose: pycram.datastructures.pose.Pose, robot: pycram.world_concepts.world_object.Object, target: typing_extensions.Union[pycram.world_concepts.world_object.Object, pycram.datastructures.pose.Pose], allowed_collision: typing_extensions.Dict[pycram.world_concepts.world_object.Object, typing_extensions.List] = None) → typing_extensions.Tuple[bool, typing_extensions.List]#
This method validates if a target position is reachable for a pose candidate.
This is done by asking the ik solver if there is a valid solution if the
robot stands at the position of the pose candidate. if there is a solution
the validator returns True and False in any other case.

Parameters:

pose – The pose candidate for which the reachability should be validated
robot – The robot object in the World for which the reachability should be validated.
target – The target position or object instance which should be the target for reachability.
allowed_collision – dict of objects with which the robot is allowed to collide each object correlates to a list of links of which this object consists


Returns:
True if the target is reachable for the robot and False in any other case.





pycram.pose_generator_and_validator.collision_check(robot: pycram.world_concepts.world_object.Object, allowed_collision: typing_extensions.Dict[pycram.world_concepts.world_object.Object, typing_extensions.List])#
This method checks if a given robot collides with any object within the world
which it is not allowed to collide with.
This is done checking iterating over every object within the world and checking
if the robot collides with it. Careful the floor will be ignored.
If there is a collision with an object that was not within the allowed collision
list the function returns True else it will return False

Parameters:

robot – The robot object in the (Bullet)World where it should be checked if it collides with something
allowed_collision – dict of objects with which the robot is allowed to collide each object correlates to a list of links of which this object consists


Returns:
True if the target is reachable for the robot and False in any other case.













previous
pycram.plan_failures




next
pycram.process_module









 Contents
  


Classes
Functions
Module Contents
PoseGenerator
PoseGenerator.current_orientation_generator
PoseGenerator.override_orientation_generator
PoseGenerator.costmap
PoseGenerator.number_of_samples
PoseGenerator.orientation_generator
PoseGenerator.__iter__()
PoseGenerator.height_generator()
PoseGenerator.generate_orientation()


visibility_validator()
_in_contact()
reachability_validator()
collision_check()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.plan_failures — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.plan_failures




 Contents 



Exceptions
Module Contents
PlanFailure
NotALanguageExpression
FailureDiagnosis
LowLevelFailure
ActionlibActionTimeout
HighLevelFailure
DeliveringFailed
ManipulationLowLevelFailure
EnvironmentManipulationGoalNotReached
EnvironmentManipulationImpossible
EnvironmentUnreachable
FetchingFailed
GripperLowLevelFailure
GripperClosedCompletely
GripperGoalNotReached
LookingHighLevelFailure
ManipulationGoalInCollision
ManipulationGoalNotReached
IKError
IKError.message


ManipulationPoseUnreachable
NavigationHighLevelFailure
NavigationGoalInCollision
NavigationLowLevelFailure
NavigationGoalNotReached
NavigationPoseUnreachable
ObjectNowhereToBeFound
ObjectUndeliverable
ObjectUnfetchable
ObjectUnreachable
PerceptionLowLevelFailure
PerceptionObjectNotFound
PerceptionObjectNotInWorld
SearchingFailed
TorsoLowLevelFailure
TorsoGoalNotReached
TorsoGoalUnreachable
Task
Grasping
Looking
ObjectPoseMisestimation
SuccessfulCompletion
ObjectNotFound
LocomotorFailure
ArmFailure
ObjectLost
SensorFailure
IllPosedGoalFailure
CapabilityAbsenceFailure
ReachabilityFailure
TorsoFailure
ConfigurationNotReached
Timeout
EndEffectorFailure
ObjectUnavailable
SustainedFailure
ReasoningError
CollisionError










pycram.plan_failures#

Exceptions#


PlanFailure
Implementation of plan failures.

NotALanguageExpression
Implementation of plan failures.

FailureDiagnosis
Implementation of plan failures.

LowLevelFailure
Failure thrown by low-level modules: robot or projection PMs.

ActionlibActionTimeout
Failure thrown by low-level modules: robot or projection PMs.

HighLevelFailure
Failure thrown by high-level modules, i.e. plans.

DeliveringFailed
Thrown when delivering plan completely gives up.

ManipulationLowLevelFailure
Thrown when a low-level, i.e. hardware related, failure is detected in a manipulation action.

EnvironmentManipulationGoalNotReached
Thrown when door / drawer opening / closing goal is still not reached.

EnvironmentManipulationImpossible
Thrown when environment manipulation cannot be achieved.

EnvironmentUnreachable
Thrown when environment manipulation in collision or unreachable.

FetchingFailed
Thrown when fetching plan completely gives up.

GripperLowLevelFailure
Thrown when a failure involving the gripper hardware occurs.

GripperClosedCompletely
Thrown when the gripper closed completely, despite not being expected to do so (e.g. because it should have

GripperGoalNotReached
Thrown when the gripper does not reach its goal.

LookingHighLevelFailure
High-level failure produced when looking for an object, i.e. it is not a hardware issue but one relating to

ManipulationGoalInCollision
Thrown when executing a manipulation action results in a collision.

ManipulationGoalNotReached
Thrown when after executing the action, goal is still not reached.

IKError
Thrown when no inverse kinematics solution could be found

ManipulationPoseUnreachable
Thrown when no IK solution can be found.

NavigationHighLevelFailure
High-level failure produced while navigating the robot, i.e. it is not a hardware issue but one relating to

NavigationGoalInCollision
Navigation goal cannot be reached because the goal itself is already occupied by some other object.

NavigationLowLevelFailure
Low-level failure produced while navigating the robot, i.e. some kind of hardware issue.

NavigationGoalNotReached
Thrown when the base moved as a result of the navigation action but the goal was not reached.

NavigationPoseUnreachable
Thrown when the goal pose for navigation is computed to be unreachable.

ObjectNowhereToBeFound
Thrown when the robot cannot find an object of a given description in its surroundings.

ObjectUndeliverable
Thrown when no base positioning can assure a reachable pose to place the object from.

ObjectUnfetchable
Thrown when no base positioning can assure a reachable pose to grasp the object from.

ObjectUnreachable
Thrown when no IK found for particular base pose.

PerceptionLowLevelFailure
Low-level failure produced while perceiving, i.e. some kind of hardware issue.

PerceptionObjectNotFound
Thrown when an attempt to find an object by perception fails -- and this can still be interpreted as the robot

PerceptionObjectNotInWorld
Thrown when an attempt to find an object by perception fails -- and this is because the object can be assumed

SearchingFailed
Thrown when searching plan completely gives up.

TorsoLowLevelFailure
Low-level failure produced while moving the torso, i.e. some kind of hardware issue.

TorsoGoalNotReached
Thrown when the torso moved as a result of a torso action but the goal was not reached.

TorsoGoalUnreachable
Thrown when the goal for the torso is computed to be unreachable.

Task
Implementation of plan failures.

Grasping


Looking


ObjectPoseMisestimation
Implementation of plan failures.

SuccessfulCompletion
Implementation of plan failures.

ObjectNotFound
Implementation of plan failures.

LocomotorFailure
Implementation of plan failures.

ArmFailure
Implementation of plan failures.

ObjectLost
Implementation of plan failures.

SensorFailure
Implementation of plan failures.

IllPosedGoalFailure
Implementation of plan failures.

CapabilityAbsenceFailure
Implementation of plan failures.

ReachabilityFailure
Implementation of plan failures.

TorsoFailure
Implementation of plan failures.

ConfigurationNotReached
Implementation of plan failures.

Timeout
Implementation of plan failures.

EndEffectorFailure
Implementation of plan failures.

ObjectUnavailable
Implementation of plan failures.

SustainedFailure
Implementation of plan failures.

ReasoningError
Implementation of plan failures.

CollisionError
Implementation of plan failures.






Module Contents#


exception pycram.plan_failures.PlanFailure(*args, **kwargs)#
Bases: Exception
Implementation of plan failures.



exception pycram.plan_failures.NotALanguageExpression(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.FailureDiagnosis(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.LowLevelFailure(*args, **kwargs)#
Bases: FailureDiagnosis
Failure thrown by low-level modules: robot or projection PMs.



exception pycram.plan_failures.ActionlibActionTimeout(*args, **kwargs)#
Bases: LowLevelFailure
Failure thrown by low-level modules: robot or projection PMs.



exception pycram.plan_failures.HighLevelFailure(*args, **kwargs)#
Bases: FailureDiagnosis
Failure thrown by high-level modules, i.e. plans.



exception pycram.plan_failures.DeliveringFailed(*args, **kwargs)#
Bases: HighLevelFailure
Thrown when delivering plan completely gives up.



exception pycram.plan_failures.ManipulationLowLevelFailure(*args, **kwargs)#
Bases: LowLevelFailure
Thrown when a low-level, i.e. hardware related, failure is detected in a manipulation action.



exception pycram.plan_failures.EnvironmentManipulationGoalNotReached(*args, **kwargs)#
Bases: ManipulationLowLevelFailure
Thrown when door / drawer opening / closing goal is still not reached.



exception pycram.plan_failures.EnvironmentManipulationImpossible(*args, **kwargs)#
Bases: HighLevelFailure
Thrown when environment manipulation cannot be achieved.



exception pycram.plan_failures.EnvironmentUnreachable(*args, **kwargs)#
Bases: HighLevelFailure
Thrown when environment manipulation in collision or unreachable.



exception pycram.plan_failures.FetchingFailed(*args, **kwargs)#
Bases: HighLevelFailure
Thrown when fetching plan completely gives up.



exception pycram.plan_failures.GripperLowLevelFailure(*args, **kwargs)#
Bases: LowLevelFailure
Thrown when a failure involving the gripper hardware occurs.



exception pycram.plan_failures.GripperClosedCompletely(*args, **kwargs)#
Bases: GripperLowLevelFailure
Thrown when the gripper closed completely, despite not being expected to do so (e.g. because it should have
grasped something).



exception pycram.plan_failures.GripperGoalNotReached(*args, **kwargs)#
Bases: GripperLowLevelFailure
Thrown when the gripper does not reach its goal.



exception pycram.plan_failures.LookingHighLevelFailure(*args, **kwargs)#
Bases: HighLevelFailure
High-level failure produced when looking for an object, i.e. it is not a hardware issue but one relating to
the looking task, its parameters, and how they relate to the environment.



exception pycram.plan_failures.ManipulationGoalInCollision(*args, **kwargs)#
Bases: HighLevelFailure
Thrown when executing a manipulation action results in a collision.



exception pycram.plan_failures.ManipulationGoalNotReached(*args, **kwargs)#
Bases: ManipulationLowLevelFailure
Thrown when after executing the action, goal is still not reached.



exception pycram.plan_failures.IKError(pose, base_frame, tip_frame)#
Bases: PlanFailure
Thrown when no inverse kinematics solution could be found


message#




exception pycram.plan_failures.ManipulationPoseUnreachable(*args, **kwargs)#
Bases: ManipulationLowLevelFailure
Thrown when no IK solution can be found.



exception pycram.plan_failures.NavigationHighLevelFailure(*args, **kwargs)#
Bases: HighLevelFailure
High-level failure produced while navigating the robot, i.e. it is not a hardware issue but one relating to
the navigation task, its parameters, and how they relate to the environment.



exception pycram.plan_failures.NavigationGoalInCollision(*args, **kwargs)#
Bases: NavigationHighLevelFailure
Navigation goal cannot be reached because the goal itself is already occupied by some other object.



exception pycram.plan_failures.NavigationLowLevelFailure(*args, **kwargs)#
Bases: LowLevelFailure
Low-level failure produced while navigating the robot, i.e. some kind of hardware issue.



exception pycram.plan_failures.NavigationGoalNotReached(*args, **kwargs)#
Bases: NavigationLowLevelFailure
Thrown when the base moved as a result of the navigation action but the goal was not reached.



exception pycram.plan_failures.NavigationPoseUnreachable(*args, **kwargs)#
Bases: NavigationLowLevelFailure
Thrown when the goal pose for navigation is computed to be unreachable.



exception pycram.plan_failures.ObjectNowhereToBeFound(*args, **kwargs)#
Bases: HighLevelFailure
Thrown when the robot cannot find an object of a given description in its surroundings.



exception pycram.plan_failures.ObjectUndeliverable(*args, **kwargs)#
Bases: HighLevelFailure
Thrown when no base positioning can assure a reachable pose to place the object from.



exception pycram.plan_failures.ObjectUnfetchable(*args, **kwargs)#
Bases: HighLevelFailure
Thrown when no base positioning can assure a reachable pose to grasp the object from.



exception pycram.plan_failures.ObjectUnreachable(*args, **kwargs)#
Bases: HighLevelFailure
Thrown when no IK found for particular base pose.



exception pycram.plan_failures.PerceptionLowLevelFailure(*args, **kwargs)#
Bases: LowLevelFailure
Low-level failure produced while perceiving, i.e. some kind of hardware issue.



exception pycram.plan_failures.PerceptionObjectNotFound(*args, **kwargs)#
Bases: PerceptionLowLevelFailure
Thrown when an attempt to find an object by perception fails – and this can still be interpreted as the robot
not looking in the right direction, as opposed to the object being absent.



exception pycram.plan_failures.PerceptionObjectNotInWorld(*args, **kwargs)#
Bases: PerceptionLowLevelFailure
Thrown when an attempt to find an object by perception fails – and this is because the object can be assumed
absent or perhaps is known absent because of the setup of a simulation.



exception pycram.plan_failures.SearchingFailed(*args, **kwargs)#
Bases: HighLevelFailure
Thrown when searching plan completely gives up.



exception pycram.plan_failures.TorsoLowLevelFailure(*args, **kwargs)#
Bases: LowLevelFailure
Low-level failure produced while moving the torso, i.e. some kind of hardware issue.



exception pycram.plan_failures.TorsoGoalNotReached(*args, **kwargs)#
Bases: TorsoLowLevelFailure
Thrown when the torso moved as a result of a torso action but the goal was not reached.



exception pycram.plan_failures.TorsoGoalUnreachable(*args, **kwargs)#
Bases: TorsoLowLevelFailure
Thrown when the goal for the torso is computed to be unreachable.



exception pycram.plan_failures.Task(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.Grasping(*args, **kwargs)#
Bases: Task



exception pycram.plan_failures.Looking(*args, **kwargs)#
Bases: Task



exception pycram.plan_failures.ObjectPoseMisestimation(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.SuccessfulCompletion(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.ObjectNotFound(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.LocomotorFailure(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.ArmFailure(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.ObjectLost(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.SensorFailure(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.IllPosedGoalFailure(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.CapabilityAbsenceFailure(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.ReachabilityFailure(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.TorsoFailure(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.ConfigurationNotReached(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.Timeout(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.EndEffectorFailure(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.ObjectUnavailable(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.SustainedFailure(*args, **kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.ReasoningError(**kwargs)#
Bases: PlanFailure
Implementation of plan failures.



exception pycram.plan_failures.CollisionError(**kwargs)#
Bases: PlanFailure
Implementation of plan failures.











previous
pycram.local_transformer




next
pycram.pose_generator_and_validator









 Contents
  


Exceptions
Module Contents
PlanFailure
NotALanguageExpression
FailureDiagnosis
LowLevelFailure
ActionlibActionTimeout
HighLevelFailure
DeliveringFailed
ManipulationLowLevelFailure
EnvironmentManipulationGoalNotReached
EnvironmentManipulationImpossible
EnvironmentUnreachable
FetchingFailed
GripperLowLevelFailure
GripperClosedCompletely
GripperGoalNotReached
LookingHighLevelFailure
ManipulationGoalInCollision
ManipulationGoalNotReached
IKError
IKError.message


ManipulationPoseUnreachable
NavigationHighLevelFailure
NavigationGoalInCollision
NavigationLowLevelFailure
NavigationGoalNotReached
NavigationPoseUnreachable
ObjectNowhereToBeFound
ObjectUndeliverable
ObjectUnfetchable
ObjectUnreachable
PerceptionLowLevelFailure
PerceptionObjectNotFound
PerceptionObjectNotInWorld
SearchingFailed
TorsoLowLevelFailure
TorsoGoalNotReached
TorsoGoalUnreachable
Task
Grasping
Looking
ObjectPoseMisestimation
SuccessfulCompletion
ObjectNotFound
LocomotorFailure
ArmFailure
ObjectLost
SensorFailure
IllPosedGoalFailure
CapabilityAbsenceFailure
ReachabilityFailure
TorsoFailure
ConfigurationNotReached
Timeout
EndEffectorFailure
ObjectUnavailable
SustainedFailure
ReasoningError
CollisionError










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.orm.views — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.orm.views




 Contents 



Attributes
Classes
Functions
Module Contents
CreateView
CreateView.name
CreateView.selectable


DropView
DropView.name


_create_view()
_drop_view()
view_exists()
view_doesnt_exist()
view()
base
PickUpWithContextView
PickUpWithContextView.__robot_position
PickUpWithContextView.__robot_pose
PickUpWithContextView.__object_position
PickUpWithContextView.__relative_x
PickUpWithContextView.__relative_y
PickUpWithContextView.__table__












pycram.orm.views#

Attributes#


base







Classes#


CreateView
Class that is used to create a view. Every instance will be compiled into a SQL CREATE VIEW statement.

DropView
Class that is used to drop a view. Every instance will be compiled into a SQL DROP VIEW statement.

PickUpWithContextView
View for pickup performables with context.






Functions#


_create_view(→ str)
Compiles a CreateView instance into a SQL CREATE VIEW statement.

_drop_view(→ str)
Compiles a DropView instance into a SQL DROP VIEW statement.

view_exists(→ bool)
Check if a view exists.

view_doesnt_exist(→ bool)
Check if a view does not exist.

view(→ sqlalchemy.TableClause)
Function used to control view creation and deletion. It will listen to the after_create and before_drop events






Module Contents#


class pycram.orm.views.CreateView(name: str, selectable: sqlalchemy.Select)#
Bases: sqlalchemy.ExecutableDDLElement
Class that is used to create a view. Every instance will be compiled into a SQL CREATE VIEW statement.


name#



selectable#




class pycram.orm.views.DropView(name: str)#
Bases: sqlalchemy.ExecutableDDLElement
Class that is used to drop a view. Every instance will be compiled into a SQL DROP VIEW statement.


name#




pycram.orm.views._create_view(element: CreateView, compiler, **kw) → str#
Compiles a CreateView instance into a SQL CREATE VIEW statement.
:param element: CreateView instance
:param compiler: compiler
:param kw: keyword arguments
:return: SQL CREATE VIEW statement



pycram.orm.views._drop_view(element: DropView, compiler, **kw) → str#
Compiles a DropView instance into a SQL DROP VIEW statement.
:param element: DropView instance
:param compiler: compiler
:param kw: keyword arguments
:return: SQL DROP VIEW statement



pycram.orm.views.view_exists(ddl: typing_extensions.Union[CreateView, DropView], target, connection: sqlalchemy.engine, **kw) → bool#
Check if a view exists.
:param ddl: ddl instance
:param target: target object
:param connection: connection
:param kw: keyword arguments
:return: True if the view exists, False otherwise



pycram.orm.views.view_doesnt_exist(ddl: typing_extensions.Union[CreateView, DropView], target, connection: sqlalchemy.engine, **kw) → bool#
Check if a view does not exist.
:param ddl: ddl instance
:param target: target object
:param connection: connection
:param kw: keyword arguments
:return: True if the view does not exist, False otherwise



pycram.orm.views.view(name: str, metadata: sqlalchemy.MetaData, selectable: sqlalchemy.Select) → sqlalchemy.TableClause#
Function used to control view creation and deletion. It will listen to the after_create and before_drop events
of the metadata object in order to either create or drop the view. The view needs to have a column id.



pycram.orm.views.base#



class pycram.orm.views.PickUpWithContextView#
Bases: base
View for pickup performables with context.


__robot_position: pycram.orm.base.Position#
3D Vector of robot position



__robot_pose: pycram.orm.base.Pose#
Complete robot pose



__object_position: pycram.orm.base.Position#
3D Vector for object position



__relative_x#
Distance on x axis between robot and object



__relative_y#
Distance on y axis between robot and object



__table__#












previous
pycram.orm.utils




next
pycram.process_modules









 Contents
  


Attributes
Classes
Functions
Module Contents
CreateView
CreateView.name
CreateView.selectable


DropView
DropView.name


_create_view()
_drop_view()
view_exists()
view_doesnt_exist()
view()
base
PickUpWithContextView
PickUpWithContextView.__robot_position
PickUpWithContextView.__robot_pose
PickUpWithContextView.__object_position
PickUpWithContextView.__relative_x
PickUpWithContextView.__relative_y
PickUpWithContextView.__table__












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.orm.utils — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.orm.utils




 Contents 



Functions
Module Contents
write_database_to_file()
print_database()
update_primary_key()
copy_database()
update_primary_key_constrains()
migrate_neems()










pycram.orm.utils#

Functions#


write_database_to_file(in_sessionmaker, filename[, ...])
Writes all Tables stored within the given session into a local file. File will be written in JSON Format

print_database(in_sessionmaker)
Prints all ORM Class data within the given Session.

update_primary_key(source_session_maker, ...)
Updates all the primary keys of the database associated with the destination engine, so that there will be no

copy_database(source_session_maker, ...)
Iterates through all tables within tht source database and merges them into the destination database. Careful

update_primary_key_constrains(session_maker)
Iterates through all tables related to any ORM Class and sets in their corresponding foreign keys in the given

migrate_neems(source_session_maker, ...)
Merges the database connected to the source session maker into the database connected to the destination session






Module Contents#


pycram.orm.utils.write_database_to_file(in_sessionmaker: sqlalchemy.orm.sessionmaker, filename: str, b_write_to_console: bool = False)#
Writes all Tables stored within the given session into a local file. File will be written in JSON Format

Parameters:

in_sessionmaker – sessionmaker that allows us to access the Database
filename – Filename of the logfile
b_write_to_console – enables writing to the console. Default false






pycram.orm.utils.print_database(in_sessionmaker: sqlalchemy.orm.sessionmaker)#
Prints all ORM Class data within the given Session.

Parameters:
in_sessionmaker – Database Session which should be printed





pycram.orm.utils.update_primary_key(source_session_maker: sqlalchemy.orm.sessionmaker, destination_session_maker: sqlalchemy.orm.sessionmaker)#
Updates all the primary keys of the database associated with the destination engine, so that there will be no
problems when merging it into the source database. In order to achieve this the highest id value of the source
engine is searched and the primary keys of the destination database will get all the values following that.
Cascading triggers in the database will take care of the rest. Careful 2023 this will not work in
memory databases as there are no triggers.

Parameters:

source_session_maker – Session maker of the source data_base
destination_session_maker – Session maker of the destination data_base






pycram.orm.utils.copy_database(source_session_maker: sqlalchemy.orm.sessionmaker, destination_session_maker: sqlalchemy.orm.sessionmaker)#
Iterates through all tables within tht source database and merges them into the destination database. Careful
this function does not check if there are any primary key collisions or updates any data.


Note
Ignores all previously detached data, could result in loss of information. During testing database objects
sometimes had a detached twin. As a possible feature in the future it maybe useful to give the user an
opportunity to decide what happens with the detached objects. Careful this could lead to duplicated data in the
destination database.



Parameters:

source_session_maker – Sessionmaker of the source database
destination_session_maker – Sessionmaker of the destination database






pycram.orm.utils.update_primary_key_constrains(session_maker: sqlalchemy.orm.sessionmaker)#
Iterates through all tables related to any ORM Class and sets in their corresponding foreign keys in the given
endpoint to “ON UPDATE CASCADING”.


Note
Careful currently only works on postgres databases.



Parameters:
session_maker

Returns:
empty





pycram.orm.utils.migrate_neems(source_session_maker: sqlalchemy.orm.sessionmaker, destination_session_maker: sqlalchemy.orm.sessionmaker)#
Merges the database connected to the source session maker into the database connected to the destination session
maker. Will first update the primary constrains inside the destination database (if needed). Afterwards
updates the primary keys within the destination database (as there are cascading updates now) and then merges
the source database into the destination.


Note
Assumes the destination database is a postgres database



Parameters:

source_session_maker – Sessionmaker of the source database
destination_session_maker – Sessionmaker of the destination database














previous
pycram.orm.tasktree




next
pycram.orm.views









 Contents
  


Functions
Module Contents
write_database_to_file()
print_database()
update_primary_key()
copy_database()
update_primary_key_constrains()
migrate_neems()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.orm.tasktree — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.orm.tasktree




 Contents 



Classes
Module Contents
TaskTreeNode
TaskTreeNode.id
TaskTreeNode.action_id
TaskTreeNode.action
TaskTreeNode.start_time
TaskTreeNode.end_time
TaskTreeNode.status
TaskTreeNode.reason
TaskTreeNode.parent_id
TaskTreeNode.parent












pycram.orm.tasktree#
Implementation of ORM classes associated with pycram.task.

Classes#


TaskTreeNode
ORM equivalent of pycram.task.TaskTreeNode.






Module Contents#


class pycram.orm.tasktree.TaskTreeNode#
Bases: pycram.orm.base.Base
ORM equivalent of pycram.task.TaskTreeNode.


id: sqlalchemy.orm.Mapped[int]#



action_id: sqlalchemy.orm.Mapped[typing_extensions.Optional[int]]#



action: sqlalchemy.orm.Mapped[typing_extensions.Optional[pycram.orm.base.Designator]]#



start_time: sqlalchemy.orm.Mapped[datetime.datetime]#



end_time: sqlalchemy.orm.Mapped[typing_extensions.Optional[datetime.datetime]]#



status: sqlalchemy.orm.Mapped[pycram.datastructures.enums.TaskStatus]#



reason: sqlalchemy.orm.Mapped[typing_extensions.Optional[str]]#



parent_id: sqlalchemy.orm.Mapped[typing_extensions.Optional[int]]#



parent: sqlalchemy.orm.Mapped[typing_extensions.Optional[TaskTreeNode]]#












previous
pycram.orm.object_designator




next
pycram.orm.utils









 Contents
  


Classes
Module Contents
TaskTreeNode
TaskTreeNode.id
TaskTreeNode.action_id
TaskTreeNode.action
TaskTreeNode.start_time
TaskTreeNode.end_time
TaskTreeNode.status
TaskTreeNode.reason
TaskTreeNode.parent_id
TaskTreeNode.parent












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.orm.object_designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.orm.object_designator




 Contents 



Classes
Module Contents
ObjectMixin
ObjectMixin.__abstract__
ObjectMixin.object_to_init
ObjectMixin.object_id()
ObjectMixin.object()


Object
Object.dtype
Object.obj_type
Object.name
Object.__mapper_args__


ObjectPart
ObjectPart.id
ObjectPart.__mapper_args__


BelieveObject
BelieveObject.id












pycram.orm.object_designator#

Classes#


ObjectMixin
ObjectMixin holds a foreign key column and its relationship to the referenced table.

Object
ORM class of pycram.designators.object_designator.ObjectDesignator

ObjectPart
ORM Class of pycram.designators.object_designator.LocatedObject.

BelieveObject
ORM class of pycram.designators.object_designator.ObjectDesignator






Module Contents#


class pycram.orm.object_designator.ObjectMixin#
Bases: sqlalchemy.orm.MappedAsDataclass
ObjectMixin holds a foreign key column and its relationship to the referenced table.
For information about Mixins, see https://docs.sqlalchemy.org/en/13/orm/extensions/declarative/mixins.html


__abstract__ = True#



object_to_init: bool#



object_id() → sqlalchemy.orm.Mapped[int]#



object()#




class pycram.orm.object_designator.Object#
Bases: pycram.orm.base.PoseMixin, pycram.orm.base.Base
ORM class of pycram.designators.object_designator.ObjectDesignator


dtype: sqlalchemy.orm.Mapped[str]#



obj_type: sqlalchemy.orm.Mapped[pycram.datastructures.enums.ObjectType | None]#



name: sqlalchemy.orm.Mapped[str]#



__mapper_args__#




class pycram.orm.object_designator.ObjectPart#
Bases: Object
ORM Class of pycram.designators.object_designator.LocatedObject.


id: sqlalchemy.orm.Mapped[int]#



__mapper_args__#




class pycram.orm.object_designator.BelieveObject#
Bases: pycram.orm.base.MapperArgsMixin, Object
ORM class of pycram.designators.object_designator.ObjectDesignator


id: sqlalchemy.orm.Mapped[int]#












previous
pycram.orm.motion_designator




next
pycram.orm.tasktree









 Contents
  


Classes
Module Contents
ObjectMixin
ObjectMixin.__abstract__
ObjectMixin.object_to_init
ObjectMixin.object_id()
ObjectMixin.object()


Object
Object.dtype
Object.obj_type
Object.name
Object.__mapper_args__


ObjectPart
ObjectPart.id
ObjectPart.__mapper_args__


BelieveObject
BelieveObject.id












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.orm.motion_designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.orm.motion_designator




 Contents 



Classes
Module Contents
Motion
Motion.id
Motion.dtype


MoveMotion
MoveMotion.id


AccessingMotion
AccessingMotion.id
AccessingMotion.part_of
AccessingMotion.object
AccessingMotion.arm
AccessingMotion.gripper
AccessingMotion.distance
AccessingMotion.drawer_joint
AccessingMotion.drawer_handle


MoveTCPMotion
MoveTCPMotion.id
MoveTCPMotion.arm
MoveTCPMotion.allow_gripper_collision


LookingMotion
LookingMotion.id


MoveGripperMotion
MoveGripperMotion.id
MoveGripperMotion.motion
MoveGripperMotion.gripper
MoveGripperMotion.allow_gripper_collision


DetectingMotion
DetectingMotion.id
DetectingMotion.object_type


WorldStateDetectingMotion
WorldStateDetectingMotion.id
WorldStateDetectingMotion.object_type


OpeningMotion
OpeningMotion.id
OpeningMotion.arm


ClosingMotion
ClosingMotion.id
ClosingMotion.arm












pycram.orm.motion_designator#
This module defines a set of ORM classes related to motion designators in the pycram framework.
Each motion designator class has its own table in the database with columns representing its attributes.
The MotionDesignator class is the base class that defines the polymorphic behavior of all other motion designator
classes.

Classes#


Motion
ORM class of pycram.designators.motion_designator.MotionDesignatorDescription

MoveMotion
ORM class of pycram.designators.motion_designator.MoveMotion

AccessingMotion
ORM class of pycram.designators.motion_designator.AccessingMotion

MoveTCPMotion
ORM class of pycram.designators.motion_designator.MoveTCPMotion

LookingMotion
ORM class of pycram.designators.motion_designator.LookingMotion

MoveGripperMotion
ORM class of pycram.designators.motion_designator.MoveGripperMotion

DetectingMotion
ORM class of pycram.designators.motion_designator.DetectingMotion

WorldStateDetectingMotion
ORM class of pycram.designators.motion_designator.WorldStateDetectingMotion

OpeningMotion
ORM class of pycram.designators.motion_designator.OpeningMotion

ClosingMotion
ORM class of pycram.designators.motion_designator.ClosingMotion






Module Contents#


class pycram.orm.motion_designator.Motion#
Bases: pycram.orm.base.MapperArgsMixin, pycram.orm.base.Designator
ORM class of pycram.designators.motion_designator.MotionDesignatorDescription

Variables:

id – (Integer) Auto-incrementing primary key
dtype – (String) Polymorphic discriminator





id: sqlalchemy.orm.Mapped[int]#



dtype: sqlalchemy.orm.Mapped[str]#




class pycram.orm.motion_designator.MoveMotion#
Bases: pycram.orm.base.PoseMixin, Motion
ORM class of pycram.designators.motion_designator.MoveMotion


id: sqlalchemy.orm.Mapped[int]#




class pycram.orm.motion_designator.AccessingMotion#
Bases: Motion
ORM class of pycram.designators.motion_designator.AccessingMotion

Variables:

arm – (String) Name of the arm used
gripper – (String) Name of the gripper used
distance – (Float) Distance from the drawer to the robot
drawer_joint





id: sqlalchemy.orm.Mapped[int]#



part_of: sqlalchemy.orm.Mapped[int]#



object: sqlalchemy.orm.Mapped[pycram.orm.object_designator.Object]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#



gripper: sqlalchemy.orm.Mapped[str]#



distance: sqlalchemy.orm.Mapped[float]#



drawer_joint: sqlalchemy.orm.Mapped[str]#



drawer_handle: sqlalchemy.orm.Mapped[str]#




class pycram.orm.motion_designator.MoveTCPMotion#
Bases: pycram.orm.base.PoseMixin, Motion
ORM class of pycram.designators.motion_designator.MoveTCPMotion

Variables:
arm – String specifying which arm to move the TCP of




id: sqlalchemy.orm.Mapped[int]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#



allow_gripper_collision: sqlalchemy.orm.Mapped[typing_extensions.Optional[bool]]#




class pycram.orm.motion_designator.LookingMotion#
Bases: pycram.orm.base.PoseMixin, Motion
ORM class of pycram.designators.motion_designator.LookingMotion


id: sqlalchemy.orm.Mapped[int]#




class pycram.orm.motion_designator.MoveGripperMotion#
Bases: Motion
ORM class of pycram.designators.motion_designator.MoveGripperMotion


id: sqlalchemy.orm.Mapped[int]#



motion: sqlalchemy.orm.Mapped[pycram.datastructures.enums.GripperState]#



gripper: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#



allow_gripper_collision: sqlalchemy.orm.Mapped[typing_extensions.Optional[bool]]#




class pycram.orm.motion_designator.DetectingMotion#
Bases: Motion
ORM class of pycram.designators.motion_designator.DetectingMotion


id: sqlalchemy.orm.Mapped[int]#



object_type: sqlalchemy.orm.Mapped[pycram.datastructures.enums.ObjectType]#




class pycram.orm.motion_designator.WorldStateDetectingMotion#
Bases: Motion
ORM class of pycram.designators.motion_designator.WorldStateDetectingMotion


id: sqlalchemy.orm.Mapped[int]#



object_type: sqlalchemy.orm.Mapped[str]#




class pycram.orm.motion_designator.OpeningMotion#
Bases: Motion
ORM class of pycram.designators.motion_designator.OpeningMotion


id: sqlalchemy.orm.Mapped[int]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#




class pycram.orm.motion_designator.ClosingMotion#
Bases: Motion
ORM class of pycram.designators.motion_designator.ClosingMotion


id: sqlalchemy.orm.Mapped[int]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#












previous
pycram.orm.base




next
pycram.orm.object_designator









 Contents
  


Classes
Module Contents
Motion
Motion.id
Motion.dtype


MoveMotion
MoveMotion.id


AccessingMotion
AccessingMotion.id
AccessingMotion.part_of
AccessingMotion.object
AccessingMotion.arm
AccessingMotion.gripper
AccessingMotion.distance
AccessingMotion.drawer_joint
AccessingMotion.drawer_handle


MoveTCPMotion
MoveTCPMotion.id
MoveTCPMotion.arm
MoveTCPMotion.allow_gripper_collision


LookingMotion
LookingMotion.id


MoveGripperMotion
MoveGripperMotion.id
MoveGripperMotion.motion
MoveGripperMotion.gripper
MoveGripperMotion.allow_gripper_collision


DetectingMotion
DetectingMotion.id
DetectingMotion.object_type


WorldStateDetectingMotion
WorldStateDetectingMotion.id
WorldStateDetectingMotion.object_type


OpeningMotion
OpeningMotion.id
OpeningMotion.arm


ClosingMotion
ClosingMotion.id
ClosingMotion.arm












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.orm — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.orm




 Contents 



Submodules








pycram.orm#

Submodules#


pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views












previous
pycram.ontology.ontology_common




next
pycram.orm.action_designator









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.orm.base — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.orm.base




 Contents 



Classes
Functions
Module Contents
get_pycram_version_from_git()
_Base
_Base.type_annotation_map
_Base.id
_Base.__tablename__()


Base
Base.__abstract__
Base.process_metadata_id()
Base.process_metadata()


MapperArgsMixin
MapperArgsMixin.__abstract__
MapperArgsMixin.__mapper_args__()


PositionMixin
PositionMixin.__abstract__
PositionMixin.position_to_init
PositionMixin.position_id()
PositionMixin.position()


QuaternionMixin
QuaternionMixin.__abstract__
QuaternionMixin.orientation_to_init
QuaternionMixin.orientation_id()
QuaternionMixin.orientation()


PoseMixin
PoseMixin.__abstract__
PoseMixin.pose_to_init
PoseMixin.pose_id()
PoseMixin.pose()


ProcessMetaData
ProcessMetaData.created_at
ProcessMetaData.created_by
ProcessMetaData.description
ProcessMetaData.pycram_version
ProcessMetaData._self
ProcessMetaData.committed()
ProcessMetaData.insert()
ProcessMetaData.reset()


Designator
Designator.dtype()
Designator.__mapper_args__()


Position
Position.x
Position.y
Position.z


Quaternion
Quaternion.x
Quaternion.y
Quaternion.z
Quaternion.w


Pose
Pose.time
Pose.frame


Color
Color.r
Color.g
Color.b
Color.alpha


RobotState
RobotState.torso_height
RobotState.type












pycram.orm.base#
Implementation of base classes for orm modelling.

Classes#


_Base
Dummy class

Base
Base class to add orm functionality to all pycram mappings

MapperArgsMixin
MapperArgsMixin stores __mapper_args__ information for certain subclass-tables.

PositionMixin
PositionMixin holds a foreign key column and its relationship to the referenced table.

QuaternionMixin
QuaternionMixin holds a foreign key column and its relationship to the referenced table.

PoseMixin
PoseMixin holds a foreign key column and its relationship to the referenced table.

ProcessMetaData
ProcessMetaData stores information about the context of this experiment.

Designator
ORM Class holding every performed action and motion serving as every performables and motions root.

Position
ORM Class for 3D positions.

Quaternion
ORM Class for Quaternions.

Pose
ORM Class for Poses.

Color
ORM Class for Colors.

RobotState
ORM Representation of a robots state.






Functions#


get_pycram_version_from_git(→ Optional[str])
Get the PyCRAM commit hash that is used to run this version.






Module Contents#


pycram.orm.base.get_pycram_version_from_git() → str | None#
Get the PyCRAM commit hash that is used to run this version.
This assumes that you have gitpython installed and that the PyCRAM git repository on your system can be found
with “roscd pycram”.



class pycram.orm.base._Base#
Bases: sqlalchemy.orm.DeclarativeBase, sqlalchemy.orm.MappedAsDataclass
Dummy class


type_annotation_map#



id: sqlalchemy.orm.Mapped[int]#
Unique integer ID as auto incremented primary key.



__tablename__()#




class pycram.orm.base.Base#
Bases: _Base
Base class to add orm functionality to all pycram mappings


__abstract__ = True#



process_metadata_id() → sqlalchemy.orm.Mapped[int]#



process_metadata()#




class pycram.orm.base.MapperArgsMixin#
Bases: sqlalchemy.orm.MappedAsDataclass
MapperArgsMixin stores __mapper_args__ information for certain subclass-tables.
For information about Mixins, see https://docs.sqlalchemy.org/en/20/orm/declarative_mixins.html


__abstract__ = True#



__mapper_args__()#




class pycram.orm.base.PositionMixin#
Bases: sqlalchemy.orm.MappedAsDataclass
PositionMixin holds a foreign key column and its relationship to the referenced table.
For information about Mixins, see https://docs.sqlalchemy.org/en/20/orm/declarative_mixins.html


__abstract__ = True#



position_to_init: bool#



position_id() → sqlalchemy.orm.Mapped[int]#



position()#




class pycram.orm.base.QuaternionMixin#
Bases: sqlalchemy.orm.MappedAsDataclass
QuaternionMixin holds a foreign key column and its relationship to the referenced table.
For information about Mixins, see https://docs.sqlalchemy.org/en/20/orm/declarative_mixins.html


__abstract__ = True#



orientation_to_init: bool#



orientation_id() → sqlalchemy.orm.Mapped[int]#



orientation()#




class pycram.orm.base.PoseMixin#
Bases: sqlalchemy.orm.MappedAsDataclass
PoseMixin holds a foreign key column and its relationship to the referenced table.
For information about Mixins, see https://docs.sqlalchemy.org/en/20/orm/declarative_mixins.html


__abstract__ = True#



pose_to_init: bool#



pose_id() → sqlalchemy.orm.Mapped[int]#



pose()#




class pycram.orm.base.ProcessMetaData#
Bases: _Base
ProcessMetaData stores information about the context of this experiment.
This class is a singleton and only one MetaData can exist per session.


created_at: sqlalchemy.orm.Mapped[datetime.datetime]#
The timestamp where this row got created. This is an aid for versioning.



created_by: sqlalchemy.orm.Mapped[str]#
The user that created the experiment.



description: sqlalchemy.orm.Mapped[str]#
A description of the purpose (?) of this experiment.



pycram_version: sqlalchemy.orm.Mapped[str]#
The PyCRAM version used to generate this row.



_self = None#
The singleton instance.



committed()#
Return if this object is in the database or not.



insert(session: sqlalchemy.orm.Session)#
Insert this into the database using the session. Skipped if it already is inserted.



classmethod reset()#
Reset the singleton instance to None, s. t. next time the class is called a new instance is created.




class pycram.orm.base.Designator#
Bases: Base
ORM Class holding every performed action and motion serving as every performables and motions root.


dtype() → sqlalchemy.orm.Mapped[str]#



__mapper_args__()#




class pycram.orm.base.Position#
Bases: Base
ORM Class for 3D positions.


x: sqlalchemy.orm.Mapped[float]#



y: sqlalchemy.orm.Mapped[float]#



z: sqlalchemy.orm.Mapped[float]#




class pycram.orm.base.Quaternion#
Bases: Base
ORM Class for Quaternions.


x: sqlalchemy.orm.Mapped[float]#



y: sqlalchemy.orm.Mapped[float]#



z: sqlalchemy.orm.Mapped[float]#



w: sqlalchemy.orm.Mapped[float]#




class pycram.orm.base.Pose#
Bases: PositionMixin, QuaternionMixin, Base
ORM Class for Poses.


time: sqlalchemy.orm.Mapped[datetime.datetime]#



frame: sqlalchemy.orm.Mapped[str]#




class pycram.orm.base.Color#
Bases: Base
ORM Class for Colors.


r: sqlalchemy.orm.Mapped[float]#



g: sqlalchemy.orm.Mapped[float]#



b: sqlalchemy.orm.Mapped[float]#



alpha: sqlalchemy.orm.Mapped[float]#




class pycram.orm.base.RobotState#
Bases: PoseMixin, Base
ORM Representation of a robots state.


torso_height: sqlalchemy.orm.Mapped[float]#
The torso height of the robot.



type: sqlalchemy.orm.Mapped[pycram.datastructures.enums.ObjectType]#
The type of the robot.












previous
pycram.orm.action_designator




next
pycram.orm.motion_designator









 Contents
  


Classes
Functions
Module Contents
get_pycram_version_from_git()
_Base
_Base.type_annotation_map
_Base.id
_Base.__tablename__()


Base
Base.__abstract__
Base.process_metadata_id()
Base.process_metadata()


MapperArgsMixin
MapperArgsMixin.__abstract__
MapperArgsMixin.__mapper_args__()


PositionMixin
PositionMixin.__abstract__
PositionMixin.position_to_init
PositionMixin.position_id()
PositionMixin.position()


QuaternionMixin
QuaternionMixin.__abstract__
QuaternionMixin.orientation_to_init
QuaternionMixin.orientation_id()
QuaternionMixin.orientation()


PoseMixin
PoseMixin.__abstract__
PoseMixin.pose_to_init
PoseMixin.pose_id()
PoseMixin.pose()


ProcessMetaData
ProcessMetaData.created_at
ProcessMetaData.created_by
ProcessMetaData.description
ProcessMetaData.pycram_version
ProcessMetaData._self
ProcessMetaData.committed()
ProcessMetaData.insert()
ProcessMetaData.reset()


Designator
Designator.dtype()
Designator.__mapper_args__()


Position
Position.x
Position.y
Position.z


Quaternion
Quaternion.x
Quaternion.y
Quaternion.z
Quaternion.w


Pose
Pose.time
Pose.frame


Color
Color.r
Color.g
Color.b
Color.alpha


RobotState
RobotState.torso_height
RobotState.type












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.orm.action_designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.orm.action_designator




 Contents 



Classes
Module Contents
Action
Action.id
Action.dtype
Action.robot_state_id
Action.robot_state


ParkArmsAction
ParkArmsAction.id
ParkArmsAction.arm


NavigateAction
NavigateAction.id


MoveTorsoAction
MoveTorsoAction.id
MoveTorsoAction.position


SetGripperAction
SetGripperAction.id
SetGripperAction.gripper
SetGripperAction.motion


Release
Release.id
Release.gripper


GripAction
GripAction.id
GripAction.gripper
GripAction.effort


PickUpAction
PickUpAction.id
PickUpAction.arm
PickUpAction.grasp


PlaceAction
PlaceAction.id
PlaceAction.arm


TransportAction
TransportAction.id
TransportAction.arm


LookAtAction
LookAtAction.id


DetectAction
DetectAction.id


OpenAction
OpenAction.id
OpenAction.arm


CloseAction
CloseAction.id
CloseAction.arm


GraspingAction
GraspingAction.id
GraspingAction.arm


FaceAtAction
FaceAtAction.id












pycram.orm.action_designator#

Classes#


Action
ORM class of pycram.designators.action_designator.ActionDesignator.

ParkArmsAction
ORM Class of pycram.designators.action_designator.ParkArmsDesignator.

NavigateAction
ORM Class of pycram.designators.action_designator.NavigateAction.

MoveTorsoAction
ORM Class of pycram.designators.action_designator.MoveTorsoAction.

SetGripperAction
ORM Class of pycram.designators.action_designator.SetGripperAction.

Release
ORM Class of pycram.designators.action_designator.Release.

GripAction
ORM Class of pycram.designators.action_designator.GripAction.

PickUpAction
ORM Class of pycram.designators.action_designator.PickUpAction.

PlaceAction
ORM Class of pycram.designators.action_designator.PlaceAction.

TransportAction
ORM Class of pycram.designators.action_designator.TransportAction.

LookAtAction
ORM Class of pycram.designators.action_designator.LookAtAction.

DetectAction
ORM Class of pycram.designators.action_designator.DetectAction.

OpenAction
ORM Class of pycram.designators.action_designator.OpenAction.

CloseAction
ORM Class of pycram.designators.action_designator.CloseAction.

GraspingAction
ORM Class of pycram.designators.action_designator.GraspingAction.

FaceAtAction
ORM Class of pycram.designators.action_designator.FaceAtAction.






Module Contents#


class pycram.orm.action_designator.Action#
Bases: pycram.orm.base.MapperArgsMixin, pycram.orm.base.Designator
ORM class of pycram.designators.action_designator.ActionDesignator.
The purpose of this class is to correctly map the inheritance from the action designator class into the database.
Inheritance is implemented as Joined Table Inheritance (see https://docs.sqlalchemy.org/en/20/orm/inheritance.html)


id: sqlalchemy.orm.Mapped[int]#



dtype: sqlalchemy.orm.Mapped[str]#



robot_state_id: sqlalchemy.orm.Mapped[int]#



robot_state: sqlalchemy.orm.Mapped[pycram.orm.base.RobotState]#




class pycram.orm.action_designator.ParkArmsAction#
Bases: Action
ORM Class of pycram.designators.action_designator.ParkArmsDesignator.


id: sqlalchemy.orm.Mapped[int]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#




class pycram.orm.action_designator.NavigateAction#
Bases: pycram.orm.base.PoseMixin, Action
ORM Class of pycram.designators.action_designator.NavigateAction.


id: sqlalchemy.orm.Mapped[int]#




class pycram.orm.action_designator.MoveTorsoAction#
Bases: Action
ORM Class of pycram.designators.action_designator.MoveTorsoAction.


id: sqlalchemy.orm.Mapped[int]#



position: sqlalchemy.orm.Mapped[typing_extensions.Optional[float]]#




class pycram.orm.action_designator.SetGripperAction#
Bases: Action
ORM Class of pycram.designators.action_designator.SetGripperAction.


id: sqlalchemy.orm.Mapped[int]#



gripper: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#



motion: sqlalchemy.orm.Mapped[pycram.datastructures.enums.GripperState]#




class pycram.orm.action_designator.Release#
Bases: pycram.orm.object_designator.ObjectMixin, Action
ORM Class of pycram.designators.action_designator.Release.


id: sqlalchemy.orm.Mapped[int]#



gripper: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#




class pycram.orm.action_designator.GripAction#
Bases: pycram.orm.object_designator.ObjectMixin, Action
ORM Class of pycram.designators.action_designator.GripAction.


id: sqlalchemy.orm.Mapped[int]#



gripper: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#



effort: sqlalchemy.orm.Mapped[float]#




class pycram.orm.action_designator.PickUpAction#
Bases: pycram.orm.object_designator.ObjectMixin, Action
ORM Class of pycram.designators.action_designator.PickUpAction.


id: sqlalchemy.orm.Mapped[int]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#



grasp: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Grasp]#




class pycram.orm.action_designator.PlaceAction#
Bases: pycram.orm.base.PoseMixin, pycram.orm.object_designator.ObjectMixin, Action
ORM Class of pycram.designators.action_designator.PlaceAction.


id: sqlalchemy.orm.Mapped[int]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#




class pycram.orm.action_designator.TransportAction#
Bases: pycram.orm.base.PoseMixin, pycram.orm.object_designator.ObjectMixin, Action
ORM Class of pycram.designators.action_designator.TransportAction.


id: sqlalchemy.orm.Mapped[int]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#




class pycram.orm.action_designator.LookAtAction#
Bases: pycram.orm.base.PoseMixin, Action
ORM Class of pycram.designators.action_designator.LookAtAction.


id: sqlalchemy.orm.Mapped[int]#




class pycram.orm.action_designator.DetectAction#
Bases: pycram.orm.object_designator.ObjectMixin, Action
ORM Class of pycram.designators.action_designator.DetectAction.


id: sqlalchemy.orm.Mapped[int]#




class pycram.orm.action_designator.OpenAction#
Bases: pycram.orm.object_designator.ObjectMixin, Action
ORM Class of pycram.designators.action_designator.OpenAction.


id: sqlalchemy.orm.Mapped[int]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#




class pycram.orm.action_designator.CloseAction#
Bases: pycram.orm.object_designator.ObjectMixin, Action
ORM Class of pycram.designators.action_designator.CloseAction.


id: sqlalchemy.orm.Mapped[int]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#




class pycram.orm.action_designator.GraspingAction#
Bases: pycram.orm.object_designator.ObjectMixin, Action
ORM Class of pycram.designators.action_designator.GraspingAction.


id: sqlalchemy.orm.Mapped[int]#



arm: sqlalchemy.orm.Mapped[pycram.datastructures.enums.Arms]#




class pycram.orm.action_designator.FaceAtAction#
Bases: pycram.orm.base.PoseMixin, Action
ORM Class of pycram.designators.action_designator.FaceAtAction.


id: sqlalchemy.orm.Mapped[int]#












previous
pycram.orm




next
pycram.orm.base









 Contents
  


Classes
Module Contents
Action
Action.id
Action.dtype
Action.robot_state_id
Action.robot_state


ParkArmsAction
ParkArmsAction.id
ParkArmsAction.arm


NavigateAction
NavigateAction.id


MoveTorsoAction
MoveTorsoAction.id
MoveTorsoAction.position


SetGripperAction
SetGripperAction.id
SetGripperAction.gripper
SetGripperAction.motion


Release
Release.id
Release.gripper


GripAction
GripAction.id
GripAction.gripper
GripAction.effort


PickUpAction
PickUpAction.id
PickUpAction.arm
PickUpAction.grasp


PlaceAction
PlaceAction.id
PlaceAction.arm


TransportAction
TransportAction.id
TransportAction.arm


LookAtAction
LookAtAction.id


DetectAction
DetectAction.id


OpenAction
OpenAction.id
OpenAction.arm


CloseAction
CloseAction.id
CloseAction.arm


GraspingAction
GraspingAction.id
GraspingAction.arm


FaceAtAction
FaceAtAction.id












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.ontology.ontology_common — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.ontology.ontology_common




 Contents 



Attributes
Classes
Module Contents
ONTOLOGY_SQL_BACKEND_FILE_EXTENSION
ONTOLOGY_OWL_FILE_EXTENSION
OntologyConceptHolderStore
OntologyConceptHolderStore.__all_ontology_concept_holders
OntologyConceptHolderStore.add_ontology_concept_holder()
OntologyConceptHolderStore.remove_ontology_concept()
OntologyConceptHolderStore.get_ontology_concepts_by_class()
OntologyConceptHolderStore.get_ontology_concept_by_name()
OntologyConceptHolderStore.get_ontology_concept_holders_by_class()
OntologyConceptHolderStore.get_ontology_concept_holder_by_name()
OntologyConceptHolderStore.get_ontology_concepts_of_designator()
OntologyConceptHolderStore.get_designators_of_ontology_concept()


OntologyConceptHolder
OntologyConceptHolder.ontology_concept
OntologyConceptHolder.designators
OntologyConceptHolder.resolve
OntologyConceptHolder.concept_holder_store
OntologyConceptHolder.name
OntologyConceptHolder.get_default_designator()
OntologyConceptHolder.has_designator()
OntologyConceptHolder.__eq__()












pycram.ontology.ontology_common#

Attributes#


ONTOLOGY_SQL_BACKEND_FILE_EXTENSION


ONTOLOGY_OWL_FILE_EXTENSION







Classes#


OntologyConceptHolderStore
Singleton class storing all instances of OntologyConceptHolder

OntologyConceptHolder
Wrapper of an ontology concept that is either dynamically created or loaded from an ontology.






Module Contents#


pycram.ontology.ontology_common.ONTOLOGY_SQL_BACKEND_FILE_EXTENSION = '.sqlite3'#



pycram.ontology.ontology_common.ONTOLOGY_OWL_FILE_EXTENSION = '.owl'#



class pycram.ontology.ontology_common.OntologyConceptHolderStore#
Bases: object
Singleton class storing all instances of OntologyConceptHolder


__all_ontology_concept_holders: Dict[str, OntologyConceptHolder]#



add_ontology_concept_holder(ontology_concept_name: str, ontology_concept_holder: OntologyConceptHolder) → bool#
Add an ontology concept to the store

Parameters:
ontology_concept_name – Name of the ontology concept to be removed

Returns:
True if the ontology concept can be added into the concept store (if not already existing), otherwise False





remove_ontology_concept(ontology_concept_name: str) → bool#
Remove an ontology concept from the store

Parameters:
ontology_concept_name – Name of the ontology concept to be removed

Returns:
True if the ontology concept can be removed from the concept store (if existing), otherwise False





get_ontology_concepts_by_class(ontology_concept_class: Type[owlready2.Thing]) → List[owlready2.Thing]#
Get a list of ontology concepts for a given class

Parameters:
ontology_concept_class – An ontology concept class

Returns:
A list of ontology concepts of which the type is either the given class or its subclass





get_ontology_concept_by_name(ontology_concept_name: str) → owlready2.Thing | None#
Get the ontology concept of a given name if exists, otherwise None

Parameters:
ontology_concept_name – Name of an ontology concept

Returns:
The ontology concept of a given name if exists or None otherwise





get_ontology_concept_holders_by_class(ontology_concept_class: Type[owlready2.Thing]) → List[OntologyConceptHolder]#
Get a list of ontology concept holders for a given ontology concept class

Parameters:
ontology_concept_class – An ontology concept class

Returns:
A list of ontology concept holders as instances of a given ontology concept class





get_ontology_concept_holder_by_name(ontology_concept_name: str) → OntologyConceptHolder | None#
Get the ontology concept holder for one of a given name if exists, otherwise None

Parameters:
ontology_concept_name – Name of an ontology concept

Returns:
The ontology concept holder for one of a given name if exists, otherwise None





static get_ontology_concepts_of_designator(designator: pycram.designator.DesignatorDescription) → List[owlready2.Thing]#
Get the corresponding ontology concepts for a given designator

Parameters:
designator – A designator associated with an ontology concept

Returns:
A list of ontology concepts corresponding with a given designator





get_designators_of_ontology_concept(ontology_concept_name: str) → List[pycram.designator.DesignatorDescription]#
Get the corresponding designators associated with a given ontology concept

Parameters:
ontology_concept_name – An ontology concept name

Returns:
A list of designators corresponding to a given ontology concept






class pycram.ontology.ontology_common.OntologyConceptHolder(ontology_concept: owlready2.Thing)#
Bases: object
Wrapper of an ontology concept that is either dynamically created or loaded from an ontology.
NOTE: Since an ontology concept class, after being saved into an ontology file, must be reusable in the next time
the ontology is loaded, there must be no other attributes of it that should be created aside from ones inherited from owlready2.Thing!

Variables:
ontology_concept – An ontology concept, either dynamically created, or loaded from an ontology




ontology_concept: owlready2.Thing#



designators: List[pycram.designator.DesignatorDescription] = []#



resolve: Callable | None = None#



concept_holder_store: OntologyConceptHolderStore#



property name: str#
Get name of the ontology concept owned by this holder

Returns:
Ontology concept name





get_default_designator() → pycram.designator.DesignatorDescription | None#
Get the first element of designators if there is, else None

Returns:
The first designator associated with the ontology concept held by this holder if exists or None





has_designator(designator) → bool#
Check whether this ontology concept holder has a given designator registered with its ontology concept

Returns:
True if a given designator was registered by this ontology concept holder, either by itself or under another of the same name





__eq__(other: OntologyConceptHolder) → bool#
Equality check based on name of the ontology concept

Parameters:
other – Other ontology concept instance to check against

Returns:
True if the ontology concept of the other holder has the same name with the current one, otherwise False














previous
pycram.ontology.ontology




next
pycram.orm









 Contents
  


Attributes
Classes
Module Contents
ONTOLOGY_SQL_BACKEND_FILE_EXTENSION
ONTOLOGY_OWL_FILE_EXTENSION
OntologyConceptHolderStore
OntologyConceptHolderStore.__all_ontology_concept_holders
OntologyConceptHolderStore.add_ontology_concept_holder()
OntologyConceptHolderStore.remove_ontology_concept()
OntologyConceptHolderStore.get_ontology_concepts_by_class()
OntologyConceptHolderStore.get_ontology_concept_by_name()
OntologyConceptHolderStore.get_ontology_concept_holders_by_class()
OntologyConceptHolderStore.get_ontology_concept_holder_by_name()
OntologyConceptHolderStore.get_ontology_concepts_of_designator()
OntologyConceptHolderStore.get_designators_of_ontology_concept()


OntologyConceptHolder
OntologyConceptHolder.ontology_concept
OntologyConceptHolder.designators
OntologyConceptHolder.resolve
OntologyConceptHolder.concept_holder_store
OntologyConceptHolder.name
OntologyConceptHolder.get_default_designator()
OntologyConceptHolder.has_designator()
OntologyConceptHolder.__eq__()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.ontology.ontology — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.ontology.ontology




 Contents 



Attributes
Classes
Module Contents
SOMA_HOME_ONTOLOGY_IRI
SOMA_ONTOLOGY_IRI
SOMA_ONTOLOGY_NAMESPACE
DUL_ONTOLOGY_NAMESPACE
OntologyManager
OntologyManager.ontologies
OntologyManager.main_ontology
OntologyManager.soma
OntologyManager.dul
OntologyManager.main_ontology_world
OntologyManager.main_ontology_iri
OntologyManager.main_ontology_namespace
OntologyManager.print_ontology_class()
OntologyManager.print_ontology_property()
OntologyManager.get_default_ontology_search_path()
OntologyManager.get_main_ontology_dir()
OntologyManager.create_main_ontology_world()
OntologyManager.create_ontology_world()
OntologyManager.create_main_ontology()
OntologyManager.load_ontology()
OntologyManager.initialized()
OntologyManager.browse_ontologies()
OntologyManager.save()
OntologyManager.create_ontology_concept_class()
OntologyManager.create_ontology_property_class()
OntologyManager.get_ontology_classes_by_condition()
OntologyManager.get_ontology_class_by_ontology()
OntologyManager.get_ontology_class()
OntologyManager.get_ontology_classes_by_namespace()
OntologyManager.get_ontology_classes_by_subname()
OntologyManager.get_ontology_descendant_classes()
OntologyManager.get_ontology_general_class_axioms()
OntologyManager.create_ontology_triple_classes()
OntologyManager.create_ontology_linked_designator()
OntologyManager.create_ontology_linked_designator_by_concept()
OntologyManager.set_ontology_concept_designator_connection()
OntologyManager.set_ontology_relation()
OntologyManager.get_designators_by_subject_predicate()
OntologyManager.create_ontology_object_designator_from_type()
OntologyManager.destroy_ontology_class()
OntologyManager.create_rule_reflexivity()
OntologyManager.create_rule_symmetry()
OntologyManager.create_rule_transitivity()
OntologyManager.reason()












pycram.ontology.ontology#

Attributes#


SOMA_HOME_ONTOLOGY_IRI


SOMA_ONTOLOGY_IRI


SOMA_ONTOLOGY_NAMESPACE


DUL_ONTOLOGY_NAMESPACE







Classes#


OntologyManager
Singleton class as the adapter accessing data of an OWL ontology, largely based on owlready2.






Module Contents#


pycram.ontology.ontology.SOMA_HOME_ONTOLOGY_IRI = 'http://www.ease-crc.org/ont/SOMA-HOME.owl'#



pycram.ontology.ontology.SOMA_ONTOLOGY_IRI = 'http://www.ease-crc.org/ont/SOMA.owl'#



pycram.ontology.ontology.SOMA_ONTOLOGY_NAMESPACE = 'SOMA'#



pycram.ontology.ontology.DUL_ONTOLOGY_NAMESPACE = 'DUL'#



class pycram.ontology.ontology.OntologyManager(main_ontology_iri: str | None = None, ontology_search_path: str | None = None, use_global_default_world: bool = True)#
Bases: object
Singleton class as the adapter accessing data of an OWL ontology, largely based on owlready2.


ontologies: Dict[str, owlready2.Ontology]#



main_ontology: owlready2.Ontology | None = None#



soma: owlready2.Ontology | None = None#



dul: owlready2.Ontology | None = None#



main_ontology_world: owlready2.World | None = None#



main_ontology_iri: str#



main_ontology_namespace: owlready2.Namespace | None = None#



static print_ontology_class(ontology_class: Type[owlready2.Thing])#
Print information (ancestors, super classes, subclasses, properties, etc.) of an ontology class

Parameters:
ontology_class – An ontology class





static print_ontology_property(ontology_property: owlready2.Property)#
Print information (subjects, objects, relations, etc.) of an ontology property

Parameters:
ontology_property – An ontology property





static get_default_ontology_search_path() → str | None#
Get the first ontology search path from owlready2.onto_path

Returns:
the path to the ontology search path if existing, otherwise None





get_main_ontology_dir() → str | None#
Get path to the directory of main_ontology_iri if it is a local absolute path,
otherwise path to the default ontology search directory

Returns:
the path to the directory of the main ontology IRI





create_main_ontology_world(use_global_default_world: bool = True) → None#
Create the main ontology world, either reusing the owlready2-provided global default ontology world or create a new one
A backend sqlite3 file of same name with main_ontology is also created at the same folder with main_ontology_iri
(if it is a local absolute path). The file is automatically registered as cache for the main ontology world.

Parameters:
use_global_default_world – whether or not using the owlready2-provided global default persistent world





static create_ontology_world(use_global_default_world: bool = False, sql_backend_filename: str | None = None) → owlready2.World#
Either reuse the owlready2-provided global default ontology world or create a new one

Parameters:

use_global_default_world – whether or not using the owlready2-provided global default persistent world
sql_backend_filename – a full file path (no need to already exist) being used as SQL backend for the ontology world. If None, memory is used instead


Returns:
owlready2-provided global default ontology world or a newly created ontology world





create_main_ontology() → bool#
Load ontologies from main_ontology_iri to main_ontology_world
If main_ontology_iri is a remote URL, Owlready2 first searches for a local copy of the OWL file (from onto_path),
if not found, tries to download it from the Internet.

Returns:
True if loading succeeds





load_ontology(ontology_iri: str) → Tuple[owlready2.Ontology, owlready2.Namespace] | None#
Load an ontology from an IRI

Parameters:
ontology_iri – An ontology IRI

Returns:
A tuple including an ontology instance & its namespace





initialized() → bool#
Check if the main ontology has been loaded

Returns:
True if loaded, otherwise False





static browse_ontologies(ontology: owlready2.Ontology, condition: Callable | None = None, func: Callable | None = None, **kwargs) → None#
Browse the loaded ontologies (including the main and imported ones), doing operations based on a condition.

Parameters:

ontology – An ontology instance as the result of ontology loading
condition – a Callable condition that if not None needs to be passed before doing operations, otherwise just always carry the operations
func – a Callable specifying the operations to perform on all the loaded ontologies if condition is None, otherwise only the first ontology which meets the condition






save(target_filename: str | None = None, overwrite: bool = False) → bool#
Save main_ontology to a file on disk, also caching main_ontology_world to a sqlite3 file

Parameters:

target_filename – full name path of a file which the ontologies are saved into.
overwrite – overwrite an existing file if it exists. If empty, they are saved to the same original OWL file from which the main ontology was loaded, or a file at the same folder with ontology search path specified at constructor if it was loaded from a remote IRI.


Returns:
True if the ontology was successfully saved, False otherwise





create_ontology_concept_class(class_name: str, ontology_parent_concept_class: owlready2.Thing | None = None, ontology: owlready2.Ontology | None = None) → Type[owlready2.Thing] | None#
Create a new concept class in a given ontology

Parameters:

class_name – A given name to the new class
ontology_parent_concept_class – An optional parent ontology class of the new class
ontology – an owlready2.Ontology in which the concept class is created


Returns:
The created ontology class





create_ontology_property_class(class_name: str, ontology_parent_property_class: Type[owlready2.Property] | None = None, ontology: owlready2.Ontology | None = None) → Type[owlready2.Property] | None#
Create a new property class in a given ontology

Parameters:

class_name – A given name to the new class
ontology_parent_property_class – An optional parent ontology property class of the new class
ontology – an owlready2.Ontology in which the concept class is created


Returns:
The created ontology class





get_ontology_classes_by_condition(condition: Callable, first_match_only=False, **kwargs) → List[Type[owlready2.Thing]]#
Get an ontology class by a given condition

Parameters:

condition – condition of searching
first_match_only – whether to only fetch the first class matching the given condition


Returns:
The ontology class satisfying the given condition if found else None





static get_ontology_class_by_ontology(ontology: owlready2.Ontology, class_name: str) → Type[owlready2.Thing] | None#
Get an ontology class if it exists in a given ontology

Parameters:

ontology – an ontology instance
class_name – name of the searched-for ontology class


Returns:
The ontology class if it exists under the namespace of the given ontology, None otherwise





get_ontology_class(class_name: str) → Type[owlready2.Thing] | None#
Get an ontology class by name

Parameters:
class_name – name of the searched-for ontology class

Returns:
The ontology class of the given name if existing else None





get_ontology_classes_by_namespace(ontology_namespace: str) → List[Type[owlready2.Thing]]#
Get all ontologies classes by namespace

Parameters:
ontology_namespace – namespace of the searched-for ontology classes

Returns:
A list of the ontology classes under the given namespace





get_ontology_classes_by_subname(class_subname: str) → List[Type[owlready2.Thing]]#
Get all ontologies classes by subname

Parameters:
class_subname – a string as part of the full names of the searched-for ontology classes

Returns:
A list of the ontology classes of which the name contains the given subname





get_ontology_descendant_classes(ancestor_class: Type[owlready2.Thing], class_subname: str = '') → List[Type[owlready2.Thing]]#
Get ontology descendant classes of an ancestor class given descendant class subname

Parameters:
class_subname – a string as part of the ancestor class full name

Returns:
A list of the ontology descendant classes





get_ontology_general_class_axioms(ontology: owlready2.Ontology | None = None) → List[owlready2.class_construct.GeneralClassAxiom]#
Get general class axioms of an ontology
Ref: https://owlready2.readthedocs.io/en/latest/general_class_axioms.html

Parameters:
ontology – an ontology instance

Returns:
A list of ontology axioms in the ontology





create_ontology_triple_classes(subject_class_name: str, object_class_name: str, predicate_class_name: str, inverse_predicate_class_name: str | None = None, predicate_python_attribute_name: str | None = None, inverse_predicate_python_attribute_name: str | None = None, ontology_subject_parent_class: Type[owlready2.Thing] | None = None, ontology_object_parent_class: Type[owlready2.Thing | object] | None = None, ontology_property_parent_class: Type[owlready2.Property] = ObjectProperty, ontology_inverse_property_parent_class: Type[owlready2.Property] = ObjectProperty, ontology: owlready2.Ontology | None = None) → bool#
Dynamically create ontology triple classes under same namespace with the main ontology,
as known as {subject, predicate, object}, with the relations among them

Parameters:

subject_class_name – name of the subject class
object_class_name – name of the object class
predicate_class_name – name of predicate class, also used as a Python attribute of the subject class to query object instances
predicate_python_attribute_name – python attribute name designated for the predicate instance
inverse_predicate_class_name – name of inverse predicate
inverse_predicate_python_attribute_name – python attribute name designated for the inverse predicate instance
ontology_subject_parent_class – a parent class of the subject class
ontology_object_parent_class – a parent class of the object class
ontology_property_parent_class – a parent ontology property class, default: owlready2.ObjectProperty
ontology_inverse_property_parent_class – a parent ontology inverse property class, default: owlready2.ObjectProperty
ontology – an owlready2.Ontology in which triples are created


Returns:
True if the ontology triple classes are created successfully





create_ontology_linked_designator(designator_class: Type[pycram.designator.DesignatorDescription], ontology_concept_name: str, object_name: str, ontology_parent_class: Type[owlready2.Thing] | None = None) → pycram.designator.DesignatorDescription | None#
Create a designator linked to a given ontology concept

Parameters:

designator_class – A given designator class
ontology_concept_name – Ontology concept name
object_name – Name of object in case of the designator to be created is an Object Designator
ontology_parent_class – Parent ontology class from which the class of designator inherits


Returns:
A designator associated with an ontology concept





create_ontology_linked_designator_by_concept(designator_class: Type[pycram.designator.DesignatorDescription], ontology_concept_class: Type[owlready2.Thing], object_name: str) → pycram.designator.DesignatorDescription | None#
Create a designator that belongs to a given ontology concept class

Parameters:

designator_class – A given designator class
ontology_concept_class – An ontology concept class with which the output designator is associated
object_name – Name of object in case of the designator to be created is an Object Designator


Returns:
An object designator associated with the given ontology concept class if created successfully (not already exists), None otherwise





static set_ontology_concept_designator_connection(designator: pycram.designator.DesignatorDescription, ontology_concept_holder: pycram.ontology.ontology_common.OntologyConceptHolder) → None#
Set two-way connection between a designator and an ontology concept

Parameters:

designator – Designator
ontology_concept_holder – Ontology concept holder






static set_ontology_relation(subject_designator: pycram.designator.DesignatorDescription, object_designator: pycram.designator.DesignatorDescription, predicate_name: str) → bool#
Set ontology relation between subject and object designators

Parameters:

subject_designator – An object designator as the ontology subject
object_designator – An object designator as the ontology object
predicate_name – Name of the predicate


Returns:
True if the relation is set, False otherwise





static get_designators_by_subject_predicate(subject: pycram.designator.DesignatorDescription, predicate_name: str) → List[pycram.designator.DesignatorDescription]#
Get list of designators of an ontology-object concept given a subject designator and predicate

Parameters:

subject – The ontology-subject designator
predicate_name – The ontology-predicate name of the relation


Returns:
List of object designators





create_ontology_object_designator_from_type(object_type: pycram.datastructures.enums.ObjectType, ontology_concept_class: Type[owlready2.Thing]) → pycram.designator.ObjectDesignatorDescription | None#
Create an object designator associated with an ontology concept class from a given object type

Parameters:

object_type – An enumerated type of object
ontology_concept_class – An ontology concept class


Returns:
An object designator if created successfully (if not already existing), otherwise None





static destroy_ontology_class(ontology_class, destroy_instances: bool = True)#
Destroy all classes of an ontology

Parameters:

ontology_class – The ontology class to be destroyed
destroy_instances – Whether to destroy instances of those ontology classes






create_rule_reflexivity(ontology_concept_class_name: str, predicate_name: str, ontology: owlready2.Ontology | None = None) → owlready2.Imp#
Create the rule of reflexivity for a given ontology concept class.
Same effect is obtained by creating a dynamic ontology predicate class, subclassing owlready2.ReflexiveProperty.
Ref: https://en.wikipedia.org/wiki/Reflexive_relation

Parameters:

ontology_concept_class_name – Name of the ontology concept class having the relation defined
predicate_name – Name of the ontology predicate signifying the reflexive relation
ontology – The ontology for which the rule is created


Returns:
Rule of transitivity





create_rule_symmetry(ontology_concept_class_name: str, predicate_name: str, ontology: owlready2.Ontology | None = None) → owlready2.Imp#
Create the rule of transitivity for a given ontology concept class.
Same effect is obtained by creating a dynamic ontology predicate class, subclassing owlready2.SymmetricProperty.
Ref: https://en.wikipedia.org/wiki/Symmetric_relation

Parameters:

ontology_concept_class_name – Name of the ontology concept class having the relation defined
predicate_name – Name of the ontology predicate signifying the symmetric relation
ontology – The ontology for which the rule is created


Returns:
Rule of symmetry





create_rule_transitivity(ontology_concept_class_name: str, predicate_name: str, ontology: owlready2.Ontology | None = None) → owlready2.Imp#
Create the rule of transitivity for a given ontology concept class.
Same effect is obtained by creating a dynamic ontology predicate class, subclassing owlready2.TransitiveProperty.
Ref:
- https://en.wikipedia.org/wiki/Transitive_relation
- https://owlready2.readthedocs.io/en/latest/properties.html#obtaining-indirect-relations-considering-subproperty-transitivity-etc

Parameters:

ontology_concept_class_name – Name of the ontology concept class having the relation defined
predicate_name – Name of the ontology predicate signifying the transitive relation
ontology – The ontology for which the rule is created


Returns:
Rule of transitivity





reason(world: owlready2.World = None, use_pellet_reasoner: bool = True) → bool#
Run the reasoning on a given ontology world or main_ontology_world with Pellet or HermiT reasoner,
the two currently supported by owlready2
- By default, the reasoning works on owlready2.default_world
- The reasoning also automatically save ontologies (to either in-memory cache or a temporary sqlite3 file)
Ref:
- https://owlready2.readthedocs.io/en/latest/reasoning.html
- https://owlready2.readthedocs.io/en/latest/rule.html
- https://www.researchgate.net/publication/200758993_Benchmarking_OWL_reasoners
- https://www.researchgate.net/publication/345959058_OWL2Bench_A_Benchmark_for_OWL_2_Reasoners

Parameters:

world – An owlready2.World to reason about. If None, use main_ontology_world
use_pellet_reasoner – Use Pellet reasoner, otherwise HermiT


Returns:
True if the reasoning was successful, otherwise False














previous
pycram.ontology




next
pycram.ontology.ontology_common









 Contents
  


Attributes
Classes
Module Contents
SOMA_HOME_ONTOLOGY_IRI
SOMA_ONTOLOGY_IRI
SOMA_ONTOLOGY_NAMESPACE
DUL_ONTOLOGY_NAMESPACE
OntologyManager
OntologyManager.ontologies
OntologyManager.main_ontology
OntologyManager.soma
OntologyManager.dul
OntologyManager.main_ontology_world
OntologyManager.main_ontology_iri
OntologyManager.main_ontology_namespace
OntologyManager.print_ontology_class()
OntologyManager.print_ontology_property()
OntologyManager.get_default_ontology_search_path()
OntologyManager.get_main_ontology_dir()
OntologyManager.create_main_ontology_world()
OntologyManager.create_ontology_world()
OntologyManager.create_main_ontology()
OntologyManager.load_ontology()
OntologyManager.initialized()
OntologyManager.browse_ontologies()
OntologyManager.save()
OntologyManager.create_ontology_concept_class()
OntologyManager.create_ontology_property_class()
OntologyManager.get_ontology_classes_by_condition()
OntologyManager.get_ontology_class_by_ontology()
OntologyManager.get_ontology_class()
OntologyManager.get_ontology_classes_by_namespace()
OntologyManager.get_ontology_classes_by_subname()
OntologyManager.get_ontology_descendant_classes()
OntologyManager.get_ontology_general_class_axioms()
OntologyManager.create_ontology_triple_classes()
OntologyManager.create_ontology_linked_designator()
OntologyManager.create_ontology_linked_designator_by_concept()
OntologyManager.set_ontology_concept_designator_connection()
OntologyManager.set_ontology_relation()
OntologyManager.get_designators_by_subject_predicate()
OntologyManager.create_ontology_object_designator_from_type()
OntologyManager.destroy_ontology_class()
OntologyManager.create_rule_reflexivity()
OntologyManager.create_rule_symmetry()
OntologyManager.create_rule_transitivity()
OntologyManager.reason()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.ontology — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.ontology




 Contents 



Submodules








pycram.ontology#

Submodules#


pycram.ontology.ontology
pycram.ontology.ontology_common












previous
pycram.object_descriptors.urdf




next
pycram.ontology.ontology









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.object_descriptors.urdf — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.object_descriptors.urdf




 Contents 



Classes
Module Contents
LinkDescription
LinkDescription.geometry
LinkDescription._get_visual_shape()
LinkDescription.origin
LinkDescription.name
LinkDescription.collision


JointDescription
JointDescription.urdf_type_map
JointDescription.origin
JointDescription.name
JointDescription.has_limits
JointDescription.type
JointDescription.axis
JointDescription.lower_limit
JointDescription.upper_limit
JointDescription.parent_link_name
JointDescription.child_link_name
JointDescription.damping
JointDescription.friction


ObjectDescription
ObjectDescription.Link
ObjectDescription.RootLink
ObjectDescription.Joint
ObjectDescription.load_description()
ObjectDescription.generate_from_mesh_file()
ObjectDescription.generate_from_description_file()
ObjectDescription.generate_from_parameter_server()
ObjectDescription.get_link_by_name()
ObjectDescription.links
ObjectDescription.get_joint_by_name()
ObjectDescription.joints
ObjectDescription.get_root()
ObjectDescription.get_chain()
ObjectDescription.correct_urdf_string()
ObjectDescription.fix_missing_inertial()
ObjectDescription.remove_error_tags()
ObjectDescription.fix_link_attributes()
ObjectDescription.get_file_extension()
ObjectDescription.origin
ObjectDescription.name












pycram.object_descriptors.urdf#

Classes#


LinkDescription
A class that represents a link description of an object.

JointDescription
A class that represents the description of a joint.

ObjectDescription
A class that represents an object description of an object.






Module Contents#


class pycram.object_descriptors.urdf.LinkDescription(urdf_description: urdf_parser_py.urdf.Link)#
Bases: pycram.description.LinkDescription
A class that represents a link description of an object.


property geometry: typing_extensions.Union[pycram.datastructures.dataclasses.VisualShape, None]#
Returns the geometry type of the URDF collision element of this link.



static _get_visual_shape(urdf_geometry) → typing_extensions.Union[pycram.datastructures.dataclasses.VisualShape, None]#
Returns the VisualShape of the given URDF geometry.



property origin: typing_extensions.Union[pycram.datastructures.pose.Pose, None]#
Returns the origin of this entity.



property name: str#
Returns the name of this entity.



property collision: urdf_parser_py.urdf.Collision#




class pycram.object_descriptors.urdf.JointDescription(urdf_description: urdf_parser_py.urdf.Joint)#
Bases: pycram.description.JointDescription
A class that represents the description of a joint.


urdf_type_map#



property origin: pycram.datastructures.pose.Pose#
Returns the origin of this entity.



property name: str#
Returns the name of this entity.



property has_limits: bool#
Checks if this joint has limits.

Returns:
True if the joint has limits, False otherwise.





property type: pycram.datastructures.enums.JointType#

Returns:
The type of this joint.





property axis: geometry_msgs.msg.Point#

Returns:
The axis of this joint, for example the rotation axis for a revolute joint.





property lower_limit: typing_extensions.Union[float, None]#

Returns:
The lower limit of this joint, or None if the joint has no limits.





property upper_limit: typing_extensions.Union[float, None]#

Returns:
The upper limit of this joint, or None if the joint has no limits.





property parent_link_name: str#

Returns:
The name of the parent link of this joint.





property child_link_name: str#

Returns:
The name of the child link of this joint.





property damping: float#

Returns:
The damping of this joint.





property friction: float#

Returns:
The friction of this joint.






class pycram.object_descriptors.urdf.ObjectDescription(path: typing_extensions.Optional[str] = None)#
Bases: pycram.description.ObjectDescription
A class that represents an object description of an object.


class Link(_id: int, link_description: LinkDescription, obj: pycram.world_concepts.world_object.Object)#
Bases: pycram.description.ObjectDescription.Link, LinkDescription
Represents a link of an Object in the World.



class RootLink(obj: pycram.world_concepts.world_object.Object)#
Bases: pycram.description.ObjectDescription.RootLink, Link
Represents the root link of an Object in the World.
It differs from the normal AbstractLink class in that the pose ande the tf_frame is the same as that of the object.



class Joint(_id: int, joint_description: JointDescription, obj: pycram.world_concepts.world_object.Object)#
Bases: pycram.description.ObjectDescription.Joint, JointDescription
Represents a joint of an Object in the World.



load_description(path) → urdf_parser_py.urdf.URDF#
Loads the description from the file at the given path.

Parameters:
path – The path to the source file, if only a filename is provided then the resources directories will be
searched.





generate_from_mesh_file(path: str, name: str, color: typing_extensions.Optional[pycram.datastructures.dataclasses.Color] = Color()) → str#
Generates an URDf file with the given .obj or .stl file as mesh. In addition, the given rgba_color will be
used to create a material tag in the URDF.

Parameters:

path – The path to the mesh file.
name – The name of the object.
color – The color of the object.


Returns:
The absolute path of the created file





generate_from_description_file(path: str) → str#
Preprocesses the given file and returns the preprocessed description string.

Parameters:
path – The path of the file to preprocess.

Returns:
The preprocessed description string.





generate_from_parameter_server(name: str) → str#
Preprocesses the description from the ROS parameter server and returns the preprocessed description string.

Parameters:
name – The name of the description on the parameter server.

Returns:
The preprocessed description string.





get_link_by_name(link_name: str) → LinkDescription#

Returns:
The link description with the given name.





property links: typing_extensions.List[LinkDescription]#

Returns:
A list of links descriptions of this object.





get_joint_by_name(joint_name: str) → JointDescription#

Returns:
The joint description with the given name.





property joints: typing_extensions.List[JointDescription]#

Returns:
A list of joints descriptions of this object.





get_root() → str#

Returns:
the name of the root link of this object.





get_chain(start_link_name: str, end_link_name: str) → typing_extensions.List[str]#

Returns:
the chain of links from ‘start_link_name’ to ‘end_link_name’.





correct_urdf_string(urdf_string: str) → str#
Changes paths for files in the URDF from ROS paths to paths in the file system. Since World (PyBullet legacy)
can’t deal with ROS package paths.

Parameters:
urdf_string – The name of the URDf on the parameter server

Returns:
The URDF string with paths in the filesystem instead of ROS packages





static fix_missing_inertial(urdf_string: str) → str#
Insert inertial tags for every URDF link that has no inertia.
This is used to prevent Legacy(PyBullet) from dumping warnings in the terminal

Parameters:
urdf_string – The URDF description as string

Returns:
The new, corrected URDF description as string.





static remove_error_tags(urdf_string: str) → str#
Removes all tags in the removing_tags list from the URDF since these tags are known to cause errors with the
URDF_parser

Parameters:
urdf_string – String of the URDF from which the tags should be removed

Returns:
The URDF string with the tags removed





static fix_link_attributes(urdf_string: str) → str#
Removes the attribute ‘type’ from links since this is not parsable by the URDF parser.

Parameters:
urdf_string – The string of the URDF from which the attributes should be removed

Returns:
The URDF string with the attributes removed





static get_file_extension() → str#

Returns:
The file extension of the URDF file.





property origin: pycram.datastructures.pose.Pose#
Returns the origin of this entity.



property name: str#
Returns the name of this entity.












previous
pycram.object_descriptors.generic




next
pycram.ontology









 Contents
  


Classes
Module Contents
LinkDescription
LinkDescription.geometry
LinkDescription._get_visual_shape()
LinkDescription.origin
LinkDescription.name
LinkDescription.collision


JointDescription
JointDescription.urdf_type_map
JointDescription.origin
JointDescription.name
JointDescription.has_limits
JointDescription.type
JointDescription.axis
JointDescription.lower_limit
JointDescription.upper_limit
JointDescription.parent_link_name
JointDescription.child_link_name
JointDescription.damping
JointDescription.friction


ObjectDescription
ObjectDescription.Link
ObjectDescription.RootLink
ObjectDescription.Joint
ObjectDescription.load_description()
ObjectDescription.generate_from_mesh_file()
ObjectDescription.generate_from_description_file()
ObjectDescription.generate_from_parameter_server()
ObjectDescription.get_link_by_name()
ObjectDescription.links
ObjectDescription.get_joint_by_name()
ObjectDescription.joints
ObjectDescription.get_root()
ObjectDescription.get_chain()
ObjectDescription.correct_urdf_string()
ObjectDescription.fix_missing_inertial()
ObjectDescription.remove_error_tags()
ObjectDescription.fix_link_attributes()
ObjectDescription.get_file_extension()
ObjectDescription.origin
ObjectDescription.name












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.object_descriptors — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.object_descriptors




 Contents 



Submodules








pycram.object_descriptors#

Submodules#


pycram.object_descriptors.generic
pycram.object_descriptors.urdf












previous
pycram.external_interfaces.tmc




next
pycram.object_descriptors.generic









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.object_descriptors.generic — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.object_descriptors.generic




 Contents 



Classes
Module Contents
LinkDescription
LinkDescription.parsed_description
LinkDescription._name
LinkDescription.geometry
LinkDescription.origin
LinkDescription.name
LinkDescription.color


JointDescription
JointDescription.type
JointDescription.axis
JointDescription.has_limits
JointDescription.lower_limit
JointDescription.upper_limit
JointDescription.parent_link_name
JointDescription.child_link_name
JointDescription.origin
JointDescription.name


ObjectDescription
ObjectDescription.Link
ObjectDescription.RootLink
ObjectDescription.Joint
ObjectDescription._links
ObjectDescription.load_description()
ObjectDescription.generate_from_mesh_file()
ObjectDescription.generate_from_description_file()
ObjectDescription.generate_from_parameter_server()
ObjectDescription.shape_data
ObjectDescription.color
ObjectDescription.links
ObjectDescription.get_link_by_name()
ObjectDescription.joints
ObjectDescription.get_joint_by_name()
ObjectDescription.get_root()
ObjectDescription.get_chain()
ObjectDescription.get_file_extension()
ObjectDescription.origin
ObjectDescription.name












pycram.object_descriptors.generic#

Classes#


LinkDescription
A class that represents a link description of an object.

JointDescription
A class that represents the description of a joint.

ObjectDescription
A generic description of an object in the environment. This description can be applied to any object.






Module Contents#


class pycram.object_descriptors.generic.LinkDescription(name: str, visual_frame_position: typing_extensions.List[float], half_extents: typing_extensions.List[float], color: pycram.datastructures.dataclasses.Color = Color())#
Bases: pycram.description.LinkDescription
A class that represents a link description of an object.


parsed_description: pycram.datastructures.dataclasses.BoxVisualShape#



_name: str#



property geometry: typing_extensions.Union[pycram.datastructures.dataclasses.VisualShape, None]#
Returns the geometry type of the collision element of this link.



property origin: pycram.datastructures.pose.Pose#
Returns the origin of this entity.



property name: str#
Returns the name of this entity.



property color: pycram.datastructures.dataclasses.Color#




class pycram.object_descriptors.generic.JointDescription(parsed_joint_description: typing_extensions.Any)#
Bases: pycram.description.JointDescription
A class that represents the description of a joint.


property type: pycram.datastructures.enums.JointType#

Returns:
The type of this joint.





property axis: geometry_msgs.msg.Point#

Returns:
The axis of this joint, for example the rotation axis for a revolute joint.





property has_limits: bool#
Checks if this joint has limits.

Returns:
True if the joint has limits, False otherwise.





property lower_limit: typing_extensions.Union[float, None]#

Returns:
The lower limit of this joint, or None if the joint has no limits.





property upper_limit: typing_extensions.Union[float, None]#

Returns:
The upper limit of this joint, or None if the joint has no limits.





property parent_link_name: str#

Abstractmethod:

Returns:
The name of the parent link of this joint.





property child_link_name: str#

Abstractmethod:

Returns:
The name of the child link of this joint.





property origin: pycram.datastructures.pose.Pose#

Abstractmethod:


Returns the origin of this entity.



property name: str#

Abstractmethod:


Returns the name of this entity.




class pycram.object_descriptors.generic.ObjectDescription(*args, **kwargs)#
Bases: pycram.description.ObjectDescription
A generic description of an object in the environment. This description can be applied to any object.
The current use case involves perceiving objects using RoboKudo and spawning them with specified size and color.


class Link(_id: int, link_description: LinkDescription, obj: pycram.world_concepts.world_object.Object)#
Bases: pycram.description.ObjectDescription.Link, LinkDescription
Represents a link of an Object in the World.



class RootLink(obj: pycram.world_concepts.world_object.Object)#
Bases: pycram.description.ObjectDescription.RootLink, Link
Represents the root link of an Object in the World.
It differs from the normal AbstractLink class in that the pose ande the tf_frame is the same as that of the object.



class Joint(_id: int, joint_description: JointDescription, obj: pycram.world_concepts.world_object.Object)#
Bases: pycram.description.ObjectDescription.Joint, JointDescription
Represents a joint of an Object in the World.



_links#



load_description(path: str) → typing_extensions.Any#
Loads the description from the file at the given path.

Parameters:
path – The path to the source file, if only a filename is provided then the resources directories will be
searched.





classmethod generate_from_mesh_file(path: str, name: str) → str#

Abstractmethod:


Generates a description file from one of the mesh types defined in the mesh_extensions and
returns the path of the generated file.

Parameters:

path – The path to the .obj file.
name – The name of the object.


Returns:
The path of the generated description file.





classmethod generate_from_description_file(path: str) → str#

Abstractmethod:


Preprocesses the given file and returns the preprocessed description string.

Parameters:
path – The path of the file to preprocess.

Returns:
The preprocessed description string.





classmethod generate_from_parameter_server(name: str) → str#

Abstractmethod:


Preprocesses the description from the ROS parameter server and returns the preprocessed description string.

Parameters:
name – The name of the description on the parameter server.

Returns:
The preprocessed description string.





property shape_data: typing_extensions.List[float]#



property color: pycram.datastructures.dataclasses.Color#



property links: typing_extensions.List[LinkDescription]#

Returns:
A list of links descriptions of this object.





get_link_by_name(link_name: str) → LinkDescription#

Returns:
The link description with the given name.





property joints: typing_extensions.List[JointDescription]#

Returns:
A list of joints descriptions of this object.





get_joint_by_name(joint_name: str) → JointDescription#

Returns:
The joint description with the given name.





get_root() → str#

Returns:
the name of the root link of this object.





abstract get_chain(start_link_name: str, end_link_name: str) → typing_extensions.List[str]#

Returns:
the chain of links from ‘start_link_name’ to ‘end_link_name’.





static get_file_extension() → str#

Abstractmethod:

Returns:
The file extension of the description file.





property origin: pycram.datastructures.pose.Pose#
Returns the origin of this entity.



property name: str#
Returns the name of this entity.












previous
pycram.object_descriptors




next
pycram.object_descriptors.urdf









 Contents
  


Classes
Module Contents
LinkDescription
LinkDescription.parsed_description
LinkDescription._name
LinkDescription.geometry
LinkDescription.origin
LinkDescription.name
LinkDescription.color


JointDescription
JointDescription.type
JointDescription.axis
JointDescription.has_limits
JointDescription.lower_limit
JointDescription.upper_limit
JointDescription.parent_link_name
JointDescription.child_link_name
JointDescription.origin
JointDescription.name


ObjectDescription
ObjectDescription.Link
ObjectDescription.RootLink
ObjectDescription.Joint
ObjectDescription._links
ObjectDescription.load_description()
ObjectDescription.generate_from_mesh_file()
ObjectDescription.generate_from_description_file()
ObjectDescription.generate_from_parameter_server()
ObjectDescription.shape_data
ObjectDescription.color
ObjectDescription.links
ObjectDescription.get_link_by_name()
ObjectDescription.joints
ObjectDescription.get_joint_by_name()
ObjectDescription.get_root()
ObjectDescription.get_chain()
ObjectDescription.get_file_extension()
ObjectDescription.origin
ObjectDescription.name












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.local_transformer — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.local_transformer




 Contents 



Classes
Module Contents
LocalTransformer
LocalTransformer._instance
LocalTransformer.world
LocalTransformer.prospection_world
LocalTransformer._initialized
LocalTransformer.transform_to_object_frame()
LocalTransformer.update_transforms_for_objects()
LocalTransformer.transform_pose()
LocalTransformer.get_object_name_for_frame()
LocalTransformer.lookup_transform_from_source_to_target_frame()
LocalTransformer.update_transforms()
LocalTransformer.get_all_frames()
LocalTransformer.transformPose()












pycram.local_transformer#

Classes#


LocalTransformer
This class allows to use the TF class TransformerROS without using the ROS






Module Contents#


class pycram.local_transformer.LocalTransformer#
Bases: tf.TransformerROS
This class allows to use the TF class TransformerROS without using the ROS
network system or the topic /tf, where transforms are usually published to.
Instead, a local transformer is saved and allows to publish local transforms,
as well the use of TFs convenient lookup functions (see functions below).
This class uses the robots (currently only one! supported) URDF file to
initialize the tfs for the robot. Moreover, the function update_local_transformer_from_btr
updates these tfs by copying the tfs state from the world.
This class extends the TransformerRos, you can find documentation for TransformerROS here:
TFDoc


_instance = None#



world = None#



prospection_world = None#



_initialized = True#



transform_to_object_frame(pose: pycram.datastructures.pose.Pose, world_object: world_concepts.world_object.Object, link_name: str = None) → typing_extensions.Union[pycram.datastructures.pose.Pose, None]#
Transforms the given pose to the coordinate frame of the given World object. If no link name is given the
base frame of the Object is used, otherwise the link frame is used as target for the transformation.

Parameters:

pose – Pose that should be transformed
world_object – BulletWorld Object in which frame the pose should be transformed
link_name – A link of the BulletWorld Object which will be used as target coordinate frame instead


Returns:
The new pose the in coordinate frame of the object





update_transforms_for_objects(source_object_name: str, target_object_name: str) → None#
Updates the transforms for objects affected by the transformation. The objects are identified by their names.

Parameters:

source_object_name – Name of the object of the source frame
target_object_name – Name of the object of the target frame






transform_pose(pose: pycram.datastructures.pose.Pose, target_frame: str) → typing_extensions.Optional[pycram.datastructures.pose.Pose]#
Transforms a given pose to the target frame after updating the transforms for all objects in the current world.

Parameters:

pose – Pose that should be transformed
target_frame – Name of the TF frame into which the Pose should be transformed


Returns:
A transformed pose in the target frame





get_object_name_for_frame(frame: str) → str#
Returns the name of the object that is associated with the given frame.

Parameters:
frame – The frame for which the object name should be returned

Returns:
The name of the object associated with the frame





lookup_transform_from_source_to_target_frame(source_frame: str, target_frame: str, time: typing_extensions.Optional[rospy.rostime.Time] = None) → pycram.datastructures.pose.Transform#

Update the transforms for all world objects then Look up for the latest known transform that transforms a pointfrom source frame to target frame. If no time is given the last common time between the two frames is used.



Parameters:

source_frame – The frame in which the point is currently represented
target_frame – The frame in which the point should be represented
time – Time at which the transform should be looked up


Returns:
The transform from source_frame to target_frame





update_transforms(transforms: typing_extensions.Iterable[pycram.datastructures.pose.Transform], time: rospy.Time = None) → None#
Updates transforms by updating the time stamps of the header of each transform. If no time is given the current
time is used.



get_all_frames() → typing_extensions.List[str]#
Returns all know coordinate frames as a list with human-readable entries.

Returns:
A list of all know coordinate frames.





transformPose(target_frame, ps) → pycram.datastructures.pose.Pose#

Alias for transform_pose_to_target_frame() to avoid confusion since a similar methodexists in the super class.














previous
pycram.language




next
pycram.plan_failures









 Contents
  


Classes
Module Contents
LocalTransformer
LocalTransformer._instance
LocalTransformer.world
LocalTransformer.prospection_world
LocalTransformer._initialized
LocalTransformer.transform_to_object_frame()
LocalTransformer.update_transforms_for_objects()
LocalTransformer.transform_pose()
LocalTransformer.get_object_name_for_frame()
LocalTransformer.lookup_transform_from_source_to_target_frame()
LocalTransformer.update_transforms()
LocalTransformer.get_all_frames()
LocalTransformer.transformPose()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.language — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.language




 Contents 



Classes
Module Contents
Language
Language.parallel_blocklist
Language.do_not_use_giskard
Language.block_list
Language.parent
Language.exceptions
Language.state
Language.executing_thread
Language.threads
Language.interrupted
Language.name
Language.resolve()
Language.perform()
Language.__add__()
Language.__sub__()
Language.__or__()
Language.__xor__()
Language.__rshift__()
Language.__mul__()
Language.__rmul__()
Language.simplify()
Language.merge_nodes()
Language.interrupt()


Repeat
Repeat.perform()
Repeat.repeat
Repeat.interrupt()


Monitor
Monitor.kill_event
Monitor.exception_queue
Monitor.perform()
Monitor.interrupt()


Sequential
Sequential.perform()
Sequential.interrupt()


TryInOrder
TryInOrder.perform()
TryInOrder.interrupt()


Parallel
Parallel.perform()
Parallel.interrupt()


TryAll
TryAll.perform()
TryAll.interrupt()


Code
Code.function
Code.kwargs
Code.perform
Code.execute()
Code.interrupt()












pycram.language#

Classes#


Language
Parent class for language expressions. Implements the operators as well as methods to reduce the resulting language

Repeat
Executes all children a given number of times.

Monitor
Monitors a Language Expression and interrupts it when the given condition is evaluated to True.

Sequential
Executes all children sequentially, an exception while executing a child does not terminate the whole process.

TryInOrder
Executes all children sequentially, an exception while executing a child does not terminate the whole process.

Parallel
Executes all children in parallel by creating a thread per children and executing them in the respective thread. All

TryAll
Executes all children in parallel by creating a thread per children and executing them in the respective thread. All

Code
Executable code block in a plan.






Module Contents#


class pycram.language.Language(parent: anytree.NodeMixin = None, children: typing_extensions.Iterable[anytree.NodeMixin] = None)#
Bases: anytree.NodeMixin
Parent class for language expressions. Implements the operators as well as methods to reduce the resulting language
tree.


parallel_blocklist = ['PickUpAction', 'PlaceAction', 'OpenAction', 'CloseAction', 'TransportAction', 'GraspingAction']#



do_not_use_giskard = ['SetGripperAction', 'MoveGripperMotion', 'DetectAction', 'DetectingMotion']#



block_list: typing_extensions.List[int] = []#
List of thread ids which should be blocked from execution.



parent#



exceptions#



state = None#



executing_thread#



threads: typing_extensions.List[threading.Thread] = []#



interrupted = False#



name#



resolve() → Language#
Dummy method for compatability to designator descriptions

Returns:
self reference





abstract perform()#
This method should be overwritten in subclasses and implement the behaviour of the language expression regarding
each child.



__add__(other: Language) → Sequential#
Language expression for sequential execution.

Parameters:
other – Another Language expression, either a designator or language expression

Returns:
A Sequential() object which is the new root node of the language tree





__sub__(other: Language) → TryInOrder#
Language expression for try in order.

Parameters:
other – Another Language expression, either a designator or language expression

Returns:
A TryInOrder() object which is the new root node of the language tree





__or__(other: Language) → Parallel#
Language expression for parallel execution.

Parameters:
other – Another Language expression, either a designator or language expression

Returns:
A Parallel() object which is the new root node of the language tree





__xor__(other: Language) → TryAll#
Language expression for try all execution.

Parameters:
other – Another Language expression, either a designator or language expression

Returns:
A TryAll() object which is the new root node of the language tree





__rshift__(other: Language)#
Operator for Monitors, this always makes the Monitor the parent of the other expression.

Parameters:
other – Another Language expression

Returns:
The Monitor which is now the new root node.





__mul__(other: int)#
Language expression for Repeated execution. The other attribute of this operator has to be an integer.

Parameters:
other – An integer which states how often the Language expression should be repeated

Returns:
A Repeat() object which is the new root node of the language tree





__rmul__(other: int)#
Language expression for Repeated execution. The other attribute of this operator has to be an integer. This is
the reversed operator of __mul__ which allows to write:
2 * ParkAction()



Parameters:
other – An integer which states how often the Language expression should be repeated

Returns:
A Repeat() object which is the new root node of the language tree





simplify() → Language#
Simplifies the language tree by merging which have a parent-child relation and are of the same type.
 <pycram.new_language.Parallel>
 ├── <pycram.new_language.Parallel>
 │   ├── <pycram.designators.action_designator.NavigateAction>
 │   └── <pycram.designators.action_designator.MoveTorsoAction>
 └── <pycram.designators.action_designator.DetectAction>

 would be simplified to:

<pycram.new_language.Parallel>
 ├── <pycram.designators.action_designator.NavigateAction>
 ├── <pycram.designators.action_designator.MoveTorsoAction>
 └── <pycram.designators.action_designator.DetectAction>





static merge_nodes(node1: anytree.Node, node2: anytree.Node) → None#
Merges node1 with node2 in a tree. The children of node2 will be re-parented to node1 and node2 will be deleted
from the tree.

Parameters:

node1 – Node that should be left in the tree
node2 – Node which children should be appended to node1 and then deleted






abstract interrupt() → None#
Base method for interrupting the execution of Language expression. To be overwritten in a sub-class.




class pycram.language.Repeat(parent: anytree.NodeMixin = None, children: typing_extensions.Iterable[anytree.NodeMixin] = None, repeat: int = 1)#
Bases: Language
Executes all children a given number of times.


perform()#
Behaviour of repeat, executes all children in a loop as often as stated on initialization.

Returns:






repeat: int#



interrupt() → None#
Stops the execution of this language expression by setting the interrupted variable to True, adding this
thread to the block_list in ProcessModule and interrupting the current giskard goal




class pycram.language.Monitor(condition: typing_extensions.Union[typing_extensions.Callable, pycram.fluent.Fluent] = None)#
Bases: Language
Monitors a Language Expression and interrupts it when the given condition is evaluated to True.

Behaviour:This Monitor is attached to a language expression, when perform on this Monitor is called it will start a new
thread which continuously checks if the condition is True. When the condition is True the interrupt function of
the child will be called.




kill_event#



exception_queue#



perform() → typing_extensions.Tuple[pycram.datastructures.enums.State, typing_extensions.Any]#
Behavior of the Monitor, starts a new Thread which checks the condition and then performs the attached language
expression

Returns:
The state of the attached language expression, as well as a list of the results of the children





interrupt() → None#
Calls interrupt for each child




class pycram.language.Sequential(parent: anytree.NodeMixin = None, children: typing_extensions.Iterable[anytree.NodeMixin] = None)#
Bases: Language
Executes all children sequentially, an exception while executing a child does not terminate the whole process.
Instead, the exception is saved to a list of all exceptions thrown during execution and returned.

Behaviour:Returns a tuple containing the final state of execution (SUCCEEDED, FAILED) and a list of results from each
child’s perform() method. The state is SUCCEEDED iff all children are executed without
exception. In any other case the State FAILED will be returned.




perform() → typing_extensions.Tuple[pycram.datastructures.enums.State, typing_extensions.List[typing_extensions.Any]]#
Behaviour of Sequential, calls perform() on each child sequentially

Returns:
The state and list of results according to the behaviour described in Sequential()





interrupt() → None#
Interrupts the execution of this language expression by setting the interrupted variable to True and calling
interrupt on the current giskard goal.




class pycram.language.TryInOrder(parent: anytree.NodeMixin = None, children: typing_extensions.Iterable[anytree.NodeMixin] = None)#
Bases: Language
Executes all children sequentially, an exception while executing a child does not terminate the whole process.
Instead, the exception is saved to a list of all exceptions thrown during execution and returned.

Behaviour:Returns a tuple containing the final state of execution (SUCCEEDED, FAILED) and a list of results from each
child’s perform() method. The state is SUCCEEDED if one or more children are executed without
exception. In the case that all children could not be executed the State FAILED will be returned.




perform() → typing_extensions.Tuple[pycram.datastructures.enums.State, typing_extensions.List[typing_extensions.Any]]#
Behaviour of TryInOrder, calls perform() on each child sequentially and catches raised exceptions.

Returns:
The state and list of results according to the behaviour described in TryInOrder()





interrupt() → None#
Interrupts the execution of this language expression by setting the interrupted variable to True, adding
the current thread to the block_list in Language and interrupting the current giskard goal.




class pycram.language.Parallel(parent: anytree.NodeMixin = None, children: typing_extensions.Iterable[anytree.NodeMixin] = None)#
Bases: Language
Executes all children in parallel by creating a thread per children and executing them in the respective thread. All
exceptions during execution will be caught, saved to a list and returned upon end.

Behaviour:Returns a tuple containing the final state of execution (SUCCEEDED, FAILED) and a list of results from
each child’s perform() method. The state is SUCCEEDED iff all children could be executed without
an exception. In any other case the State FAILED will be returned.




perform() → typing_extensions.Tuple[pycram.datastructures.enums.State, typing_extensions.List[typing_extensions.Any]]#
Behaviour of Parallel, creates a new thread for each child and calls perform() of the child in the respective
thread.

Returns:
The state and list of results according to the behaviour described in Parallel()





interrupt() → None#
Interrupts the execution of this language expression by setting the interrupted variable to True, adding the
thread id of all parallel execution threads to the block_list in Language and interrupting the current giskard
goal.




class pycram.language.TryAll(parent: anytree.NodeMixin = None, children: typing_extensions.Iterable[anytree.NodeMixin] = None)#
Bases: Language
Executes all children in parallel by creating a thread per children and executing them in the respective thread. All
exceptions during execution will be caught, saved to a list and returned upon end.

Behaviour:Returns a tuple containing the final state of execution (SUCCEEDED, FAILED) and a list of results from each
child’s perform() method. The state is SUCCEEDED if one or more children could be executed
without raising an exception. If all children fail the State FAILED will be returned.




perform() → typing_extensions.Tuple[pycram.datastructures.enums.State, typing_extensions.List[typing_extensions.Any]]#
Behaviour of TryAll, creates a new thread for each child and executes all children in their respective threads.

Returns:
The state and list of results according to the behaviour described in TryAll()





interrupt() → None#
Interrupts the execution of this language expression by setting the interrupted variable to True, adding the
thread id of all parallel execution threads to the block_list in Language and interrupting the current giskard




class pycram.language.Code(function: typing_extensions.Optional[typing_extensions.Callable] = None, kwargs: typing_extensions.Optional[typing_extensions.Dict] = None)#
Bases: Language
Executable code block in a plan.

Variables:

function – The function (plan) that was called
kwargs – Dictionary holding the keyword arguments of the function





function: typing_extensions.Callable#



kwargs: typing_extensions.Dict[str, typing_extensions.Any]#



perform#



execute() → typing_extensions.Any#
Execute the code with its arguments

Returns:
State.SUCCEEDED, and anything that the function associated with this object will return.





abstract interrupt() → None#
Base method for interrupting the execution of Language expression. To be overwritten in a sub-class.












previous
pycram.helper




next
pycram.local_transformer









 Contents
  


Classes
Module Contents
Language
Language.parallel_blocklist
Language.do_not_use_giskard
Language.block_list
Language.parent
Language.exceptions
Language.state
Language.executing_thread
Language.threads
Language.interrupted
Language.name
Language.resolve()
Language.perform()
Language.__add__()
Language.__sub__()
Language.__or__()
Language.__xor__()
Language.__rshift__()
Language.__mul__()
Language.__rmul__()
Language.simplify()
Language.merge_nodes()
Language.interrupt()


Repeat
Repeat.perform()
Repeat.repeat
Repeat.interrupt()


Monitor
Monitor.kill_event
Monitor.exception_queue
Monitor.perform()
Monitor.interrupt()


Sequential
Sequential.perform()
Sequential.interrupt()


TryInOrder
TryInOrder.perform()
TryInOrder.interrupt()


Parallel
Parallel.perform()
Parallel.interrupt()


TryAll
TryAll.perform()
TryAll.interrupt()


Code
Code.function
Code.kwargs
Code.perform
Code.execute()
Code.interrupt()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram




 Contents 



Subpackages
Submodules
Attributes
Classes
Functions
Package Contents
World
World.simulation_frequency
World.current_world
World.robot
World.data_directory
World.cache_dir
World.cache_manager
World.id
World.is_prospection_world
World.local_transformer
World.objects
World.mode
World.coll_callbacks
World._current_state
World._init_world()
World._init_events()
World._init_and_sync_prospection_world()
World._update_local_transformer_worlds()
World._init_prospection_world()
World._sync_prospection_world()
World.update_cache_dir_with_object()
World.simulation_time_step
World.load_object_and_get_id()
World.get_object_by_name()
World.get_object_by_type()
World.get_object_by_id()
World.remove_object_by_id()
World.remove_object_from_simulator()
World.remove_object()
World.add_fixed_constraint()
World.add_constraint()
World.remove_constraint()
World.get_joint_position()
World.get_object_joint_names()
World.get_link_pose()
World.get_object_link_names()
World.simulate()
World.update_all_objects_poses()
World.get_object_pose()
World.perform_collision_detection()
World.get_object_contact_points()
World.get_contact_points_between_two_objects()
World.reset_joint_position()
World.reset_object_base_pose()
World.step()
World.set_link_color()
World.get_link_color()
World.get_colors_of_object_links()
World.get_object_axis_aligned_bounding_box()
World.get_link_axis_aligned_bounding_box()
World.set_realtime()
World.set_gravity()
World.set_robot_if_not_set()
World.set_robot()
World.robot_is_set()
World.exit()
World.exit_prospection_world_if_exists()
World.disconnect_from_physics_server()
World.reset_current_world()
World.reset_robot()
World.join_threads()
World.terminate_world_sync()
World.save_state()
World.current_state
World.object_states
World.save_objects_state()
World.save_physics_simulator_state()
World.remove_physics_simulator_state()
World.restore_physics_simulator_state()
World.get_images_for_target()
World.register_two_objects_collision_callbacks()
World.add_resource_path()
World.get_prospection_object_for_object()
World.get_object_for_prospection_object()
World.reset_world()
World.remove_saved_states()
World.update_transforms_for_objects_in_current_world()
World.ray_test()
World.ray_test_batch()
World.create_visual_shape()
World.create_multi_body_from_visual_shapes()
World.create_multi_body()
World.create_box_visual_shape()
World.create_cylinder_visual_shape()
World.create_sphere_visual_shape()
World.create_capsule_visual_shape()
World.create_plane_visual_shape()
World.create_mesh_visual_shape()
World.add_text()
World.remove_text()
World.enable_joint_force_torque_sensor()
World.disable_joint_force_torque_sensor()
World.get_joint_reaction_force_torque()
World.get_applied_joint_motor_torque()
World.__del__()


__version__
signal_handler()










pycram#

Subpackages#


pycram.datastructures
pycram.designators
pycram.external_interfaces
pycram.object_descriptors
pycram.ontology
pycram.orm
pycram.process_modules
pycram.robot_descriptions
pycram.ros
pycram.world_concepts
pycram.worlds




Submodules#


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning




Attributes#


__version__







Classes#


World
The World Class represents the physics Simulation and belief state, it is the main interface for reasoning about






Functions#


signal_handler(sig, frame)







Package Contents#


class pycram.World(mode: pycram.datastructures.enums.WorldMode, is_prospection_world: bool, simulation_frequency: float)#
Bases: StateEntity, abc.ABC
The World Class represents the physics Simulation and belief state, it is the main interface for reasoning about
the World. This is implemented as a singleton, the current World can be accessed via the static variable
current_world which is managed by the World class itself.


simulation_frequency: float#
Global reference for the simulation frequency (Hz), used in calculating the equivalent real time in the simulation.



current_world: typing_extensions.Optional[World] = None#
Global reference to the currently used World, usually this is the
graphical one. However, if you are inside a UseProspectionWorld() environment the current_world points to the
prospection world. In this way you can comfortably use the current_world, which should point towards the World
used at the moment.



robot: typing_extensions.Optional[pycram.world_concepts.world_object.Object] = None#

Global reference to the spawned Object that represents the robot. The robot is identified by checking the name inthe URDF with the name of the URDF on the parameter server.





data_directory: typing_extensions.List[str]#
Global reference for the data directories, this is used to search for the description files of the robot
and the objects.



cache_dir#
Global reference for the cache directory, this is used to cache the description files of the robot and the objects.



cache_manager#



id: typing_extensions.Optional[int]#



is_prospection_world: bool#



local_transformer#



objects: typing_extensions.List[pycram.world_concepts.world_object.Object] = []#



mode: pycram.datastructures.enums.WorldMode#



coll_callbacks: typing_extensions.Dict[typing_extensions.Tuple[pycram.world_concepts.world_object.Object, pycram.world_concepts.world_object.Object], pycram.datastructures.dataclasses.CollisionCallbacks]#



_current_state: typing_extensions.Optional[pycram.datastructures.dataclasses.WorldState] = None#



abstract _init_world(mode: pycram.datastructures.enums.WorldMode)#
Initializes the physics simulation.



_init_events()#
Initializes dynamic events that can be used to react to changes in the World.



_init_and_sync_prospection_world()#
Initializes the prospection world and the synchronization between the main and the prospection world.



_update_local_transformer_worlds()#
Updates the local transformer worlds with the current world and prospection world.



_init_prospection_world()#
Initializes the prospection world, if this is a prospection world itself it will not create another prospection,
world, but instead set the prospection world to None, else it will create a prospection world.



_sync_prospection_world()#
Synchronizes the prospection world with the main world, this means that every object in the main world will be
added to the prospection world and vice versa.



update_cache_dir_with_object(path: str, ignore_cached_files: bool, obj: pycram.world_concepts.world_object.Object) → str#
Updates the cache directory with the given object.

Parameters:

path – The path to the object.
ignore_cached_files – If the cached files should be ignored.
obj – The object to be added to the cache directory.






property simulation_time_step#

The time step of the simulation in seconds.



abstract load_object_and_get_id(path: typing_extensions.Optional[str] = None, pose: typing_extensions.Optional[pycram.datastructures.pose.Pose] = None) → int#
Loads a description file (e.g. URDF) at the given pose and returns the id of the loaded object.

Parameters:

path – The path to the description file, if None the description file is assumed to be already loaded.
pose – The pose at which the object should be loaded.


Returns:
The id of the loaded object.





get_object_by_name(name: str) → typing_extensions.Optional[pycram.world_concepts.world_object.Object]#
Returns the object with the given name. If there is no object with the given name, None is returned.

Parameters:
name – The name of the returned Objects.

Returns:
The object with the given name, if there is one.





get_object_by_type(obj_type: pycram.datastructures.enums.ObjectType) → typing_extensions.List[pycram.world_concepts.world_object.Object]#
Returns a list of all Objects which have the type ‘obj_type’.

Parameters:
obj_type – The type of the returned Objects.

Returns:
A list of all Objects that have the type ‘obj_type’.





get_object_by_id(obj_id: int) → pycram.world_concepts.world_object.Object#
Returns the single Object that has the unique id.

Parameters:
obj_id – The unique id for which the Object should be returned.

Returns:
The Object with the id ‘id’.





abstract remove_object_by_id(obj_id: int) → None#
Removes the object with the given id from the world.

Parameters:
obj_id – The unique id of the object to be removed.





abstract remove_object_from_simulator(obj: pycram.world_concepts.world_object.Object) → None#
Removes an object from the physics simulator.

Parameters:
obj – The object to be removed.





remove_object(obj: pycram.world_concepts.world_object.Object) → None#
Removes this object from the current world.
For the object to be removed it has to be detached from all objects it
is currently attached to. After this is done a call to world remove object is done
to remove this Object from the simulation/world.

Parameters:
obj – The object to be removed.





add_fixed_constraint(parent_link: pycram.description.Link, child_link: pycram.description.Link, child_to_parent_transform: pycram.datastructures.pose.Transform) → int#
Creates a fixed joint constraint between the given parent and child links,
the joint frame will be at the origin of the child link frame, and would have the same orientation
as the child link frame.

Parameters:

parent_link – The constrained link of the parent object.
child_link – The constrained link of the child object.
child_to_parent_transform – The transform from the child link frame to the parent link frame.


Returns:
The unique id of the created constraint.





abstract add_constraint(constraint: pycram.world_concepts.constraints.Constraint) → int#
Add a constraint between two objects links so that they become attached for example.

Parameters:
constraint – The constraint data used to create the constraint.





abstract remove_constraint(constraint_id) → None#
Remove a constraint by its ID.

Parameters:
constraint_id – The unique id of the constraint to be removed.





abstract get_joint_position(joint: pycram.description.Joint) → float#
Get the position of a joint of an articulated object

Parameters:
joint – The joint to get the position for.

Returns:
The joint position as a float.





abstract get_object_joint_names(obj: pycram.world_concepts.world_object.Object) → typing_extensions.List[str]#
Returns the names of all joints of this object.

Parameters:
obj – The object.

Returns:
A list of joint names.





abstract get_link_pose(link: pycram.description.Link) → pycram.datastructures.pose.Pose#
Get the pose of a link of an articulated object with respect to the world frame.

Parameters:
link – The link as a AbstractLink object.

Returns:
The pose of the link as a Pose object.





abstract get_object_link_names(obj: pycram.world_concepts.world_object.Object) → typing_extensions.List[str]#
Returns the names of all links of this object.

Parameters:
obj – The object.

Returns:
A list of link names.





simulate(seconds: float, real_time: typing_extensions.Optional[bool] = False) → None#
Simulates Physics in the World for a given amount of seconds. Usually this simulation is faster than real
time. By setting the ‘real_time’ parameter this simulation is slowed down such that the simulated time is equal
to real time.

Parameters:

seconds – The amount of seconds that should be simulated.
real_time – If the simulation should happen in real time or faster.






update_all_objects_poses() → None#
Updates the positions of all objects in the world.



abstract get_object_pose(obj: pycram.world_concepts.world_object.Object) → pycram.datastructures.pose.Pose#
Get the pose of an object in the world frame from the current object pose in the simulator.



abstract perform_collision_detection() → None#
Checks for collisions between all objects in the World and updates the contact points.



abstract get_object_contact_points(obj: pycram.world_concepts.world_object.Object) → typing_extensions.List#
Returns a list of contact points of this Object with all other Objects.

Parameters:
obj – The object.

Returns:
A list of all contact points with other objects





abstract get_contact_points_between_two_objects(obj1: pycram.world_concepts.world_object.Object, obj2: pycram.world_concepts.world_object.Object) → typing_extensions.List#
Returns a list of contact points between obj1 and obj2.

Parameters:

obj1 – The first object.
obj2 – The second object.


Returns:
A list of all contact points between the two objects.





abstract reset_joint_position(joint: pycram.description.Joint, joint_position: float) → None#
Reset the joint position instantly without physics simulation

Parameters:

joint – The joint to reset the position for.
joint_position – The new joint pose.






abstract reset_object_base_pose(obj: pycram.world_concepts.world_object.Object, pose: pycram.datastructures.pose.Pose)#
Reset the world position and orientation of the base of the object instantaneously,
not through physics simulation. (x,y,z) position vector and (x,y,z,w) quaternion orientation.

Parameters:

obj – The object.
pose – The new pose as a Pose object.






abstract step()#
Step the world simulation using forward dynamics



abstract set_link_color(link: pycram.description.Link, rgba_color: pycram.datastructures.dataclasses.Color)#
Changes the rgba_color of a link of this object, the rgba_color has to be given as Color object.

Parameters:

link – The link which should be colored.
rgba_color – The rgba_color as Color object with RGBA values between 0 and 1.






abstract get_link_color(link: pycram.description.Link) → pycram.datastructures.dataclasses.Color#
This method returns the rgba_color of this link.

Parameters:
link – The link for which the rgba_color should be returned.

Returns:
The rgba_color as Color object with RGBA values between 0 and 1.





abstract get_colors_of_object_links(obj: pycram.world_concepts.world_object.Object) → typing_extensions.Dict[str, pycram.datastructures.dataclasses.Color]#
Get the RGBA colors of each link in the object as a dictionary from link name to rgba_color.

Parameters:
obj – The object

Returns:
A dictionary with link names as keys and a Color object for each link as value.





abstract get_object_axis_aligned_bounding_box(obj: pycram.world_concepts.world_object.Object) → pycram.datastructures.dataclasses.AxisAlignedBoundingBox#
Returns the axis aligned bounding box of this object. The return of this method are two points in
world coordinate frame which define a bounding box.

Parameters:
obj – The object for which the bounding box should be returned.

Returns:
AxisAlignedBoundingBox object containing the min and max points of the bounding box.





abstract get_link_axis_aligned_bounding_box(link: pycram.description.Link) → pycram.datastructures.dataclasses.AxisAlignedBoundingBox#
Returns the axis aligned bounding box of the link. The return of this method are two points in
world coordinate frame which define a bounding box.



abstract set_realtime(real_time: bool) → None#
Enables the real time simulation of Physics in the World. By default, this is disabled and Physics is only
simulated to reason about it.

Parameters:
real_time – Whether the World should simulate Physics in real time.





abstract set_gravity(gravity_vector: typing_extensions.List[float]) → None#

Sets the gravity that is used in the World. By default, it is set to the gravity on earth ([0, 0, -9.8]).Gravity is given as a vector in x,y,z. Gravity is only applied while simulating Physic.



Parameters:
gravity_vector – The gravity vector that should be used in the World.





set_robot_if_not_set(robot: pycram.world_concepts.world_object.Object) → None#
Sets the robot if it is not set yet.

Parameters:
robot – The Object reference to the Object representing the robot.





static set_robot(robot: typing_extensions.Union[pycram.world_concepts.world_object.Object, None]) → None#
Sets the global variable for the robot Object This should be set on spawning the robot.

Parameters:
robot – The Object reference to the Object representing the robot.





static robot_is_set() → bool#
Returns whether the robot has been set or not.

Returns:
True if the robot has been set, False otherwise.





exit() → None#
Closes the World as well as the prospection world, also collects any other thread that is running.



exit_prospection_world_if_exists() → None#
Exits the prospection world if it exists.



abstract disconnect_from_physics_server() → None#
Disconnects the world from the physics server.



reset_current_world() → None#
Resets the pose of every object in the World to the pose it was spawned in and sets every joint to 0.



reset_robot() → None#
Sets the robot class variable to None.



abstract join_threads() → None#
Join any running threads. Useful for example when exiting the world.



terminate_world_sync() → None#
Terminates the world sync thread.



save_state(state_id: typing_extensions.Optional[int] = None) → int#
Returns the id of the saved state of the World. The saved state contains the states of all the objects and
the state of the physics simulator.

Returns:
A unique id of the state





property current_state: pycram.datastructures.dataclasses.WorldState#
Returns the current state of this entity.

Returns:
The current state of this entity.





property object_states: typing_extensions.Dict[str, pycram.datastructures.dataclasses.ObjectState]#
Returns the states of all objects in the World.

Returns:
A dictionary with the object id as key and the object state as value.





save_objects_state(state_id: int) → None#
Saves the state of all objects in the World according to the given state using the unique state id.

Parameters:
state_id – The unique id representing the state.





abstract save_physics_simulator_state() → int#
Saves the state of the physics simulator and returns the unique id of the state.

Returns:
The unique id representing the state.





abstract remove_physics_simulator_state(state_id: int) → None#
Removes the state of the physics simulator with the given id.

Parameters:
state_id – The unique id representing the state.





abstract restore_physics_simulator_state(state_id: int) → None#

Restores the objects and environment state in the physics simulator according tothe given state using the unique state id.



Parameters:
state_id – The unique id representing the state.





get_images_for_target(target_pose: pycram.datastructures.pose.Pose, cam_pose: pycram.datastructures.pose.Pose, size: typing_extensions.Optional[int] = 256) → typing_extensions.List[numpy.ndarray]#
Calculates the view and projection Matrix and returns 3 images:

An RGB image
A depth image
A segmentation Mask, the segmentation mask indicates for every pixel the visible Object


Parameters:

target_pose – The pose to which the camera should point.
cam_pose – The pose of the camera.
size – The height and width of the images in pixels.


Returns:
A list containing an RGB and depth image as well as a segmentation mask, in this order.





register_two_objects_collision_callbacks(object_a: pycram.world_concepts.world_object.Object, object_b: pycram.world_concepts.world_object.Object, on_collision_callback: typing_extensions.Callable, on_collision_removal_callback: typing_extensions.Optional[typing_extensions.Callable] = None) → None#
Registers callback methods for contact between two Objects. There can be a callback for when the two Objects
get in contact and, optionally, for when they are not in contact anymore.

Parameters:

object_a – An object in the World
object_b – Another object in the World
on_collision_callback – A function that should be called if the objects are in contact
on_collision_removal_callback – A function that should be called if the objects are not in contact






classmethod add_resource_path(path: str) → None#
Adds a resource path in which the World will search for files. This resource directory is searched if an
Object is spawned only with a filename.

Parameters:
path – A path in the filesystem in which to search for files.





get_prospection_object_for_object(obj: pycram.world_concepts.world_object.Object) → pycram.world_concepts.world_object.Object#

Returns the corresponding object from the prospection world for a given object in the main world.If the given Object is already in the prospection world, it is returned.



Parameters:
obj – The object for which the corresponding object in the prospection World should be found.

Returns:
The corresponding object in the prospection world.





get_object_for_prospection_object(prospection_object: pycram.world_concepts.world_object.Object) → pycram.world_concepts.world_object.Object#
Returns the corresponding object from the main World for a given
object in the prospection world. If the  given object is not in the prospection
world an error will be raised.

Parameters:
prospection_object – The object for which the corresponding object in the main World should be found.

Returns:
The object in the main World.





reset_world(remove_saved_states=True) → None#
Resets the World to the state it was first spawned in.
All attached objects will be detached, all joints will be set to the
default position of 0 and all objects will be set to the position and
orientation in which they were spawned.

Parameters:
remove_saved_states – If the saved states should be removed.





remove_saved_states() → None#
Removes all saved states of the World.



update_transforms_for_objects_in_current_world() → None#
Updates transformations for all objects that are currently in current_world.



abstract ray_test(from_position: typing_extensions.List[float], to_position: typing_extensions.List[float]) → int#
Cast a ray and return the first object hit, if any.

Parameters:

from_position – The starting position of the ray in Cartesian world coordinates.
to_position – The ending position of the ray in Cartesian world coordinates.


Returns:
The object id of the first object hit, or -1 if no object was hit.





abstract ray_test_batch(from_positions: typing_extensions.List[typing_extensions.List[float]], to_positions: typing_extensions.List[typing_extensions.List[float]], num_threads: int = 1) → typing_extensions.List[int]#

Cast a batch of rays and return the result for each of the rays (first object hit, if any. or -1)
Takes optional argument num_threads to specify the number of threads to use
to compute the ray intersections for the batch. Specify 0 to let simulator decide, 1 (default) for singlecore execution, 2 or more to select the number of threads to use.







Parameters:

from_positions – The starting positions of the rays in Cartesian world coordinates.
to_positions – The ending positions of the rays in Cartesian world coordinates.
num_threads – The number of threads to use to compute the ray intersections for the batch.






abstract create_visual_shape(visual_shape: pycram.datastructures.dataclasses.VisualShape) → int#
Creates a visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
visual_shape – The visual shape to be created, uses the VisualShape dataclass defined in world_dataclasses

Returns:
The unique id of the created shape.





create_multi_body_from_visual_shapes(visual_shape_ids: typing_extensions.List[int], pose: pycram.datastructures.pose.Pose) → int#
Creates a multi body from visual shapes in the physics simulator and returns the unique id of the created
multi body.

Parameters:

visual_shape_ids – The ids of the visual shapes that should be used to create the multi body.
pose – The pose of the origin of the multi body relative to the world frame.


Returns:
The unique id of the created multi body.





abstract create_multi_body(multi_body: pycram.datastructures.dataclasses.MultiBody) → int#
Creates a multi body in the physics simulator and returns the unique id of the created multi body. The multibody
is created by joining multiple links/shapes together with joints.

Parameters:
multi_body – The multi body to be created, uses the MultiBody dataclass defined in world_dataclasses.

Returns:
The unique id of the created multi body.





abstract create_box_visual_shape(shape_data: pycram.datastructures.dataclasses.BoxVisualShape) → int#
Creates a box visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the box visual shape to be created, uses the BoxVisualShape dataclass defined in world_dataclasses.

Returns:
The unique id of the created shape.





abstract create_cylinder_visual_shape(shape_data: pycram.datastructures.dataclasses.CylinderVisualShape) → int#
Creates a cylinder visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the cylinder visual shape to be created, uses the CylinderVisualShape dataclass defined in world_dataclasses.

Returns:
The unique id of the created shape.





abstract create_sphere_visual_shape(shape_data: pycram.datastructures.dataclasses.SphereVisualShape) → int#
Creates a sphere visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the sphere visual shape to be created, uses the SphereVisualShape dataclass defined in world_dataclasses.

Returns:
The unique id of the created shape.





abstract create_capsule_visual_shape(shape_data: pycram.datastructures.dataclasses.CapsuleVisualShape) → int#
Creates a capsule visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the capsule visual shape to be created, uses the CapsuleVisualShape dataclass defined in world_dataclasses.

Returns:
The unique id of the created shape.





abstract create_plane_visual_shape(shape_data: pycram.datastructures.dataclasses.PlaneVisualShape) → int#
Creates a plane visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the plane visual shape to be created, uses the PlaneVisualShape dataclass defined in world_dataclasses.

Returns:
The unique id of the created shape.





abstract create_mesh_visual_shape(shape_data: pycram.datastructures.dataclasses.MeshVisualShape) → int#
Creates a mesh visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the mesh visual shape to be created,


uses the MeshVisualShape dataclass defined in world_dataclasses.
:return: The unique id of the created shape.



abstract add_text(text: str, position: typing_extensions.List[float], orientation: typing_extensions.Optional[typing_extensions.List[float]] = None, size: float = 0.1, color: typing_extensions.Optional[pycram.datastructures.dataclasses.Color] = Color(), life_time: typing_extensions.Optional[float] = 0, parent_object_id: typing_extensions.Optional[int] = None, parent_link_id: typing_extensions.Optional[int] = None) → int#
Adds text to the world.

Parameters:

text – The text to be added.
position – The position of the text in the world.
orientation – By default, debug text will always face the camera, automatically rotation. By specifying a text orientation (quaternion), the orientation will be fixed in world space or local space (when parent is specified).
size – The size of the text.
color – The color of the text.
life_time – The lifetime in seconds of the text to remain in the world, if 0 the text will remain in the world until it is removed manually.
parent_object_id – The id of the object to which the text should be attached.
parent_link_id – The id of the link to which the text should be attached.


Returns:
The id of the added text.





abstract remove_text(text_id: typing_extensions.Optional[int] = None) → None#
Removes text from the world using the given id. if no id is given all text will be removed.

Parameters:
text_id – The id of the text to be removed.





abstract enable_joint_force_torque_sensor(obj: pycram.world_concepts.world_object.Object, fts_joint_idx: int) → None#
You can enable a joint force/torque sensor in each joint. Once enabled, if you perform
a simulation step, the get_joint_reaction_force_torque will report the joint reaction forces in
the fixed degrees of freedom: a fixed joint will measure all 6DOF joint forces/torques.
A revolute/hinge joint force/torque sensor will measure 5DOF reaction forces along all axis except
the hinge axis. The applied force by a joint motor is available through get_applied_joint_motor_torque.

Parameters:

obj – The object in which the joint is located.
fts_joint_idx – The index of the joint for which the force torque sensor should be enabled.






abstract disable_joint_force_torque_sensor(obj: pycram.world_concepts.world_object.Object, joint_id: int) → None#
Disables the force torque sensor of a joint.

Parameters:

obj – The object in which the joint is located.
joint_id – The id of the joint for which the force torque sensor should be disabled.






abstract get_joint_reaction_force_torque(obj: pycram.world_concepts.world_object.Object, joint_id: int) → typing_extensions.List[float]#
Returns the joint reaction forces and torques of the specified joint.

Parameters:

obj – The object in which the joint is located.
joint_id – The id of the joint for which the force torque should be returned.


Returns:
The joint reaction forces and torques of the specified joint.





abstract get_applied_joint_motor_torque(obj: pycram.world_concepts.world_object.Object, joint_id: int) → float#
Returns the applied torque by a joint motor.

Parameters:

obj – The object in which the joint is located.
joint_id – The id of the joint for which the applied motor torque should be returned.


Returns:
The applied torque by a joint motor.





__del__()#




pycram.__version__ = '0.0.2'#



pycram.signal_handler(sig, frame)#











previous
Ontology interface




next
pycram.datastructures









 Contents
  


Subpackages
Submodules
Attributes
Classes
Functions
Package Contents
World
World.simulation_frequency
World.current_world
World.robot
World.data_directory
World.cache_dir
World.cache_manager
World.id
World.is_prospection_world
World.local_transformer
World.objects
World.mode
World.coll_callbacks
World._current_state
World._init_world()
World._init_events()
World._init_and_sync_prospection_world()
World._update_local_transformer_worlds()
World._init_prospection_world()
World._sync_prospection_world()
World.update_cache_dir_with_object()
World.simulation_time_step
World.load_object_and_get_id()
World.get_object_by_name()
World.get_object_by_type()
World.get_object_by_id()
World.remove_object_by_id()
World.remove_object_from_simulator()
World.remove_object()
World.add_fixed_constraint()
World.add_constraint()
World.remove_constraint()
World.get_joint_position()
World.get_object_joint_names()
World.get_link_pose()
World.get_object_link_names()
World.simulate()
World.update_all_objects_poses()
World.get_object_pose()
World.perform_collision_detection()
World.get_object_contact_points()
World.get_contact_points_between_two_objects()
World.reset_joint_position()
World.reset_object_base_pose()
World.step()
World.set_link_color()
World.get_link_color()
World.get_colors_of_object_links()
World.get_object_axis_aligned_bounding_box()
World.get_link_axis_aligned_bounding_box()
World.set_realtime()
World.set_gravity()
World.set_robot_if_not_set()
World.set_robot()
World.robot_is_set()
World.exit()
World.exit_prospection_world_if_exists()
World.disconnect_from_physics_server()
World.reset_current_world()
World.reset_robot()
World.join_threads()
World.terminate_world_sync()
World.save_state()
World.current_state
World.object_states
World.save_objects_state()
World.save_physics_simulator_state()
World.remove_physics_simulator_state()
World.restore_physics_simulator_state()
World.get_images_for_target()
World.register_two_objects_collision_callbacks()
World.add_resource_path()
World.get_prospection_object_for_object()
World.get_object_for_prospection_object()
World.reset_world()
World.remove_saved_states()
World.update_transforms_for_objects_in_current_world()
World.ray_test()
World.ray_test_batch()
World.create_visual_shape()
World.create_multi_body_from_visual_shapes()
World.create_multi_body()
World.create_box_visual_shape()
World.create_cylinder_visual_shape()
World.create_sphere_visual_shape()
World.create_capsule_visual_shape()
World.create_plane_visual_shape()
World.create_mesh_visual_shape()
World.add_text()
World.remove_text()
World.enable_joint_force_torque_sensor()
World.disable_joint_force_torque_sensor()
World.get_joint_reaction_force_torque()
World.get_applied_joint_motor_torque()
World.__del__()


__version__
signal_handler()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.helper — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.helper




 Contents 



Classes
Module Contents
Singleton
Singleton._instances
Singleton.__call__()












pycram.helper#
Implementation of helper functions and classes for internal usage only.
Classes:
Singleton – implementation of singleton metaclass

Classes#


Singleton
Metaclass for singletons






Module Contents#


class pycram.helper.Singleton#
Bases: type
Metaclass for singletons


_instances#
Dictionary of singleton child classes inheriting from this metaclass, keyed by child class objects.



__call__(*args, **kwargs)#
Call self as a function.












previous
pycram.fluent




next
pycram.language









 Contents
  


Classes
Module Contents
Singleton
Singleton._instances
Singleton.__call__()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.fluent — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.fluent




 Contents 



Classes
Module Contents
Behavior
Behavior.NEVER
Behavior.ONCE
Behavior.ALWAYS


Fluent
Fluent._cv
Fluent._mutex
Fluent._pulses
Fluent._children
Fluent._handle_missed
Fluent._value
Fluent._whenever_cbs
Fluent.pulsed()
Fluent.pulse()
Fluent.whenever()
Fluent.add_child()
Fluent.get_value()
Fluent.set_value()
Fluent.wait_for()
Fluent._compare()
Fluent.__lt__()
Fluent.__leq__()
Fluent.__eq__()
Fluent.__ne__()
Fluent.IS()
Fluent.IS_NOT()
Fluent.__gt__()
Fluent.__geq__()
Fluent._math()
Fluent.__add__()
Fluent.__radd__()
Fluent.__sub__()
Fluent.__rsub__()
Fluent.__mul__()
Fluent.__rmul__()
Fluent.__truediv__()
Fluent.__rtruediv__()
Fluent.AND()
Fluent.OR()
Fluent.NOT()












pycram.fluent#

Classes#


Behavior
Enumeration which can be passed as argument to the pulsed method of fluents to describe how to handle missed pulses in the whenever macro.

Fluent
Implementation of fluents.






Module Contents#


class pycram.fluent.Behavior#
Bases: enum.Enum
Enumeration which can be passed as argument to the pulsed method of fluents to describe how to handle missed pulses in the whenever macro.
Fields:
NEVER – ignore missed pulses.
ONCE – if pulses were missed, execute the body once more in total.
ALWAYS – if pulses were missed, execute the body once more for each.


NEVER = 1#



ONCE = 2#



ALWAYS = 3#




class pycram.fluent.Fluent(value: typing_extensions.Optional[typing_extensions.Any] = None, name: str = None)#
Implementation of fluents.
Fluents are thread-safe proxy objects which are used as variables with changing value. This allows threads to
observe them and wait for (specific) changes.
One can also observe fluents created by the pulsed method of a fluent. These change their value from None to True
whenever the parent gets pulsed (or changes its value and thus gets pulsed).
Fluents can be combined to fluent networks which allows to express complex conditions. A network updates its value
whenever one of the fluents it is constructed from changes its value.
The most important comparison and math operators (<, <=, ==, !=, >, >=, +, -, *, /) are overloaded to construct a
fluent network whenever they are called with at least one fluent as parameter. In addition the comparison operators
IS and IS_NOT as well as the logical operators AND, OR and NOT are defined as methods. This is necessary because
these operators can’t be overloaded. Fluents constructed by comparison or logical operators have the value True or
None instead of False, so that they can be used with the wait_for method because it blocks until a value is not None.
User defined operators can be created by passing a function as the fluents value.


_cv: threading.Condition#



_mutex: threading.Lock#



_pulses: int = 0#



_children: typing_extensions.List[Fluent] = []#



_handle_missed#



_value: typing_extensions.Any#



_whenever_cbs = []#



pulsed(handle_missed: Behavior = 2) → Fluent#
Create a fluent which changes its value from None to True whenever the parent gets pulsed.

Parameters:
handle_missed – see the docstring of the Behavior enumeration to find out more (default is Behavior.ONCE).





pulse() → None#
Pulse a fluent without changing its value.



whenever(callback: typing_extensions.Callable) → None#
Registers a callback which is called everytime this Fluent is pulsed. The callback should be a Callable. When
the callback is called it gets the current value of this Fluent as an argument.

Parameters:
callback – The callback which should be called when pulsed as a Callable.





add_child(child: Fluent) → None#
Add a child to the fluent which gets pulsed whenever this fluent gets pulsed, too.

Parameters:
child – the child to add.





get_value() → typing_extensions.Any#
Return the value of the fluent.



set_value(value: typing_extensions.Any) → None#
Change the value of the fluent.
Changing the value will also pulse the fluent.

Parameters:
value – the new value of the fluent.





wait_for(timeout: typing_extensions.Optional[float] = None)#
Block the current thread if the value of the fluent is None, until it is not None or until it timed out.
If the fluent was created by the pulsed method of a fluent, the method blocks until the parent gets pulsed.
The return value is the last return value of the predicate (value is not None) and will evaluate to False if the method timed out.

Parameters:
timeout – the maximum time to wait (default is None).





_compare(operator, other: Fluent) → Fluent#
This is a helper method for internal usage only.
Create a fluent which value is a function returning True or None depending on the given comparison operator applied to the operands.

Parameters:

operator – the comparison operator to apply.
other – the other operand.






__lt__(other: Fluent) → Fluent#
Overload the < comparsion operator.

Parameters:
other – – the other operand.





__leq__(other: Fluent) → Fluent#
Overload the <= comparsion operator.

Parameters:
other – the other operand.





__eq__(other: Fluent) → Fluent#
Overload the == comparsion operator.

Parameters:
other – the other operand.





__ne__(other: Fluent) → Fluent#
Overload the != comparsion operator.

Parameters:
other – the other operand.





IS(other: Fluent) → Fluent#
Create a fluent which value is True if the value of its parent is the value of the given operand, None otherwise.

Parameters:
other – – the other operand which can also be a fluent.





IS_NOT(other: Fluent) → Fluent#
Create a fluent which value is True if the value of its parent is not the value of the given operand, None otherwise.

Parameters:
other – – the other operand which can also be a fluent.





__gt__(other: Fluent) → Fluent#
Overload the > comparison operator.

Parameters:
other – the other operand.





__geq__(other: Fluent) → Fluent#
Overload the >= comparison operator.

Parameters:
other – the other operand.





_math(operator: typing_extensions.Callable, operand: Fluent, other: Fluent) → Fluent#
This is a helper method for internal usage only.
Create a fluent which value is a function returning the value of the given math operator applied to the operands.

Parameters:

operator – the math operator to apply.
operand – the first operand.
other – the other operand.






__add__(other: Fluent) → Fluent#
Overload the + math operator.

Parm other:
the other operand.





__radd__(other: Fluent) → Fluent#
Overload the + math operator with the first operand not being a fluent.

Parameters:
other – the other operand.





__sub__(other: Fluent) → Fluent#
Overload the - math operator.

Parameters:
other – the other operand.





__rsub__(other: Fluent) → Fluent#
Overload the - math operator with the first operand not being a fluent.

Parameters:
other – the other operand.





__mul__(other: Fluent) → Fluent#
Overload the * math operator.

Parameters:
other – the other operand.





__rmul__(other: Fluent) → Fluent#
Overload the * math operator with the first operand not being a fluent.

Parameters:
other – the other operand.





__truediv__(other: Fluent) → Fluent#
Overload the / math operator.

Parameters:
other – the other operand.





__rtruediv__(other) → Fluent#
Overload the / math operator with the first operand not being a fluent.

Parameters:
other – the other operand.





AND(other: Fluent) → Fluent#
Create a fluent which value is True if both, the value of its parent and the other operand express True, None otherwise.

Parameters:
other – the other operand which can also be a fluent.





OR(other: Fluent) → Fluent#
Create a fluent which value is True if either the value of its parent or the other operand express True, None otherwise.

Parameters:
other – the other operand which can also be a fluent.





NOT() → Fluent#
Create a fluent which value is True if the value of its parent expresses False, None otherwise.












previous
pycram.failure_handling




next
pycram.helper









 Contents
  


Classes
Module Contents
Behavior
Behavior.NEVER
Behavior.ONCE
Behavior.ALWAYS


Fluent
Fluent._cv
Fluent._mutex
Fluent._pulses
Fluent._children
Fluent._handle_missed
Fluent._value
Fluent._whenever_cbs
Fluent.pulsed()
Fluent.pulse()
Fluent.whenever()
Fluent.add_child()
Fluent.get_value()
Fluent.set_value()
Fluent.wait_for()
Fluent._compare()
Fluent.__lt__()
Fluent.__leq__()
Fluent.__eq__()
Fluent.__ne__()
Fluent.IS()
Fluent.IS_NOT()
Fluent.__gt__()
Fluent.__geq__()
Fluent._math()
Fluent.__add__()
Fluent.__radd__()
Fluent.__sub__()
Fluent.__rsub__()
Fluent.__mul__()
Fluent.__rmul__()
Fluent.__truediv__()
Fluent.__rtruediv__()
Fluent.AND()
Fluent.OR()
Fluent.NOT()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.failure_handling — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.failure_handling




 Contents 



Classes
Module Contents
FailureHandling
FailureHandling.designator_description
FailureHandling.perform()


Retry
Retry.max_tries
Retry.perform()


RetryMonitor
RetryMonitor.max_tries
RetryMonitor.recovery
RetryMonitor.lock
RetryMonitor.perform()












pycram.failure_handling#

Classes#


FailureHandling
Base class for failure handling mechanisms in automated systems or workflows.

Retry
A subclass of FailureHandling that implements a retry mechanism.

RetryMonitor
A subclass of FailureHandling that implements a retry mechanism that works with a Monitor.






Module Contents#


class pycram.failure_handling.FailureHandling(designator_description: typing_extensions.Union[pycram.designator.DesignatorDescription, pycram.language.Monitor])#
Bases: pycram.language.Language
Base class for failure handling mechanisms in automated systems or workflows.
This class provides a structure for implementing different strategies to handle
failures that may occur during the execution of a plan or process. It is designed
to be extended by subclasses that implement specific failure handling behaviors.


designator_description#



abstract perform()#
Abstract method to perform the failure handling mechanism.
This method should be overridden in subclasses to implement the specific
behavior for handling failures.

Raises:
NotImplementedError – If the method is not implemented in a subclass.






class pycram.failure_handling.Retry(designator_description: pycram.designator.DesignatorDescription, max_tries: int = 3)#
Bases: FailureHandling
A subclass of FailureHandling that implements a retry mechanism.
This class represents a specific failure handling strategy where the system
attempts to retry a failed action a certain number of times before giving up.


max_tries: int#
The maximum number of attempts to retry the action.



perform() → typing_extensions.Tuple[pycram.datastructures.enums.State, typing_extensions.List[typing_extensions.Any]]#
Implementation of the retry mechanism.
This method attempts to perform the action specified in the designator_description.
If the action fails, it is retried up to max_tries times. If all attempts fail,
the last exception is raised.

Raises:
PlanFailure – If all retry attempts fail.






class pycram.failure_handling.RetryMonitor(designator_description: pycram.language.Monitor, max_tries: int = 3, recovery: dict = None)#
Bases: FailureHandling
A subclass of FailureHandling that implements a retry mechanism that works with a Monitor.
This class represents a specific failure handling strategy that allows us to retry a demo that is
being monitored, in case that monitoring condition is triggered.


max_tries: int#
The maximum number of attempts to retry the action.



recovery: dict#
A dictionary that maps exception types to recovery actions



lock#



perform() → typing_extensions.Tuple[pycram.datastructures.enums.State, typing_extensions.List[typing_extensions.Any]]#
This method attempts to perform the Monitor + plan specified in the designator_description. If the action
fails, it is retried up to max_tries times. If all attempts fail, the last exception is raised. In every
loop, we need to clear the kill_event, and set all relevant ‘interrupted’ variables to False, to make sure
the Monitor and plan are executed properly again.

Raises:
PlanFailure – If all retry attempts fail.

Returns:
The state of the execution performed, as well as a flattened list of the


results, in the correct order












previous
pycram.designator




next
pycram.fluent









 Contents
  


Classes
Module Contents
FailureHandling
FailureHandling.designator_description
FailureHandling.perform()


Retry
Retry.max_tries
Retry.perform()


RetryMonitor
RetryMonitor.max_tries
RetryMonitor.recovery
RetryMonitor.lock
RetryMonitor.perform()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.external_interfaces.tmc — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.external_interfaces.tmc




 Contents 



Attributes
Functions
Module Contents
is_init
init_tmc_interface()
tmc_gripper_control()
tmc_talk()










pycram.external_interfaces.tmc#

Attributes#


is_init







Functions#


init_tmc_interface()


tmc_gripper_control(designator[, topic_name])
Publishes a message to the gripper controller to open or close the gripper for the HSR.

tmc_talk(designator[, topic_name])
Publishes a sentence to the talk_request topic of the HSRB robot






Module Contents#


pycram.external_interfaces.tmc.is_init = False#



pycram.external_interfaces.tmc.init_tmc_interface()#



pycram.external_interfaces.tmc.tmc_gripper_control(designator: pycram.designators.motion_designator.MoveGripperMotion, topic_name: typing_extensions.Optional[str] = '/hsrb/gripper_controller/grasp/goal')#
Publishes a message to the gripper controller to open or close the gripper for the HSR.

Parameters:

designator – The designator containing the motion to be executed
topic_name – The topic name to publish the message to






pycram.external_interfaces.tmc.tmc_talk(designator: pycram.designators.motion_designator.TalkingMotion, topic_name: typing_extensions.Optional[str] = '/talk_request')#
Publishes a sentence to the talk_request topic of the HSRB robot

Parameters:

designator – The designator containing the sentence to be spoken
topic_name – The topic name to publish the sentence to














previous
pycram.external_interfaces.robokudo




next
pycram.object_descriptors









 Contents
  


Attributes
Functions
Module Contents
is_init
init_tmc_interface()
tmc_gripper_control()
tmc_talk()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.external_interfaces.robokudo — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.external_interfaces.robokudo




 Contents 



Attributes
Functions
Module Contents
is_init
number_of_par_goals
robokudo_lock
robokudo_rlock
par_threads
thread_safe()
init_robokudo_interface()
send_query()
query_object()
query_human()
stop_query()
query_specific_region()
query_human_attributes()
query_waving_human()










pycram.external_interfaces.robokudo#

Attributes#


is_init


number_of_par_goals


robokudo_lock


robokudo_rlock


par_threads







Functions#


thread_safe(→ typing_extensions.Callable)
Adds thread safety to a function via a decorator. This uses the robokudo_lock

init_robokudo_interface(→ typing_extensions.Callable)
Checks if the ROS messages are available and if Robokudo is running, if that is the case the interface will be

send_query(→ Any)
Generic function to send a query to RoboKudo.

query_object(→ dict)
Query RoboKudo for an object that fits the description.

query_human(→ geometry_msgs.msg.PointStamped)
Query RoboKudo for human detection and return the detected human's pose.

stop_query()
Stop any ongoing query to RoboKudo.

query_specific_region(→ Any)
Query RoboKudo to scan a specific region.

query_human_attributes(→ Any)
Query RoboKudo for human attributes like brightness of clothes, headgear, and gender.

query_waving_human(→ pycram.datastructures.pose.Pose)
Query RoboKudo for detecting a waving human.






Module Contents#


pycram.external_interfaces.robokudo.is_init = False#



pycram.external_interfaces.robokudo.number_of_par_goals = 0#



pycram.external_interfaces.robokudo.robokudo_lock#



pycram.external_interfaces.robokudo.robokudo_rlock#



pycram.external_interfaces.robokudo.par_threads#



pycram.external_interfaces.robokudo.thread_safe(func: typing_extensions.Callable) → typing_extensions.Callable#
Adds thread safety to a function via a decorator. This uses the robokudo_lock

Parameters:
func – Function that should be thread safe

Returns:
A function with thread safety





pycram.external_interfaces.robokudo.init_robokudo_interface(func: typing_extensions.Callable) → typing_extensions.Callable#
Checks if the ROS messages are available and if Robokudo is running, if that is the case the interface will be
initialized.

Parameters:
func – Function this decorator should be wrapping

Returns:
A callable function which initializes the interface and then calls the wrapped function





pycram.external_interfaces.robokudo.send_query(obj_type: typing_extensions.Optional[str] = None, region: typing_extensions.Optional[str] = None, attributes: typing_extensions.Optional[typing_extensions.List[str]] = None) → Any#
Generic function to send a query to RoboKudo.



pycram.external_interfaces.robokudo.query_object(obj_desc: pycram.designator.ObjectDesignatorDescription) → dict#
Query RoboKudo for an object that fits the description.



pycram.external_interfaces.robokudo.query_human() → geometry_msgs.msg.PointStamped#
Query RoboKudo for human detection and return the detected human’s pose.



pycram.external_interfaces.robokudo.stop_query()#
Stop any ongoing query to RoboKudo.



pycram.external_interfaces.robokudo.query_specific_region(region: str) → Any#
Query RoboKudo to scan a specific region.



pycram.external_interfaces.robokudo.query_human_attributes() → Any#
Query RoboKudo for human attributes like brightness of clothes, headgear, and gender.



pycram.external_interfaces.robokudo.query_waving_human() → pycram.datastructures.pose.Pose#
Query RoboKudo for detecting a waving human.











previous
pycram.external_interfaces.move_base




next
pycram.external_interfaces.tmc









 Contents
  


Attributes
Functions
Module Contents
is_init
number_of_par_goals
robokudo_lock
robokudo_rlock
par_threads
thread_safe()
init_robokudo_interface()
send_query()
query_object()
query_human()
stop_query()
query_specific_region()
query_human_attributes()
query_waving_human()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.external_interfaces.move_base — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.external_interfaces.move_base




 Contents 



Attributes
Functions
Module Contents
nav_action_client
is_init
create_nav_action_client()
init_nav_interface()
query_pose_nav()
cancel_nav()










pycram.external_interfaces.move_base#

Attributes#


nav_action_client


is_init







Functions#


create_nav_action_client(→ actionlib.SimpleActionClient)
Creates a new action client for the move_base interface.

init_nav_interface(→ Callable)
Ensures initialization of the navigation interface before function execution.

query_pose_nav(navpose)
Sends a goal to the move_base service, initiating robot navigation to a given pose.

cancel_nav()
Cancels the current navigation goal.






Module Contents#


pycram.external_interfaces.move_base.nav_action_client = None#



pycram.external_interfaces.move_base.is_init = False#



pycram.external_interfaces.move_base.create_nav_action_client() → actionlib.SimpleActionClient#
Creates a new action client for the move_base interface.



pycram.external_interfaces.move_base.init_nav_interface(func: Callable) → Callable#
Ensures initialization of the navigation interface before function execution.



pycram.external_interfaces.move_base.query_pose_nav(navpose: geometry_msgs.msg.PoseStamped)#
Sends a goal to the move_base service, initiating robot navigation to a given pose.



pycram.external_interfaces.move_base.cancel_nav()#
Cancels the current navigation goal.











previous
pycram.external_interfaces.knowrob




next
pycram.external_interfaces.robokudo









 Contents
  


Attributes
Functions
Module Contents
nav_action_client
is_init
create_nav_action_client()
init_nav_interface()
query_pose_nav()
cancel_nav()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.external_interfaces.knowrob — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.external_interfaces.knowrob




 Contents 



Attributes
Functions
Module Contents
SCRIPT_DIR
neem_interface
logger
all_solutions()
once()
load_beliefstate()
clear_beliefstate()
load_owl()
new_iri()
object_type()
instances_of()
object_pose()
grasp_pose()
knowrob_string_to_pose()










pycram.external_interfaces.knowrob#

Attributes#


SCRIPT_DIR


neem_interface


logger







Functions#


all_solutions(q)


once(→ typing_extensions.Union[typing_extensions.List, ...)


load_beliefstate(path)


clear_beliefstate()


load_owl(path[, ns_alias, ns_url])
Example: load_owl("package://external_interfaces/owl/maps/iai_room_v1.owl", "map", "http://knowrob.org/kb/v1/IAI-Kitchen.owl#")

new_iri(owl_class)


object_type(→ str)


instances_of(→ typing_extensions.List[str])


object_pose(→ typing_extensions.List[float])


grasp_pose(→ typing_extensions.List[float])


knowrob_string_to_pose(→ typing_extensions.List[float])







Module Contents#


pycram.external_interfaces.knowrob.SCRIPT_DIR#



pycram.external_interfaces.knowrob.neem_interface#



pycram.external_interfaces.knowrob.logger#



pycram.external_interfaces.knowrob.all_solutions(q)#



pycram.external_interfaces.knowrob.once(q) → typing_extensions.Union[typing_extensions.List, typing_extensions.Dict]#



pycram.external_interfaces.knowrob.load_beliefstate(path: str)#



pycram.external_interfaces.knowrob.clear_beliefstate()#



pycram.external_interfaces.knowrob.load_owl(path, ns_alias=None, ns_url=None)#
Example: load_owl(“package://external_interfaces/owl/maps/iai_room_v1.owl”, “map”, “http://knowrob.org/kb/v1/IAI-Kitchen.owl#”)
:param str path: path to log folder
:rtype: bool



pycram.external_interfaces.knowrob.new_iri(owl_class: str)#



pycram.external_interfaces.knowrob.object_type(object_iri: str) → str#

Parameters:
object_iri – The name (identifier) of the object individual in the KnowRob knowledge base





pycram.external_interfaces.knowrob.instances_of(type_: str) → typing_extensions.List[str]#

Parameters:
type – An object type (i.e. class)





pycram.external_interfaces.knowrob.object_pose(object_iri: str, reference_cs: str = 'world', timestamp=None) → typing_extensions.List[float]#

Parameters:

object_iri – The name (identifier) of the object individual in the KnowRob knowledge base
reference_cs – The coordinate system relative to which the pose should be defined






pycram.external_interfaces.knowrob.grasp_pose(object_iri: str) → typing_extensions.List[float]#



pycram.external_interfaces.knowrob.knowrob_string_to_pose(pose_as_string: str) → typing_extensions.List[float]#











previous
pycram.external_interfaces.ik




next
pycram.external_interfaces.move_base









 Contents
  


Attributes
Functions
Module Contents
SCRIPT_DIR
neem_interface
logger
all_solutions()
once()
load_beliefstate()
clear_beliefstate()
load_owl()
new_iri()
object_type()
instances_of()
object_pose()
grasp_pose()
knowrob_string_to_pose()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.external_interfaces — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.external_interfaces




 Contents 



Submodules








pycram.external_interfaces#

Submodules#


pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc












previous
pycram.designators.object_designator




next
pycram.external_interfaces.giskard









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.external_interfaces.ik — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.external_interfaces.ik




 Contents 



Functions
Module Contents
_make_request_msg()
call_ik()
try_to_reach_with_grasp()
apply_grasp_orientation_to_pose()
try_to_reach()
request_ik()
request_kdl_ik()
request_giskard_ik()










pycram.external_interfaces.ik#

Functions#


_make_request_msg(→ moveit_msgs.msg.PositionIKRequest)
Generates an ik request message for the kdl_ik_service. The message is

call_ik(→ typing_extensions.List[float])
Sends a request to the kdl_ik_service and returns the solution.

try_to_reach_with_grasp(...)
Checks if the robot can reach a given position with a specific grasp orientation.

apply_grasp_orientation_to_pose(...)
Applies the orientation of a grasp to a given pose. This is done by using the grasp orientation

try_to_reach(...)
Tries to reach a given position with a given robot. This is done by calculating the inverse kinematics.

request_ik(...)
Top-level method to request ik solution for a given pose. This method will check if the giskard node is running

request_kdl_ik(→ typing_extensions.Dict[str, float])
Top-level method to request ik solution for a given pose. Before calling the ik service the links directly before

request_giskard_ik(...)
Calls giskard in projection mode and queries the ik solution for a full body ik solution. This method will






Module Contents#


pycram.external_interfaces.ik._make_request_msg(root_link: str, tip_link: str, target_pose: pycram.datastructures.pose.Pose, robot_object: pycram.world_concepts.world_object.Object, joints: typing_extensions.List[str]) → moveit_msgs.msg.PositionIKRequest#
Generates an ik request message for the kdl_ik_service. The message is
of the type moveit_msgs/PositionIKRequest and contains all information
contained in the parameter.

Parameters:

root_link – The first link of the chain of joints to be altered
tip_link – The last link of the chain of joints to be altered
target_pose – Target pose for which the message should be created
robot_object – The robot for which the ik should be generated
joints – A list of joint names between the root_link and tip_link that should be altered.


Returns:
A moveit_msgs/PositionIKRequest message containing all the information from the parameter





pycram.external_interfaces.ik.call_ik(root_link: str, tip_link: str, target_pose: pycram.datastructures.pose.Pose, robot_object: pycram.world_concepts.world_object.Object, joints: typing_extensions.List[str]) → typing_extensions.List[float]#
Sends a request to the kdl_ik_service and returns the solution.
Note that the robot in robot_object should be identical to the robot description
uploaded to the parameter server. Furthermore, note that the root_link and
tip_link are the links attached to the first and last joints in the joints list.

Parameters:

root_link – The first link of the chain of joints to be altered
tip_link – The last link in the chain of joints to be altered
target_pose – The target pose in frame of root link second is the orientation as quaternion in world coordinate frame
robot_object – The robot object for which the ik solution should be generated
joints – A list of joint name that should be altered


Returns:
The solution that was generated as a list of joint values corresponding to the order of joints given





pycram.external_interfaces.ik.try_to_reach_with_grasp(pose_or_object: typing_extensions.Union[pycram.datastructures.pose.Pose, pycram.world_concepts.world_object.Object], prospection_robot: pycram.world_concepts.world_object.Object, gripper_name: str, grasp: str) → typing_extensions.Union[pycram.datastructures.pose.Pose, None]#
Checks if the robot can reach a given position with a specific grasp orientation.
To determine this the inverse kinematics are calculated and applied.

Parameters:

pose_or_object – The position and rotation or Object for which reachability should be checked or an Object
prospection_robot – The robot that should reach for the position
gripper_name – The name of the end effector
grasp – The grasp type with which the object should be grasped






pycram.external_interfaces.ik.apply_grasp_orientation_to_pose(grasp: str, pose: pycram.datastructures.pose.Pose) → pycram.datastructures.pose.Pose#
Applies the orientation of a grasp to a given pose. This is done by using the grasp orientation
of the given grasp and applying it to the given pose.

Parameters:

grasp – The name of the grasp
pose – The pose to which the grasp orientation should be applied






pycram.external_interfaces.ik.try_to_reach(pose_or_object: typing_extensions.Union[pycram.datastructures.pose.Pose, pycram.world_concepts.world_object.Object], prospection_robot: pycram.world_concepts.world_object.Object, gripper_name: str) → typing_extensions.Union[pycram.datastructures.pose.Pose, None]#
Tries to reach a given position with a given robot. This is done by calculating the inverse kinematics.

Parameters:

pose_or_object – The position and rotation or Object for which reachability should be checked.
prospection_robot – The robot that should be used to check for reachability, should be the one in the prospection world
gripper_name – Name of the gripper tool frame


Returns:
The pose at which the robot should stand or None if the target is not reachable





pycram.external_interfaces.ik.request_ik(target_pose: pycram.datastructures.pose.Pose, robot: pycram.world_concepts.world_object.Object, joints: typing_extensions.List[str], gripper: str) → typing_extensions.Tuple[pycram.datastructures.pose.Pose, typing_extensions.Dict[str, float]]#
Top-level method to request ik solution for a given pose. This method will check if the giskard node is running
and if so will call the giskard service. If the giskard node is not running the kdl_ik_service will be called.

Parameters:

target_pose – Pose of the end-effector for which an ik solution should be found
robot – The robot object which should be used
joints – A list of joints that should be used in computation, this is only relevant for the kdl_ik_service
gripper – Name of the tool frame which should grasp, this should be at the end of the given joint chain


Returns:
A Pose at which the robt should stand as well as a dictionary of joint values





pycram.external_interfaces.ik.request_kdl_ik(target_pose: pycram.datastructures.pose.Pose, robot: pycram.world_concepts.world_object.Object, joints: typing_extensions.List[str], gripper: str) → typing_extensions.Dict[str, float]#
Top-level method to request ik solution for a given pose. Before calling the ik service the links directly before
and after the joint chain will be queried and the target_pose will be transformed into the frame of the root_link.
Afterward, the offset between the tip_link and end effector will be calculated and taken into account. Lastly the
ik service is called and the result returned

Parameters:

target_pose – Pose for which an ik solution should be found
robot – Robot object which should be used
joints – List of joints that should be used in computation
gripper – Name of the gripper which should grasp, this should be at the end of the given joint chain


Returns:
A list of joint values





pycram.external_interfaces.ik.request_giskard_ik(target_pose: pycram.datastructures.pose.Pose, robot: pycram.world_concepts.world_object.Object, gripper: str) → typing_extensions.Tuple[pycram.datastructures.pose.Pose, typing_extensions.Dict[str, float]]#
Calls giskard in projection mode and queries the ik solution for a full body ik solution. This method will
try to drive the robot directly to a pose from which the target_pose is reachable for the end effector. If there
are obstacles in the way this method will fail. In this case please use the GiskardLocation designator.

Parameters:

target_pose – Pose at which the end effector should be moved.
robot – Robot object which should be used.
gripper – Name of the tool frame which should grasp, this should be at the end of the given joint chain.


Returns:
A list of joint values.













previous
pycram.external_interfaces.giskard




next
pycram.external_interfaces.knowrob









 Contents
  


Functions
Module Contents
_make_request_msg()
call_ik()
try_to_reach_with_grasp()
apply_grasp_orientation_to_pose()
try_to_reach()
request_ik()
request_kdl_ik()
request_giskard_ik()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.external_interfaces.giskard — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.external_interfaces.giskard




 Contents 



Attributes
Functions
Module Contents
giskard_wrapper
giskard_update_service
is_init
number_of_par_goals
giskard_lock
giskard_rlock
par_threads
thread_safe()
init_giskard_interface()
initial_adding_objects()
removing_of_objects()
sync_worlds()
update_pose()
spawn_object()
remove_object()
spawn_urdf()
spawn_mesh()
_manage_par_motion_goals()
achieve_joint_goal()
achieve_cartesian_goal()
achieve_straight_cartesian_goal()
achieve_translation_goal()
achieve_straight_translation_goal()
achieve_rotation_goal()
achieve_align_planes_goal()
achieve_open_container_goal()
achieve_close_container_goal()
projection_cartesian_goal()
projection_cartesian_goal_with_approach()
projection_joint_goal()
allow_gripper_collision()
get_gripper_group_names()
add_gripper_groups()
avoid_all_collisions()
allow_self_collision()
avoid_collisions()
make_world_body()
make_point_stamped()
make_quaternion_stamped()
make_vector_stamped()
_pose_to_pose_stamped()










pycram.external_interfaces.giskard#

Attributes#


giskard_wrapper


giskard_update_service


is_init


number_of_par_goals


giskard_lock


giskard_rlock


par_threads







Functions#


thread_safe(→ typing_extensions.Callable)
Adds thread safety to a function via a decorator. This uses the giskard_lock

init_giskard_interface(→ typing_extensions.Callable)
Checks if the ROS messages are available and if giskard is running, if that is the case the interface will be

initial_adding_objects(→ None)
Adds object that are loaded in the World to the Giskard belief state, if they are not present at the moment.

removing_of_objects(→ None)
Removes objects that are present in the Giskard belief state but not in the World from the Giskard belief state.

sync_worlds(→ None)
Synchronizes the World and the Giskard belief state, this includes adding and removing objects to the Giskard

update_pose(→ UpdateWorldResponse)
Sends an update message to giskard to update the object position. Might not work when working on the real robot just

spawn_object(→ None)
Spawns a World Object in the giskard belief state.

remove_object(→ UpdateWorldResponse)
Removes an object from the giskard belief state.

spawn_urdf(→ UpdateWorldResponse)
Spawns an URDF in giskard's belief state.

spawn_mesh(→ UpdateWorldResponse)
Spawns a mesh into giskard's belief state

_manage_par_motion_goals(...)
Manages multiple goals that should be executed in parallel. The current sequence of motion goals is saved and the

achieve_joint_goal(→ giskard_msgs.msg.MoveResult)
Takes a dictionary of joint position that should be achieved, the keys in the dictionary are the joint names and

achieve_cartesian_goal(→ giskard_msgs.msg.MoveResult)
Takes a cartesian position and tries to move the tip_link to this position using the chain defined by

achieve_straight_cartesian_goal(...)
Takes a cartesian position and tries to move the tip_link to this position in a straight line, using the chain

achieve_translation_goal(→ giskard_msgs.msg.MoveResult)
Tries to move the tip_link to the position defined by goal_point using the chain defined by root_link and

achieve_straight_translation_goal(...)
Tries to move the tip_link to the position defined by goal_point in a straight line, using the chain defined by

achieve_rotation_goal(→ giskard_msgs.msg.MoveResult)
Tries to bring the tip link into the rotation defined by quat using the chain defined by root_link and

achieve_align_planes_goal(→ giskard_msgs.msg.MoveResult)
Tries to align the plane defined by tip normal with goal_normal using the chain between root_link and

achieve_open_container_goal(→ giskard_msgs.msg.MoveResult)
Tries to open a container in an environment, this only works if the container was added as a URDF. This goal assumes

achieve_close_container_goal(→ giskard_msgs.msg.MoveResult)
Tries to close a container, this only works if the container was added as a URDF. Assumes that the handle of the

projection_cartesian_goal(→ giskard_msgs.msg.MoveResult)
Tries to move the tip_link to the position defined by goal_pose using the chain defined by tip_link and root_link.

projection_cartesian_goal_with_approach(...)
Tries to achieve the goal_pose using the chain defined by tip_link and root_link. The approach_pose is used to drive

projection_joint_goal(→ giskard_msgs.msg.MoveResult)
Tries to achieve the joint goal defined by goal_poses, the goal_poses are projected to the closest point on the

allow_gripper_collision(→ None)
Allows the specified gripper to collide with anything.

get_gripper_group_names(→ typing_extensions.List[str])
Returns a list of groups that are registered in giskard which have 'gripper' in their name.

add_gripper_groups(→ None)
Adds the gripper links as a group for collision avoidance.

avoid_all_collisions(→ None)
Will avoid all collision for the next goal.

allow_self_collision(→ None)
Will allow the robot collision with itself.

avoid_collisions(→ None)
Will avoid collision between the two objects for the next goal.

make_world_body(→ giskard_msgs.msg.WorldBody)
Creates a WorldBody message for a World Object. The WorldBody will contain the URDF of the World Object

make_point_stamped(→ geometry_msgs.msg.PointStamped)
Creates a PointStamped message for the given position in world coordinate frame.

make_quaternion_stamped(...)
Creates a QuaternionStamped message for the given quaternion.

make_vector_stamped(→ geometry_msgs.msg.Vector3Stamped)
Creates a Vector3Stamped message, this is similar to PointStamped but represents a vector instead of a point.

_pose_to_pose_stamped(→ geometry_msgs.msg.PoseStamped)
Transforms a PyCRAM pose to a PoseStamped message, this is necessary since Giskard NEEDS a PoseStamped message






Module Contents#


pycram.external_interfaces.giskard.giskard_wrapper = None#



pycram.external_interfaces.giskard.giskard_update_service = None#



pycram.external_interfaces.giskard.is_init = False#



pycram.external_interfaces.giskard.number_of_par_goals = 0#



pycram.external_interfaces.giskard.giskard_lock#



pycram.external_interfaces.giskard.giskard_rlock#



pycram.external_interfaces.giskard.par_threads#



pycram.external_interfaces.giskard.thread_safe(func: typing_extensions.Callable) → typing_extensions.Callable#
Adds thread safety to a function via a decorator. This uses the giskard_lock

Parameters:
func – Function that should be thread safe

Returns:
A function with thread safety





pycram.external_interfaces.giskard.init_giskard_interface(func: typing_extensions.Callable) → typing_extensions.Callable#
Checks if the ROS messages are available and if giskard is running, if that is the case the interface will be
initialized.

Parameters:
func – Function this decorator should be wrapping

Returns:
A callable function which initializes the interface and then calls the wrapped function





pycram.external_interfaces.giskard.initial_adding_objects() → None#
Adds object that are loaded in the World to the Giskard belief state, if they are not present at the moment.



pycram.external_interfaces.giskard.removing_of_objects() → None#
Removes objects that are present in the Giskard belief state but not in the World from the Giskard belief state.



pycram.external_interfaces.giskard.sync_worlds() → None#
Synchronizes the World and the Giskard belief state, this includes adding and removing objects to the Giskard
belief state such that it matches the objects present in the World and moving the robot to the position it is
currently at in the World.



pycram.external_interfaces.giskard.update_pose(object: pycram.world_concepts.world_object.Object) → UpdateWorldResponse#
Sends an update message to giskard to update the object position. Might not work when working on the real robot just
in standalone mode.

Parameters:
object – Object that should be updated

Returns:
An UpdateWorldResponse





pycram.external_interfaces.giskard.spawn_object(object: pycram.world_concepts.world_object.Object) → None#
Spawns a World Object in the giskard belief state.

Parameters:
object – World object that should be spawned





pycram.external_interfaces.giskard.remove_object(object: pycram.world_concepts.world_object.Object) → UpdateWorldResponse#
Removes an object from the giskard belief state.

Parameters:
object – The World Object that should be removed





pycram.external_interfaces.giskard.spawn_urdf(name: str, urdf_path: str, pose: pycram.datastructures.pose.Pose) → UpdateWorldResponse#
Spawns an URDF in giskard’s belief state.

Parameters:

name – Name of the URDF
urdf_path – Path to the URDF file
pose – Pose in which the URDF should be spawned


Returns:
An UpdateWorldResponse message





pycram.external_interfaces.giskard.spawn_mesh(name: str, path: str, pose: pycram.datastructures.pose.Pose) → UpdateWorldResponse#
Spawns a mesh into giskard’s belief state

Parameters:

name – Name of the mesh
path – Path to the mesh file
pose – Pose in which the mesh should be spawned


Returns:
An UpdateWorldResponse message





pycram.external_interfaces.giskard._manage_par_motion_goals(goal_func, *args) → typing_extensions.Optional[giskard_msgs.msg.MoveResult]#
Manages multiple goals that should be executed in parallel. The current sequence of motion goals is saved and the
parallel motion goal is loaded if there is one, then the new motion goal given by goal_func is added to the
parallel motion goal. If this was the last motion goal for the parallel motion goal it is then executed.

Parameters:

goal_func – Function which adds a new motion goal to the giskard_wrapper
args – Arguments for the goal_func function


Returns:
MoveResult of the execution if there was an execution, True if a new motion goal was added to the giskard_wrapper and None in any other case





pycram.external_interfaces.giskard.achieve_joint_goal(goal_poses: typing_extensions.Dict[str, float]) → giskard_msgs.msg.MoveResult#
Takes a dictionary of joint position that should be achieved, the keys in the dictionary are the joint names and
values are the goal joint positions.

Parameters:
goal_poses – Dictionary with joint names and position goals

Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.achieve_cartesian_goal(goal_pose: pycram.datastructures.pose.Pose, tip_link: str, root_link: str) → giskard_msgs.msg.MoveResult#
Takes a cartesian position and tries to move the tip_link to this position using the chain defined by
tip_link and root_link.

Parameters:

goal_pose – The position which should be achieved with tip_link
tip_link – The end link of the chain as well as the link which should achieve the goal_pose
root_link – The starting link of the chain which should be used to achieve this goal


Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.achieve_straight_cartesian_goal(goal_pose: pycram.datastructures.pose.Pose, tip_link: str, root_link: str) → giskard_msgs.msg.MoveResult#
Takes a cartesian position and tries to move the tip_link to this position in a straight line, using the chain
defined by tip_link and root_link.

Parameters:

goal_pose – The position which should be achieved with tip_link
tip_link – The end link of the chain as well as the link which should achieve the goal_pose
root_link – The starting link of the chain which should be used to achieve this goal


Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.achieve_translation_goal(goal_point: typing_extensions.List[float], tip_link: str, root_link: str) → giskard_msgs.msg.MoveResult#
Tries to move the tip_link to the position defined by goal_point using the chain defined by root_link and
tip_link. Since goal_point only defines the position but no rotation, rotation is not taken into account.

Parameters:

goal_point – The goal position of the tip_link
tip_link – The link which should be moved to goal_point as well as the end of the used chain
root_link – The start link of the chain


Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.achieve_straight_translation_goal(goal_point: typing_extensions.List[float], tip_link: str, root_link: str) → giskard_msgs.msg.MoveResult#
Tries to move the tip_link to the position defined by goal_point in a straight line, using the chain defined by
root_link and tip_link. Since goal_point only defines the position but no rotation, rotation is not taken into account.

Parameters:

goal_point – The goal position of the tip_link
tip_link – The link which should be moved to goal_point as well as the end of the used chain
root_link – The start link of the chain


Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.achieve_rotation_goal(quat: typing_extensions.List[float], tip_link: str, root_link: str) → giskard_msgs.msg.MoveResult#
Tries to bring the tip link into the rotation defined by quat using the chain defined by root_link and
tip_link.

Parameters:

quat – The rotation that should be achieved, given as a quaternion
tip_link – The link that should be in the rotation defined by quat
root_link – The start link of the chain


Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.achieve_align_planes_goal(goal_normal: typing_extensions.List[float], tip_link: str, tip_normal: typing_extensions.List[float], root_link: str) → giskard_msgs.msg.MoveResult#
Tries to align the plane defined by tip normal with goal_normal using the chain between root_link and
tip_link.

Parameters:

goal_normal – The goal plane, given as a list of XYZ
tip_link – The end link of the chain that should be used.
tip_normal – The plane that should be aligned with goal_normal, given as a list of XYZ
root_link – The starting link of the chain that should be used.


Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.achieve_open_container_goal(tip_link: str, environment_link: str) → giskard_msgs.msg.MoveResult#
Tries to open a container in an environment, this only works if the container was added as a URDF. This goal assumes
that the handle was already grasped. Can only handle container with 1 DOF

Parameters:

tip_link – The End effector that should open the container
environment_link – The name of the handle for this container.


Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.achieve_close_container_goal(tip_link: str, environment_link: str) → giskard_msgs.msg.MoveResult#
Tries to close a container, this only works if the container was added as a URDF. Assumes that the handle of the
container was already grasped. Can only handle container with 1 DOF.

Parameters:

tip_link – Link name that should be used to close the container.
environment_link – Name of the handle


Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.projection_cartesian_goal(goal_pose: pycram.datastructures.pose.Pose, tip_link: str, root_link: str) → giskard_msgs.msg.MoveResult#
Tries to move the tip_link to the position defined by goal_pose using the chain defined by tip_link and root_link.
The goal_pose is projected to the closest point on the robot’s workspace.

Parameters:

goal_pose – The position which should be achieved with tip_link
tip_link – The end link of the chain as well as the link which should achieve the goal_pose
root_link – The starting link of the chain which should be used to achieve this goal


Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.projection_cartesian_goal_with_approach(approach_pose: pycram.datastructures.pose.Pose, goal_pose: pycram.datastructures.pose.Pose, tip_link: str, root_link: str, robot_base_link: str) → giskard_msgs.msg.MoveResult#
Tries to achieve the goal_pose using the chain defined by tip_link and root_link. The approach_pose is used to drive
the robot to a pose close the actual goal pose, the robot_base_link is used to define the base link of the robot.

Parameters:

approach_pose – Pose near the goal_pose
goal_pose – Pose to which the tip_link should be moved
tip_link – The link which should be moved to goal_pose, usually the tool frame
root_link – The start of the link chain which should be used for planning
robot_base_link – The base link of the robot


Returns:
A trajectory calculated to move the tip_link to the goal_pose





pycram.external_interfaces.giskard.projection_joint_goal(goal_poses: typing_extensions.Dict[str, float], allow_collisions: bool = False) → giskard_msgs.msg.MoveResult#
Tries to achieve the joint goal defined by goal_poses, the goal_poses are projected to the closest point on the
robot’s workspace.

Parameters:

goal_poses – Dictionary with joint names and position goals
allow_collisions – If all collisions should be allowed for this goal


Returns:
MoveResult message for this goal





pycram.external_interfaces.giskard.allow_gripper_collision(gripper: str) → None#
Allows the specified gripper to collide with anything.

Parameters:
gripper – The gripper which can collide, either ‘right’, ‘left’ or ‘all’





pycram.external_interfaces.giskard.get_gripper_group_names() → typing_extensions.List[str]#
Returns a list of groups that are registered in giskard which have ‘gripper’ in their name.

Returns:
The list of gripper groups





pycram.external_interfaces.giskard.add_gripper_groups() → None#
Adds the gripper links as a group for collision avoidance.

Returns:
Response of the RegisterGroup Service





pycram.external_interfaces.giskard.avoid_all_collisions() → None#
Will avoid all collision for the next goal.



pycram.external_interfaces.giskard.allow_self_collision() → None#
Will allow the robot collision with itself.



pycram.external_interfaces.giskard.avoid_collisions(object1: pycram.world_concepts.world_object.Object, object2: pycram.world_concepts.world_object.Object) → None#
Will avoid collision between the two objects for the next goal.

Parameters:

object1 – The first World Object
object2 – The second World Object






pycram.external_interfaces.giskard.make_world_body(object: pycram.world_concepts.world_object.Object) → giskard_msgs.msg.WorldBody#
Creates a WorldBody message for a World Object. The WorldBody will contain the URDF of the World Object

Parameters:
object – The World Object

Returns:
A WorldBody message for the World Object





pycram.external_interfaces.giskard.make_point_stamped(point: typing_extensions.List[float]) → geometry_msgs.msg.PointStamped#
Creates a PointStamped message for the given position in world coordinate frame.

Parameters:
point – XYZ coordinates of the point

Returns:
A PointStamped message





pycram.external_interfaces.giskard.make_quaternion_stamped(quaternion: typing_extensions.List[float]) → geometry_msgs.msg.QuaternionStamped#
Creates a QuaternionStamped message for the given quaternion.

Parameters:
quaternion – The quaternion as a list of xyzw

Returns:
A QuaternionStamped message





pycram.external_interfaces.giskard.make_vector_stamped(vector: typing_extensions.List[float]) → geometry_msgs.msg.Vector3Stamped#
Creates a Vector3Stamped message, this is similar to PointStamped but represents a vector instead of a point.

Parameters:
vector – The vector given as xyz in world frame

Returns:
A Vector3Stamped message





pycram.external_interfaces.giskard._pose_to_pose_stamped(pose: pycram.datastructures.pose.Pose) → geometry_msgs.msg.PoseStamped#
Transforms a PyCRAM pose to a PoseStamped message, this is necessary since Giskard NEEDS a PoseStamped message
otherwise it will crash.

Parameters:
pose – PyCRAM pose that should be converted

Returns:
An equivalent PoseStamped message













previous
pycram.external_interfaces




next
pycram.external_interfaces.ik









 Contents
  


Attributes
Functions
Module Contents
giskard_wrapper
giskard_update_service
is_init
number_of_par_goals
giskard_lock
giskard_rlock
par_threads
thread_safe()
init_giskard_interface()
initial_adding_objects()
removing_of_objects()
sync_worlds()
update_pose()
spawn_object()
remove_object()
spawn_urdf()
spawn_mesh()
_manage_par_motion_goals()
achieve_joint_goal()
achieve_cartesian_goal()
achieve_straight_cartesian_goal()
achieve_translation_goal()
achieve_straight_translation_goal()
achieve_rotation_goal()
achieve_align_planes_goal()
achieve_open_container_goal()
achieve_close_container_goal()
projection_cartesian_goal()
projection_cartesian_goal_with_approach()
projection_joint_goal()
allow_gripper_collision()
get_gripper_group_names()
add_gripper_groups()
avoid_all_collisions()
allow_self_collision()
avoid_collisions()
make_world_body()
make_point_stamped()
make_quaternion_stamped()
make_vector_stamped()
_pose_to_pose_stamped()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.specialized_designators.probabilistic.probabilistic_action — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.specialized_designators.probabilistic.probabilistic_action




 Contents 



Classes
Module Contents
Grasp
Grasp.EMPTY_SET
Grasp.FRONT
Grasp.LEFT
Grasp.RIGHT
Grasp.TOP


Arms
Arms.EMPTY_SET
Arms.LEFT
Arms.RIGHT


ProbabilisticAction
ProbabilisticAction.Variables
ProbabilisticAction.policy
ProbabilisticAction.variables
ProbabilisticAction.default_policy()
ProbabilisticAction.sample_to_action()


GaussianCostmapModel
GaussianCostmapModel.distance_to_center
GaussianCostmapModel.variance
GaussianCostmapModel.relative_x
GaussianCostmapModel.relative_y
GaussianCostmapModel.grasp
GaussianCostmapModel.arm
GaussianCostmapModel.center_event()
GaussianCostmapModel.create_model_with_center()
GaussianCostmapModel.create_model()


MoveAndPickUp
MoveAndPickUp.Variables
MoveAndPickUp.Variables.arm
MoveAndPickUp.Variables.grasp
MoveAndPickUp.Variables.relative_x
MoveAndPickUp.Variables.relative_y


MoveAndPickUp.variables
MoveAndPickUp.sample_amount
MoveAndPickUp.object_designator
MoveAndPickUp.arms
MoveAndPickUp.grasps
MoveAndPickUp.default_policy()
MoveAndPickUp.sample_to_action()
MoveAndPickUp.events_from_occupancy_and_visibility_costmap()
MoveAndPickUp.ground_model()
MoveAndPickUp.iter_with_mode()
MoveAndPickUp.__iter__()
MoveAndPickUp.iterate_without_occupancy_costmap()
MoveAndPickUp.query_for_database()
MoveAndPickUp.batch_rollout()












pycram.designators.specialized_designators.probabilistic.probabilistic_action#

Classes#


Grasp


Arms


ProbabilisticAction
Abstract class for probabilistic performables.

GaussianCostmapModel
Class that generates a Gaussian Costmap around the center of an object. The costmap cuts out a square in the middle

MoveAndPickUp
Abstract class for action designator descriptions.






Module Contents#


class pycram.designators.specialized_designators.probabilistic.probabilistic_action.Grasp#
Bases: random_events.set.SetElement


EMPTY_SET#



FRONT = 0#



LEFT = 1#



RIGHT = 2#



TOP = 3#




class pycram.designators.specialized_designators.probabilistic.probabilistic_action.Arms#
Bases: random_events.set.SetElement


EMPTY_SET#



LEFT = 0#



RIGHT = 1#




class pycram.designators.specialized_designators.probabilistic.probabilistic_action.ProbabilisticAction(policy: typing_extensions.Optional[probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit] = None)#
Abstract class for probabilistic performables.


class Variables#
Variables for probabilistic performables.
This inner class serves the purpose to define the variables that are used in a model and make them easily
accessible for the user. The user can access the variables by using the dot notation, e.g. self.variables.x.
The members of this class have to be ordered the same way as the variables in the policy.
The order of the variables in the policy is most likely alphabetical by name.



policy: probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit#
The policy that is used to determine the parameters.



variables: ProbabilisticAction.Variables#
The variables of this action.



abstract default_policy() → probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit#
Create a default policy for the action.

Returns:
The default policy for the action





abstract sample_to_action(sample: typing_extensions.List) → pycram.designators.action_designator.ActionAbstract#
Convert a sample from the policy to a performable action.
:param sample: The sample
:return: The action




class pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel(distance_to_center: float = 0.2, variance: float = 0.5)#
Class that generates a Gaussian Costmap around the center of an object. The costmap cuts out a square in the middle
that has side lengths given by distance_to_center.


distance_to_center: float#
The side length of the cut out square.



variance: float#
The variance of the distributions involved



relative_x#



relative_y#



grasp#



arm#



center_event() → random_events.product_algebra.Event#
Create an event that describes the center of the map.



create_model_with_center() → probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit#
Create a fully factorized gaussian at the center of the map.



create_model() → probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit#
Create a gaussian model that assumes mass everywhere besides the center square.

Returns:
The probabilistic circuit






class pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp(object_designator: pycram.designator.ObjectDesignatorDescription.Object, arms: typing_extensions.List[Arms], grasps: typing_extensions.List[Grasp], policy: typing_extensions.Optional[probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit] = None)#
Bases: pycram.designator.ActionDesignatorDescription, ProbabilisticAction
Abstract class for action designator descriptions.
Descriptions hold possible parameter ranges for action designators.


class Variables#


arm: random_events.variable.Symbolic#



grasp: random_events.variable.Symbolic#



relative_x: random_events.variable.Continuous#



relative_y: random_events.variable.Continuous#




variables: MoveAndPickUp.Variables#



sample_amount: int = 20#
The amount of samples that should be drawn from the policy when iterating over it.



object_designator: pycram.designator.ObjectDesignatorDescription.Object#
The object designator that should be picked up.



arms: typing_extensions.List[Arms]#
The arms that can be used for the pick up.



grasps: typing_extensions.List[Grasp]#
The grasps that can be used for the pick up.



default_policy() → probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit#
Create a default policy for the action.

Returns:
The default policy for the action





sample_to_action(sample: typing_extensions.List) → pycram.designators.action_designator.MoveAndPickUpPerformable#
Convert a sample from the underlying distribution to a performable action.
:param sample: The sample
:return:  action



events_from_occupancy_and_visibility_costmap() → random_events.product_algebra.Event#
Create events from the occupancy and visibility costmap.

Returns:
The events that can be used as evidence for the model.





ground_model(model: typing_extensions.Optional[probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit] = None, event: typing_extensions.Optional[random_events.product_algebra.Event] = None) → probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit#
Ground the model to the current evidence.

Parameters:

model – The model that should be grounded. If None, the policy is used.
event – The events that should be used as evidence. If None, the occupancy costmap is used.


Returns:
The grounded model





iter_with_mode() → typing_extensions.Iterator[pycram.designators.action_designator.MoveAndPickUpPerformable]#
Generate performables by sampling from the mode of the policy conditioned on visibility and occupancy.



__iter__() → typing_extensions.Iterator[pycram.designators.action_designator.MoveAndPickUpPerformable]#
Generate performables by sampling from the policy conditioned on visibility and occupancy.



iterate_without_occupancy_costmap() → typing_extensions.Iterator[pycram.designators.action_designator.MoveAndPickUpPerformable]#
Generate performables by sampling from the policy without conditioning on visibility and occupancy.



static query_for_database()#



batch_rollout()#
Try the policy without conditioning on visibility and occupancy and count the successful tries.

Amount:
The amount of tries














previous
pycram.designators.specialized_designators.probabilistic




next
pycram.designators.action_designator









 Contents
  


Classes
Module Contents
Grasp
Grasp.EMPTY_SET
Grasp.FRONT
Grasp.LEFT
Grasp.RIGHT
Grasp.TOP


Arms
Arms.EMPTY_SET
Arms.LEFT
Arms.RIGHT


ProbabilisticAction
ProbabilisticAction.Variables
ProbabilisticAction.policy
ProbabilisticAction.variables
ProbabilisticAction.default_policy()
ProbabilisticAction.sample_to_action()


GaussianCostmapModel
GaussianCostmapModel.distance_to_center
GaussianCostmapModel.variance
GaussianCostmapModel.relative_x
GaussianCostmapModel.relative_y
GaussianCostmapModel.grasp
GaussianCostmapModel.arm
GaussianCostmapModel.center_event()
GaussianCostmapModel.create_model_with_center()
GaussianCostmapModel.create_model()


MoveAndPickUp
MoveAndPickUp.Variables
MoveAndPickUp.Variables.arm
MoveAndPickUp.Variables.grasp
MoveAndPickUp.Variables.relative_x
MoveAndPickUp.Variables.relative_y


MoveAndPickUp.variables
MoveAndPickUp.sample_amount
MoveAndPickUp.object_designator
MoveAndPickUp.arms
MoveAndPickUp.grasps
MoveAndPickUp.default_policy()
MoveAndPickUp.sample_to_action()
MoveAndPickUp.events_from_occupancy_and_visibility_costmap()
MoveAndPickUp.ground_model()
MoveAndPickUp.iter_with_mode()
MoveAndPickUp.__iter__()
MoveAndPickUp.iterate_without_occupancy_costmap()
MoveAndPickUp.query_for_database()
MoveAndPickUp.batch_rollout()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.specialized_designators.probabilistic — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.specialized_designators.probabilistic




 Contents 



Submodules








pycram.designators.specialized_designators.probabilistic#

Submodules#


pycram.designators.specialized_designators.probabilistic.probabilistic_action












previous
pycram.designators.specialized_designators.location.giskard_location




next
pycram.designators.specialized_designators.probabilistic.probabilistic_action









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.specialized_designators.location — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.specialized_designators.location




 Contents 



Submodules








pycram.designators.specialized_designators.location#

Submodules#


pycram.designators.specialized_designators.location.database_location
pycram.designators.specialized_designators.location.giskard_location












previous
pycram.designators.specialized_designators.action.dual_arm_pickup_action




next
pycram.designators.specialized_designators.location.database_location









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.specialized_designators.location.giskard_location — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.specialized_designators.location.giskard_location




 Contents 



Classes
Module Contents
GiskardLocation
GiskardLocation.__iter__()












pycram.designators.specialized_designators.location.giskard_location#

Classes#


GiskardLocation







Module Contents#


class pycram.designators.specialized_designators.location.giskard_location.GiskardLocation(target: typing_extensions.Union[pycram.datastructures.pose.Pose, pycram.designators.object_designator.ObjectDesignatorDescription.Object], reachable_for: typing_extensions.Optional[pycram.designators.object_designator.ObjectDesignatorDescription.Object] = None, visible_for: typing_extensions.Optional[pycram.designators.object_designator.ObjectDesignatorDescription.Object] = None, reachable_arm: typing_extensions.Optional[pycram.datastructures.enums.Arms] = None, resolver: typing_extensions.Optional[typing_extensions.Callable] = None)#
Bases: pycram.designators.location_designator.CostmapLocation
‘
Specialization version of the CostmapLocation which uses Giskard to solve for a full-body IK solution. This
designator is especially useful for robots which lack a degree of freedom and therefore need to use the base to
manipulate the environment effectively.


__iter__() → pycram.designators.location_designator.CostmapLocation.Location#
Uses Giskard to perform full body ik solving to get the pose of a robot at which it is able to reach a certain point.

Yield:
An instance of CostmapLocation.Location with a pose from which the robot can reach the target














previous
pycram.designators.specialized_designators.location.database_location




next
pycram.designators.specialized_designators.probabilistic









 Contents
  


Classes
Module Contents
GiskardLocation
GiskardLocation.__iter__()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.specialized_designators.location.database_location — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.specialized_designators.location.database_location




 Contents 



Classes
Module Contents
Location
Location.pose
Location.reachable_arm
Location.torso_height
Location.grasp


AbstractCostmapLocation
AbstractCostmapLocation.create_occupancy_rectangles()


DatabaseCostmapLocation
DatabaseCostmapLocation.session
DatabaseCostmapLocation.select_statement()
DatabaseCostmapLocation.create_query_from_occupancy_costmap()
DatabaseCostmapLocation.sample_to_location()
DatabaseCostmapLocation.__iter__()












pycram.designators.specialized_designators.location.database_location#

Classes#


Location
A location that is described by a pose, a reachable arm, a torso height and a grasp.

AbstractCostmapLocation
Abstract Class for JPT and Database costmaps.

DatabaseCostmapLocation
Class that represents costmap locations from a given Database.






Module Contents#


class pycram.designators.specialized_designators.location.database_location.Location#
Bases: pycram.designator.LocationDesignatorDescription.Location
A location that is described by a pose, a reachable arm, a torso height and a grasp.


pose: pycram.datastructures.pose.Pose#



reachable_arm: str#



torso_height: float#



grasp: str#




class pycram.designators.specialized_designators.location.database_location.AbstractCostmapLocation(target, reachable_for=None, reachable_arm=None)#
Bases: pycram.designators.location_designator.CostmapLocation
Abstract Class for JPT and Database costmaps.


create_occupancy_rectangles() → typing_extensions.List[pycram.costmaps.Rectangle]#

Returns:
A list of rectangles that represent the occupied space of the target object.






class pycram.designators.specialized_designators.location.database_location.DatabaseCostmapLocation(target, session: sqlalchemy.orm.Session = None, reachable_for=None, reachable_arm=None)#
Bases: AbstractCostmapLocation
Class that represents costmap locations from a given Database.
The database has to have a schema that is compatible with the pycram.orm package.


session#



static select_statement(view: typing_extensions.Type[pycram.orm.views.PickUpWithContextView]) → sqlalchemy.Select#



create_query_from_occupancy_costmap() → sqlalchemy.Select#
Create a query that queries all relative robot positions from an object that are not occluded using an
OccupancyCostmap.



sample_to_location(sample: sqlalchemy.engine.row.Row) → Location#
Convert a database row to a costmap location.

Parameters:
sample – The database row.

Returns:
The costmap location





__iter__() → Location#
Generates positions for a given set of constrains from a costmap and returns
them. The generation is based of a costmap which itself is the product of
merging costmaps, each for a different purpose. In any case an occupancy costmap
is used as the base, then according to the given constrains a visibility or
gaussian costmap is also merged with this. Once the costmaps are merged,
a generator generates pose candidates from the costmap. Each pose candidate
is then validated against the constraints given by the designator if all validators
pass the pose is considered valid and yielded.

Yield:
An instance of CostmapLocation.Location with a valid position that satisfies the given constraints














previous
pycram.designators.specialized_designators.location




next
pycram.designators.specialized_designators.location.giskard_location









 Contents
  


Classes
Module Contents
Location
Location.pose
Location.reachable_arm
Location.torso_height
Location.grasp


AbstractCostmapLocation
AbstractCostmapLocation.create_occupancy_rectangles()


DatabaseCostmapLocation
DatabaseCostmapLocation.session
DatabaseCostmapLocation.select_statement()
DatabaseCostmapLocation.create_query_from_occupancy_costmap()
DatabaseCostmapLocation.sample_to_location()
DatabaseCostmapLocation.__iter__()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.specialized_designators — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.specialized_designators




 Contents 



Subpackages








pycram.designators.specialized_designators#

Subpackages#


pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic












previous
pycram.designators




next
pycram.designators.specialized_designators.action









 Contents
  


Subpackages








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.specialized_designators.action — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.specialized_designators.action




 Contents 



Submodules








pycram.designators.specialized_designators.action#

Submodules#


pycram.designators.specialized_designators.action.dual_arm_pickup_action












previous
pycram.designators.specialized_designators




next
pycram.designators.specialized_designators.action.dual_arm_pickup_action









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.specialized_designators.action.dual_arm_pickup_action — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.specialized_designators.action.dual_arm_pickup_action




 Contents 



Classes
Module Contents
DualArmPickupAction
DualArmPickupAction.object_designator_description
DualArmPickupAction.left_gripper
DualArmPickupAction.right_gripper
DualArmPickupAction.gripper_list
DualArmPickupAction.ground()












pycram.designators.specialized_designators.action.dual_arm_pickup_action#

Classes#


DualArmPickupAction
Specialization version of the PickUpAction designator which uses heuristics to solve for a dual pickup solution.






Module Contents#


class pycram.designators.specialized_designators.action.dual_arm_pickup_action.DualArmPickupAction(object_designator_description: typing_extensions.Union[pycram.designator.ObjectDesignatorDescription, pycram.designator.ObjectDesignatorDescription.Object], grasps: typing_extensions.List[pycram.datastructures.enums.Grasp], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designators.action_designator.PickUpAction
Specialization version of the PickUpAction designator which uses heuristics to solve for a dual pickup solution.


object_designator_description: typing_extensions.Union[pycram.designator.ObjectDesignatorDescription, pycram.designator.ObjectDesignatorDescription.Object]#



left_gripper#



right_gripper#



gripper_list: typing_extensions.List[pycram.robot_description.KinematicChainDescription]#



ground() → pycram.designators.action_designator.PickUpActionPerformable#
Default specialized_designators, returns a performable designator with the first entries from the lists of possible parameter.

Returns:
A performable designator














previous
pycram.designators.specialized_designators.action




next
pycram.designators.specialized_designators.location









 Contents
  


Classes
Module Contents
DualArmPickupAction
DualArmPickupAction.object_designator_description
DualArmPickupAction.left_gripper
DualArmPickupAction.right_gripper
DualArmPickupAction.gripper_list
DualArmPickupAction.ground()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.object_designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.object_designator




 Contents 



Classes
Module Contents
BelieveObject
BelieveObject.Object
BelieveObject.Object.to_sql()
BelieveObject.Object.insert()




ObjectPart
ObjectPart.Object
ObjectPart.Object.part_pose
ObjectPart.Object.to_sql()
ObjectPart.Object.insert()


ObjectPart.type
ObjectPart.names
ObjectPart.part_of
ObjectPart.ground()
ObjectPart.__iter__()


LocatedObject
LocatedObject.Object
LocatedObject.Object.reference_frame
LocatedObject.Object.timestamp


LocatedObject.reference_frames
LocatedObject.timestamps


RealObject
RealObject.Object
RealObject.Object.pose


RealObject.types
RealObject.names
RealObject.world_object
RealObject.__iter__()












pycram.designators.object_designator#

Classes#


BelieveObject
Description for Objects that are only believed in.

ObjectPart
Object Designator Descriptions for Objects that are part of some other object.

LocatedObject
Description for KnowRob located objects.

RealObject
Object designator representing an object in the real world, when resolving this object designator description ]






Module Contents#


class pycram.designators.object_designator.BelieveObject(names: typing_extensions.Optional[typing_extensions.List[str]] = None, types: typing_extensions.Optional[typing_extensions.List[pycram.datastructures.enums.ObjectType]] = None, resolver: typing_extensions.Optional[typing_extensions.Callable] = None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.external_interfaces.robokudo.ObjectDesignatorDescription
Description for Objects that are only believed in.


class Object#
Bases: pycram.external_interfaces.robokudo.ObjectDesignatorDescription.Object
Concrete object that is believed in.


to_sql() → pycram.orm.object_designator.BelieveObject#
Create an ORM object that corresponds to this description.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.session.Session) → pycram.orm.object_designator.BelieveObject#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:
session – Session with a database that is used to add and commit the objects

Returns:
The completely instanced ORM object







class pycram.designators.object_designator.ObjectPart(names: pycram.external_interfaces.robokudo.List[str], part_of: pycram.external_interfaces.robokudo.ObjectDesignatorDescription.Object, type: pycram.external_interfaces.robokudo.Optional[str] = None, resolver: pycram.external_interfaces.robokudo.Optional[pycram.external_interfaces.robokudo.Callable] = None)#
Bases: pycram.external_interfaces.robokudo.ObjectDesignatorDescription
Object Designator Descriptions for Objects that are part of some other object.


class Object#
Bases: pycram.external_interfaces.robokudo.ObjectDesignatorDescription.Object
A single element that fits the description.


part_pose: pycram.external_interfaces.robokudo.Pose#



to_sql() → pycram.orm.object_designator.ObjectPart#
Create an ORM object that corresponds to this description.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.session.Session) → pycram.orm.object_designator.ObjectPart#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:
session – Session with a database that is used to add and commit the objects

Returns:
The completely instanced ORM object






type: pycram.external_interfaces.robokudo.Optional[str]#



names: pycram.external_interfaces.robokudo.Optional[pycram.external_interfaces.robokudo.List[str]]#



part_of#



ground() → Object#
Default specialized_designators, returns the first result of the iterator of this instance.

Returns:
A resolved object designator





__iter__()#
Iterates through every possible solution for the given input parameter.

Yield:
A resolved Object designator






class pycram.designators.object_designator.LocatedObject(names: pycram.external_interfaces.robokudo.List[str], types: pycram.external_interfaces.robokudo.List[str], reference_frames: pycram.external_interfaces.robokudo.List[str], timestamps: pycram.external_interfaces.robokudo.List[float], resolver: pycram.external_interfaces.robokudo.Optional[pycram.external_interfaces.robokudo.Callable] = None, ontology_concept_holders: pycram.external_interfaces.robokudo.Optional[pycram.external_interfaces.robokudo.List[owlready2.Thing]] = None)#
Bases: pycram.external_interfaces.robokudo.ObjectDesignatorDescription
Description for KnowRob located objects.
Currently has no specialized_designators


class Object#
Bases: pycram.external_interfaces.robokudo.ObjectDesignatorDescription.Object
A single element that fits the description.


reference_frame: str#
Reference frame in which the position is given



timestamp: float#
Timestamp at which the position was valid




reference_frames: pycram.external_interfaces.robokudo.List[str]#



timestamps: pycram.external_interfaces.robokudo.List[float]#




class pycram.designators.object_designator.RealObject(names: pycram.external_interfaces.robokudo.Optional[pycram.external_interfaces.robokudo.List[str]] = None, types: pycram.external_interfaces.robokudo.Optional[pycram.external_interfaces.robokudo.List[str]] = None, world_object: pycram.world_concepts.world_object.Object = None, resolver: pycram.external_interfaces.robokudo.Optional[pycram.external_interfaces.robokudo.Callable] = None)#
Bases: pycram.external_interfaces.robokudo.ObjectDesignatorDescription
Object designator representing an object in the real world, when resolving this object designator description ]
RoboKudo is queried to perceive an object fitting the given criteria. Afterward the specialized_designators tries to match
the found object to an Object in the World.


class Object#
Bases: pycram.external_interfaces.robokudo.ObjectDesignatorDescription.Object
A single element that fits the description.


pose: pycram.external_interfaces.robokudo.Pose#
Pose of the perceived object




types: pycram.external_interfaces.robokudo.Optional[pycram.external_interfaces.robokudo.List[str]]#



names: pycram.external_interfaces.robokudo.Optional[pycram.external_interfaces.robokudo.List[str]]#



world_object: pycram.world_concepts.world_object.Object#



__iter__()#
Queries RoboKudo for objects that fit the description and then iterates over all World objects that have
the same type to match a World object to the real object.

Yield:
A resolved object designator with reference world object














previous
pycram.designators.motion_designator




next
pycram.external_interfaces









 Contents
  


Classes
Module Contents
BelieveObject
BelieveObject.Object
BelieveObject.Object.to_sql()
BelieveObject.Object.insert()




ObjectPart
ObjectPart.Object
ObjectPart.Object.part_pose
ObjectPart.Object.to_sql()
ObjectPart.Object.insert()


ObjectPart.type
ObjectPart.names
ObjectPart.part_of
ObjectPart.ground()
ObjectPart.__iter__()


LocatedObject
LocatedObject.Object
LocatedObject.Object.reference_frame
LocatedObject.Object.timestamp


LocatedObject.reference_frames
LocatedObject.timestamps


RealObject
RealObject.Object
RealObject.Object.pose


RealObject.types
RealObject.names
RealObject.world_object
RealObject.__iter__()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.motion_designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.motion_designator




 Contents 



Classes
Module Contents
MoveMotion
MoveMotion.target
MoveMotion.perform()
MoveMotion.to_sql()
MoveMotion.insert()


MoveTCPMotion
MoveTCPMotion.target
MoveTCPMotion.arm
MoveTCPMotion.allow_gripper_collision
MoveTCPMotion.perform()
MoveTCPMotion.to_sql()
MoveTCPMotion.insert()


LookingMotion
LookingMotion.target
LookingMotion.perform()
LookingMotion.to_sql()
LookingMotion.insert()


MoveGripperMotion
MoveGripperMotion.motion
MoveGripperMotion.gripper
MoveGripperMotion.allow_gripper_collision
MoveGripperMotion.perform()
MoveGripperMotion.to_sql()
MoveGripperMotion.insert()


DetectingMotion
DetectingMotion.object_type
DetectingMotion.perform()
DetectingMotion.to_sql()
DetectingMotion.insert()


MoveArmJointsMotion
MoveArmJointsMotion.left_arm_poses
MoveArmJointsMotion.right_arm_poses
MoveArmJointsMotion.perform()
MoveArmJointsMotion.to_sql()
MoveArmJointsMotion.insert()


WorldStateDetectingMotion
WorldStateDetectingMotion.object_type
WorldStateDetectingMotion.perform()
WorldStateDetectingMotion.to_sql()
WorldStateDetectingMotion.insert()


MoveJointsMotion
MoveJointsMotion.names
MoveJointsMotion.positions
MoveJointsMotion.perform()
MoveJointsMotion.to_sql()
MoveJointsMotion.insert()


OpeningMotion
OpeningMotion.object_part
OpeningMotion.arm
OpeningMotion.perform()
OpeningMotion.to_sql()
OpeningMotion.insert()


ClosingMotion
ClosingMotion.object_part
ClosingMotion.arm
ClosingMotion.perform()
ClosingMotion.to_sql()
ClosingMotion.insert()


TalkingMotion
TalkingMotion.cmd
TalkingMotion.perform()
TalkingMotion.to_sql()
TalkingMotion.insert()












pycram.designators.motion_designator#

Classes#


MoveMotion
Moves the robot to a designated location

MoveTCPMotion
Moves the Tool center point (TCP) of the robot

LookingMotion
Lets the robot look at a point

MoveGripperMotion
Opens or closes the gripper

DetectingMotion
Tries to detect an object in the FOV of the robot

MoveArmJointsMotion
Moves the joints of each arm into the given position

WorldStateDetectingMotion
Detects an object based on the world state.

MoveJointsMotion
Moves any joint on the robot

OpeningMotion
Designator for opening container

ClosingMotion
Designator for closing a container

TalkingMotion
Talking Motion, lets the robot say a sentence.






Module Contents#


class pycram.designators.motion_designator.MoveMotion#
Bases: pycram.designator.BaseMotion
Moves the robot to a designated location


target: pycram.datastructures.pose.Pose#
Location to which the robot should be moved



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.MoveMotion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session, *args, **kwargs) → pycram.orm.motion_designator.MoveMotion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.






class pycram.designators.motion_designator.MoveTCPMotion#
Bases: pycram.designator.BaseMotion
Moves the Tool center point (TCP) of the robot


target: pycram.datastructures.pose.Pose#
Target pose to which the TCP should be moved



arm: pycram.datastructures.enums.Arms#
Arm with the TCP that should be moved to the target



allow_gripper_collision: typing_extensions.Optional[bool] = None#
If the gripper can collide with something



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.MoveTCPMotion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.Session, *args, **kwargs) → pycram.orm.motion_designator.MoveTCPMotion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.






class pycram.designators.motion_designator.LookingMotion#
Bases: pycram.designator.BaseMotion
Lets the robot look at a point


target: pycram.datastructures.pose.Pose#



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.LookingMotion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.Session, *args, **kwargs) → pycram.orm.motion_designator.LookingMotion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.






class pycram.designators.motion_designator.MoveGripperMotion#
Bases: pycram.designator.BaseMotion
Opens or closes the gripper


motion: pycram.datastructures.enums.GripperState#
Motion that should be performed, either ‘open’ or ‘close’



gripper: pycram.datastructures.enums.Arms#
Name of the gripper that should be moved



allow_gripper_collision: typing_extensions.Optional[bool] = None#
If the gripper is allowed to collide with something



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.MoveGripperMotion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.Session, *args, **kwargs) → pycram.orm.motion_designator.MoveGripperMotion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.






class pycram.designators.motion_designator.DetectingMotion#
Bases: pycram.designator.BaseMotion
Tries to detect an object in the FOV of the robot


object_type: pycram.datastructures.enums.ObjectType#
Type of the object that should be detected



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.DetectingMotion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.Session, *args, **kwargs) → pycram.orm.motion_designator.DetectingMotion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.






class pycram.designators.motion_designator.MoveArmJointsMotion#
Bases: pycram.designator.BaseMotion
Moves the joints of each arm into the given position


left_arm_poses: typing_extensions.Optional[typing_extensions.Dict[str, float]] = None#
Target positions for the left arm joints



right_arm_poses: typing_extensions.Optional[typing_extensions.Dict[str, float]] = None#
Target positions for the right arm joints



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.Motion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.Session, *args, **kwargs) → pycram.orm.motion_designator.Motion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.






class pycram.designators.motion_designator.WorldStateDetectingMotion#
Bases: pycram.designator.BaseMotion
Detects an object based on the world state.


object_type: pycram.datastructures.enums.ObjectType#
Object type that should be detected



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.Motion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.Session, *args, **kwargs) → pycram.orm.motion_designator.Motion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.






class pycram.designators.motion_designator.MoveJointsMotion#
Bases: pycram.designator.BaseMotion
Moves any joint on the robot


names: list#
List of joint names that should be moved



positions: list#
Target positions of joints, should correspond to the list of names



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.Motion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.Session, *args, **kwargs) → pycram.orm.motion_designator.Motion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.






class pycram.designators.motion_designator.OpeningMotion#
Bases: pycram.designator.BaseMotion
Designator for opening container


object_part: pycram.designators.object_designator.ObjectPart.Object#
Object designator for the drawer handle



arm: pycram.datastructures.enums.Arms#
Arm that should be used



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.OpeningMotion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.Session, *args, **kwargs) → pycram.orm.motion_designator.OpeningMotion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.






class pycram.designators.motion_designator.ClosingMotion#
Bases: pycram.designator.BaseMotion
Designator for closing a container


object_part: pycram.designators.object_designator.ObjectPart.Object#
Object designator for the drawer handle



arm: pycram.datastructures.enums.Arms#
Arm that should be used



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.ClosingMotion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.Session, *args, **kwargs) → pycram.orm.motion_designator.ClosingMotion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.






class pycram.designators.motion_designator.TalkingMotion#
Bases: pycram.designator.BaseMotion
Talking Motion, lets the robot say a sentence.


cmd: str#
Talking Motion, let the robot say a sentence.



perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



to_sql() → pycram.orm.motion_designator.Motion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.Session, *args, **kwargs) → pycram.orm.motion_designator.Motion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.














previous
pycram.designators.location_designator




next
pycram.designators.object_designator









 Contents
  


Classes
Module Contents
MoveMotion
MoveMotion.target
MoveMotion.perform()
MoveMotion.to_sql()
MoveMotion.insert()


MoveTCPMotion
MoveTCPMotion.target
MoveTCPMotion.arm
MoveTCPMotion.allow_gripper_collision
MoveTCPMotion.perform()
MoveTCPMotion.to_sql()
MoveTCPMotion.insert()


LookingMotion
LookingMotion.target
LookingMotion.perform()
LookingMotion.to_sql()
LookingMotion.insert()


MoveGripperMotion
MoveGripperMotion.motion
MoveGripperMotion.gripper
MoveGripperMotion.allow_gripper_collision
MoveGripperMotion.perform()
MoveGripperMotion.to_sql()
MoveGripperMotion.insert()


DetectingMotion
DetectingMotion.object_type
DetectingMotion.perform()
DetectingMotion.to_sql()
DetectingMotion.insert()


MoveArmJointsMotion
MoveArmJointsMotion.left_arm_poses
MoveArmJointsMotion.right_arm_poses
MoveArmJointsMotion.perform()
MoveArmJointsMotion.to_sql()
MoveArmJointsMotion.insert()


WorldStateDetectingMotion
WorldStateDetectingMotion.object_type
WorldStateDetectingMotion.perform()
WorldStateDetectingMotion.to_sql()
WorldStateDetectingMotion.insert()


MoveJointsMotion
MoveJointsMotion.names
MoveJointsMotion.positions
MoveJointsMotion.perform()
MoveJointsMotion.to_sql()
MoveJointsMotion.insert()


OpeningMotion
OpeningMotion.object_part
OpeningMotion.arm
OpeningMotion.perform()
OpeningMotion.to_sql()
OpeningMotion.insert()


ClosingMotion
ClosingMotion.object_part
ClosingMotion.arm
ClosingMotion.perform()
ClosingMotion.to_sql()
ClosingMotion.insert()


TalkingMotion
TalkingMotion.cmd
TalkingMotion.perform()
TalkingMotion.to_sql()
TalkingMotion.insert()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.location_designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.location_designator




 Contents 



Classes
Module Contents
Location
Location.Location
Location.pose
Location.ground()


ObjectRelativeLocation
ObjectRelativeLocation.Location
ObjectRelativeLocation.Location.relative_pose
ObjectRelativeLocation.Location.reference_object


ObjectRelativeLocation.relative_pose
ObjectRelativeLocation.reference_object
ObjectRelativeLocation.ground()
ObjectRelativeLocation.__iter__()


CostmapLocation
CostmapLocation.Location
CostmapLocation.Location.reachable_arms


CostmapLocation.target
CostmapLocation.reachable_for
CostmapLocation.visible_for
CostmapLocation.reachable_arm
CostmapLocation.ground()
CostmapLocation.__iter__()


AccessingLocation
AccessingLocation.Location
AccessingLocation.Location.arms


AccessingLocation.handle
AccessingLocation.robot
AccessingLocation.ground()
AccessingLocation.__iter__()


SemanticCostmapLocation
SemanticCostmapLocation.Location
SemanticCostmapLocation.urdf_link_name
SemanticCostmapLocation.part_of
SemanticCostmapLocation.for_object
SemanticCostmapLocation.ground()
SemanticCostmapLocation.__iter__()












pycram.designators.location_designator#

Classes#


Location
Default location designator which only wraps a pose.

ObjectRelativeLocation
Location relative to an object

CostmapLocation
Uses Costmaps to create locations for complex constrains

AccessingLocation
Location designator which describes poses used for opening drawers

SemanticCostmapLocation
Locations over semantic entities, like a table surface






Module Contents#


class pycram.designators.location_designator.Location(pose: pycram.datastructures.pose.Pose, resolver=None)#
Bases: pycram.designator.LocationDesignatorDescription
Default location designator which only wraps a pose.


class Location#
Bases: pycram.designator.LocationDesignatorDescription.Location
Resolved location that represents a specific point in the world which satisfies the constraints of the location
designator description.



pose: pycram.datastructures.pose.Pose#



ground() → Location#
Default specialized_designators which returns a resolved designator which contains the pose given in init.

Returns:
A resolved designator






class pycram.designators.location_designator.ObjectRelativeLocation(relative_pose: pycram.datastructures.pose.Pose = None, reference_object: pycram.designators.object_designator.ObjectDesignatorDescription = None, resolver=None)#
Bases: pycram.designator.LocationDesignatorDescription
Location relative to an object


class Location#
Bases: pycram.designator.LocationDesignatorDescription.Location
Resolved location that represents a specific point in the world which satisfies the constraints of the location
designator description.


relative_pose: pycram.datastructures.pose.Pose#
Pose relative to the object



reference_object: pycram.designators.object_designator.ObjectDesignatorDescription.Object#
Object to which the pose is relative




relative_pose: pycram.datastructures.pose.Pose#



reference_object: pycram.designators.object_designator.ObjectDesignatorDescription#



ground() → Location#
Default specialized_designators which returns a resolved location for description input. Resolved location is the first result
of the iteration of this instance.

Returns:
A resolved location





__iter__() → typing_extensions.Iterable[Location]#
Iterates over all possible solutions for a resolved location that is relative to the given object.

Yield:
An instance of ObjectRelativeLocation.Location with the relative pose






class pycram.designators.location_designator.CostmapLocation(target: typing_extensions.Union[pycram.datastructures.pose.Pose, pycram.designators.object_designator.ObjectDesignatorDescription.Object], reachable_for: typing_extensions.Optional[pycram.designators.object_designator.ObjectDesignatorDescription.Object] = None, visible_for: typing_extensions.Optional[pycram.designators.object_designator.ObjectDesignatorDescription.Object] = None, reachable_arm: typing_extensions.Optional[pycram.datastructures.enums.Arms] = None, resolver: typing_extensions.Optional[typing_extensions.Callable] = None)#
Bases: pycram.designator.LocationDesignatorDescription
Uses Costmaps to create locations for complex constrains


class Location#
Bases: pycram.designator.LocationDesignatorDescription.Location
Resolved location that represents a specific point in the world which satisfies the constraints of the location
designator description.


reachable_arms: typing_extensions.List[pycram.datastructures.enums.Arms]#
List of arms with which the pose can be reached, is only used when the ‘rechable_for’ parameter is used




target: typing_extensions.Union[pycram.datastructures.pose.Pose, pycram.designators.object_designator.ObjectDesignatorDescription.Object]#



reachable_for: pycram.designators.object_designator.ObjectDesignatorDescription.Object#



visible_for: pycram.designators.object_designator.ObjectDesignatorDescription.Object#



reachable_arm: typing_extensions.Optional[pycram.datastructures.enums.Arms]#



ground() → Location#
Default specialized_designators which returns the first result from the iterator of this instance.

Returns:
A resolved location





__iter__()#
Generates positions for a given set of constrains from a costmap and returns
them. The generation is based of a costmap which itself is the product of
merging costmaps, each for a different purpose. In any case an occupancy costmap
is used as the base, then according to the given constrains a visibility or
gaussian costmap is also merged with this. Once the costmaps are merged,
a generator generates pose candidates from the costmap. Each pose candidate
is then validated against the constraints given by the designator if all validators
pass the pose is considered valid and yielded.

Yield:
An instance of CostmapLocation.Location with a valid position that satisfies the given constraints






class pycram.designators.location_designator.AccessingLocation(handle_desig: pycram.designators.object_designator.ObjectPart.Object, robot_desig: pycram.designators.object_designator.ObjectDesignatorDescription.Object, resolver=None)#
Bases: pycram.designator.LocationDesignatorDescription
Location designator which describes poses used for opening drawers


class Location#
Bases: pycram.designator.LocationDesignatorDescription.Location
Resolved location that represents a specific point in the world which satisfies the constraints of the location
designator description.


arms: typing_extensions.List[pycram.datastructures.enums.Arms]#
List of arms that can be used to for accessing from this pose




handle: pycram.designators.object_designator.ObjectPart.Object#



robot: pycram.designators.object_designator.ObjectDesignatorDescription.Object#



ground() → Location#
Default specialized_designators for this location designator, just returns the first element from the iteration

Returns:
A location designator for a pose from which the drawer can be opened





__iter__() → Location#
Creates poses from which the robot can open the drawer specified by the ObjectPart designator describing the
handle. Poses are validated by checking if the robot can grasp the handle while the drawer is closed and if
the handle can be grasped if the drawer is open.

Yield:
A location designator containing the pose and the arms that can be used.






class pycram.designators.location_designator.SemanticCostmapLocation(urdf_link_name, part_of, for_object=None, resolver=None)#
Bases: pycram.designator.LocationDesignatorDescription
Locations over semantic entities, like a table surface


class Location#
Bases: pycram.designator.LocationDesignatorDescription.Location
Resolved location that represents a specific point in the world which satisfies the constraints of the location
designator description.



urdf_link_name: str#



part_of: pycram.designators.object_designator.ObjectDesignatorDescription.Object#



for_object: typing_extensions.Optional[pycram.designators.object_designator.ObjectDesignatorDescription.Object]#



ground() → Location#
Default specialized_designators which returns the first element of the iterator of this instance.

Returns:
A resolved location





__iter__()#
Creates a costmap on top of a link of an Object and creates positions from it. If there is a specific Object for
which the position should be found, a height offset will be calculated which ensures that the bottom of the Object
is at the position in the Costmap and not the origin of the Object which is usually in the centre of the Object.

Yield:
An instance of SemanticCostmapLocation.Location with the found valid position of the Costmap.














previous
pycram.designators.action_designator




next
pycram.designators.motion_designator









 Contents
  


Classes
Module Contents
Location
Location.Location
Location.pose
Location.ground()


ObjectRelativeLocation
ObjectRelativeLocation.Location
ObjectRelativeLocation.Location.relative_pose
ObjectRelativeLocation.Location.reference_object


ObjectRelativeLocation.relative_pose
ObjectRelativeLocation.reference_object
ObjectRelativeLocation.ground()
ObjectRelativeLocation.__iter__()


CostmapLocation
CostmapLocation.Location
CostmapLocation.Location.reachable_arms


CostmapLocation.target
CostmapLocation.reachable_for
CostmapLocation.visible_for
CostmapLocation.reachable_arm
CostmapLocation.ground()
CostmapLocation.__iter__()


AccessingLocation
AccessingLocation.Location
AccessingLocation.Location.arms


AccessingLocation.handle
AccessingLocation.robot
AccessingLocation.ground()
AccessingLocation.__iter__()


SemanticCostmapLocation
SemanticCostmapLocation.Location
SemanticCostmapLocation.urdf_link_name
SemanticCostmapLocation.part_of
SemanticCostmapLocation.for_object
SemanticCostmapLocation.ground()
SemanticCostmapLocation.__iter__()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators




 Contents 



Subpackages
Submodules








pycram.designators#

Subpackages#


pycram.designators.specialized_designators




Submodules#


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator












previous
pycram.datastructures.world




next
pycram.designators.specialized_designators









 Contents
  


Subpackages
Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designators.action_designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designators.action_designator




 Contents 



Classes
Module Contents
MoveTorsoAction
MoveTorsoAction.positions
MoveTorsoAction.ground()
MoveTorsoAction.__iter__()


SetGripperAction
SetGripperAction.grippers
SetGripperAction.motions
SetGripperAction.ground()
SetGripperAction.__iter__()


ReleaseAction
ReleaseAction.grippers
ReleaseAction.object_designator_description
ReleaseAction.ground()


GripAction
GripAction.grippers
GripAction.object_designator_description
GripAction.efforts
GripAction.ground()


ParkArmsAction
ParkArmsAction.arms
ParkArmsAction.ground()


PickUpAction
PickUpAction.object_designator_description
PickUpAction.arms
PickUpAction.grasps
PickUpAction.ground()


PlaceAction
PlaceAction.object_designator_description
PlaceAction.target_locations
PlaceAction.arms
PlaceAction.ground()


NavigateAction
NavigateAction.target_locations
NavigateAction.ground()


TransportAction
TransportAction.object_designator_description
TransportAction.arms
TransportAction.target_locations
TransportAction.ground()


LookAtAction
LookAtAction.targets
LookAtAction.ground()


DetectAction
DetectAction.object_designator_description
DetectAction.ground()


OpenAction
OpenAction.object_designator_description
OpenAction.arms
OpenAction.ground()


CloseAction
CloseAction.object_designator_description
CloseAction.arms
CloseAction.ground()


GraspingAction
GraspingAction.arms
GraspingAction.object_description
GraspingAction.ground()


ActionAbstract
ActionAbstract.orm_class
ActionAbstract.perform()
ActionAbstract.to_sql()
ActionAbstract.insert()


MoveTorsoActionPerformable
MoveTorsoActionPerformable.position
MoveTorsoActionPerformable.orm_class
MoveTorsoActionPerformable.perform()


SetGripperActionPerformable
SetGripperActionPerformable.gripper
SetGripperActionPerformable.motion
SetGripperActionPerformable.orm_class
SetGripperActionPerformable.perform()


ReleaseActionPerformable
ReleaseActionPerformable.gripper
ReleaseActionPerformable.object_designator
ReleaseActionPerformable.perform()


GripActionPerformable
GripActionPerformable.gripper
GripActionPerformable.object_designator
GripActionPerformable.effort
GripActionPerformable.perform()


ParkArmsActionPerformable
ParkArmsActionPerformable.arm
ParkArmsActionPerformable.orm_class
ParkArmsActionPerformable.perform()


PickUpActionPerformable
PickUpActionPerformable.object_designator
PickUpActionPerformable.arm
PickUpActionPerformable.grasp
PickUpActionPerformable.object_at_execution
PickUpActionPerformable.orm_class
PickUpActionPerformable.perform()


PlaceActionPerformable
PlaceActionPerformable.object_designator
PlaceActionPerformable.arm
PlaceActionPerformable.target_location
PlaceActionPerformable.orm_class
PlaceActionPerformable.perform()


NavigateActionPerformable
NavigateActionPerformable.target_location
NavigateActionPerformable.orm_class
NavigateActionPerformable.perform()


TransportActionPerformable
TransportActionPerformable.object_designator
TransportActionPerformable.arm
TransportActionPerformable.target_location
TransportActionPerformable.orm_class
TransportActionPerformable.perform()


LookAtActionPerformable
LookAtActionPerformable.target
LookAtActionPerformable.orm_class
LookAtActionPerformable.perform()


DetectActionPerformable
DetectActionPerformable.object_designator
DetectActionPerformable.orm_class
DetectActionPerformable.perform()


OpenActionPerformable
OpenActionPerformable.object_designator
OpenActionPerformable.arm
OpenActionPerformable.orm_class
OpenActionPerformable.perform()


CloseActionPerformable
CloseActionPerformable.object_designator
CloseActionPerformable.arm
CloseActionPerformable.orm_class
CloseActionPerformable.perform()


GraspingActionPerformable
GraspingActionPerformable.arm
GraspingActionPerformable.object_desig
GraspingActionPerformable.orm_class
GraspingActionPerformable.perform()


FaceAtPerformable
FaceAtPerformable.pose
FaceAtPerformable.orm_class
FaceAtPerformable.perform()


MoveAndPickUpPerformable
MoveAndPickUpPerformable.standing_position
MoveAndPickUpPerformable.object_designator
MoveAndPickUpPerformable.arm
MoveAndPickUpPerformable.grasp
MoveAndPickUpPerformable.perform()












pycram.designators.action_designator#

Classes#


MoveTorsoAction
Action Designator for Moving the torso of the robot up and down

SetGripperAction
Set the gripper state of the robot

ReleaseAction
Releases an Object from the robot.

GripAction
Grip an object with the robot.

ParkArmsAction
Park the arms of the robot.

PickUpAction
Designator to let the robot pick up an object.

PlaceAction
Places an Object at a position using an arm.

NavigateAction
Navigates the Robot to a position.

TransportAction
Transports an object to a position using an arm

LookAtAction
Lets the robot look at a position.

DetectAction
Detects an object that fits the object description and returns an object designator describing the object.

OpenAction
Opens a container like object

CloseAction
Closes a container like object.

GraspingAction
Grasps an object described by the given Object Designator description

ActionAbstract
Base class for performable performables.

MoveTorsoActionPerformable
Move the torso of the robot up and down.

SetGripperActionPerformable
Set the gripper state of the robot.

ReleaseActionPerformable
Releases an Object from the robot.

GripActionPerformable
Grip an object with the robot.

ParkArmsActionPerformable
Park the arms of the robot.

PickUpActionPerformable
Let the robot pick up an object.

PlaceActionPerformable
Places an Object at a position using an arm.

NavigateActionPerformable
Navigates the Robot to a position.

TransportActionPerformable
Transports an object to a position using an arm

LookAtActionPerformable
Lets the robot look at a position.

DetectActionPerformable
Detects an object that fits the object description and returns an object designator describing the object.

OpenActionPerformable
Opens a container like object

CloseActionPerformable
Closes a container like object.

GraspingActionPerformable
Grasps an object described by the given Object Designator description

FaceAtPerformable
Turn the robot chassis such that is faces the pose and after that perform a look at action.

MoveAndPickUpPerformable
Navigate to standing_position, then turn towards the object and pick it up.






Module Contents#


class pycram.designators.action_designator.MoveTorsoAction(positions: typing_extensions.List[float], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[pycram.ontology.ontology.OntologyConceptHolder]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Action Designator for Moving the torso of the robot up and down


positions: typing_extensions.List[float]#



ground() → MoveTorsoActionPerformable#
Creates a performable action designator with the first element from the list of possible torso heights.

Returns:
A performable action designator





__iter__()#
Iterates over all possible values for this designator and returns a performable action designator with the value.

Returns:
A performable action designator






class pycram.designators.action_designator.SetGripperAction(grippers: typing_extensions.List[pycram.datastructures.enums.Arms], motions: typing_extensions.List[pycram.datastructures.enums.GripperState], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Set the gripper state of the robot


grippers: typing_extensions.List[pycram.datastructures.enums.GripperState]#



motions: typing_extensions.List[pycram.datastructures.enums.Arms]#



ground() → SetGripperActionPerformable#
Default specialized_designators that returns a performable designator with the first element in the grippers and motions list.

Returns:
A performable designator





__iter__()#
Iterates over all possible combinations of grippers and motions

Returns:
A performable designator with a combination of gripper and motion






class pycram.designators.action_designator.ReleaseAction(grippers: typing_extensions.List[pycram.datastructures.enums.Arms], object_designator_description: pycram.designators.object_designator.ObjectDesignatorDescription, resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Releases an Object from the robot.
Note: This action can not be used yet.


grippers: typing_extensions.List[pycram.datastructures.enums.Arms]#



object_designator_description#



ground() → ReleaseActionPerformable#
Fill all missing parameters and chose plan to execute.




class pycram.designators.action_designator.GripAction(grippers: typing_extensions.List[pycram.datastructures.enums.Arms], object_designator_description: pycram.designators.object_designator.ObjectDesignatorDescription, efforts: typing_extensions.List[float], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Grip an object with the robot.

Variables:

grippers – The grippers to consider
object_designator_description – The description of objects to consider
efforts – The efforts to consider



Note: This action can not be used yet.


grippers: typing_extensions.List[pycram.datastructures.enums.Arms]#



object_designator_description: pycram.designators.object_designator.ObjectDesignatorDescription#



efforts: typing_extensions.List[float]#



ground() → GripActionPerformable#
Fill all missing parameters and chose plan to execute.




class pycram.designators.action_designator.ParkArmsAction(arms: typing_extensions.List[pycram.datastructures.enums.Arms], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Park the arms of the robot.


arms: typing_extensions.List[pycram.datastructures.enums.Arms]#



ground() → ParkArmsActionPerformable#
Default specialized_designators that returns a performable designator with the first element of the list of possible arms

Returns:
A performable designator






class pycram.designators.action_designator.PickUpAction(object_designator_description: typing_extensions.Union[pycram.designators.object_designator.ObjectDesignatorDescription, pycram.designators.object_designator.ObjectDesignatorDescription.Object], arms: typing_extensions.List[pycram.datastructures.enums.Arms], grasps: typing_extensions.List[pycram.datastructures.enums.Grasp], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Designator to let the robot pick up an object.


object_designator_description: typing_extensions.Union[pycram.designators.object_designator.ObjectDesignatorDescription, pycram.designators.object_designator.ObjectDesignatorDescription.Object]#



arms: typing_extensions.List[pycram.datastructures.enums.Arms]#



grasps: typing_extensions.List[pycram.datastructures.enums.Grasp]#



ground() → PickUpActionPerformable#
Default specialized_designators, returns a performable designator with the first entries from the lists of possible parameter.

Returns:
A performable designator






class pycram.designators.action_designator.PlaceAction(object_designator_description: typing_extensions.Union[pycram.designators.object_designator.ObjectDesignatorDescription, pycram.designators.object_designator.ObjectDesignatorDescription.Object], target_locations: typing_extensions.List[pycram.datastructures.pose.Pose], arms: typing_extensions.List[pycram.datastructures.enums.Arms], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Places an Object at a position using an arm.


object_designator_description: typing_extensions.Union[pycram.designators.object_designator.ObjectDesignatorDescription, pycram.designators.object_designator.ObjectDesignatorDescription.Object]#



target_locations: typing_extensions.List[pycram.datastructures.pose.Pose]#



arms: typing_extensions.List[pycram.datastructures.enums.Arms]#



ground() → PlaceActionPerformable#
Default specialized_designators that returns a performable designator with the first entries from the list of possible entries.

Returns:
A performable designator






class pycram.designators.action_designator.NavigateAction(target_locations: typing_extensions.List[pycram.datastructures.pose.Pose], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Navigates the Robot to a position.


target_locations: typing_extensions.List[pycram.datastructures.pose.Pose]#



ground() → NavigateActionPerformable#
Default specialized_designators that returns a performable designator with the first entry of possible target locations.

Returns:
A performable designator






class pycram.designators.action_designator.TransportAction(object_designator_description: typing_extensions.Union[pycram.designators.object_designator.ObjectDesignatorDescription, pycram.designators.object_designator.ObjectDesignatorDescription.Object], arms: typing_extensions.List[pycram.datastructures.enums.Arms], target_locations: typing_extensions.List[pycram.datastructures.pose.Pose], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Transports an object to a position using an arm


object_designator_description: typing_extensions.Union[pycram.designators.object_designator.ObjectDesignatorDescription, pycram.designators.object_designator.ObjectDesignatorDescription.Object]#



arms: typing_extensions.List[pycram.datastructures.enums.Arms]#



target_locations: typing_extensions.List[pycram.datastructures.pose.Pose]#



ground() → TransportActionPerformable#
Default specialized_designators that returns a performable designator with the first entries from the lists of possible parameter.

Returns:
A performable designator






class pycram.designators.action_designator.LookAtAction(targets: typing_extensions.List[pycram.datastructures.pose.Pose], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Lets the robot look at a position.


targets: typing_extensions.List[pycram.datastructures.pose.Pose]#



ground() → LookAtActionPerformable#
Default specialized_designators that returns a performable designator with the first entry in the list of possible targets

Returns:
A performable designator






class pycram.designators.action_designator.DetectAction(object_designator_description: pycram.designators.object_designator.ObjectDesignatorDescription, resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Detects an object that fits the object description and returns an object designator describing the object.


object_designator_description: pycram.designators.object_designator.ObjectDesignatorDescription#



ground() → DetectActionPerformable#
Default specialized_designators that returns a performable designator with the resolved object description.

Returns:
A performable designator






class pycram.designators.action_designator.OpenAction(object_designator_description: pycram.designators.object_designator.ObjectPart, arms: typing_extensions.List[pycram.datastructures.enums.Arms], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Opens a container like object
Can currently not be used


object_designator_description: pycram.designators.object_designator.ObjectPart#



arms: typing_extensions.List[pycram.datastructures.enums.Arms]#



ground() → OpenActionPerformable#
Default specialized_designators that returns a performable designator with the resolved object description and the first entries
from the lists of possible parameter.

Returns:
A performable designator






class pycram.designators.action_designator.CloseAction(object_designator_description: pycram.designators.object_designator.ObjectPart, arms: typing_extensions.List[pycram.datastructures.enums.Arms], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Closes a container like object.
Can currently not be used


object_designator_description: pycram.designators.object_designator.ObjectPart#



arms: typing_extensions.List[pycram.datastructures.enums.Arms]#



ground() → CloseActionPerformable#
Default specialized_designators that returns a performable designator with the resolved object designator and the first entry from
the list of possible arms.

Returns:
A performable designator






class pycram.designators.action_designator.GraspingAction(arms: typing_extensions.List[pycram.datastructures.enums.Arms], object_description: typing_extensions.Union[pycram.designators.object_designator.ObjectDesignatorDescription, pycram.designators.object_designator.ObjectPart], resolver: typing_extensions.Callable = None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: pycram.designator.ActionDesignatorDescription
Grasps an object described by the given Object Designator description


arms: typing_extensions.List[pycram.datastructures.enums.Arms]#



object_description: pycram.designators.object_designator.ObjectDesignatorDescription#



ground() → GraspingActionPerformable#
Default specialized_designators that takes the first element from the list of arms and the first solution for the object
designator description ond returns it.

Returns:
A performable action designator that contains specific arguments






class pycram.designators.action_designator.ActionAbstract#
Bases: pycram.designator.ActionDesignatorDescription.Action, abc.ABC
Base class for performable performables.


orm_class: typing_extensions.Type[pycram.orm.action_designator.Action]#
The ORM class that is used to insert this action into the database. Must be overwritten by every action in order to
be able to insert the action into the database.



abstract perform() → None#
Perform the action.
Will be overwritten by each action.



to_sql() → pycram.orm.action_designator.Action#
Convert this action to its ORM equivalent.
Needs to be overwritten by an action if it didn’t overwrite the orm_class attribute with its ORM equivalent.

Returns:
An instance of the ORM equivalent of the action with the parameters set





insert(session: sqlalchemy.orm.Session, **kwargs) → pycram.orm.action_designator.Action#
Insert this action into the database.
Needs to be overwritten by an action if the action has attributes that do not exist in the orm class
equivalent. In that case, the attributes need to be inserted into the session manually.

Parameters:

session – Session with a database that is used to add and commit the objects
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM action that was inserted into the database






class pycram.designators.action_designator.MoveTorsoActionPerformable#
Bases: ActionAbstract
Move the torso of the robot up and down.


position: float#
Target position of the torso joint



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.SetGripperActionPerformable#
Bases: ActionAbstract
Set the gripper state of the robot.


gripper: pycram.datastructures.enums.Arms#
The gripper that should be set



motion: pycram.datastructures.enums.GripperState#
The motion that should be set on the gripper



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.ReleaseActionPerformable#
Bases: ActionAbstract
Releases an Object from the robot.
Note: This action can not ve used yet.


gripper: pycram.datastructures.enums.Arms#



object_designator: pycram.designators.object_designator.ObjectDesignatorDescription.Object#



abstract perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.GripActionPerformable#
Bases: ActionAbstract
Grip an object with the robot.
Note: This action can not be used yet.


gripper: pycram.datastructures.enums.Arms#



object_designator: pycram.designators.object_designator.ObjectDesignatorDescription.Object#



effort: float#



abstract perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.ParkArmsActionPerformable#
Bases: ActionAbstract
Park the arms of the robot.


arm: pycram.datastructures.enums.Arms#
Entry from the enum for which arm should be parked



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.PickUpActionPerformable#
Bases: ActionAbstract
Let the robot pick up an object.


object_designator: pycram.designators.object_designator.ObjectDesignatorDescription.Object#
Object designator describing the object that should be picked up



arm: pycram.datastructures.enums.Arms#
The arm that should be used for pick up



grasp: pycram.datastructures.enums.Grasp#
The grasp that should be used. For example, ‘left’ or ‘right’



object_at_execution: typing_extensions.Optional[pycram.designators.object_designator.ObjectDesignatorDescription.Object]#
The object at the time this Action got created. It is used to be a static, information holding entity. It is
not updated when the BulletWorld object is changed.



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.PlaceActionPerformable#
Bases: ActionAbstract
Places an Object at a position using an arm.


object_designator: pycram.designators.object_designator.ObjectDesignatorDescription.Object#
Object designator describing the object that should be place



arm: pycram.datastructures.enums.Arms#
Arm that is currently holding the object



target_location: pycram.datastructures.pose.Pose#
Pose in the world at which the object should be placed



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.NavigateActionPerformable#
Bases: ActionAbstract
Navigates the Robot to a position.


target_location: pycram.datastructures.pose.Pose#
Location to which the robot should be navigated



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.TransportActionPerformable#
Bases: ActionAbstract
Transports an object to a position using an arm


object_designator: pycram.designators.object_designator.ObjectDesignatorDescription.Object#
Object designator describing the object that should be transported.



arm: pycram.datastructures.enums.Arms#
Arm that should be used



target_location: pycram.datastructures.pose.Pose#
Target Location to which the object should be transported



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.LookAtActionPerformable#
Bases: ActionAbstract
Lets the robot look at a position.


target: pycram.datastructures.pose.Pose#
Position at which the robot should look, given as 6D pose



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.DetectActionPerformable#
Bases: ActionAbstract
Detects an object that fits the object description and returns an object designator describing the object.


object_designator: pycram.designators.object_designator.ObjectDesignatorDescription.Object#
Object designator loosely describing the object, e.g. only type.



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.OpenActionPerformable#
Bases: ActionAbstract
Opens a container like object


object_designator: pycram.designators.object_designator.ObjectPart.Object#
Object designator describing the object that should be opened



arm: pycram.datastructures.enums.Arms#
Arm that should be used for opening the container



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.CloseActionPerformable#
Bases: ActionAbstract
Closes a container like object.


object_designator: pycram.designators.object_designator.ObjectPart.Object#
Object designator describing the object that should be closed



arm: pycram.datastructures.enums.Arms#
Arm that should be used for closing



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.GraspingActionPerformable#
Bases: ActionAbstract
Grasps an object described by the given Object Designator description


arm: pycram.datastructures.enums.Arms#
The arm that should be used to grasp



object_desig: typing_extensions.Union[pycram.designators.object_designator.ObjectDesignatorDescription.Object, pycram.designators.object_designator.ObjectPart.Object]#
Object Designator for the object that should be grasped



orm_class: typing_extensions.Type[ActionAbstract]#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.FaceAtPerformable#
Bases: ActionAbstract
Turn the robot chassis such that is faces the pose and after that perform a look at action.


pose: pycram.datastructures.pose.Pose#
The pose to face



orm_class#



perform() → None#
Perform the action.
Will be overwritten by each action.




class pycram.designators.action_designator.MoveAndPickUpPerformable#
Bases: ActionAbstract
Navigate to standing_position, then turn towards the object and pick it up.


standing_position: pycram.datastructures.pose.Pose#
The pose to stand before trying to pick up the object



object_designator: pycram.designators.object_designator.ObjectDesignatorDescription.Object#
The object to pick up



arm: pycram.datastructures.enums.Arms#
The arm to use



grasp: pycram.datastructures.enums.Grasp#
The grasp to use



perform()#
Perform the action.
Will be overwritten by each action.












previous
pycram.designators.specialized_designators.probabilistic.probabilistic_action




next
pycram.designators.location_designator









 Contents
  


Classes
Module Contents
MoveTorsoAction
MoveTorsoAction.positions
MoveTorsoAction.ground()
MoveTorsoAction.__iter__()


SetGripperAction
SetGripperAction.grippers
SetGripperAction.motions
SetGripperAction.ground()
SetGripperAction.__iter__()


ReleaseAction
ReleaseAction.grippers
ReleaseAction.object_designator_description
ReleaseAction.ground()


GripAction
GripAction.grippers
GripAction.object_designator_description
GripAction.efforts
GripAction.ground()


ParkArmsAction
ParkArmsAction.arms
ParkArmsAction.ground()


PickUpAction
PickUpAction.object_designator_description
PickUpAction.arms
PickUpAction.grasps
PickUpAction.ground()


PlaceAction
PlaceAction.object_designator_description
PlaceAction.target_locations
PlaceAction.arms
PlaceAction.ground()


NavigateAction
NavigateAction.target_locations
NavigateAction.ground()


TransportAction
TransportAction.object_designator_description
TransportAction.arms
TransportAction.target_locations
TransportAction.ground()


LookAtAction
LookAtAction.targets
LookAtAction.ground()


DetectAction
DetectAction.object_designator_description
DetectAction.ground()


OpenAction
OpenAction.object_designator_description
OpenAction.arms
OpenAction.ground()


CloseAction
CloseAction.object_designator_description
CloseAction.arms
CloseAction.ground()


GraspingAction
GraspingAction.arms
GraspingAction.object_description
GraspingAction.ground()


ActionAbstract
ActionAbstract.orm_class
ActionAbstract.perform()
ActionAbstract.to_sql()
ActionAbstract.insert()


MoveTorsoActionPerformable
MoveTorsoActionPerformable.position
MoveTorsoActionPerformable.orm_class
MoveTorsoActionPerformable.perform()


SetGripperActionPerformable
SetGripperActionPerformable.gripper
SetGripperActionPerformable.motion
SetGripperActionPerformable.orm_class
SetGripperActionPerformable.perform()


ReleaseActionPerformable
ReleaseActionPerformable.gripper
ReleaseActionPerformable.object_designator
ReleaseActionPerformable.perform()


GripActionPerformable
GripActionPerformable.gripper
GripActionPerformable.object_designator
GripActionPerformable.effort
GripActionPerformable.perform()


ParkArmsActionPerformable
ParkArmsActionPerformable.arm
ParkArmsActionPerformable.orm_class
ParkArmsActionPerformable.perform()


PickUpActionPerformable
PickUpActionPerformable.object_designator
PickUpActionPerformable.arm
PickUpActionPerformable.grasp
PickUpActionPerformable.object_at_execution
PickUpActionPerformable.orm_class
PickUpActionPerformable.perform()


PlaceActionPerformable
PlaceActionPerformable.object_designator
PlaceActionPerformable.arm
PlaceActionPerformable.target_location
PlaceActionPerformable.orm_class
PlaceActionPerformable.perform()


NavigateActionPerformable
NavigateActionPerformable.target_location
NavigateActionPerformable.orm_class
NavigateActionPerformable.perform()


TransportActionPerformable
TransportActionPerformable.object_designator
TransportActionPerformable.arm
TransportActionPerformable.target_location
TransportActionPerformable.orm_class
TransportActionPerformable.perform()


LookAtActionPerformable
LookAtActionPerformable.target
LookAtActionPerformable.orm_class
LookAtActionPerformable.perform()


DetectActionPerformable
DetectActionPerformable.object_designator
DetectActionPerformable.orm_class
DetectActionPerformable.perform()


OpenActionPerformable
OpenActionPerformable.object_designator
OpenActionPerformable.arm
OpenActionPerformable.orm_class
OpenActionPerformable.perform()


CloseActionPerformable
CloseActionPerformable.object_designator
CloseActionPerformable.arm
CloseActionPerformable.orm_class
CloseActionPerformable.perform()


GraspingActionPerformable
GraspingActionPerformable.arm
GraspingActionPerformable.object_desig
GraspingActionPerformable.orm_class
GraspingActionPerformable.perform()


FaceAtPerformable
FaceAtPerformable.pose
FaceAtPerformable.orm_class
FaceAtPerformable.perform()


MoveAndPickUpPerformable
MoveAndPickUpPerformable.standing_position
MoveAndPickUpPerformable.object_designator
MoveAndPickUpPerformable.arm
MoveAndPickUpPerformable.grasp
MoveAndPickUpPerformable.perform()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.designator — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.designator




 Contents 



Attributes
Exceptions
Classes
Module Contents
owlready2
DesignatorError
ResolutionError
ResolutionError.error
ResolutionError.missing
ResolutionError.wrong
ResolutionError.head
ResolutionError.tab
ResolutionError.message


Designator
Designator.resolvers
Designator._mutex
Designator._parent
Designator._successor
Designator._effective
Designator._data
Designator._solutions
Designator._index
Designator.timestamp
Designator._description
Designator.equate()
Designator.equal()
Designator.first()
Designator.current()
Designator._reference()
Designator.reference()
Designator.next_solution()
Designator.solutions()
Designator.copy()
Designator.make_effective()
Designator.newest_effective()
Designator.prop_value()
Designator.check_constraints()
Designator.make_dictionary()
Designator.rename_prop()


DesignatorDescription
DesignatorDescription.ontology_concept_holders
DesignatorDescription.make_dictionary()
DesignatorDescription.ground()
DesignatorDescription.get_slots()
DesignatorDescription.copy()
DesignatorDescription.get_default_ontology_concept()


ActionDesignatorDescription
ActionDesignatorDescription.Action
ActionDesignatorDescription.Action.robot_position
ActionDesignatorDescription.Action.robot_torso_height
ActionDesignatorDescription.Action.robot_type
ActionDesignatorDescription.Action.__post_init__()
ActionDesignatorDescription.Action.perform()
ActionDesignatorDescription.Action.to_sql()
ActionDesignatorDescription.Action.insert()


ActionDesignatorDescription.soma
ActionDesignatorDescription.ground()
ActionDesignatorDescription.init_ontology_concepts()
ActionDesignatorDescription.__iter__()


LocationDesignatorDescription
LocationDesignatorDescription.Location
LocationDesignatorDescription.Location.pose


LocationDesignatorDescription.ground()


SPECIAL_KNOWLEDGE
ObjectDesignatorDescription
ObjectDesignatorDescription.Object
ObjectDesignatorDescription.Object.name
ObjectDesignatorDescription.Object.obj_type
ObjectDesignatorDescription.Object.world_object
ObjectDesignatorDescription.Object._pose
ObjectDesignatorDescription.Object.__post_init__()
ObjectDesignatorDescription.Object.to_sql()
ObjectDesignatorDescription.Object.insert()
ObjectDesignatorDescription.Object.frozen_copy()
ObjectDesignatorDescription.Object.pose
ObjectDesignatorDescription.Object.__repr__()
ObjectDesignatorDescription.Object.special_knowledge_adjustment_pose()


ObjectDesignatorDescription.types
ObjectDesignatorDescription.names
ObjectDesignatorDescription.ground()
ObjectDesignatorDescription.__iter__()


BaseMotion
BaseMotion.perform()
BaseMotion.to_sql()
BaseMotion.insert()
BaseMotion.__post_init__()












pycram.designator#

Attributes#


owlready2


SPECIAL_KNOWLEDGE







Exceptions#


DesignatorError
Implementation of designator errors.

ResolutionError
Common base class for all non-exit exceptions.






Classes#


Designator
Implementation of designators. DEPRECTAED SINCE DESIGNATOR DESCRIPTIONS ARE USED AS BASE CLASS

DesignatorDescription


ActionDesignatorDescription
Abstract class for action designator descriptions.

LocationDesignatorDescription
Parent class of location designator descriptions.

ObjectDesignatorDescription
Class for object designator descriptions.

BaseMotion
Helper class that provides a standard way to create an ABC using






Module Contents#


pycram.designator.owlready2 = None#



exception pycram.designator.DesignatorError(*args, **kwargs)#
Bases: Exception
Implementation of designator errors.



exception pycram.designator.ResolutionError(missing_properties: typing_extensions.List[str], wrong_type: typing_extensions.Dict, current_type: typing_extensions.Any, designator: Designator)#
Bases: Exception
Common base class for all non-exit exceptions.


error#



missing#



wrong#



head = Multiline-String#
Show Value"""Property   |   Current Type    |     Right Type
-------------------------------------------------------------
"""





tab = ''#



message#




class pycram.designator.Designator(description: DesignatorDescription, parent: typing_extensions.Optional[Designator] = None)#
Bases: abc.ABC
Implementation of designators. DEPRECTAED SINCE DESIGNATOR DESCRIPTIONS ARE USED AS BASE CLASS
Designators are objects containing sequences of key-value pairs. They can be resolved which means to generate real
parameters for executing performables from these pairs of key and value.

Variables:
timestamp – The timestamp of creation of reference or None if still not referencing an object.




resolvers#
List of all designator resolvers. Designator resolvers are functions which take a designator as
argument and return a list of solutions. A solution can also be a generator.



_mutex: threading.Lock#



_parent: typing_extensions.Union[Designator, None] = None#



_successor: typing_extensions.Union[Designator, None] = None#



_effective: bool = False#



_data: typing_extensions.Any = None#



_solutions = None#



_index: int = 0#



timestamp = None#



_description: DesignatorDescription#



equate(parent: Designator) → None#
Equate the designator with the given parent.
Arguments:
parent – the parent to equate with.



equal(other: Designator) → bool#
Check if the designator describes the same entity as another designator, i.e. if they are equated.
Arguments:
other – the other designator.



first() → Designator#
Return the first ancestor in the chain of equated designators.



current() → Designator#
Return the newest designator, i.e. that one that has been equated last to the designator or one of its
equated designators.



_reference() → typing_extensions.Any#
This is a helper method for internal usage only.
This method is to be overwritten instead of the reference method.



reference() → typing_extensions.Any#
Try to dereference the designator and return its data object or raise DesignatorError if it is not an
effective designator.



abstract next_solution()#
Return another solution for the effective designator or None if none exists. The next solution is a newly
constructed designator with identical properties that is equated to the designator since it describes the same
entity.



solutions(from_root: typing_extensions.Optional[Designator] = None)#
Return a generator for all solutions of the designator.
Arguments:
from_root – if not None, the generator for all solutions beginning from with the original designator is returned (default is None).



copy(new_properties: typing_extensions.Optional[typing_extensions.List] = None) → Designator#
Construct a new designator with the same properties as this one. If new properties are specified, these will
be merged with the old ones while the new properties are dominant in this relation.
Arguments:
new_properties – a list of new properties to merge into the old ones (default is None).



make_effective(properties: typing_extensions.Optional[typing_extensions.List] = None, data: typing_extensions.Optional[typing_extensions.Any] = None, timestamp: typing_extensions.Optional[float] = None) → Designator#
Create a new effective designator of the same type as this one. If no properties are specified, this ones are used.
Arguments:
new_properties – a list of properties (default is None).
data – the low-level data structure the new designator describes (default is None).
timestamp – the timestamp of creation of reference (default is the current).



newest_effective() → Designator#
Return the newest effective designator.



prop_value(key: str) → typing_extensions.Any#
Return the first value matching the specified property key.
Arguments:
key – the key to return the value of.



check_constraints(properties: typing_extensions.List) → bool#
Return True if all the given properties match, False otherwise.
Arguments:
properties – the properties which have to match. A property can be a tuple in which case its first value is the
key of a property which must equal the second value. Otherwise it’s simply the key of a property which must be
not None.



make_dictionary(properties: typing_extensions.List) → typing_extensions.Dict#
DEPRECATED, Moved to the description. Function only keept because of
backward compatability.
Return the given properties as dictionary.
Arguments:
properties – the properties to create a dictionary of. A property can be a tuple in which case its first value
is the dictionary key and the second value is the dictionary value. Otherwise it’s simply the dictionary key
and the key of a property which is the dictionary value.



rename_prop(old: str, new: str) → Designator#




class pycram.designator.DesignatorDescription(resolver: typing_extensions.Optional[typing_extensions.Callable] = None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[pycram.ontology.ontology_common.OntologyConceptHolder]] = None)#
Bases: abc.ABC

Variables:
resolve – The specialized_designators function to use for this designator, defaults to self.ground




ontology_concept_holders#



make_dictionary(properties: typing_extensions.List[str])#
Creates a dictionary of this description with only the given properties
included.

Parameters:
properties – A list of properties that should be included in the dictionary.
The given properties have to be an attribute of this description.

Returns:
A dictionary with the properties as keys.





ground() → typing_extensions.Any#
Should be overwritten with an actual grounding function which infers missing properties.



get_slots() → typing_extensions.List[str]#
Returns a list of all slots of this description. Can be used for inspecting different descriptions and debugging.

Returns:
A list of all slots.





copy() → DesignatorDescription#



get_default_ontology_concept() → owlready2.Thing | None#
Returns the first element of ontology_concept_holders if there is, else None




class pycram.designator.ActionDesignatorDescription(resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[pycram.ontology.ontology_common.OntologyConceptHolder]] = None)#
Bases: DesignatorDescription, pycram.language.Language
Abstract class for action designator descriptions.
Descriptions hold possible parameter ranges for action designators.


class Action#
The performable designator with a single element for each list of possible parameter.


robot_position: pycram.datastructures.pose.Pose#
The position of the robot at the start of the action.



robot_torso_height: float#
The torso height of the robot at the start of the action.



robot_type: pycram.datastructures.enums.ObjectType#
The type of the robot at the start of the action.



__post_init__()#



abstract perform() → typing_extensions.Any#
Executes the action with the single parameters from the description.



abstract to_sql() → pycram.orm.action_designator.Action#
Create an ORM object that corresponds to this description.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.session.Session, *args, **kwargs) → pycram.orm.action_designator.Action#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM object






soma#



abstract ground() → Action#
Fill all missing parameters and chose plan to execute.



init_ontology_concepts(ontology_concept_classes: typing_extensions.Dict[str, typing_extensions.Type[owlready2.Thing]])#
Initialize the ontology concept holders for this action designator

Parameters:

ontology_concept_classes – The ontology concept classes that the action is categorized as or associated with
ontology_concept_name – The name of the ontology concept instance to be created






__iter__()#
Iterate through all possible performables fitting this description

Yield:
A resolved action designator






class pycram.designator.LocationDesignatorDescription(resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: DesignatorDescription
Parent class of location designator descriptions.


class Location#
Resolved location that represents a specific point in the world which satisfies the constraints of the location
designator description.


pose: pycram.datastructures.pose.Pose#
The resolved pose of the location designator. Pose is inherited by all location designator.




abstract ground() → Location#
Find a location that satisfies all constrains.




pycram.designator.SPECIAL_KNOWLEDGE#



class pycram.designator.ObjectDesignatorDescription(names: typing_extensions.Optional[typing_extensions.List[str]] = None, types: typing_extensions.Optional[typing_extensions.List[pycram.datastructures.enums.ObjectType]] = None, resolver: typing_extensions.Optional[typing_extensions.Callable] = None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)#
Bases: DesignatorDescription
Class for object designator descriptions.
Descriptions hold possible parameter ranges for object designators.


class Object#
A single element that fits the description.


name: str#
Name of the object



obj_type: pycram.datastructures.enums.ObjectType#
Type of the object



world_object: typing_extensions.Optional[pycram.world_concepts.world_object.Object]#
Reference to the World object



_pose: typing_extensions.Optional[typing_extensions.Callable]#
A callable returning the pose of this object. The _pose member is used overwritten for data copies
which will not update when the original world_object is moved.



__post_init__()#



to_sql() → pycram.orm.object_designator.Object#
Create an ORM object that corresponds to this description.

Returns:
The created ORM object.





insert(session: sqlalchemy.orm.session.Session) → pycram.orm.object_designator.Object#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:
session – Session with a database that is used to add and commit the objects

Returns:
The completely instanced ORM object





frozen_copy() → ObjectDesignatorDescription#
Returns a copy of this designator containing only the fields.

Returns:
A copy containing only the fields of this class. The WorldObject attached to this pycram object is not copied. The _pose gets set to a method that statically returns the pose of the object when this method was called.





property pose#

Property of the current position and orientation of the object.

Evaluate the _pose function.

Returns:
Position and orientation





__repr__()#
Return repr(self).



special_knowledge_adjustment_pose(grasp: str, pose: pycram.datastructures.pose.Pose) → pycram.datastructures.pose.Pose#
Returns the adjusted target pose based on special knowledge for “grasp front”.

Parameters:

grasp – From which side the object should be grasped
pose – Pose at which the object should be grasped, before adjustment


Returns:
The adjusted grasp pose






types: typing_extensions.Optional[typing_extensions.List[pycram.datastructures.enums.ObjectType]]#



names: typing_extensions.Optional[typing_extensions.List[str]]#



ground() → typing_extensions.Union[Object, bool]#
Return the first object from the world that fits the description.

Returns:
A resolved object designator





__iter__() → typing_extensions.Iterable[Object]#
Iterate through all possible objects fitting this description

Yield:
A resolved object designator






class pycram.designator.BaseMotion#
Bases: abc.ABC
Helper class that provides a standard way to create an ABC using
inheritance.


abstract perform()#
Passes this designator to the process module for execution. Will be overwritten by each motion.



abstract to_sql() → pycram.orm.motion_designator.Motion#
Create an ORM object that corresponds to this description. Will be overwritten by each motion.

Returns:
The created ORM object.





abstract insert(session: sqlalchemy.orm.session.Session, *args, **kwargs) → pycram.orm.motion_designator.Motion#
Add and commit this and all related objects to the session.
Auto-Incrementing primary keys and foreign keys have to be filled by this method.

Parameters:

session – Session with a database that is used to add and commit the objects
args – Possible extra arguments
kwargs – Possible extra keyword arguments


Returns:
The completely instanced ORM motion.





__post_init__()#
Checks if types are missing or wrong












previous
pycram.description




next
pycram.failure_handling









 Contents
  


Attributes
Exceptions
Classes
Module Contents
owlready2
DesignatorError
ResolutionError
ResolutionError.error
ResolutionError.missing
ResolutionError.wrong
ResolutionError.head
ResolutionError.tab
ResolutionError.message


Designator
Designator.resolvers
Designator._mutex
Designator._parent
Designator._successor
Designator._effective
Designator._data
Designator._solutions
Designator._index
Designator.timestamp
Designator._description
Designator.equate()
Designator.equal()
Designator.first()
Designator.current()
Designator._reference()
Designator.reference()
Designator.next_solution()
Designator.solutions()
Designator.copy()
Designator.make_effective()
Designator.newest_effective()
Designator.prop_value()
Designator.check_constraints()
Designator.make_dictionary()
Designator.rename_prop()


DesignatorDescription
DesignatorDescription.ontology_concept_holders
DesignatorDescription.make_dictionary()
DesignatorDescription.ground()
DesignatorDescription.get_slots()
DesignatorDescription.copy()
DesignatorDescription.get_default_ontology_concept()


ActionDesignatorDescription
ActionDesignatorDescription.Action
ActionDesignatorDescription.Action.robot_position
ActionDesignatorDescription.Action.robot_torso_height
ActionDesignatorDescription.Action.robot_type
ActionDesignatorDescription.Action.__post_init__()
ActionDesignatorDescription.Action.perform()
ActionDesignatorDescription.Action.to_sql()
ActionDesignatorDescription.Action.insert()


ActionDesignatorDescription.soma
ActionDesignatorDescription.ground()
ActionDesignatorDescription.init_ontology_concepts()
ActionDesignatorDescription.__iter__()


LocationDesignatorDescription
LocationDesignatorDescription.Location
LocationDesignatorDescription.Location.pose


LocationDesignatorDescription.ground()


SPECIAL_KNOWLEDGE
ObjectDesignatorDescription
ObjectDesignatorDescription.Object
ObjectDesignatorDescription.Object.name
ObjectDesignatorDescription.Object.obj_type
ObjectDesignatorDescription.Object.world_object
ObjectDesignatorDescription.Object._pose
ObjectDesignatorDescription.Object.__post_init__()
ObjectDesignatorDescription.Object.to_sql()
ObjectDesignatorDescription.Object.insert()
ObjectDesignatorDescription.Object.frozen_copy()
ObjectDesignatorDescription.Object.pose
ObjectDesignatorDescription.Object.__repr__()
ObjectDesignatorDescription.Object.special_knowledge_adjustment_pose()


ObjectDesignatorDescription.types
ObjectDesignatorDescription.names
ObjectDesignatorDescription.ground()
ObjectDesignatorDescription.__iter__()


BaseMotion
BaseMotion.perform()
BaseMotion.to_sql()
BaseMotion.insert()
BaseMotion.__post_init__()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.description — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.description




 Contents 



Classes
Module Contents
EntityDescription
EntityDescription.origin
EntityDescription.name


LinkDescription
LinkDescription.parsed_description
LinkDescription.geometry


JointDescription
JointDescription.parsed_description
JointDescription.type
JointDescription.axis
JointDescription.has_limits
JointDescription.limits
JointDescription.lower_limit
JointDescription.upper_limit
JointDescription.parent_link_name
JointDescription.child_link_name
JointDescription.damping
JointDescription.friction


ObjectEntity
ObjectEntity.object
ObjectEntity.pose
ObjectEntity.transform
ObjectEntity.tf_frame
ObjectEntity.object_id


Link
Link.local_transformer
Link.constraint_ids
Link.current_state
Link.add_fixed_constraint_with_link()
Link.remove_constraint_with_link()
Link.is_root
Link.update_transform()
Link.get_transform_to_link()
Link.get_transform_from_link()
Link.get_pose_wrt_link()
Link.get_axis_aligned_bounding_box()
Link.position
Link.position_as_list
Link.orientation
Link.orientation_as_list
Link._update_pose()
Link.pose
Link.pose_as_list
Link.get_origin_transform()
Link.color
Link.origin_transform
Link.tf_frame
Link.__eq__()
Link.__copy__()
Link.__hash__()


RootLink
RootLink.tf_frame
RootLink._update_pose()
RootLink.__copy__()


Joint
Joint.tf_frame
Joint.pose
Joint._update_position()
Joint.parent_link
Joint.child_link
Joint.position
Joint.reset_position()
Joint.get_object_id()
Joint.enable_force_torque_sensor()
Joint.disable_force_torque_sensor()
Joint.get_reaction_force_torque()
Joint.get_applied_motor_torque()
Joint.current_state
Joint.__copy__()
Joint.__eq__()
Joint.__hash__()


ObjectDescription
ObjectDescription.mesh_extensions
ObjectDescription.Link
ObjectDescription.RootLink
ObjectDescription.Joint
ObjectDescription.update_description_from_file()
ObjectDescription.parsed_description
ObjectDescription.load_description()
ObjectDescription.generate_description_from_file()
ObjectDescription.get_file_name()
ObjectDescription.generate_from_mesh_file()
ObjectDescription.generate_from_description_file()
ObjectDescription.generate_from_parameter_server()
ObjectDescription.links
ObjectDescription.get_link_by_name()
ObjectDescription.joints
ObjectDescription.get_joint_by_name()
ObjectDescription.get_root()
ObjectDescription.get_chain()
ObjectDescription.get_file_extension()












pycram.description#

Classes#


EntityDescription
A class that represents a description of an entity. This can be a link, joint or object description.

LinkDescription
A class that represents a link description of an object.

JointDescription
A class that represents the description of a joint.

ObjectEntity
An abstract base class that represents a physical part/entity of an Object.

Link
Represents a link of an Object in the World.

RootLink
Represents the root link of an Object in the World.

Joint
Represents a joint of an Object in the World.

ObjectDescription
A class that represents the description of an object.






Module Contents#


class pycram.description.EntityDescription#
Bases: abc.ABC
A class that represents a description of an entity. This can be a link, joint or object description.


property origin: pycram.datastructures.pose.Pose#

Abstractmethod:


Returns the origin of this entity.



property name: str#

Abstractmethod:


Returns the name of this entity.




class pycram.description.LinkDescription(parsed_link_description: typing_extensions.Any)#
Bases: EntityDescription
A class that represents a link description of an object.


parsed_description#



property geometry: typing_extensions.Union[pycram.datastructures.dataclasses.VisualShape, None]#

Abstractmethod:


Returns the geometry type of the collision element of this link.




class pycram.description.JointDescription(parsed_joint_description: typing_extensions.Any)#
Bases: EntityDescription
A class that represents the description of a joint.


parsed_description#



property type: pycram.datastructures.enums.JointType#

Abstractmethod:

Returns:
The type of this joint.





property axis: geometry_msgs.msg.Point#

Abstractmethod:

Returns:
The axis of this joint, for example the rotation axis for a revolute joint.





property has_limits: bool#

Abstractmethod:


Checks if this joint has limits.

Returns:
True if the joint has limits, False otherwise.





property limits: typing_extensions.Tuple[float, float]#

Returns:
The lower and upper limits of this joint.





property lower_limit: typing_extensions.Union[float, None]#

Abstractmethod:

Returns:
The lower limit of this joint, or None if the joint has no limits.





property upper_limit: typing_extensions.Union[float, None]#

Abstractmethod:

Returns:
The upper limit of this joint, or None if the joint has no limits.





property parent_link_name: str#

Abstractmethod:

Returns:
The name of the parent link of this joint.





property child_link_name: str#

Abstractmethod:

Returns:
The name of the child link of this joint.





property damping: float#

Abstractmethod:

Returns:
The damping of this joint.





property friction: float#

Abstractmethod:

Returns:
The friction of this joint.






class pycram.description.ObjectEntity(_id: int, obj: pycram.world_concepts.world_object.Object)#
Bases: pycram.datastructures.world.WorldEntity
An abstract base class that represents a physical part/entity of an Object.
This can be a link or a joint of an Object.


object: pycram.world_concepts.world_object.Object#



property pose: pycram.datastructures.pose.Pose#

Abstractmethod:

Returns:
The pose of this entity relative to the world frame.





property transform: pycram.datastructures.pose.Transform#
Returns the transform of this entity.

Returns:
The transform of this entity.





property tf_frame: str#

Abstractmethod:


Returns the tf frame of this entity.

Returns:
The tf frame of this entity.





property object_id: int#

Returns:
the id of the object to which this entity belongs.






class pycram.description.Link(_id: int, link_description: LinkDescription, obj: pycram.world_concepts.world_object.Object)#
Bases: ObjectEntity, LinkDescription, abc.ABC
Represents a link of an Object in the World.


local_transformer: pycram.local_transformer.LocalTransformer#



constraint_ids: typing_extensions.Dict[Link, int]#



property current_state: pycram.datastructures.dataclasses.LinkState#



add_fixed_constraint_with_link(child_link: Link) → int#
Adds a fixed constraint between this link and the given link, used to create attachments for example.

Parameters:
child_link – The child link to which a fixed constraint should be added.

Returns:
The unique id of the constraint.





remove_constraint_with_link(child_link: Link) → None#
Removes the constraint between this link and the given link.

Parameters:
child_link – The child link of the constraint that should be removed.





property is_root: bool#
Returns whether this link is the root link of the object.

Returns:
True if this link is the root link, False otherwise.





update_transform(transform_time: typing_extensions.Optional[rospy.Time] = None) → None#
Updates the transformation of this link at the given time.

Parameters:
transform_time – The time at which the transformation should be updated.





get_transform_to_link(link: Link) → pycram.datastructures.pose.Transform#
Returns the transformation from this link to the given link.

Parameters:
link – The link to which the transformation should be returned.

Returns:
A Transform object with the transformation from this link to the given link.





get_transform_from_link(link: Link) → pycram.datastructures.pose.Transform#
Returns the transformation from the given link to this link.

Parameters:
link – The link from which the transformation should be returned.

Returns:
A Transform object with the transformation from the given link to this link.





get_pose_wrt_link(link: Link) → pycram.datastructures.pose.Pose#
Returns the pose of this link with respect to the given link.

Parameters:
link – The link with respect to which the pose should be returned.

Returns:
A Pose object with the pose of this link with respect to the given link.





get_axis_aligned_bounding_box() → pycram.datastructures.dataclasses.AxisAlignedBoundingBox#
Returns the axis aligned bounding box of this link.

Returns:
An AxisAlignedBoundingBox object with the axis aligned bounding box of this link.





property position: geometry_msgs.msg.Point#
The getter for the position of the link relative to the world frame.

Returns:
A Point object containing the position of the link relative to the world frame.





property position_as_list: typing_extensions.List[float]#
The getter for the position of the link relative to the world frame as a list.

Returns:
A list containing the position of the link relative to the world frame.





property orientation: geometry_msgs.msg.Quaternion#
The getter for the orientation of the link relative to the world frame.

Returns:
A Quaternion object containing the orientation of the link relative to the world frame.





property orientation_as_list: typing_extensions.List[float]#
The getter for the orientation of the link relative to the world frame as a list.

Returns:
A list containing the orientation of the link relative to the world frame.





_update_pose() → None#
Updates the current pose of this link from the world.



property pose: pycram.datastructures.pose.Pose#
The pose of the link relative to the world frame.

Returns:
A Pose object containing the pose of the link relative to the world frame.





property pose_as_list: typing_extensions.List[typing_extensions.List[float]]#
The pose of the link relative to the world frame as a list.

Returns:
A list containing the position and orientation of the link relative to the world frame.





get_origin_transform() → pycram.datastructures.pose.Transform#
Returns the transformation between the link frame and the origin frame of this link.



property color: pycram.datastructures.dataclasses.Color#
The getter for the rgba_color of this link.

Returns:
A Color object containing the rgba_color of this link.





property origin_transform: pycram.datastructures.pose.Transform#

Returns:
The transform from world to origin of entity.





property tf_frame: str#
The name of the tf frame of this link.



__eq__(other)#
Return self==value.



__copy__()#



__hash__()#
Return hash(self).




class pycram.description.RootLink(obj: pycram.world_concepts.world_object.Object)#
Bases: Link, abc.ABC
Represents the root link of an Object in the World.
It differs from the normal AbstractLink class in that the pose ande the tf_frame is the same as that of the object.


property tf_frame: str#
Returns the tf frame of the root link, which is the same as the tf frame of the object.



_update_pose() → None#
Updates the current pose of this link from the world.



__copy__()#




class pycram.description.Joint(_id: int, joint_description: JointDescription, obj: pycram.world_concepts.world_object.Object)#
Bases: ObjectEntity, JointDescription, abc.ABC
Represents a joint of an Object in the World.


property tf_frame: str#
The tf frame of a joint is the tf frame of the child link.



property pose: pycram.datastructures.pose.Pose#
Returns the pose of this joint. The pose is the pose of the child link of this joint.

Returns:
The pose of this joint.





_update_position() → None#
Updates the current position of the joint from the physics simulator.



property parent_link: Link#
Returns the parent link of this joint.

Returns:
The parent link as a AbstractLink object.





property child_link: Link#
Returns the child link of this joint.

Returns:
The child link as a AbstractLink object.





property position: float#



reset_position(position: float) → None#



get_object_id() → int#
Returns the id of the object to which this joint belongs.

Returns:
The integer id of the object to which this joint belongs.





enable_force_torque_sensor() → None#



disable_force_torque_sensor() → None#



get_reaction_force_torque() → typing_extensions.List[float]#



get_applied_motor_torque() → float#



property current_state: pycram.datastructures.dataclasses.JointState#



__copy__()#



__eq__(other)#
Return self==value.



__hash__()#
Return hash(self).




class pycram.description.ObjectDescription(path: typing_extensions.Optional[str] = None)#
Bases: EntityDescription
A class that represents the description of an object.


mesh_extensions: typing_extensions.Tuple[str] = ('.obj', '.stl', '.dae')#
The file extensions of the mesh files that can be used to generate a description file.



class Link(_id: int, link_description: LinkDescription, obj: pycram.world_concepts.world_object.Object)#
Bases: Link, abc.ABC
Represents a link of an Object in the World.



class RootLink(obj: pycram.world_concepts.world_object.Object)#
Bases: RootLink, abc.ABC
Represents the root link of an Object in the World.
It differs from the normal AbstractLink class in that the pose ande the tf_frame is the same as that of the object.



class Joint(_id: int, joint_description: JointDescription, obj: pycram.world_concepts.world_object.Object)#
Bases: Joint, abc.ABC
Represents a joint of an Object in the World.



update_description_from_file(path: str) → None#
Updates the description of this object from the file at the given path.

Parameters:
path – The path of the file to update from.





property parsed_description: typing_extensions.Any#
Return the object parsed from the description file.



abstract load_description(path: str) → typing_extensions.Any#
Loads the description from the file at the given path.

Parameters:
path – The path to the source file, if only a filename is provided then the resources directories will be
searched.





generate_description_from_file(path: str, name: str, extension: str) → str#
Generates and preprocesses the description from the file at the given path and returns the preprocessed
description as a string.

Parameters:

path – The path of the file to preprocess.
name – The name of the object.
extension – The file extension of the file to preprocess.


Returns:
The processed description string.





get_file_name(path_object: pathlib.Path, extension: str, object_name: str) → str#
Returns the file name of the description file.

Parameters:

path_object – The path object of the description file or the mesh file.
extension – The file extension of the description file or the mesh file.
object_name – The name of the object.


Returns:
The file name of the description file.





classmethod generate_from_mesh_file(path: str, name: str) → str#

Abstractmethod:


Generates a description file from one of the mesh types defined in the mesh_extensions and
returns the path of the generated file.

Parameters:

path – The path to the .obj file.
name – The name of the object.


Returns:
The path of the generated description file.





classmethod generate_from_description_file(path: str) → str#

Abstractmethod:


Preprocesses the given file and returns the preprocessed description string.

Parameters:
path – The path of the file to preprocess.

Returns:
The preprocessed description string.





classmethod generate_from_parameter_server(name: str) → str#

Abstractmethod:


Preprocesses the description from the ROS parameter server and returns the preprocessed description string.

Parameters:
name – The name of the description on the parameter server.

Returns:
The preprocessed description string.





property links: typing_extensions.List[LinkDescription]#

Abstractmethod:

Returns:
A list of links descriptions of this object.





abstract get_link_by_name(link_name: str) → LinkDescription#

Returns:
The link description with the given name.





property joints: typing_extensions.List[JointDescription]#

Abstractmethod:

Returns:
A list of joints descriptions of this object.





abstract get_joint_by_name(joint_name: str) → JointDescription#

Returns:
The joint description with the given name.





abstract get_root() → str#

Returns:
the name of the root link of this object.





abstract get_chain(start_link_name: str, end_link_name: str) → typing_extensions.List[str]#

Returns:
the chain of links from ‘start_link_name’ to ‘end_link_name’.





static get_file_extension() → str#

Abstractmethod:

Returns:
The file extension of the description file.














previous
pycram.costmaps




next
pycram.designator









 Contents
  


Classes
Module Contents
EntityDescription
EntityDescription.origin
EntityDescription.name


LinkDescription
LinkDescription.parsed_description
LinkDescription.geometry


JointDescription
JointDescription.parsed_description
JointDescription.type
JointDescription.axis
JointDescription.has_limits
JointDescription.limits
JointDescription.lower_limit
JointDescription.upper_limit
JointDescription.parent_link_name
JointDescription.child_link_name
JointDescription.damping
JointDescription.friction


ObjectEntity
ObjectEntity.object
ObjectEntity.pose
ObjectEntity.transform
ObjectEntity.tf_frame
ObjectEntity.object_id


Link
Link.local_transformer
Link.constraint_ids
Link.current_state
Link.add_fixed_constraint_with_link()
Link.remove_constraint_with_link()
Link.is_root
Link.update_transform()
Link.get_transform_to_link()
Link.get_transform_from_link()
Link.get_pose_wrt_link()
Link.get_axis_aligned_bounding_box()
Link.position
Link.position_as_list
Link.orientation
Link.orientation_as_list
Link._update_pose()
Link.pose
Link.pose_as_list
Link.get_origin_transform()
Link.color
Link.origin_transform
Link.tf_frame
Link.__eq__()
Link.__copy__()
Link.__hash__()


RootLink
RootLink.tf_frame
RootLink._update_pose()
RootLink.__copy__()


Joint
Joint.tf_frame
Joint.pose
Joint._update_position()
Joint.parent_link
Joint.child_link
Joint.position
Joint.reset_position()
Joint.get_object_id()
Joint.enable_force_torque_sensor()
Joint.disable_force_torque_sensor()
Joint.get_reaction_force_torque()
Joint.get_applied_motor_torque()
Joint.current_state
Joint.__copy__()
Joint.__eq__()
Joint.__hash__()


ObjectDescription
ObjectDescription.mesh_extensions
ObjectDescription.Link
ObjectDescription.RootLink
ObjectDescription.Joint
ObjectDescription.update_description_from_file()
ObjectDescription.parsed_description
ObjectDescription.load_description()
ObjectDescription.generate_description_from_file()
ObjectDescription.get_file_name()
ObjectDescription.generate_from_mesh_file()
ObjectDescription.generate_from_description_file()
ObjectDescription.generate_from_parameter_server()
ObjectDescription.links
ObjectDescription.get_link_by_name()
ObjectDescription.joints
ObjectDescription.get_joint_by_name()
ObjectDescription.get_root()
ObjectDescription.get_chain()
ObjectDescription.get_file_extension()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.datastructures.world — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.datastructures.world




 Contents 



Classes
Module Contents
StateEntity
StateEntity._saved_states
StateEntity.saved_states
StateEntity.save_state()
StateEntity.current_state
StateEntity.restore_state()
StateEntity.remove_saved_states()


WorldEntity
WorldEntity.id
WorldEntity.world


World
World.simulation_frequency
World.current_world
World.robot
World.data_directory
World.cache_dir
World.cache_manager
World.id
World.is_prospection_world
World.local_transformer
World.objects
World.mode
World.coll_callbacks
World._current_state
World._init_world()
World._init_events()
World._init_and_sync_prospection_world()
World._update_local_transformer_worlds()
World._init_prospection_world()
World._sync_prospection_world()
World.update_cache_dir_with_object()
World.simulation_time_step
World.load_object_and_get_id()
World.get_object_by_name()
World.get_object_by_type()
World.get_object_by_id()
World.remove_object_by_id()
World.remove_object_from_simulator()
World.remove_object()
World.add_fixed_constraint()
World.add_constraint()
World.remove_constraint()
World.get_joint_position()
World.get_object_joint_names()
World.get_link_pose()
World.get_object_link_names()
World.simulate()
World.update_all_objects_poses()
World.get_object_pose()
World.perform_collision_detection()
World.get_object_contact_points()
World.get_contact_points_between_two_objects()
World.reset_joint_position()
World.reset_object_base_pose()
World.step()
World.set_link_color()
World.get_link_color()
World.get_colors_of_object_links()
World.get_object_axis_aligned_bounding_box()
World.get_link_axis_aligned_bounding_box()
World.set_realtime()
World.set_gravity()
World.set_robot_if_not_set()
World.set_robot()
World.robot_is_set()
World.exit()
World.exit_prospection_world_if_exists()
World.disconnect_from_physics_server()
World.reset_current_world()
World.reset_robot()
World.join_threads()
World.terminate_world_sync()
World.save_state()
World.current_state
World.object_states
World.save_objects_state()
World.save_physics_simulator_state()
World.remove_physics_simulator_state()
World.restore_physics_simulator_state()
World.get_images_for_target()
World.register_two_objects_collision_callbacks()
World.add_resource_path()
World.get_prospection_object_for_object()
World.get_object_for_prospection_object()
World.reset_world()
World.remove_saved_states()
World.update_transforms_for_objects_in_current_world()
World.ray_test()
World.ray_test_batch()
World.create_visual_shape()
World.create_multi_body_from_visual_shapes()
World.create_multi_body()
World.create_box_visual_shape()
World.create_cylinder_visual_shape()
World.create_sphere_visual_shape()
World.create_capsule_visual_shape()
World.create_plane_visual_shape()
World.create_mesh_visual_shape()
World.add_text()
World.remove_text()
World.enable_joint_force_torque_sensor()
World.disable_joint_force_torque_sensor()
World.get_joint_reaction_force_torque()
World.get_applied_joint_motor_torque()
World.__del__()


UseProspectionWorld
UseProspectionWorld.WAIT_TIME_FOR_ADDING_QUEUE
UseProspectionWorld.prev_world
UseProspectionWorld.sync_worlds()
UseProspectionWorld.__enter__()
UseProspectionWorld.__exit__()


WorldSync
WorldSync.world
WorldSync.prospection_world
WorldSync.world_sync
WorldSync.terminate
WorldSync.add_obj_queue
WorldSync.remove_obj_queue
WorldSync.pause_sync
WorldSync.object_mapping
WorldSync.equal_states
WorldSync.run()
WorldSync.check_for_pause()
WorldSync.check_for_equal()












pycram.datastructures.world#

Classes#


StateEntity
The StateEntity class is used to store the state of an object or the physics simulator. This is used to save and

WorldEntity
A data class that represents an entity of the world, such as an object or a link.

World
The World Class represents the physics Simulation and belief state, it is the main interface for reasoning about

UseProspectionWorld
An environment for using the prospection world, while in this environment the current_world

WorldSync
Synchronizes the state between the World and its prospection world.






Module Contents#


class pycram.datastructures.world.StateEntity#
The StateEntity class is used to store the state of an object or the physics simulator. This is used to save and
restore the state of the World.


_saved_states: typing_extensions.Dict[int, pycram.datastructures.dataclasses.State]#



property saved_states: typing_extensions.Dict[int, pycram.datastructures.dataclasses.State]#
Returns the saved states of this entity.



save_state(state_id: int) → int#
Saves the state of this entity with the given state id.

Parameters:
state_id – The unique id of the state.





property current_state: pycram.datastructures.dataclasses.State#

Abstractmethod:


Returns the current state of this entity.

Returns:
The current state of this entity.





restore_state(state_id: int) → None#
Restores the state of this entity from a saved state using the given state id.

Parameters:
state_id – The unique id of the state.





remove_saved_states() → None#
Removes all saved states of this entity.




class pycram.datastructures.world.WorldEntity(_id: int, world: typing_extensions.Optional[World] = None)#
Bases: StateEntity, abc.ABC
A data class that represents an entity of the world, such as an object or a link.


id#



world: World#




class pycram.datastructures.world.World(mode: pycram.datastructures.enums.WorldMode, is_prospection_world: bool, simulation_frequency: float)#
Bases: StateEntity, abc.ABC
The World Class represents the physics Simulation and belief state, it is the main interface for reasoning about
the World. This is implemented as a singleton, the current World can be accessed via the static variable
current_world which is managed by the World class itself.


simulation_frequency: float#
Global reference for the simulation frequency (Hz), used in calculating the equivalent real time in the simulation.



current_world: typing_extensions.Optional[World] = None#
Global reference to the currently used World, usually this is the
graphical one. However, if you are inside a UseProspectionWorld() environment the current_world points to the
prospection world. In this way you can comfortably use the current_world, which should point towards the World
used at the moment.



robot: typing_extensions.Optional[pycram.world_concepts.world_object.Object] = None#

Global reference to the spawned Object that represents the robot. The robot is identified by checking the name inthe URDF with the name of the URDF on the parameter server.





data_directory: typing_extensions.List[str]#
Global reference for the data directories, this is used to search for the description files of the robot
and the objects.



cache_dir#
Global reference for the cache directory, this is used to cache the description files of the robot and the objects.



cache_manager#



id: typing_extensions.Optional[int]#



is_prospection_world: bool#



local_transformer#



objects: typing_extensions.List[pycram.world_concepts.world_object.Object] = []#



mode: pycram.datastructures.enums.WorldMode#



coll_callbacks: typing_extensions.Dict[typing_extensions.Tuple[pycram.world_concepts.world_object.Object, pycram.world_concepts.world_object.Object], pycram.datastructures.dataclasses.CollisionCallbacks]#



_current_state: typing_extensions.Optional[pycram.datastructures.dataclasses.WorldState] = None#



abstract _init_world(mode: pycram.datastructures.enums.WorldMode)#
Initializes the physics simulation.



_init_events()#
Initializes dynamic events that can be used to react to changes in the World.



_init_and_sync_prospection_world()#
Initializes the prospection world and the synchronization between the main and the prospection world.



_update_local_transformer_worlds()#
Updates the local transformer worlds with the current world and prospection world.



_init_prospection_world()#
Initializes the prospection world, if this is a prospection world itself it will not create another prospection,
world, but instead set the prospection world to None, else it will create a prospection world.



_sync_prospection_world()#
Synchronizes the prospection world with the main world, this means that every object in the main world will be
added to the prospection world and vice versa.



update_cache_dir_with_object(path: str, ignore_cached_files: bool, obj: pycram.world_concepts.world_object.Object) → str#
Updates the cache directory with the given object.

Parameters:

path – The path to the object.
ignore_cached_files – If the cached files should be ignored.
obj – The object to be added to the cache directory.






property simulation_time_step#

The time step of the simulation in seconds.



abstract load_object_and_get_id(path: typing_extensions.Optional[str] = None, pose: typing_extensions.Optional[pycram.datastructures.pose.Pose] = None) → int#
Loads a description file (e.g. URDF) at the given pose and returns the id of the loaded object.

Parameters:

path – The path to the description file, if None the description file is assumed to be already loaded.
pose – The pose at which the object should be loaded.


Returns:
The id of the loaded object.





get_object_by_name(name: str) → typing_extensions.Optional[pycram.world_concepts.world_object.Object]#
Returns the object with the given name. If there is no object with the given name, None is returned.

Parameters:
name – The name of the returned Objects.

Returns:
The object with the given name, if there is one.





get_object_by_type(obj_type: pycram.datastructures.enums.ObjectType) → typing_extensions.List[pycram.world_concepts.world_object.Object]#
Returns a list of all Objects which have the type ‘obj_type’.

Parameters:
obj_type – The type of the returned Objects.

Returns:
A list of all Objects that have the type ‘obj_type’.





get_object_by_id(obj_id: int) → pycram.world_concepts.world_object.Object#
Returns the single Object that has the unique id.

Parameters:
obj_id – The unique id for which the Object should be returned.

Returns:
The Object with the id ‘id’.





abstract remove_object_by_id(obj_id: int) → None#
Removes the object with the given id from the world.

Parameters:
obj_id – The unique id of the object to be removed.





abstract remove_object_from_simulator(obj: pycram.world_concepts.world_object.Object) → None#
Removes an object from the physics simulator.

Parameters:
obj – The object to be removed.





remove_object(obj: pycram.world_concepts.world_object.Object) → None#
Removes this object from the current world.
For the object to be removed it has to be detached from all objects it
is currently attached to. After this is done a call to world remove object is done
to remove this Object from the simulation/world.

Parameters:
obj – The object to be removed.





add_fixed_constraint(parent_link: pycram.description.Link, child_link: pycram.description.Link, child_to_parent_transform: pycram.datastructures.pose.Transform) → int#
Creates a fixed joint constraint between the given parent and child links,
the joint frame will be at the origin of the child link frame, and would have the same orientation
as the child link frame.

Parameters:

parent_link – The constrained link of the parent object.
child_link – The constrained link of the child object.
child_to_parent_transform – The transform from the child link frame to the parent link frame.


Returns:
The unique id of the created constraint.





abstract add_constraint(constraint: pycram.world_concepts.constraints.Constraint) → int#
Add a constraint between two objects links so that they become attached for example.

Parameters:
constraint – The constraint data used to create the constraint.





abstract remove_constraint(constraint_id) → None#
Remove a constraint by its ID.

Parameters:
constraint_id – The unique id of the constraint to be removed.





abstract get_joint_position(joint: pycram.description.Joint) → float#
Get the position of a joint of an articulated object

Parameters:
joint – The joint to get the position for.

Returns:
The joint position as a float.





abstract get_object_joint_names(obj: pycram.world_concepts.world_object.Object) → typing_extensions.List[str]#
Returns the names of all joints of this object.

Parameters:
obj – The object.

Returns:
A list of joint names.





abstract get_link_pose(link: pycram.description.Link) → pycram.datastructures.pose.Pose#
Get the pose of a link of an articulated object with respect to the world frame.

Parameters:
link – The link as a AbstractLink object.

Returns:
The pose of the link as a Pose object.





abstract get_object_link_names(obj: pycram.world_concepts.world_object.Object) → typing_extensions.List[str]#
Returns the names of all links of this object.

Parameters:
obj – The object.

Returns:
A list of link names.





simulate(seconds: float, real_time: typing_extensions.Optional[bool] = False) → None#
Simulates Physics in the World for a given amount of seconds. Usually this simulation is faster than real
time. By setting the ‘real_time’ parameter this simulation is slowed down such that the simulated time is equal
to real time.

Parameters:

seconds – The amount of seconds that should be simulated.
real_time – If the simulation should happen in real time or faster.






update_all_objects_poses() → None#
Updates the positions of all objects in the world.



abstract get_object_pose(obj: pycram.world_concepts.world_object.Object) → pycram.datastructures.pose.Pose#
Get the pose of an object in the world frame from the current object pose in the simulator.



abstract perform_collision_detection() → None#
Checks for collisions between all objects in the World and updates the contact points.



abstract get_object_contact_points(obj: pycram.world_concepts.world_object.Object) → typing_extensions.List#
Returns a list of contact points of this Object with all other Objects.

Parameters:
obj – The object.

Returns:
A list of all contact points with other objects





abstract get_contact_points_between_two_objects(obj1: pycram.world_concepts.world_object.Object, obj2: pycram.world_concepts.world_object.Object) → typing_extensions.List#
Returns a list of contact points between obj1 and obj2.

Parameters:

obj1 – The first object.
obj2 – The second object.


Returns:
A list of all contact points between the two objects.





abstract reset_joint_position(joint: pycram.description.Joint, joint_position: float) → None#
Reset the joint position instantly without physics simulation

Parameters:

joint – The joint to reset the position for.
joint_position – The new joint pose.






abstract reset_object_base_pose(obj: pycram.world_concepts.world_object.Object, pose: pycram.datastructures.pose.Pose)#
Reset the world position and orientation of the base of the object instantaneously,
not through physics simulation. (x,y,z) position vector and (x,y,z,w) quaternion orientation.

Parameters:

obj – The object.
pose – The new pose as a Pose object.






abstract step()#
Step the world simulation using forward dynamics



abstract set_link_color(link: pycram.description.Link, rgba_color: pycram.datastructures.dataclasses.Color)#
Changes the rgba_color of a link of this object, the rgba_color has to be given as Color object.

Parameters:

link – The link which should be colored.
rgba_color – The rgba_color as Color object with RGBA values between 0 and 1.






abstract get_link_color(link: pycram.description.Link) → pycram.datastructures.dataclasses.Color#
This method returns the rgba_color of this link.

Parameters:
link – The link for which the rgba_color should be returned.

Returns:
The rgba_color as Color object with RGBA values between 0 and 1.





abstract get_colors_of_object_links(obj: pycram.world_concepts.world_object.Object) → typing_extensions.Dict[str, pycram.datastructures.dataclasses.Color]#
Get the RGBA colors of each link in the object as a dictionary from link name to rgba_color.

Parameters:
obj – The object

Returns:
A dictionary with link names as keys and a Color object for each link as value.





abstract get_object_axis_aligned_bounding_box(obj: pycram.world_concepts.world_object.Object) → pycram.datastructures.dataclasses.AxisAlignedBoundingBox#
Returns the axis aligned bounding box of this object. The return of this method are two points in
world coordinate frame which define a bounding box.

Parameters:
obj – The object for which the bounding box should be returned.

Returns:
AxisAlignedBoundingBox object containing the min and max points of the bounding box.





abstract get_link_axis_aligned_bounding_box(link: pycram.description.Link) → pycram.datastructures.dataclasses.AxisAlignedBoundingBox#
Returns the axis aligned bounding box of the link. The return of this method are two points in
world coordinate frame which define a bounding box.



abstract set_realtime(real_time: bool) → None#
Enables the real time simulation of Physics in the World. By default, this is disabled and Physics is only
simulated to reason about it.

Parameters:
real_time – Whether the World should simulate Physics in real time.





abstract set_gravity(gravity_vector: typing_extensions.List[float]) → None#

Sets the gravity that is used in the World. By default, it is set to the gravity on earth ([0, 0, -9.8]).Gravity is given as a vector in x,y,z. Gravity is only applied while simulating Physic.



Parameters:
gravity_vector – The gravity vector that should be used in the World.





set_robot_if_not_set(robot: pycram.world_concepts.world_object.Object) → None#
Sets the robot if it is not set yet.

Parameters:
robot – The Object reference to the Object representing the robot.





static set_robot(robot: typing_extensions.Union[pycram.world_concepts.world_object.Object, None]) → None#
Sets the global variable for the robot Object This should be set on spawning the robot.

Parameters:
robot – The Object reference to the Object representing the robot.





static robot_is_set() → bool#
Returns whether the robot has been set or not.

Returns:
True if the robot has been set, False otherwise.





exit() → None#
Closes the World as well as the prospection world, also collects any other thread that is running.



exit_prospection_world_if_exists() → None#
Exits the prospection world if it exists.



abstract disconnect_from_physics_server() → None#
Disconnects the world from the physics server.



reset_current_world() → None#
Resets the pose of every object in the World to the pose it was spawned in and sets every joint to 0.



reset_robot() → None#
Sets the robot class variable to None.



abstract join_threads() → None#
Join any running threads. Useful for example when exiting the world.



terminate_world_sync() → None#
Terminates the world sync thread.



save_state(state_id: typing_extensions.Optional[int] = None) → int#
Returns the id of the saved state of the World. The saved state contains the states of all the objects and
the state of the physics simulator.

Returns:
A unique id of the state





property current_state: pycram.datastructures.dataclasses.WorldState#
Returns the current state of this entity.

Returns:
The current state of this entity.





property object_states: typing_extensions.Dict[str, pycram.datastructures.dataclasses.ObjectState]#
Returns the states of all objects in the World.

Returns:
A dictionary with the object id as key and the object state as value.





save_objects_state(state_id: int) → None#
Saves the state of all objects in the World according to the given state using the unique state id.

Parameters:
state_id – The unique id representing the state.





abstract save_physics_simulator_state() → int#
Saves the state of the physics simulator and returns the unique id of the state.

Returns:
The unique id representing the state.





abstract remove_physics_simulator_state(state_id: int) → None#
Removes the state of the physics simulator with the given id.

Parameters:
state_id – The unique id representing the state.





abstract restore_physics_simulator_state(state_id: int) → None#

Restores the objects and environment state in the physics simulator according tothe given state using the unique state id.



Parameters:
state_id – The unique id representing the state.





get_images_for_target(target_pose: pycram.datastructures.pose.Pose, cam_pose: pycram.datastructures.pose.Pose, size: typing_extensions.Optional[int] = 256) → typing_extensions.List[numpy.ndarray]#
Calculates the view and projection Matrix and returns 3 images:

An RGB image
A depth image
A segmentation Mask, the segmentation mask indicates for every pixel the visible Object


Parameters:

target_pose – The pose to which the camera should point.
cam_pose – The pose of the camera.
size – The height and width of the images in pixels.


Returns:
A list containing an RGB and depth image as well as a segmentation mask, in this order.





register_two_objects_collision_callbacks(object_a: pycram.world_concepts.world_object.Object, object_b: pycram.world_concepts.world_object.Object, on_collision_callback: typing_extensions.Callable, on_collision_removal_callback: typing_extensions.Optional[typing_extensions.Callable] = None) → None#
Registers callback methods for contact between two Objects. There can be a callback for when the two Objects
get in contact and, optionally, for when they are not in contact anymore.

Parameters:

object_a – An object in the World
object_b – Another object in the World
on_collision_callback – A function that should be called if the objects are in contact
on_collision_removal_callback – A function that should be called if the objects are not in contact






classmethod add_resource_path(path: str) → None#
Adds a resource path in which the World will search for files. This resource directory is searched if an
Object is spawned only with a filename.

Parameters:
path – A path in the filesystem in which to search for files.





get_prospection_object_for_object(obj: pycram.world_concepts.world_object.Object) → pycram.world_concepts.world_object.Object#

Returns the corresponding object from the prospection world for a given object in the main world.If the given Object is already in the prospection world, it is returned.



Parameters:
obj – The object for which the corresponding object in the prospection World should be found.

Returns:
The corresponding object in the prospection world.





get_object_for_prospection_object(prospection_object: pycram.world_concepts.world_object.Object) → pycram.world_concepts.world_object.Object#
Returns the corresponding object from the main World for a given
object in the prospection world. If the  given object is not in the prospection
world an error will be raised.

Parameters:
prospection_object – The object for which the corresponding object in the main World should be found.

Returns:
The object in the main World.





reset_world(remove_saved_states=True) → None#
Resets the World to the state it was first spawned in.
All attached objects will be detached, all joints will be set to the
default position of 0 and all objects will be set to the position and
orientation in which they were spawned.

Parameters:
remove_saved_states – If the saved states should be removed.





remove_saved_states() → None#
Removes all saved states of the World.



update_transforms_for_objects_in_current_world() → None#
Updates transformations for all objects that are currently in current_world.



abstract ray_test(from_position: typing_extensions.List[float], to_position: typing_extensions.List[float]) → int#
Cast a ray and return the first object hit, if any.

Parameters:

from_position – The starting position of the ray in Cartesian world coordinates.
to_position – The ending position of the ray in Cartesian world coordinates.


Returns:
The object id of the first object hit, or -1 if no object was hit.





abstract ray_test_batch(from_positions: typing_extensions.List[typing_extensions.List[float]], to_positions: typing_extensions.List[typing_extensions.List[float]], num_threads: int = 1) → typing_extensions.List[int]#

Cast a batch of rays and return the result for each of the rays (first object hit, if any. or -1)
Takes optional argument num_threads to specify the number of threads to use
to compute the ray intersections for the batch. Specify 0 to let simulator decide, 1 (default) for singlecore execution, 2 or more to select the number of threads to use.







Parameters:

from_positions – The starting positions of the rays in Cartesian world coordinates.
to_positions – The ending positions of the rays in Cartesian world coordinates.
num_threads – The number of threads to use to compute the ray intersections for the batch.






abstract create_visual_shape(visual_shape: pycram.datastructures.dataclasses.VisualShape) → int#
Creates a visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
visual_shape – The visual shape to be created, uses the VisualShape dataclass defined in world_dataclasses

Returns:
The unique id of the created shape.





create_multi_body_from_visual_shapes(visual_shape_ids: typing_extensions.List[int], pose: pycram.datastructures.pose.Pose) → int#
Creates a multi body from visual shapes in the physics simulator and returns the unique id of the created
multi body.

Parameters:

visual_shape_ids – The ids of the visual shapes that should be used to create the multi body.
pose – The pose of the origin of the multi body relative to the world frame.


Returns:
The unique id of the created multi body.





abstract create_multi_body(multi_body: pycram.datastructures.dataclasses.MultiBody) → int#
Creates a multi body in the physics simulator and returns the unique id of the created multi body. The multibody
is created by joining multiple links/shapes together with joints.

Parameters:
multi_body – The multi body to be created, uses the MultiBody dataclass defined in world_dataclasses.

Returns:
The unique id of the created multi body.





abstract create_box_visual_shape(shape_data: pycram.datastructures.dataclasses.BoxVisualShape) → int#
Creates a box visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the box visual shape to be created, uses the BoxVisualShape dataclass defined in world_dataclasses.

Returns:
The unique id of the created shape.





abstract create_cylinder_visual_shape(shape_data: pycram.datastructures.dataclasses.CylinderVisualShape) → int#
Creates a cylinder visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the cylinder visual shape to be created, uses the CylinderVisualShape dataclass defined in world_dataclasses.

Returns:
The unique id of the created shape.





abstract create_sphere_visual_shape(shape_data: pycram.datastructures.dataclasses.SphereVisualShape) → int#
Creates a sphere visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the sphere visual shape to be created, uses the SphereVisualShape dataclass defined in world_dataclasses.

Returns:
The unique id of the created shape.





abstract create_capsule_visual_shape(shape_data: pycram.datastructures.dataclasses.CapsuleVisualShape) → int#
Creates a capsule visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the capsule visual shape to be created, uses the CapsuleVisualShape dataclass defined in world_dataclasses.

Returns:
The unique id of the created shape.





abstract create_plane_visual_shape(shape_data: pycram.datastructures.dataclasses.PlaneVisualShape) → int#
Creates a plane visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the plane visual shape to be created, uses the PlaneVisualShape dataclass defined in world_dataclasses.

Returns:
The unique id of the created shape.





abstract create_mesh_visual_shape(shape_data: pycram.datastructures.dataclasses.MeshVisualShape) → int#
Creates a mesh visual shape in the physics simulator and returns the unique id of the created shape.

Parameters:
shape_data – The parameters that define the mesh visual shape to be created,


uses the MeshVisualShape dataclass defined in world_dataclasses.
:return: The unique id of the created shape.



abstract add_text(text: str, position: typing_extensions.List[float], orientation: typing_extensions.Optional[typing_extensions.List[float]] = None, size: float = 0.1, color: typing_extensions.Optional[pycram.datastructures.dataclasses.Color] = Color(), life_time: typing_extensions.Optional[float] = 0, parent_object_id: typing_extensions.Optional[int] = None, parent_link_id: typing_extensions.Optional[int] = None) → int#
Adds text to the world.

Parameters:

text – The text to be added.
position – The position of the text in the world.
orientation – By default, debug text will always face the camera, automatically rotation. By specifying a text orientation (quaternion), the orientation will be fixed in world space or local space (when parent is specified).
size – The size of the text.
color – The color of the text.
life_time – The lifetime in seconds of the text to remain in the world, if 0 the text will remain in the world until it is removed manually.
parent_object_id – The id of the object to which the text should be attached.
parent_link_id – The id of the link to which the text should be attached.


Returns:
The id of the added text.





abstract remove_text(text_id: typing_extensions.Optional[int] = None) → None#
Removes text from the world using the given id. if no id is given all text will be removed.

Parameters:
text_id – The id of the text to be removed.





abstract enable_joint_force_torque_sensor(obj: pycram.world_concepts.world_object.Object, fts_joint_idx: int) → None#
You can enable a joint force/torque sensor in each joint. Once enabled, if you perform
a simulation step, the get_joint_reaction_force_torque will report the joint reaction forces in
the fixed degrees of freedom: a fixed joint will measure all 6DOF joint forces/torques.
A revolute/hinge joint force/torque sensor will measure 5DOF reaction forces along all axis except
the hinge axis. The applied force by a joint motor is available through get_applied_joint_motor_torque.

Parameters:

obj – The object in which the joint is located.
fts_joint_idx – The index of the joint for which the force torque sensor should be enabled.






abstract disable_joint_force_torque_sensor(obj: pycram.world_concepts.world_object.Object, joint_id: int) → None#
Disables the force torque sensor of a joint.

Parameters:

obj – The object in which the joint is located.
joint_id – The id of the joint for which the force torque sensor should be disabled.






abstract get_joint_reaction_force_torque(obj: pycram.world_concepts.world_object.Object, joint_id: int) → typing_extensions.List[float]#
Returns the joint reaction forces and torques of the specified joint.

Parameters:

obj – The object in which the joint is located.
joint_id – The id of the joint for which the force torque should be returned.


Returns:
The joint reaction forces and torques of the specified joint.





abstract get_applied_joint_motor_torque(obj: pycram.world_concepts.world_object.Object, joint_id: int) → float#
Returns the applied torque by a joint motor.

Parameters:

obj – The object in which the joint is located.
joint_id – The id of the joint for which the applied motor torque should be returned.


Returns:
The applied torque by a joint motor.





__del__()#




class pycram.datastructures.world.UseProspectionWorld#
An environment for using the prospection world, while in this environment the current_world
variable will point to the prospection world.

Example:
with UseProspectionWorld():NavigateAction.Action([[1, 0, 0], [0, 0, 0, 1]]).perform()






WAIT_TIME_FOR_ADDING_QUEUE = 20#
The time in seconds to wait for the adding queue to be ready.



prev_world: typing_extensions.Optional[World] = None#



sync_worlds()#
Synchronizes the state of the prospection world with the main world.



__enter__()#
This method is called when entering the with block, it will set the current world to the prospection world



__exit__(*args)#
This method is called when exiting the with block, it will restore the previous world to be the current world.




class pycram.datastructures.world.WorldSync(world: World, prospection_world: World)#
Bases: threading.Thread
Synchronizes the state between the World and its prospection world.
Meaning the cartesian and joint position of everything in the prospection world will be
synchronized with the main World.
Adding and removing objects is done via queues, such that loading times of objects
in the prospection world does not affect the World.
The class provides the possibility to pause the synchronization, this can be used
if reasoning should be done in the prospection world.


world: World#



prospection_world: World#



world_sync#



terminate: bool = False#



add_obj_queue: queue.Queue#



remove_obj_queue: queue.Queue#



pause_sync: bool = False#



object_mapping: typing_extensions.Dict[pycram.world_concepts.world_object.Object, pycram.world_concepts.world_object.Object]#



equal_states = False#



run(wait_time_as_n_simulation_steps: typing_extensions.Optional[int] = 1)#
Main method of the synchronization, this thread runs in a loop until the
terminate flag is set.
While this loop runs it continuously checks the cartesian and joint position of
every object in the World and updates the corresponding object in the
prospection world. When there are entries in the adding or removing queue the corresponding objects will
be added or removed in the same iteration.

Parameters:
wait_time_as_n_simulation_steps – The time in simulation steps to wait between each iteration of
the syncing loop.





check_for_pause() → None#
Checks if pause_sync is true and sleeps this thread until it isn’t anymore.



check_for_equal() → bool#
Checks if both Worlds have the same state, meaning all objects are in the same position.
This is currently not used, but might be used in the future if synchronization issues worsen.

Returns:
True if both Worlds have the same state, False otherwise.














previous
pycram.datastructures.pose




next
pycram.designators









 Contents
  


Classes
Module Contents
StateEntity
StateEntity._saved_states
StateEntity.saved_states
StateEntity.save_state()
StateEntity.current_state
StateEntity.restore_state()
StateEntity.remove_saved_states()


WorldEntity
WorldEntity.id
WorldEntity.world


World
World.simulation_frequency
World.current_world
World.robot
World.data_directory
World.cache_dir
World.cache_manager
World.id
World.is_prospection_world
World.local_transformer
World.objects
World.mode
World.coll_callbacks
World._current_state
World._init_world()
World._init_events()
World._init_and_sync_prospection_world()
World._update_local_transformer_worlds()
World._init_prospection_world()
World._sync_prospection_world()
World.update_cache_dir_with_object()
World.simulation_time_step
World.load_object_and_get_id()
World.get_object_by_name()
World.get_object_by_type()
World.get_object_by_id()
World.remove_object_by_id()
World.remove_object_from_simulator()
World.remove_object()
World.add_fixed_constraint()
World.add_constraint()
World.remove_constraint()
World.get_joint_position()
World.get_object_joint_names()
World.get_link_pose()
World.get_object_link_names()
World.simulate()
World.update_all_objects_poses()
World.get_object_pose()
World.perform_collision_detection()
World.get_object_contact_points()
World.get_contact_points_between_two_objects()
World.reset_joint_position()
World.reset_object_base_pose()
World.step()
World.set_link_color()
World.get_link_color()
World.get_colors_of_object_links()
World.get_object_axis_aligned_bounding_box()
World.get_link_axis_aligned_bounding_box()
World.set_realtime()
World.set_gravity()
World.set_robot_if_not_set()
World.set_robot()
World.robot_is_set()
World.exit()
World.exit_prospection_world_if_exists()
World.disconnect_from_physics_server()
World.reset_current_world()
World.reset_robot()
World.join_threads()
World.terminate_world_sync()
World.save_state()
World.current_state
World.object_states
World.save_objects_state()
World.save_physics_simulator_state()
World.remove_physics_simulator_state()
World.restore_physics_simulator_state()
World.get_images_for_target()
World.register_two_objects_collision_callbacks()
World.add_resource_path()
World.get_prospection_object_for_object()
World.get_object_for_prospection_object()
World.reset_world()
World.remove_saved_states()
World.update_transforms_for_objects_in_current_world()
World.ray_test()
World.ray_test_batch()
World.create_visual_shape()
World.create_multi_body_from_visual_shapes()
World.create_multi_body()
World.create_box_visual_shape()
World.create_cylinder_visual_shape()
World.create_sphere_visual_shape()
World.create_capsule_visual_shape()
World.create_plane_visual_shape()
World.create_mesh_visual_shape()
World.add_text()
World.remove_text()
World.enable_joint_force_torque_sensor()
World.disable_joint_force_torque_sensor()
World.get_joint_reaction_force_torque()
World.get_applied_joint_motor_torque()
World.__del__()


UseProspectionWorld
UseProspectionWorld.WAIT_TIME_FOR_ADDING_QUEUE
UseProspectionWorld.prev_world
UseProspectionWorld.sync_worlds()
UseProspectionWorld.__enter__()
UseProspectionWorld.__exit__()


WorldSync
WorldSync.world
WorldSync.prospection_world
WorldSync.world_sync
WorldSync.terminate
WorldSync.add_obj_queue
WorldSync.remove_obj_queue
WorldSync.pause_sync
WorldSync.object_mapping
WorldSync.equal_states
WorldSync.run()
WorldSync.check_for_pause()
WorldSync.check_for_equal()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.datastructures.pose — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.datastructures.pose




 Contents 



Classes
Functions
Module Contents
get_normalized_quaternion()
Pose
Pose.frame_id
Pose.stamp
Pose.frame
Pose.from_pose_stamped()
Pose.position
Pose.orientation
Pose.to_list()
Pose.to_transform()
Pose.copy()
Pose.position_as_list()
Pose.orientation_as_list()
Pose.dist()
Pose.__eq__()
Pose.set_position()
Pose.set_orientation()
Pose.to_sql()
Pose.insert()
Pose.multiply_quaternions()
Pose.set_orientation_from_euler()


Transform
Transform.frame_id
Transform.child_frame_id
Transform.stamp
Transform.frame
Transform.from_pose_and_child_frame()
Transform.from_transform_stamped()
Transform.translation
Transform.rotation
Transform.copy()
Transform.translation_as_list()
Transform.rotation_as_list()
Transform.to_pose()
Transform.invert()
Transform.__mul__()
Transform.inverse_times()
Transform.__eq__()
Transform.set_translation()
Transform.set_rotation()












pycram.datastructures.pose#

Classes#


Pose
Pose representation for PyCRAM, this class extends the PoseStamped ROS message from geometry_msgs. Thus making it

Transform
Represents a Transformation from one TF frame to another in PyCRAM. Like with Poses this class inherits from the ROS






Functions#


get_normalized_quaternion(→ geometry_msgs.msg.Quaternion)
Normalizes a given quaternion such that it has a magnitude of 1.






Module Contents#


pycram.datastructures.pose.get_normalized_quaternion(quaternion: numpy.ndarray) → geometry_msgs.msg.Quaternion#
Normalizes a given quaternion such that it has a magnitude of 1.

Parameters:
quaternion – The quaternion that should be normalized

Returns:
The normalized quaternion





class pycram.datastructures.pose.Pose(position: typing_extensions.Optional[typing_extensions.List[float]] = None, orientation: typing_extensions.Optional[typing_extensions.List[float]] = None, frame: str = 'map', time: rospy.Time = None)#
Bases: geometry_msgs.msg.PoseStamped
Pose representation for PyCRAM, this class extends the PoseStamped ROS message from geometry_msgs. Thus making it
compatible with every ROS service and message expecting a PoseStamped message.

Naming convention for Poses:Pose: Instances of this class, representing a cartesian position and a quaternion for orientation
Position: Only the cartesian position in xyz
Orientation: Only the quaternion as xyzw




frame_id#



stamp#



property frame: str#
Property for the frame_id such that it is easier accessible. Instead of Pose.header.frame_id it is Pose.frame

Returns:
The TF frame of this Pose





static from_pose_stamped(pose_stamped: geometry_msgs.msg.PoseStamped) → Pose#
Converts a geometry_msgs/PoseStamped message to a Pose object. Should be used for compatability with ROS.

Parameters:
pose_stamped – The pose stamped message which should be converted

Returns:
A Pose object with the same information as the given message





property position: geometry_msgs.msg.Point#
Property that points to the position of this pose



property orientation: geometry_msgs.msg.Quaternion#
Property that points to the orientation of this pose



to_list() → typing_extensions.List[typing_extensions.List[float]]#
Returns the position and orientation of this pose as a list containing two list.

Returns:
The position and orientation as lists





to_transform(child_frame: str) → Transform#
Converts this pose to a Transform from the TF frame of the pose to the given child_frame

Parameters:
child_frame – Child frame id to which the Transform points

Returns:
A new Transform





copy() → Pose#
Creates a deep copy of this pose.

Returns:
A copy of this pose





position_as_list() → typing_extensions.List[float]#
Returns only the position as a list of xyz.

Returns:
The position as a list





orientation_as_list() → typing_extensions.List[float]#
Returns only the orientation as a list of a quaternion

Returns:
The orientation as a quaternion with xyzw





dist(other_pose: Pose) → float#
Calculates the euclidian distance between this Pose and the given one. For distance calculation only the
position is used.

Parameters:
other_pose – Pose to which the distance should be calculated

Returns:
The distance between the Poses





__eq__(other: Pose) → bool#
Overloads the ‘==’ operator to check for equality between two Poses. Only compares the position, orientation and
frame. Timestamps of Poses are not takes into account.

Parameters:
other – Other pose which should be compared

Returns:
True if both Poses have the same position, orientation and frame. False otherwise





set_position(new_position: typing_extensions.List[float]) → None#
Sets the position of this Pose to the given position. Position has to be given as a vector in cartesian space.

Parameters:
new_position – New position as a vector of xyz





set_orientation(new_orientation: typing_extensions.List[float]) → None#
Sets the orientation to the given quaternion. The new orientation has to be given as a quaternion.

Parameters:
new_orientation – New orientation as a quaternion with xyzw





to_sql() → pycram.orm.base.Pose#



insert(session: sqlalchemy.orm.Session) → pycram.orm.base.Pose#



multiply_quaternions(quaternion: typing_extensions.List) → None#
Multiply the quaternion of this Pose with the given quaternion, the result will be the new orientation of this
Pose.

Parameters:
quaternion – The quaternion by which the orientation of this Pose should be multiplied





set_orientation_from_euler(axis: typing_extensions.List, euler_angles: typing_extensions.List[float]) → None#
Convert axis-angle to quaternion.

Parameters:

axis – (x, y, z) tuple representing rotation axis.
angle – rotation angle in degree


Returns:
The quaternion representing the axis angle






class pycram.datastructures.pose.Transform(translation: typing_extensions.Optional[typing_extensions.List[float]] = None, rotation: typing_extensions.Optional[typing_extensions.List[float]] = None, frame: typing_extensions.Optional[str] = 'map', child_frame: typing_extensions.Optional[str] = '', time: rospy.Time = None)#
Bases: geometry_msgs.msg.TransformStamped
Represents a Transformation from one TF frame to another in PyCRAM. Like with Poses this class inherits from the ROS
message TransformStamped form geometry_msgs and is therefore compatible with ROS services and messages that require
a TransformStamped message.

Naming Convention for Transforms:Transform: Instances of this class, representing a translation and rotation from frame_id to child_frame_id
Translation: A vector representing the conversion in cartesian space
Rotation: A quaternion representing the conversion of rotation between both frames




frame_id#



child_frame_id#



stamp#



property frame: str#
Property for the frame_id such that it is easier accessible. Instead of Pose.header.frame_id it is Pose.frame

Returns:
The TF frame of this Pose





classmethod from_pose_and_child_frame(pose: Pose, child_frame_name: str) → Transform#



static from_transform_stamped(transform_stamped: geometry_msgs.msg.TransformStamped) → Transform#
Creates a Transform instance from a geometry_msgs/TransformStamped message. Should be used for compatibility with
ROS.

Parameters:
transform_stamped – The transform stamped message that should be converted

Returns:
An Transform with the same information as the transform stamped message





property translation: None#
Property that points to the translation of this Transform



property rotation: None#
Property that points to the rotation of this Transform



copy() → Transform#
Creates a deep copy of this pose.

Returns:
A copy of this pose





translation_as_list() → typing_extensions.List[float]#
Returns the translation of this Transform as a list.

Returns:
The translation as a list of xyz





rotation_as_list() → typing_extensions.List[float]#
Returns the rotation of this Transform as a list representing a quaternion.

Returns:
The rotation of this Transform as a list with xyzw





to_pose() → Pose#
Converts this Transform to a Pose, in this process the child_frame_id is lost.

Returns:
A new pose with same translation as position and rotation as orientation





invert() → Transform#
Inverts this Transform, the new Transform points from the child_frame_id to the frame_id

Returns:
A new inverted Transform





__mul__(other: Transform) → typing_extensions.Union[Transform, None]#
Multiplies this Transform with another one. The resulting Transform points from the frame_id of this Transform
to the child_frame_id of the other Transform.

Parameters:
other – The Transform which should be multiplied with this one.

Returns:
The resulting Transform from the multiplication





inverse_times(other_transform: Transform) → Transform#
Like a ‘minus’ for Transforms, subtracts the other_transform from this one.

Parameters:
other_transform – Transform which should be subtracted from this one

Returns:
The resulting Transform form the calculation





__eq__(other: Transform) → bool#
Overloads the ‘==’ operator to check for equality between two Transforms. Only compares the translation,
rotation, frame and child frame. Timestamps of Poses are not takes into account.

Parameters:
other – Other pose which should be compared

Returns:
True if both Transforms have the same translation, rotation, frame and child frame. False otherwise





set_translation(new_translation: typing_extensions.List[float]) → None#
Sets the translation of this Transform to the newly given one. Translation has to be a vector in cartesian space

Parameters:
new_translation – The new translation as a vector with xyz.





set_rotation(new_rotation: typing_extensions.List[float]) → None#
Sets the rotation of this Transform to the newly given one. Rotation has to be a quaternion.

Parameters:
new_rotation – The new rotation as a quaternion with xyzw














previous
pycram.datastructures.enums




next
pycram.datastructures.world









 Contents
  


Classes
Functions
Module Contents
get_normalized_quaternion()
Pose
Pose.frame_id
Pose.stamp
Pose.frame
Pose.from_pose_stamped()
Pose.position
Pose.orientation
Pose.to_list()
Pose.to_transform()
Pose.copy()
Pose.position_as_list()
Pose.orientation_as_list()
Pose.dist()
Pose.__eq__()
Pose.set_position()
Pose.set_orientation()
Pose.to_sql()
Pose.insert()
Pose.multiply_quaternions()
Pose.set_orientation_from_euler()


Transform
Transform.frame_id
Transform.child_frame_id
Transform.stamp
Transform.frame
Transform.from_pose_and_child_frame()
Transform.from_transform_stamped()
Transform.translation
Transform.rotation
Transform.copy()
Transform.translation_as_list()
Transform.rotation_as_list()
Transform.to_pose()
Transform.invert()
Transform.__mul__()
Transform.inverse_times()
Transform.__eq__()
Transform.set_translation()
Transform.set_rotation()












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.datastructures — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.datastructures




 Contents 



Submodules








pycram.datastructures#

Submodules#


pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world












previous
pycram




next
pycram.datastructures.dataclasses









 Contents
  


Submodules








By Jonas Dech




    
      © Copyright 2024.
      

























pycram.datastructures.enums — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.datastructures.enums




 Contents 



Classes
Module Contents
ExecutionType
ExecutionType.REAL
ExecutionType.SIMULATED
ExecutionType.SEMI_REAL


Arms
Arms.LEFT
Arms.RIGHT
Arms.BOTH


TaskStatus
TaskStatus.CREATED
TaskStatus.RUNNING
TaskStatus.SUCCEEDED
TaskStatus.FAILED


JointType
JointType.REVOLUTE
JointType.PRISMATIC
JointType.SPHERICAL
JointType.PLANAR
JointType.FIXED
JointType.UNKNOWN
JointType.CONTINUOUS
JointType.FLOATING


Grasp
Grasp.FRONT
Grasp.LEFT
Grasp.RIGHT
Grasp.TOP


ObjectType
ObjectType.METALMUG
ObjectType.PRINGLES
ObjectType.MILK
ObjectType.SPOON
ObjectType.BOWL
ObjectType.BREAKFAST_CEREAL
ObjectType.JEROEN_CUP
ObjectType.ROBOT
ObjectType.ENVIRONMENT
ObjectType.GENERIC_OBJECT
ObjectType.HUMAN


State
State.SUCCEEDED
State.FAILED
State.RUNNING
State.INTERRUPTED


Shape
Shape.SPHERE
Shape.BOX
Shape.CYLINDER
Shape.MESH
Shape.PLANE
Shape.CAPSULE


WorldMode
WorldMode.GUI
WorldMode.DIRECT


AxisIdentifier
AxisIdentifier.X
AxisIdentifier.Y
AxisIdentifier.Z


GripperState
GripperState.OPEN
GripperState.CLOSE


GripperType
GripperType.PARALLEL
GripperType.SUCTION
GripperType.FINGER
GripperType.HYDRAULIC
GripperType.PNEUMATIC
GripperType.CUSTOM


PerceptionTechniques
PerceptionTechniques.ALL
PerceptionTechniques.HUMAN
PerceptionTechniques.TYPES


ImageEnum
ImageEnum.HI
ImageEnum.TALK
ImageEnum.DISH
ImageEnum.DONE
ImageEnum.DROP
ImageEnum.HANDOVER
ImageEnum.ORDER
ImageEnum.PICKING
ImageEnum.PLACING
ImageEnum.REPEAT
ImageEnum.SEARCH
ImageEnum.WAVING
ImageEnum.FOLLOWING
ImageEnum.DRIVINGBACK
ImageEnum.PUSHBUTTONS
ImageEnum.FOLLOWSTOP
ImageEnum.JREPEAT
ImageEnum.SOFA
ImageEnum.INSPECT
ImageEnum.CHAIR












pycram.datastructures.enums#
Module holding all enums of PyCRAM.

Classes#


ExecutionType
Enum for Execution Process Module types.

Arms
Enum for Arms.

TaskStatus
Enum for readable descriptions of a tasks' status.

JointType
Enum for readable joint types.

Grasp
Enum for Grasp orientations.

ObjectType
Enum for Object types to easier identify different objects

State
Enumeration which describes the result of a language expression.

Shape
Enum for visual shapes of objects

WorldMode
Enum for the different modes of the world.

AxisIdentifier
Enum for translating the axis name to a vector along that axis.

GripperState
Enum for the different motions of the gripper.

GripperType
Enum for the different types of grippers.

PerceptionTechniques
Enum for techniques for perception tasks.

ImageEnum
Enum for image switch view on hsrb display.






Module Contents#


class pycram.datastructures.enums.ExecutionType#
Bases: enum.Enum
Enum for Execution Process Module types.


REAL#



SIMULATED#



SEMI_REAL#




class pycram.datastructures.enums.Arms#
Bases: enum.Enum
Enum for Arms.


LEFT#



RIGHT#



BOTH#




class pycram.datastructures.enums.TaskStatus#
Bases: enum.Enum
Enum for readable descriptions of a tasks’ status.


CREATED = 0#



RUNNING = 1#



SUCCEEDED = 2#



FAILED = 3#




class pycram.datastructures.enums.JointType#
Bases: enum.Enum
Enum for readable joint types.


REVOLUTE = 0#



PRISMATIC = 1#



SPHERICAL = 2#



PLANAR = 3#



FIXED = 4#



UNKNOWN = 5#



CONTINUOUS = 6#



FLOATING = 7#




class pycram.datastructures.enums.Grasp#
Bases: enum.Enum
Enum for Grasp orientations.


FRONT = 0#



LEFT = 1#



RIGHT = 2#



TOP = 3#




class pycram.datastructures.enums.ObjectType#
Bases: enum.Enum
Enum for Object types to easier identify different objects


METALMUG#



PRINGLES#



MILK#



SPOON#



BOWL#



BREAKFAST_CEREAL#



JEROEN_CUP#



ROBOT#



ENVIRONMENT#



GENERIC_OBJECT#



HUMAN#




class pycram.datastructures.enums.State#
Bases: enum.Enum
Enumeration which describes the result of a language expression.


SUCCEEDED = 1#



FAILED = 0#



RUNNING = 2#



INTERRUPTED = 3#




class pycram.datastructures.enums.Shape#
Bases: enum.Enum
Enum for visual shapes of objects


SPHERE = 2#



BOX = 3#



CYLINDER = 4#



MESH = 5#



PLANE = 6#



CAPSULE = 7#




class pycram.datastructures.enums.WorldMode#
Bases: enum.Enum
Enum for the different modes of the world.


GUI = 'GUI'#



DIRECT = 'DIRECT'#




class pycram.datastructures.enums.AxisIdentifier#
Bases: enum.Enum
Enum for translating the axis name to a vector along that axis.


X = (1, 0, 0)#



Y = (0, 1, 0)#



Z = (0, 0, 1)#




class pycram.datastructures.enums.GripperState#
Bases: enum.Enum
Enum for the different motions of the gripper.


OPEN#



CLOSE#




class pycram.datastructures.enums.GripperType#
Bases: enum.Enum
Enum for the different types of grippers.


PARALLEL#



SUCTION#



FINGER#



HYDRAULIC#



PNEUMATIC#



CUSTOM#




class pycram.datastructures.enums.PerceptionTechniques#
Bases: enum.Enum
Enum for techniques for perception tasks.


ALL#



HUMAN#



TYPES#




class pycram.datastructures.enums.ImageEnum#
Bases: enum.Enum
Enum for image switch view on hsrb display.


HI = 0#



TALK = 1#



DISH = 2#



DONE = 3#



DROP = 4#



HANDOVER = 5#



ORDER = 6#



PICKING = 7#



PLACING = 8#



REPEAT = 9#



SEARCH = 10#



WAVING = 11#



FOLLOWING = 12#



DRIVINGBACK = 13#



PUSHBUTTONS = 14#



FOLLOWSTOP = 15#



JREPEAT = 16#



SOFA = 17#



INSPECT = 18#



CHAIR = 37#












previous
pycram.datastructures.dataclasses




next
pycram.datastructures.pose









 Contents
  


Classes
Module Contents
ExecutionType
ExecutionType.REAL
ExecutionType.SIMULATED
ExecutionType.SEMI_REAL


Arms
Arms.LEFT
Arms.RIGHT
Arms.BOTH


TaskStatus
TaskStatus.CREATED
TaskStatus.RUNNING
TaskStatus.SUCCEEDED
TaskStatus.FAILED


JointType
JointType.REVOLUTE
JointType.PRISMATIC
JointType.SPHERICAL
JointType.PLANAR
JointType.FIXED
JointType.UNKNOWN
JointType.CONTINUOUS
JointType.FLOATING


Grasp
Grasp.FRONT
Grasp.LEFT
Grasp.RIGHT
Grasp.TOP


ObjectType
ObjectType.METALMUG
ObjectType.PRINGLES
ObjectType.MILK
ObjectType.SPOON
ObjectType.BOWL
ObjectType.BREAKFAST_CEREAL
ObjectType.JEROEN_CUP
ObjectType.ROBOT
ObjectType.ENVIRONMENT
ObjectType.GENERIC_OBJECT
ObjectType.HUMAN


State
State.SUCCEEDED
State.FAILED
State.RUNNING
State.INTERRUPTED


Shape
Shape.SPHERE
Shape.BOX
Shape.CYLINDER
Shape.MESH
Shape.PLANE
Shape.CAPSULE


WorldMode
WorldMode.GUI
WorldMode.DIRECT


AxisIdentifier
AxisIdentifier.X
AxisIdentifier.Y
AxisIdentifier.Z


GripperState
GripperState.OPEN
GripperState.CLOSE


GripperType
GripperType.PARALLEL
GripperType.SUCTION
GripperType.FINGER
GripperType.HYDRAULIC
GripperType.PNEUMATIC
GripperType.CUSTOM


PerceptionTechniques
PerceptionTechniques.ALL
PerceptionTechniques.HUMAN
PerceptionTechniques.TYPES


ImageEnum
ImageEnum.HI
ImageEnum.TALK
ImageEnum.DISH
ImageEnum.DONE
ImageEnum.DROP
ImageEnum.HANDOVER
ImageEnum.ORDER
ImageEnum.PICKING
ImageEnum.PLACING
ImageEnum.REPEAT
ImageEnum.SEARCH
ImageEnum.WAVING
ImageEnum.FOLLOWING
ImageEnum.DRIVINGBACK
ImageEnum.PUSHBUTTONS
ImageEnum.FOLLOWSTOP
ImageEnum.JREPEAT
ImageEnum.SOFA
ImageEnum.INSPECT
ImageEnum.CHAIR












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.datastructures.dataclasses — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.datastructures.dataclasses




 Contents 



Classes
Functions
Module Contents
get_point_as_list()
Color
Color.R
Color.G
Color.B
Color.A
Color.from_list()
Color.from_rgb()
Color.from_rgba()
Color.get_rgba()
Color.get_rgb()


AxisAlignedBoundingBox
AxisAlignedBoundingBox.min_x
AxisAlignedBoundingBox.min_y
AxisAlignedBoundingBox.min_z
AxisAlignedBoundingBox.max_x
AxisAlignedBoundingBox.max_y
AxisAlignedBoundingBox.max_z
AxisAlignedBoundingBox.from_min_max()
AxisAlignedBoundingBox.get_min_max_points()
AxisAlignedBoundingBox.get_min_point()
AxisAlignedBoundingBox.get_max_point()
AxisAlignedBoundingBox.get_min_max()
AxisAlignedBoundingBox.get_min()
AxisAlignedBoundingBox.get_max()


CollisionCallbacks
CollisionCallbacks.on_collision_cb
CollisionCallbacks.no_collision_cb


MultiBody
MultiBody.base_visual_shape_index
MultiBody.base_pose
MultiBody.link_visual_shape_indices
MultiBody.link_poses
MultiBody.link_masses
MultiBody.link_inertial_frame_poses
MultiBody.link_parent_indices
MultiBody.link_joint_types
MultiBody.link_joint_axis
MultiBody.link_collision_shape_indices


VisualShape
VisualShape.rgba_color
VisualShape.visual_frame_position
VisualShape.shape_data()
VisualShape.visual_geometry_type


BoxVisualShape
BoxVisualShape.half_extents
BoxVisualShape.shape_data()
BoxVisualShape.visual_geometry_type
BoxVisualShape.size


SphereVisualShape
SphereVisualShape.radius
SphereVisualShape.shape_data()
SphereVisualShape.visual_geometry_type


CapsuleVisualShape
CapsuleVisualShape.radius
CapsuleVisualShape.length
CapsuleVisualShape.shape_data()
CapsuleVisualShape.visual_geometry_type


CylinderVisualShape
CylinderVisualShape.visual_geometry_type


MeshVisualShape
MeshVisualShape.scale
MeshVisualShape.file_name
MeshVisualShape.shape_data()
MeshVisualShape.visual_geometry_type


PlaneVisualShape
PlaneVisualShape.normal
PlaneVisualShape.shape_data()
PlaneVisualShape.visual_geometry_type


State
LinkState
LinkState.constraint_ids


JointState
JointState.position


ObjectState
ObjectState.pose
ObjectState.attachments
ObjectState.link_states
ObjectState.joint_states


WorldState
WorldState.simulator_state_id
WorldState.object_states












pycram.datastructures.dataclasses#

Classes#


Color
Dataclass for storing rgba_color as an RGBA value.

AxisAlignedBoundingBox
Dataclass for storing an axis-aligned bounding box.

CollisionCallbacks


MultiBody


VisualShape
Helper class that provides a standard way to create an ABC using

BoxVisualShape
Helper class that provides a standard way to create an ABC using

SphereVisualShape
Helper class that provides a standard way to create an ABC using

CapsuleVisualShape
Helper class that provides a standard way to create an ABC using

CylinderVisualShape
Helper class that provides a standard way to create an ABC using

MeshVisualShape
Helper class that provides a standard way to create an ABC using

PlaneVisualShape
Helper class that provides a standard way to create an ABC using

State
Helper class that provides a standard way to create an ABC using

LinkState
Helper class that provides a standard way to create an ABC using

JointState
Helper class that provides a standard way to create an ABC using

ObjectState
Helper class that provides a standard way to create an ABC using

WorldState
Helper class that provides a standard way to create an ABC using






Functions#


get_point_as_list(→ typing_extensions.List[float])
Returns the point as a list.






Module Contents#


pycram.datastructures.dataclasses.get_point_as_list(point: pycram.datastructures.pose.Point) → typing_extensions.List[float]#
Returns the point as a list.

Parameters:
point – The point.

Returns:
The point as a list





class pycram.datastructures.dataclasses.Color#
Dataclass for storing rgba_color as an RGBA value.
The values are stored as floats between 0 and 1.
The default rgba_color is white. ‘A’ stands for the opacity.


R: float = 1#



G: float = 1#



B: float = 1#



A: float = 1#



classmethod from_list(color: typing_extensions.List[float])#
Sets the rgba_color from a list of RGBA values.

Parameters:
color – The list of RGBA values





classmethod from_rgb(rgb: typing_extensions.List[float])#
Sets the rgba_color from a list of RGB values.

Parameters:
rgb – The list of RGB values





classmethod from_rgba(rgba: typing_extensions.List[float])#
Sets the rgba_color from a list of RGBA values.

Parameters:
rgba – The list of RGBA values





get_rgba() → typing_extensions.List[float]#
Returns the rgba_color as a list of RGBA values.

Returns:
The rgba_color as a list of RGBA values





get_rgb() → typing_extensions.List[float]#
Returns the rgba_color as a list of RGB values.

Returns:
The rgba_color as a list of RGB values






class pycram.datastructures.dataclasses.AxisAlignedBoundingBox#
Dataclass for storing an axis-aligned bounding box.


min_x: float#



min_y: float#



min_z: float#



max_x: float#



max_y: float#



max_z: float#



classmethod from_min_max(min_point: typing_extensions.List[float], max_point: typing_extensions.List[float])#
Sets the axis-aligned bounding box from a minimum and maximum point.

Parameters:

min_point – The minimum point
max_point – The maximum point






get_min_max_points() → typing_extensions.Tuple[pycram.datastructures.pose.Point, pycram.datastructures.pose.Point]#
Returns the axis-aligned bounding box as a tuple of minimum and maximum points.

Returns:
The axis-aligned bounding box as a tuple of minimum and maximum points





get_min_point() → pycram.datastructures.pose.Point#
Returns the axis-aligned bounding box as a minimum point.

Returns:
The axis-aligned bounding box as a minimum point





get_max_point() → pycram.datastructures.pose.Point#
Returns the axis-aligned bounding box as a maximum point.

Returns:
The axis-aligned bounding box as a maximum point





get_min_max() → typing_extensions.Tuple[typing_extensions.List[float], typing_extensions.List[float]]#
Returns the axis-aligned bounding box as a tuple of minimum and maximum points.

Returns:
The axis-aligned bounding box as a tuple of minimum and maximum points





get_min() → typing_extensions.List[float]#
Returns the minimum point of the axis-aligned bounding box.

Returns:
The minimum point of the axis-aligned bounding box





get_max() → typing_extensions.List[float]#
Returns the maximum point of the axis-aligned bounding box.

Returns:
The maximum point of the axis-aligned bounding box






class pycram.datastructures.dataclasses.CollisionCallbacks#


on_collision_cb: typing_extensions.Callable#



no_collision_cb: typing_extensions.Optional[typing_extensions.Callable] = None#




class pycram.datastructures.dataclasses.MultiBody#


base_visual_shape_index: int#



base_pose: pycram.datastructures.pose.Pose#



link_visual_shape_indices: typing_extensions.List[int]#



link_poses: typing_extensions.List[pycram.datastructures.pose.Pose]#



link_masses: typing_extensions.List[float]#



link_inertial_frame_poses: typing_extensions.List[pycram.datastructures.pose.Pose]#



link_parent_indices: typing_extensions.List[int]#



link_joint_types: typing_extensions.List[pycram.datastructures.enums.JointType]#



link_joint_axis: typing_extensions.List[pycram.datastructures.pose.Point]#



link_collision_shape_indices: typing_extensions.List[int]#




class pycram.datastructures.dataclasses.VisualShape#
Bases: abc.ABC
Helper class that provides a standard way to create an ABC using
inheritance.


rgba_color: Color#



visual_frame_position: typing_extensions.List[float]#



abstract shape_data() → typing_extensions.Dict[str, typing_extensions.Any]#
Returns the shape data of the visual shape (e.g. half extents for a box, radius for a sphere).



property visual_geometry_type: pycram.datastructures.enums.Shape#

Abstractmethod:


Returns the visual geometry type of the visual shape (e.g. box, sphere).




class pycram.datastructures.dataclasses.BoxVisualShape#
Bases: VisualShape
Helper class that provides a standard way to create an ABC using
inheritance.


half_extents: typing_extensions.List[float]#



shape_data() → typing_extensions.Dict[str, typing_extensions.List[float]]#
Returns the shape data of the visual shape (e.g. half extents for a box, radius for a sphere).



property visual_geometry_type: pycram.datastructures.enums.Shape#
Returns the visual geometry type of the visual shape (e.g. box, sphere).



property size: typing_extensions.List[float]#




class pycram.datastructures.dataclasses.SphereVisualShape#
Bases: VisualShape
Helper class that provides a standard way to create an ABC using
inheritance.


radius: float#



shape_data() → typing_extensions.Dict[str, float]#
Returns the shape data of the visual shape (e.g. half extents for a box, radius for a sphere).



property visual_geometry_type: pycram.datastructures.enums.Shape#
Returns the visual geometry type of the visual shape (e.g. box, sphere).




class pycram.datastructures.dataclasses.CapsuleVisualShape#
Bases: VisualShape
Helper class that provides a standard way to create an ABC using
inheritance.


radius: float#



length: float#



shape_data() → typing_extensions.Dict[str, float]#
Returns the shape data of the visual shape (e.g. half extents for a box, radius for a sphere).



property visual_geometry_type: pycram.datastructures.enums.Shape#
Returns the visual geometry type of the visual shape (e.g. box, sphere).




class pycram.datastructures.dataclasses.CylinderVisualShape#
Bases: CapsuleVisualShape
Helper class that provides a standard way to create an ABC using
inheritance.


property visual_geometry_type: pycram.datastructures.enums.Shape#
Returns the visual geometry type of the visual shape (e.g. box, sphere).




class pycram.datastructures.dataclasses.MeshVisualShape#
Bases: VisualShape
Helper class that provides a standard way to create an ABC using
inheritance.


scale: typing_extensions.List[float]#



file_name: str#



shape_data() → typing_extensions.Dict[str, typing_extensions.Union[typing_extensions.List[float], str]]#
Returns the shape data of the visual shape (e.g. half extents for a box, radius for a sphere).



property visual_geometry_type: pycram.datastructures.enums.Shape#
Returns the visual geometry type of the visual shape (e.g. box, sphere).




class pycram.datastructures.dataclasses.PlaneVisualShape#
Bases: VisualShape
Helper class that provides a standard way to create an ABC using
inheritance.


normal: typing_extensions.List[float]#



shape_data() → typing_extensions.Dict[str, typing_extensions.List[float]]#
Returns the shape data of the visual shape (e.g. half extents for a box, radius for a sphere).



property visual_geometry_type: pycram.datastructures.enums.Shape#
Returns the visual geometry type of the visual shape (e.g. box, sphere).




class pycram.datastructures.dataclasses.State#
Bases: abc.ABC
Helper class that provides a standard way to create an ABC using
inheritance.



class pycram.datastructures.dataclasses.LinkState#
Bases: State
Helper class that provides a standard way to create an ABC using
inheritance.


constraint_ids: typing_extensions.Dict[pycram.description.Link, int]#




class pycram.datastructures.dataclasses.JointState#
Bases: State
Helper class that provides a standard way to create an ABC using
inheritance.


position: float#




class pycram.datastructures.dataclasses.ObjectState#
Bases: State
Helper class that provides a standard way to create an ABC using
inheritance.


pose: pycram.datastructures.pose.Pose#



attachments: typing_extensions.Dict[pycram.world_concepts.world_object.Object, pycram.world_concepts.constraints.Attachment]#



link_states: typing_extensions.Dict[int, LinkState]#



joint_states: typing_extensions.Dict[int, JointState]#




class pycram.datastructures.dataclasses.WorldState#
Bases: State
Helper class that provides a standard way to create an ABC using
inheritance.


simulator_state_id: int#



object_states: typing_extensions.Dict[str, ObjectState]#












previous
pycram.datastructures




next
pycram.datastructures.enums









 Contents
  


Classes
Functions
Module Contents
get_point_as_list()
Color
Color.R
Color.G
Color.B
Color.A
Color.from_list()
Color.from_rgb()
Color.from_rgba()
Color.get_rgba()
Color.get_rgb()


AxisAlignedBoundingBox
AxisAlignedBoundingBox.min_x
AxisAlignedBoundingBox.min_y
AxisAlignedBoundingBox.min_z
AxisAlignedBoundingBox.max_x
AxisAlignedBoundingBox.max_y
AxisAlignedBoundingBox.max_z
AxisAlignedBoundingBox.from_min_max()
AxisAlignedBoundingBox.get_min_max_points()
AxisAlignedBoundingBox.get_min_point()
AxisAlignedBoundingBox.get_max_point()
AxisAlignedBoundingBox.get_min_max()
AxisAlignedBoundingBox.get_min()
AxisAlignedBoundingBox.get_max()


CollisionCallbacks
CollisionCallbacks.on_collision_cb
CollisionCallbacks.no_collision_cb


MultiBody
MultiBody.base_visual_shape_index
MultiBody.base_pose
MultiBody.link_visual_shape_indices
MultiBody.link_poses
MultiBody.link_masses
MultiBody.link_inertial_frame_poses
MultiBody.link_parent_indices
MultiBody.link_joint_types
MultiBody.link_joint_axis
MultiBody.link_collision_shape_indices


VisualShape
VisualShape.rgba_color
VisualShape.visual_frame_position
VisualShape.shape_data()
VisualShape.visual_geometry_type


BoxVisualShape
BoxVisualShape.half_extents
BoxVisualShape.shape_data()
BoxVisualShape.visual_geometry_type
BoxVisualShape.size


SphereVisualShape
SphereVisualShape.radius
SphereVisualShape.shape_data()
SphereVisualShape.visual_geometry_type


CapsuleVisualShape
CapsuleVisualShape.radius
CapsuleVisualShape.length
CapsuleVisualShape.shape_data()
CapsuleVisualShape.visual_geometry_type


CylinderVisualShape
CylinderVisualShape.visual_geometry_type


MeshVisualShape
MeshVisualShape.scale
MeshVisualShape.file_name
MeshVisualShape.shape_data()
MeshVisualShape.visual_geometry_type


PlaneVisualShape
PlaneVisualShape.normal
PlaneVisualShape.shape_data()
PlaneVisualShape.visual_geometry_type


State
LinkState
LinkState.constraint_ids


JointState
JointState.position


ObjectState
ObjectState.pose
ObjectState.attachments
ObjectState.link_states
ObjectState.joint_states


WorldState
WorldState.simulator_state_id
WorldState.object_states












By Jonas Dech




    
      © Copyright 2024.
      

























pycram.costmaps — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.costmaps




 Contents 



Attributes
Classes
Functions
Module Contents
Rectangle
Rectangle.x_lower
Rectangle.x_upper
Rectangle.y_lower
Rectangle.y_upper
Rectangle.translate()
Rectangle.scale()


Costmap
Costmap.world
Costmap.resolution
Costmap.size
Costmap.height
Costmap.width
Costmap.local_transformer
Costmap.origin
Costmap.map
Costmap.vis_ids
Costmap.visualize()
Costmap._chunks()
Costmap.close_visualization()
Costmap._find_consectuive_line()
Costmap._find_max_box_height()
Costmap.merge()
Costmap.__add__()
Costmap.partitioning_rectangles()


OccupancyCostmap
OccupancyCostmap.world
OccupancyCostmap._calculate_diff_origin()
OccupancyCostmap._get_map()
OccupancyCostmap._get_map_metadata()
OccupancyCostmap._convert_map()
OccupancyCostmap.create_sub_map()
OccupancyCostmap._create_from_world()
OccupancyCostmap._chunks()


VisibilityCostmap
VisibilityCostmap.world
VisibilityCostmap.map
VisibilityCostmap.size
VisibilityCostmap.resolution
VisibilityCostmap.max_height
VisibilityCostmap.min_height
VisibilityCostmap.origin
VisibilityCostmap._create_images()
VisibilityCostmap._depth_buffer_to_meter()
VisibilityCostmap._generate_map()


GaussianCostmap
GaussianCostmap.gau
GaussianCostmap.map
GaussianCostmap.size
GaussianCostmap.origin
GaussianCostmap._gaussian_window()


SemanticCostmap
SemanticCostmap.world
SemanticCostmap.object
SemanticCostmap.link
SemanticCostmap.resolution
SemanticCostmap.origin
SemanticCostmap.height
SemanticCostmap.width
SemanticCostmap.map
SemanticCostmap.generate_map()
SemanticCostmap.get_aabb_for_link()


cmap
plot_grid()










pycram.costmaps#

Attributes#


cmap







Classes#


Rectangle
A rectangle that is described by a lower and upper x and y value.

Costmap
The base class of all Costmaps which implements the visualization of costmaps

OccupancyCostmap
The occupancy Costmap represents a map of the environment where obstacles or

VisibilityCostmap
A costmap that represents the visibility of a specific point for every position around

GaussianCostmap
Gaussian Costmaps are 2D gaussian distributions around the origin with the given mean and sigma

SemanticCostmap
Semantic Costmaps represent a 2D distribution over a link of an Object. An example of this would be a Costmap for a






Functions#


plot_grid(→ None)
An auxiliary method only used for debugging, it will plot a 2D numpy array using MatplotLib.






Module Contents#


class pycram.costmaps.Rectangle#
A rectangle that is described by a lower and upper x and y value.


x_lower: float#



x_upper: float#



y_lower: float#



y_upper: float#



translate(x: float, y: float)#
Translate the rectangle by x and y



scale(x_factor: float, y_factor: float)#
Scale the rectangle by x_factor and y_factor




class pycram.costmaps.Costmap(resolution: float, height: int, width: int, origin: pycram.datastructures.pose.Pose, map: numpy.ndarray, world: typing_extensions.Optional[pycram.datastructures.world.World] = None)#
The base class of all Costmaps which implements the visualization of costmaps
in the World.


world#



resolution: float#



size: int#



height: int#



width: int#



local_transformer#



origin: pycram.datastructures.pose.Pose#



map: numpy.ndarray#



vis_ids: typing_extensions.List[int] = []#



visualize() → None#
Visualizes a costmap in the BulletWorld, the visualisation works by
subdividing the costmap in rectangles which are then visualized as pybullet
visual shapes.



_chunks(lst: typing_extensions.List, n: int) → typing_extensions.List#
Yield successive n-sized chunks from lst.

Parameters:

lst – The list from which chunks should be yielded
n – Size of the chunks


Returns:
A list of size n from lst





close_visualization() → None#
Removes the visualization from the World.



_find_consectuive_line(start: typing_extensions.Tuple[int, int], map: numpy.ndarray) → int#
Finds the number of consecutive entries in the costmap which are greater
than zero.

Parameters:

start – The indices in the costmap from which the consecutive line should be found.
map – The costmap in which the line should be found.


Returns:
The length of the consecutive line of entries greater than zero.





_find_max_box_height(start: typing_extensions.Tuple[int, int], length: int, map: numpy.ndarray) → int#
Finds the maximal height for a rectangle with a given width in a costmap.
The method traverses one row at a time and checks if all entries for the
given width are greater than zero. If an entry is less or equal than zero
the height is returned.

Parameters:

start – The indices in the costmap from which the method should start.
length – The given width for the rectangle
map – The costmap in which should be searched.


Returns:
The height of the rectangle.





merge(other_cm: Costmap) → Costmap#
Merges the values of two costmaps and returns a new costmap that has for
every cell the merged values of both inputs. To merge two costmaps they
need to fulfill 3 constrains:

They need to have the same size
They need to have the same x and y coordinates in the origin
They need to have the same resolution

If any of these constrains is not fulfilled a ValueError will be raised.

Parameters:
other_cm – The other costmap with which this costmap should be merged.

Returns:
A new costmap that contains the merged values





__add__(other: Costmap) → Costmap#
Overloading of the “+” operator for merging of Costmaps. Furthermore, checks if ‘other’ is actual a Costmap and
raises a ValueError if this is not the case. Please check merge() for further information of merging.

Parameters:
other – Another Costmap

Returns:
A new Costmap that contains the merged values from this Costmap and the other Costmap





partitioning_rectangles() → typing_extensions.List[Rectangle]#
Partition the map attached to this costmap into rectangles. The rectangles are axis aligned, exhaustive and
disjoint sets.

Returns:
A list containing the partitioning rectangles






class pycram.costmaps.OccupancyCostmap(distance_to_obstacle: float, from_ros: typing_extensions.Optional[bool] = False, size: typing_extensions.Optional[int] = 100, resolution: typing_extensions.Optional[float] = 0.02, origin: typing_extensions.Optional[pycram.datastructures.pose.Pose] = None, world: typing_extensions.Optional[pycram.datastructures.world.World] = None)#
Bases: Costmap
The occupancy Costmap represents a map of the environment where obstacles or
positions which are inaccessible for a robot have a value of -1.


world#



_calculate_diff_origin(height: int, width: int) → pycram.datastructures.pose.Pose#
Calculates the difference between the origin of the costmap
as stated by the meta-data and the actual middle of the costmap which
is used by PyCRAM to visualize the costmap. The origin as stated by the
meta-data refers to the position of the global coordinate frame with
the bottom left corner as reference.

Parameters:

height – The height of the costmap
width – The width of the costmap


Returns:
The difference between the actual origin and center of the costmap





static _get_map() → numpy.ndarray#
Receives the map array from the map_server converts it and into a numpy array.

Returns:
The costmap as a numpy array.





static _get_map_metadata() → nav_msgs.msg.MapMetaData#
Receives the meta-data about the costmap from the map_server and returns it.
The meta-data contains things like, height, width, origin and resolution.

Returns:
The meta-data for the costmap array.





_convert_map(map: numpy.ndarray) → numpy.ndarray#
Converts the Occupancy Map received from ROS to be more consistent
with how PyCRAM handles its costmap. Every possible cell for a robot to stand
is set to one while anything else is set to zero. Additionally, this method
also takes into account the distance_to_obstacle parameter and sets cell values
that are too close to an obstacle to 0.

Parameters:
map – The map that should be converted. Represented as 2d numpy array

Returns:
The converted map. Represented as 2d numpy array.





create_sub_map(sub_origin: pycram.datastructures.pose.Pose, size: int) → Costmap#
Creates a smaller map from the overall occupancy map, the new map is centered
around the point specified by “sub_origin” and has the size “size”. The
resolution of the costmap stays the same for the sub costmap.

Parameters:

sub_origin – The point in global coordinate frame, around which the sub costmap should be centered.
size – The size the sub costmap should have.


Returns:
The sub costmap, represented as 2d numpy array.





_create_from_world(size: int, resolution: float) → numpy.ndarray#
Creates an Occupancy Costmap for the specified World.
This map marks every position as valid that has no object above it. After
creating the costmap the distance to obstacle parameter is applied.

Parameters:

size – The size of this costmap. The size specifies the length of one side of the costmap. The costmap is created as a square.
resolution – The resolution of this costmap. This determines how much meter a pixel in the costmap represents.






_chunks(lst: typing_extensions.List, n: int) → typing_extensions.List#
Yield successive n-sized chunks from lst.

Parameters:

lst – The list from which chunks should be yielded
n – Size of the chunks


Returns:
A list of size n from lst






class pycram.costmaps.VisibilityCostmap(min_height: float, max_height: float, size: typing_extensions.Optional[int] = 100, resolution: typing_extensions.Optional[float] = 0.02, origin: typing_extensions.Optional[pycram.datastructures.pose.Pose] = None, world: typing_extensions.Optional[pycram.datastructures.world.World] = None)#
Bases: Costmap
A costmap that represents the visibility of a specific point for every position around
this point. For a detailed explanation on how the creation of the costmap works
please look here: PhD Thesis (page 173)


world#



map#



size#



resolution#



max_height: float#



min_height: float#



origin: pycram.datastructures.pose.Pose#



_create_images() → typing_extensions.List[numpy.ndarray]#
Creates four depth images in every direction around the point
for which the costmap should be created. The depth images are converted
to metre, meaning that every entry in the depth images represents the
distance to the next object in metre.

Returns:
A list of four depth images, the images are represented as 2D arrays.





_depth_buffer_to_meter(buffer: numpy.ndarray) → numpy.ndarray#
Converts the depth images generated by the World to represent
each position in metre.

Returns:
The depth image in metre





_generate_map()#
This method generates the resulting density map by using the algorithm explained
in Lorenz Mösenlechners PhD Thesis (page 178)
The resulting map is then saved to self.map




class pycram.costmaps.GaussianCostmap(mean: int, sigma: float, resolution: typing_extensions.Optional[float] = 0.02, origin: typing_extensions.Optional[pycram.datastructures.pose.Pose] = None)#
Bases: Costmap
Gaussian Costmaps are 2D gaussian distributions around the origin with the given mean and sigma


gau: numpy.ndarray#



map: numpy.ndarray#



size: float#



origin: pycram.datastructures.pose.Pose#



_gaussian_window(mean: int, std: float) → numpy.ndarray#
This method creates a window of values with a gaussian distribution of
size “mean” and standart deviation “std”.
Code from Scipy




class pycram.costmaps.SemanticCostmap(object, urdf_link_name, size=100, resolution=0.02, world=None)#
Bases: Costmap
Semantic Costmaps represent a 2D distribution over a link of an Object. An example of this would be a Costmap for a
table surface.


world: pycram.datastructures.world.World#



object: pycram.world_concepts.world_object.Object#



link: pycram.description.Link#



resolution: float#



origin: pycram.datastructures.pose.Pose#



height: int = 0#



width: int = 0#



map: numpy.ndarray = []#



generate_map() → None#
Generates the semantic costmap according to the provided parameters. To do this the axis aligned bounding box (AABB)
for the link name will be used. Height and width of the final Costmap will be the x and y sizes of the AABB.



get_aabb_for_link() → pycram.datastructures.dataclasses.AxisAlignedBoundingBox#
Returns the axis aligned bounding box (AABB) of the link provided when creating this costmap. To try and let the
AABB as close to the actual object as possible, the Object will be rotated such that the link will be in the
identity orientation.

Returns:
Two points in world coordinate space, which span a rectangle






pycram.costmaps.cmap#



pycram.costmaps.plot_grid(data: numpy.ndarray) → None#
An auxiliary method only used for debugging, it will plot a 2D numpy array using MatplotLib.











previous
pycram.cache_manager




next
pycram.description









 Contents
  


Attributes
Classes
Functions
Module Contents
Rectangle
Rectangle.x_lower
Rectangle.x_upper
Rectangle.y_lower
Rectangle.y_upper
Rectangle.translate()
Rectangle.scale()


Costmap
Costmap.world
Costmap.resolution
Costmap.size
Costmap.height
Costmap.width
Costmap.local_transformer
Costmap.origin
Costmap.map
Costmap.vis_ids
Costmap.visualize()
Costmap._chunks()
Costmap.close_visualization()
Costmap._find_consectuive_line()
Costmap._find_max_box_height()
Costmap.merge()
Costmap.__add__()
Costmap.partitioning_rectangles()


OccupancyCostmap
OccupancyCostmap.world
OccupancyCostmap._calculate_diff_origin()
OccupancyCostmap._get_map()
OccupancyCostmap._get_map_metadata()
OccupancyCostmap._convert_map()
OccupancyCostmap.create_sub_map()
OccupancyCostmap._create_from_world()
OccupancyCostmap._chunks()


VisibilityCostmap
VisibilityCostmap.world
VisibilityCostmap.map
VisibilityCostmap.size
VisibilityCostmap.resolution
VisibilityCostmap.max_height
VisibilityCostmap.min_height
VisibilityCostmap.origin
VisibilityCostmap._create_images()
VisibilityCostmap._depth_buffer_to_meter()
VisibilityCostmap._generate_map()


GaussianCostmap
GaussianCostmap.gau
GaussianCostmap.map
GaussianCostmap.size
GaussianCostmap.origin
GaussianCostmap._gaussian_window()


SemanticCostmap
SemanticCostmap.world
SemanticCostmap.object
SemanticCostmap.link
SemanticCostmap.resolution
SemanticCostmap.origin
SemanticCostmap.height
SemanticCostmap.width
SemanticCostmap.map
SemanticCostmap.generate_map()
SemanticCostmap.get_aabb_for_link()


cmap
plot_grid()










By Jonas Dech




    
      © Copyright 2024.
      

























pycram.cache_manager — PyCRAM

























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















pycram.cache_manager




 Contents 



Classes
Module Contents
CacheManager
CacheManager.mesh_extensions
CacheManager.cache_dir
CacheManager.data_directory
CacheManager.update_cache_dir_with_object()
CacheManager.generate_description_and_write_to_cache()
CacheManager.write_to_cache()
CacheManager.look_for_file_in_data_dir()
CacheManager.create_cache_dir_if_not_exists()
CacheManager.is_cached()
CacheManager.check_with_extension()
CacheManager.check_without_extension()












pycram.cache_manager#

Classes#


CacheManager
The CacheManager is responsible for caching object description files and managing the cache directory.






Module Contents#


class pycram.cache_manager.CacheManager(cache_dir: str, data_directory: typing_extensions.List[str])#
The CacheManager is responsible for caching object description files and managing the cache directory.


mesh_extensions: typing_extensions.List[str] = ['.obj', '.stl']#
The file extensions of mesh files.



cache_dir#



data_directory#



update_cache_dir_with_object(path: str, ignore_cached_files: bool, object_description: pycram.description.ObjectDescription, object_name: str) → str#
Checks if the file is already in the cache directory, if not it will be preprocessed and saved in the cache.

Parameters:

path – The path of the file to preprocess and save in the cache directory.
ignore_cached_files – If True, the file will be preprocessed and saved in the cache directory even if it
is already cached.
object_description – The object description of the file.
object_name – The name of the object.






generate_description_and_write_to_cache(path: str, name: str, extension: str, cache_path: str, object_description: pycram.description.ObjectDescription) → None#
Generates the description from the file at the given path and writes it to the cache directory.

Parameters:

path – The path of the file to preprocess.
name – The name of the object.
extension – The file extension of the file to preprocess.
cache_path – The path of the file in the cache directory.
object_description – The object description of the file.






static write_to_cache(description_string: str, cache_path: str) → None#
Writes the description string to the cache directory.

Parameters:

description_string – The description string to write to the cache directory.
cache_path – The path of the file in the cache directory.






look_for_file_in_data_dir(path_object: pathlib.Path) → str#
Looks for a file in the data directory of the World. If the file is not found in the data directory, this method
raises a FileNotFoundError.

Parameters:
path_object – The pathlib object of the file to look for.





create_cache_dir_if_not_exists()#
Creates the cache directory if it does not exist.



is_cached(path: str, object_description: pycram.description.ObjectDescription) → bool#
Checks if the file in the given path is already cached or if
there is already a cached file with the given name, this is the case if a .stl, .obj file or a description from
the parameter server is used.

Parameters:

path – The path of the file to check.
object_description – The object description of the file.


Returns:
True if there already exists a cached file, False in any other case.





check_with_extension(path: str) → bool#
Checks if the file in the given ath exists in the cache directory including file extension.

Parameters:
path – The path of the file to check.





check_without_extension(path: str, object_description: pycram.description.ObjectDescription) → bool#
Checks if the file in the given path exists in the cache directory without file extension,
the extension is added after the file name manually in this case.

Parameters:

path – The path of the file to check.
object_description – The object description of the file.















previous
pycram.worlds.bullet_world




next
pycram.costmaps









 Contents
  


Classes
Module Contents
CacheManager
CacheManager.mesh_extensions
CacheManager.cache_dir
CacheManager.data_directory
CacheManager.update_cache_dir_with_object()
CacheManager.generate_description_and_write_to_cache()
CacheManager.write_to_cache()
CacheManager.look_for_file_in_data_dir()
CacheManager.create_cache_dir_if_not_exists()
CacheManager.is_cached()
CacheManager.check_with_extension()
CacheManager.check_without_extension()












By Jonas Dech




    
      © Copyright 2024.
      



















wOF2    b� 
   9 b�                     6$ `�D ��*ʖ�˫H�m %����  ��y  ت��)�=��z�H�y~���\����F҈G��5�'z�!�!����'���z�@��v!@.�7�N���	�%��Zj����`w5UcI�K�Vێ���q�LdG�q\o'�8���$;�!�{�5��<���Kٿ�m���]����2���{�tvC,;ِn+رc�c'}�a7s[!+v��,֎�X1G;A��U�oC]d����������.)�܃zhwZL�bj�s����m�+����+e�S��|��'�{ �!2r�K��,�V��e2�ݥMX�\Ԁ���������$E7�V�7��1�}�^���&��O
��7UϮ��ĠRP`7���SX�ԫ����p���KK�K�\��eH�?��oI���7mΓZN��f�"��g�A�߹٪�nq�"��������7�?����(��V����e[M�zU�kmc���q�0.�0.�0.�0�@����9�^��A&�!3d*��rD�,���?ƻ b�BDp�BD��2�����j� �T���}���_�T㋩�嫾VK�겼������?�*��-�<�L�kV3i�C)K�70�Q-�܂~�:X�Fn�Ǔ����5�w��+��2�����z����)p}��-�
��˧���ZVݻKp2S�����R~N��o@๡
rf�ȱ*�D��9��X��u��� �����[	�|�l�ݠҴ��Y^q���x�JӥHy;G��^)�󷌍�Lƅ����~�498�8��V����4X2y/Q��������3�=o���X�
���u��*F+�{v��S�/���oB��t��+�N|��hv�~W*2�w�~�"��NO��.�)��� +��}M᫱7yWY0����|sa ^�;����"�U��y����,�:Z,���C#��?������à��:��wI�)�gvY�^��~��)f�?���l��9�O�:�|W�VƷ���\�.q��U���[Lש�Yc͑��q�1�}� ���|;�X�t�z��`���S{���8l�V>z�9��k�Z���5�]E��E��h�����ɡ��g�q�6�k�0y��E����P�f�g�W��Wu����~��^=����8��H_����~�N����\A�7hTsS=9�O.�T�����P�v�4��_�'��B���_s��l���Ax������b�#�.���j�86g�����Ш�t�*We�Ď%��{��h.]��ժL���n�5�Rz��Ñ�=�מ��Ɩ�H�K�W+hr)���5�zϧ�?e�"�ϝ������.	{f��R�����L�u~����z�4[*�U�y�C�B���9q<��*|�h�3�[��J:e�u4wɳ�J֒9����y��,�RgF�ź�25��0Nr��������-�}V���K�Nhc��<'x��V���F��3W]h���CgR�og7�;b�B>1GO�JT��W�5h~jp�E|۠��W�i��r4>)�j�>�77�c���Ay5�!�Q���?_�ó2_j�������R]���B��׶��>��:��6וԜ�b����"ϑNU�+FΊL~n~S{�s���Ǡ�@�ۿGy�ݥ8ya6.|�0�J�V����Q�\�w��2��$��;���?=݌3繘�6ۈ�K2SG��o��}��Ҕ�tr��)5��r8���i��r�Z-t2�?t'�걓TGm�:��K�8�W/���>�j�o9nx!�������ݘ=�27y/��ꞗ�g�L�� oo�czn��������.e|Zg�%~��?�.fWb�Ģ�g-4����'W�J����3���+������<�?i/5�|evIѽpxO���c`ynw�b��ܙ�P�����{)�9���Lb|S�<�yA�%�w�6=��n|�/��z��K��?��C���9��a�dL���d�h��u�fU�(]o¹߆��b�*���.�����u?l�{�����~���J�W�yж��N��r��,v���t�u���g��(C��c�PO�>'����L����ہ��x8���N�P�~�aø+��Z��4�T~ש���+;a�)I�\�!�{n���k���^��u�	r~���1Py�V > @���ܵ��J�!����n��@�a�S�a�>�b�c&b&c
�b�cfbfc�b����K�˰�p'p
gq���M�)4E��ig���9iN��溹c#v��`7�Mv��b�ٛ��}I�;�����qu]=W��p��{�޺w���~����Wz'�\j�g���AE�>Ә�"F����۲3Cv���(����dNa�sW���d�Y�M�����<��<��<£<��<��<ŋ�û|�'|�|�W��_�+-�DI��K�$J��I�dH�dI�����]zJ/�#e���2I��V�V�E]<�̟0��������r	]2WՍr�����u�	wڝww�S�Ʃ�
RE�Iw�+e�̔Ų^��� �<�G�D��w�%���>�/�+��~�?���K������O�L�Ñc��ZAkj��u���%�Bw�A=�����ַ�I���=��C��&#��8��ְ/'ގy;�1��)������P	UP5Q�������}1�0�0s0�0��+�
�����p�p��(��+~�'~�7�gl�a|&`"&e2�`Jf`Ffb6fgn�a^�c!�d9Vb-�f#�`K�e'��N�.�.�J��j��F��q��5��S>�s��k��g��o�ſ��E���2YA+ee��ճF��:� mcl����6��B[dKm���u��6��c�총�sƇ�Es�\6W�us�<6/�K�����i�cĄ�(�&�mf���em��v�=�4;�αK�.{�^���=��>��l���n#��MI);�\T�JSy�HU�ՠZT�PcjJ-�-u�.ԝz� N#iM�)4���ZL+im�mt�N�y�L��&ݦ��>�
���pA.�Ÿ��\���&��{���|�o�~�������9���/�ˑMbJRI!�$�d�\�_�J�(դ�ԑ��D�I+i+�����2H��H-�d�L��2OV��&{d��3rA.�U�)w�<��J��;�,��U��1&���
i�ّP�P5P����]�1#0	�0s�+��۱p�q�p�q��O����� �Ewq\|��%t�\R�ܥvi]&��q�]}��5u-\g��r��$7��q��w�=to�;�������e�rx���^Ŗ��U	h0+`����;�3����ُ&����6:d����	9r*�qH@�w}��~?�_�o������y�2���ߧuy*���b�8*��N�Ϧ��j��QM'�5TMU3�"�T��8�V�]�PG�U�T�V*H�}Sj�N{:����D:�zi]V�C��rtQ]FW�Uu]W7խtk�Awգ�t=K����Q��>���G��:@��c:�Ígb��&��fJ�����o����h���f�f/=��V�ǜ��5s��1O�K�A�h�{D��v)c����fO^����Nq*M�mG�Bݨ7���4���$�L�h&-�E��V��.��_��������+�q*.ȅ���\��qu^�[x'��|����Ï����<��3�)�����
j!m��t���O�+d�L�9�Z��VM��ߍ]>I�οEF�##�yQ �Q��4Ck�Gg�� �pL�T��l,�
}�-؎�؇C8�s��+������������: =515�_8�Hj�W��M]��l>���&�E���9�s���vN�e+�-��g�F<���qo�w��@\��~��ƒ1wL9�W�^���r���ao�v��aCXV�EaF��v>����џ���.��Or/�s���w�]7W�Ur\9W��tK������o�e?�`��}������;{ko쵽�����M+d�
�J@+��2@K@�-�@��h�ߖgj�逦i��h�Ӛ& �q�1!���h���������[������W;@m�Q�T���
PK� �P3@M�D��P �W=@uUG�UB����� ��ʧ<�`:�4��O~�[�o ��+>�=�w��m��u^���)x�~n�f�� � �� ��b.�N8�$�C�g�q Gq$�A��������}M_�W��}��g3�)�W�K?��t]�uP+�BK�H�5O35]�5F��W��NuU�L�UNeTZ%UB�ULEUH�_y�SٔUY�Q�Ni��LɕLI�W�b#g����o����ď|��|��|h���O�S�ܾ�/��־���g��~�?m�-���6�FI��T�U�����z�����k�Fk��j�&j�&k�fh��hW��u���ٺ@�"]�Kt�.��N��6ݮ{���ԛzG�}������<��-�"-�-�2-�
�t��W�Z^��x]o�ͽ����w���ɻ� �}��>�g�L��}���]}/������X?�O���?����B��o�������y>��B_��}uj��K��s�M�tOz(=��K��҇��y�*}�~O�Ҳ�)���d��˺f��>Yjtk ɀ"Pȁ ��Ȁn@�*0����� ������p�k�Z �����p�� u���\�pW �pE�HW	�r�h�8ƕ�c] ǹ2p�k���'��I�#p����:��.�i�u�.�.���� O�� /A� �Cc��a�ዠ��'ZAӡP̀Bh@�� t/�.�£ХPx�
O@@��yPxY(�	]�Jxm(^�	���~��u���x=�W(� ���3�x3|W(�u��밻���*������Ր;4	�M��%�|1�ȗ�>�|9�S�W�އ|5|�k��`A��1�[a7A��ھ	�J�@Pz	�!���fA��[P�*q�m4��Nk	@�APSG�"!턨��Y@T@�!
H� *���ȑՁ(!����NH�AtAz�+������́
͇�1���t���gA�?bO��{�π�~&ā��!���8z�4���#~�Y�WC��q.|!�y������ �ą���C�B�7�[a�@܎t.�=�y�B= �A�-�x Z� � �!h)���B�G�e�B�!�fA<.�|hěЇo�O��@�e�!H�A|��	�o����%�? 6"�
��+��/�Z�XԜ�N�e/��2:�ա�P���;�k«B������A�>��Pn���®�r#1ec`�C��PV����H���恡��G�8��rud�嚠Z��z0��Ŕ��?���F�)��4z�0z"}A�"T��e~T�0���f�1Q��l��:�٦�@^���#�N=�z�S0/�x������^�SoB} �>��Dl@}��؈�R�&Է��Է�f������ԏ���oa�"��V�_������x�i�a-��Y�f�1Z�,�L�.�B��J��F��Ns�Z�As<�	c��9��؛�R���\Ms3��ݰ?��p ��p ��p�{p0�p�Gp(�p�/p8��p��p$��c8���������K	8��)p<���������� '�u�����8����t���Lg2p��b�����&8�vq8�v�1�O��ʸ�vw�E��}E�H{.�=��0\F{��
���J����ho��W��E{7n��Okq3����s��M�/�mM;�wiG�~�Oh ���Q����]�/��͈_�zts�ƣ��n-��t��mLZ�nS��H���C�?i#��N"mFw
�Y�=�Ρ���?��tW��������t���J:��.��H���Ow?�f�`҉�ࡤ�D&�LTD�ݿS!��}M3_1�N'�"�A�C�O���@��&&D���h�|*111)�Rb2�Z���F�HWS"DL5F����X�t��ƨV&�!�'=A� 䣈�̇+k��!�&6�6�9Ho[ �Cl����5��<����a��H_�|EC�]�=I_{G���5F��8�8��q���%NF>�8��T��O��$� �$�E�M�C��8����q���$.B����+f��ĕ�D\M\CB\��@^�����<�����<�4�&yB�m��ćė䙈ZR�n�s�&�C.&:�Q��Z����ďc��D��%~Ւ��ȧ��o&�$�'/EA>�m�ƨ�����N^�2�֒ק�Ik2e\�z���P��(H��2aD��2	e
��)%�Z�TyS�4��țQ�WD��2�Gޒ2���Y$oK�u�=���F���en��(Q%�AY���غGY��"y?�JK�,�G^��2i��5I���R� �M^oN�Cހ�q=�cޔ��d�^�}Ig�'A:�|��yZ�O6k�O���ȧ�� ]L>K�.#�-i)�9�.'�W2]A��|�J��IW�o���ɷE�B���w�n �K~`�S"?J~�t�%�ˤ��"�!�{Ξ������2ԟ��!J���8�{��ȿ!�E����A����/c��&�Gz��2��e@��ex���(�P&&}@��2�|�d��27�Wʼ��H��(e�3�YY~)H�SV��|�⬬JDEY���(;*"F��Fه�����q(�Q��� q�I�r��x��IH�O9�Q|*�4b��D9K(�KLD�p���N��r111�RʕĤ�k(�SQ��MLC�G�Q�r�#} �(:҇����#}��!'Q�%����ؒ��b+�k�ؖ���v�O%��~%����ؑ��ob'꿒����%v�-�+mT��h�K�N�Rb�T1mvڜĞ��U����}.k"�?m�h�IH[B� �RӖ�8���ġ��%��*q8m�#h�đ�i́��	qm3��ı��U2��mKۉ8��+mw�4ڞ��3i���#΢����`�!�K��h��ӎ�C\H;�>ĥ��h'��N��I\A;�vε׬]��������7!q�>ƍ�{i�7��=L�J{��8q;�II�E{:"D{�����
�>�۴��h�>!�}N��x��5�|���>�$},��}�>�at�L�Y��)����s���V�����%*}1�[���F�K?�~����/g�.�J�56�_O�����;�w2ؖ~7�^���?�`'�#���F���}�/�_fp�U����C28�����18��1��"N��$N����t~�8��o���3"N�3��8�t�Kg�!q9H�lr��9�$�SI�GN��8�������������������\Hq9��8q��$�"����\I�rU�kɵ$�#׉������ȍ7�[�[��۪d�FnO�H�N�B�F�E�!�{ɽ$�#����<�d<@LBo�ϑ��/K�=�-���w$> ߓ������������d|B~A~I|J~K~G|N�(�/ɟK�W��������ķ�hI�@��.~$'\ڋ?Q}�~�/� 
�7j5�zIV!�'5��_Դ�7535�5�J�Ԝ�\���b�DRKKb���hj%�1�1�Z�Z�Gm���)���ڒڊ֝�E����;���7��/��u8u�u4u�5�uumu��ML]�&�����MJ]�C�MN]O�H������65uu'm:��A��#ԣ���'�f������J=��6;�<�m���k=�u�M�<��H��z��-@}D}z͵G}O�H[��iKPE�%���hKQI[����,5�C[����V`dcdOڊ��#���s!�
'Cvs~iw"lYȞ������[�?� �!Ile���
�D�)`�B�,�5![r9��!W[r�u!W[r#��!7� rG�!���m�?�`C
y�f�G@��������G���|Ab;@�-�#�b;A~)�'��b;C���z0�� �D� �J�3��͍�i� �Iڼ�{���`R�G>��Y�O �/�IK䓉uD>�X'�Ӊ-�|VR@>)� ���Jȗ'��J��|e��m �<��H�|RB�7��#߇���J�1��Hy��\��lR�C~.�[ ���$����.G~�#�����F���$:�#���QR�C��ّ?N�wȟ$m}�O���RE�i{!��O��B���_'�(�o���H����]��}�nG�	ѹ�?#��_��0�oH[	���5�At�Dעh����i/��L��(z�������b$i��X��3+�r��H9Ū�~�bM�z�؂�D[����I� �!�uDq,���8�ԍQ�Al�s��Gq��������B�\(.'�	W=��ZR�Bq�ף���*(n#T��RP�O�J( �/��H��aR?B����'����	R�C�$)ۡx���C�(^ �ŋ��G�)CQ�L(� ��[����ҾG�!�+����[�'�\��SbSQ|F������P�Bʳ(~%u+��b����؎�w>����� 3H��ī0�'^�9i�9"i�b�D<s4⟘�/��41�$m!̱H{sl⍘�66渤]�9�3�iHsZa�H�T�9I[s.�/��1�#q��s�a�H�n̕H<��2��1� ����˿�;��G�� �#�^�}����1pe%�A��Ƙ��6汮��<�-�y��1O$�U̳�`̳I7<敮·�
�m�y-�&��H{�zW'C��y'i�y������w�{qu8�}�v��ݍ����!��!_���� ݼ�o�n�w��`�G<�;ⷘ��t�\^�f� ��X��X�#� V�Xk@ba�!$��tcObG��H,�5*i�`�CbU�qI��5�հ& �$ք$�ƚ��RX��kr�aMMb.�H�5#���f"�-��$�Ě�ĜXs��kq���Z��FX���W��I��x�QX'��.֩$��:���i��!��sH�u.i7c�O�TX���22��r�>ƺ�ąXד�;��oa�H�˰n"1,֭�ٰn'��;�`��I���̃����z�tsa�H�X/���Ua�N�	�3Ҷ���x�$�����VX����X���~���0�3��?��_`~�K��� �Q8�k������wX8�=������pc�Џ���ؐ���'�0�OD������b�OGbq�#1%������/A`�$��~e���d� �k��دOKb��^��T���_@�3�&�-�w�8�{H��K�����$���3K�5$��;Ҷ��{�]��=��!?x�������?�J�k_"���W�?�}�@N^�F0��ڷ	����<�ZM0j�' �>�z9	����*���H0-�'?A0�7���������Oq�S�A@-T�r�PEZ�V*WM��H��ze�uY��D%��mj�5��Y��q�w�O<����o���ۋ'�x��;��B!#�DR 
ճH
<�t�ҥ�k�.M/]�����ҥ �QȨ>��@2�	  �u>�g�b���\�,�R;n�H%�~UFY�y���V�1&%c�I�XGq��Jq��
ǒ1��$c�I���(
�(
�������Vx�&J�R]�J�U��r�UG�NS�#hS;�򬪴�`7φ��,
��ʪT�V�7��Rt����R�vy�\l��}�B~;��{�{qb��8yNR�6K�t�5�륜��!�VL���\Lw>�N�� ��:�c�_�u��NTBmj�Ψ�+���~���uj�XG�N�y6�~�ש�:�V��^��������\k�3+UY��*��d���!��ʽ��2&����Z��m��\���A�pq)�i���8tk��p��,,D��
��H1&qʘ\G��\)(%<�-��-��r��Y	C�1�$c��Ԡ�ٜnZ�m���f`����v��K��r���J� ��7q��B]��r�� ��.EmǑJ��
i�gԦ�J��B��?��+�[O���ob��i�S��ȧ�B����ϑ8b�a��?u�ap^�g� N�y�U�&<ڦ4�s��Q]v(�J���(���=��]���0�}�{�a;\x���k����Ai�0&���w�Q.�g��k��峟'�s������d����#x4 �"��:�]j��B�mJ�.�~Uy��z�P�+-ǝ\q�/xU�6e�GmXc lE�'*Q�S�,��aeS�m��V�g��,��{x��K���d��Bl�6�����a��9�v�gW�w�&@��m�\M{T���R���Fp��:��c�ώ��cF8sG���#m���m�;� ο�<�v)�5Ѡ�Ң�nS]���Gdy�?�]X-�E��S�ml�|�m��C̨��BT��G��0���͍�Nm?�ӄa���nW),ӟ:�	��J�(t�n�l�:/�s]n�t�
]V{Ց�� c�K1��%Y��g��,�|b�&�S"V�ێ"�(j�,�v�"���}�ؿ�yvp���VL�9�L���Q\ԯ��E�$ ο3���' �2o1�jSC�%8�퉕����-��s{L�ۘ�S�Iմ�jz%�'8�-�����?��wr����� M����i�x���Q�ƚ�8������ ��<���(�3Lo�y?绌����څ�3���ī<����#|+�p�Ձ��iGq_�}q�,��JE��p��Ue������!�����q؟��=�~A�D-.�D�֧�+=�Ct?�}��8��k=�/%[�/Y��������q�v{�Z����E~6B�u���9�a������AP��a�Tp��-���ʊ���!� 3��i�r:\'Jg�,/+Z��~}�?��
��}�]�AۧVJ6�)��뽲S���)q�W���:J���8�V���l�F��A���U�{��+��ͥV�L��Rs}8�f�����M}$6��Ŏ���8@)�o2?2jP;V���*�gQl6vSV#�������m������EtF
�4�vw���ǘf���1.�g��95>�L�r��-��{��=|�&����hsӴ(缞68�S|�>��sӴ&n��4�L�0�b؎�U�D�k�e�xI��U�I�I_;��黋'k�cmM,���S��
��+��ir���S<	Gץ��@0�a'p
�����X�4K��r���I�q���m9o�����q�����n���S��yG�./�QvcQ8����i��vL1]�I �S8��p7 ��U�JTv���1���u�e.�u�1��N�g��x�H��,	)��;��Nt��������wm�6w�׋q���8B��'ey㈊�����Ʋ����=��	kkBp��E9���p��˒L	�~ @�����������eU�����0rm�i�VZ�3�c��eZ�sn��cq΅e���\��Ꮖ�a=;�ۦi�g=KX�isΏ�S���ڰ�0��,��.G�=W�E:�&��>�����:6�+"�G��@����h��~8�f�5���k���te��헽u��C��sa~�[��� f�f��>�U�\�x��޾����SzoO�:�]!���r��/��sx�-��˄pQ����H��q�O=sf�ĉ'vΞu�p��6ߊ;9�4�$X�Z�"-҆&�����bequ�ؿ^8�&GGGG������wm6[8����~���g�j����u=׫,��cg�I_NC'��߶�X��{w"��t��[s��tQ�#��_8�	$,�5�\T�3��������|&�'������~W")�]w�z���N�����ݹ�4������^OJuۉ���Hńp]D���d�����XH9�ۺF�[���5<�C�F��t*�D��q��Z�>��v���ENu�5��.+�;I�&A����k�L�Cc k1-����H,�'���Mؑ��eϕ�2I����2I���Վ����L�[<�j*����W�p*���r���s��3;\x1�}_(�d��rYX뢀�_y��3��p����D��;�պT{�V����P�F�1۷N�7ד��$�z�Hߑ�)U��7�WYC���T"��N�$����n��>��1�_����V�r�A�������� (G���#�����uC���:Y����>��l�b�����b�o�G����t���_2N�8�\�6�~��P��#�MS"v5��m�zI'��v��g��:�<9���È�8�e[[�ڕ�A&������.�ӗ	��M����Af�����*�"mOc�H�:=�U������(�H�px6u���|=[1��ÏReU/0hz1���
���M���&���Ý�i��
���ĳpqx�a��d�_?��:st�'s���*���|wKk7n9}�]}�=����OlN�M�g�iS�2{½/u��qn�X\@��y�§]� &�F�i`���#�\l���Non������1M ���=�2\�l`Z�uR����I�
��_E������)���]�eY^i�3��UӰL�r��bkI-Ha˃�\��Y&AQ��x�2�(�ĉ�6��s�#�s^�pAm��<�F�kY':x�hE�eM���~���>ZH��PJ-�	a[&1Ц6q��b�)��2�|IAm�0L�n;>&<�'�b�D�Tb2�)�`kʠϸ��o������9��HƸ<v� tD;�w�>I�Q����2��mw���d�m�,7��� ��n�U�L^�;�V*�	�k��:u�._fB����c����1��c��(�����!:L�����ݽu?���_�A|�2���c	 =yƻÁ#8w���]]�/8�p9ΥK���AGp�7?v����\81��}.?ynߞ��a�@V�*Ǫq�`KFsx���i���s8��)��4 �8D����*�ҿ�y^ �c؆���0Ωܱ��tQ(�(�Gv"�q`<�@%���~Uᨚk�>�k�� &�N��3{�Fl�1F��s^�v����R3bp��QL��N(�:�#�9�l��f+��3�-�#�o�x��K�1��j��)�SX�]���E� �0ȁ��0�n�9��u|�Y>�2Fd�����JkO�T(�ג���)���ܽ*��{��3�؉��>���߼��[	!�sB��`�=�qt3�1�!Ioq�x	yv��$cS���Y)�F��w��.A�'IB�`𜄐��`�nc���#	���^BHr��H�?�������t��7qP��M%*�Q�AUVszI?�ۂd�`#վ��;::ˇ:�m�޺W�p�(*��UJ'�~`���Q$ѠL�����"�p���77� b��_�}}W�Oe���tf|�މ�#Ww$'��?�1�Υ ^�n�Y�q����i�߁Hz���B66O=���;X���/|D��k�8B��M�g����Q�(��/��<���a��huEzB�ӑ�(e��ꧻ�➿@������p �32�	l� ����x|�� �����~�O��WG}�ع>�������ɧ����W�\��G��ҹT�$���rRV�n3J���ۍ#j����ӊd3��o���k�-�Hl����N"ӌc�쭸����4��إ�'S�$�i�<�FCJ/}��׳m�@�3���Cz���7ÿ  ��VGX���82��	5�QzRU������C~8Qk�u�УMT_%ꈥ�VԦE����<�TA�%��"�AZ��ʪ=��֩d��cٌI���z�_D����t씐�X#�ϡ.��c�Hn'��2�;�@�֌�^��B�Ś���
�O�IBZ����HBHr���1!$y����RBH�K��Ƅ�䑻�y�Aq̘��1�8#�V�/�f,�2��ӟ���E�p�c�V{yn$X�2�l��1g��{��گ�S���h��#�6G{{{�وk*�0hoq#?�A�x�����枷��V���̯�?M.���x>@�Q[a~��幦:g�H���Nkbp��\W�	D����	%{I�/�*�<�y@·>.qY-=�{�t+f�?�>�2����ֺ}��f���������G�G!�W�凡dF�C�?˃Я�<�W4���)�
7x;
�#)������4Xxa}/���"GR��$��<_"�� `ϯ�?M.��Bυ��a���m�(�:�y��Ջ�%�^�r�M�t�t #�>o��Y�*h�ņ��Z�"�W�[6Y[�UU-��BgPZ�/��B�|'�f�����v=˿����1'���ىt���_��=:�͠��U�^�0<��5­p/����C�c U���;I��:�Q��UU�w��NCJ����¡���ˊY�*4��M���r��U%��
F�n"	_�BF�I�1��ap1(�#0�s�C���ލO��>�]W쯮"��!�C.:�hF���$�1������Ë��B]�ދ����{q�
X��:�߅�k�"@O�"�D��i,I��]gS���C���^�q)��Z�N��{�ӝ�am7��i�����H���8��W�f�.�I��$�n�w�C���Q�處����w�]�������a�7v,���o�ь��m��jDm�eU�fz�B;p��TJϺP}s�ʕ8�n�ڦj9Yh��~K������벨R�L���=�òo������<������5u�w~�w��|D�'�G}D�-H�F�8�"�wޅ���[ec��>�]�z�A�v˖+0aP��Ƴ�Dԋ�`�f	? 15�o;��'���q�yFm9ݓ�V	��ȰZ��=*��dU�g4�rgR���ד�ɩ%4��q�q��-���bs	��8&�����r:���$�LK�k�ɩ>��]
��ܪ=���x��:���_U轉�2ϵK�i��:K3j����D�a�\=f:��5r4���0�}��y^=w��>#����]�]�DuG��I�#�S�{�O=��=�̕\Oa<��~�lO�e�����](�6��,45�(`O� 4��Z�YUa<�=�i>e�Vh�*I��ʪ�ÿ�t��+�M�%7!v&/M�}�U��CS��G���dl�$�ف�7�꿻r���06A�6|���!��n��& ��h�~������6�:�~�
ܵn&!?�M�|�A��!suLg��m�Ү����ԓ������JT'Ud5i~6�짚u���L�WÀ�i��ޝt���)#�W������|��R�,	����=�L%:X�4X�t3t�*�kP*1l��+�>w=Ϸl��&c���A   .N;-!��o)������*c�|T��=��~\�\��M�5!�-4M;�CĽ��3o�Ü?,(�-0͕=�v��4ggg1&�|$G�Kv�
HL�Q�K�뉿��!V������8��M����l3�V���s�!\��dA��B״p^�d���1�0y[#|'��Mr+z���ܘB3M�� ���\��8Б�IDH0� .B�՘�����RM~��ї��)a4;�rϲZ`of�3z�c~f�>�%˹��($s����,�7��'D�+`0����W}p$I='���=�_M'X|~B��'$)������qȫ��;vx�	�7EQd�*��vOWTkM?11�'����(��5�0�$�%��O�����,Z���ve��Ç��UI�V˯���ˎ4�m��C��e�`��%
P�Ӛ2sk*9��w �S*:\4A���r�޽뗿���c|�]����-��*�$T��F��v#Y���`@ҧ�8�|��"�T��7��x����(���;v�딿Rv\�b�ɿ�(�8��@�H�߈��̀j=4��`Y�Ͳ�xny�`Y�@N-�_�����U�$(�Y�ڱ�OͰ����+��p�����0MQ,��BUE�\@22���Ɨ��C��u�����2�Q�d)i&	Y�<�\]Hf��J�J��5[g�8�����L��f����˲��N���k��FL�k8�g��3{�8��L�����^AK]6��ʧ�szB�,.�����wr:A��O�uR O���n������nZvj��z]8�)�\�� Oa�X�B3뾴��
_𭲶FpF(C��s�)�.|?��g4��$m&�Q�?�����߆��#�i&*I��5��k<�}G�H5Kq6F�/kKS��o?sf�vQ���g���{��S 3���� c�j*ql�F`
	ų�N��~"���Eu���vf���j�Ҝ �D��ss��0��M,Z�����x8[&�cf�=k�	�8;V�*
�u����[@;�t=�	�ǹ-�:�$m&�^��)>LZa�o�I}m�4I�0.�O�[���8h�L=&
�W��+���fSe���hDћ|��&��e�|���K��t��Wy /�p"����h8�%{�y|�����A��k��vR�'�}��  ����4�߯� .�;q��4m&{zt-]� 	5��y+�RU�:�g������Tu�2�����e��w���߷]MSU��M�<s�����.�vMUm�ޢ��� ���%�R	@k4����ؼ��ޠ ��y��Y�ҩS����j��K�ntRZ�M�n��u�Z��zR�=�M"�o"�fYֿd�������j�r�����>��fa���f�(B�A5��W�45.~��r�fOk��q����hg�9���Npkn������c�NT)Y�	�:�=_oV��)����� �݈P�m��WIR�Oٰ�E��f��q����n��q������C�2?��1�^�4[�)��.τ���J���Uz�|�r�	8Gl����q����C�n��W*�36_���T�x"
�z �W_�Je�ť�mCh6���;FL�@��"CoC�E�/�Qġ@xLnONr���⹳�ׄd��8�8-8�Y��i`Z��-/vF�F��}u�4��F�np����t�⨬��u�c	�i,y�Z�I����:|�ӯF��_�l|a߳�p����0:YZq=*j��$	�yAM�$�����k�
ޏ-��v�M��_��kt����x���[e�@�^+0�`�����[KGSCxD���{���qWu>L�L�q� F�����%�e3��pv+o��q����gI3�Fa�����GtI�B��/�夜"�5�����'/��;:-ƁQ���3�~^ޒ�(~6QT���e+����nt����m�૳#��6����x��5Tk-�r�)�����#����eI�a7#i̛�و0�;�3����j�:c7�I�?m�Z����?���?nal��h�Y]���W�iQ=a�d���X�X=���ͯoą��9��Xk����:��� z���0	�`���;�v�fTs�V[��#?ͬ�.ι��5��5�FJ��{u�R�t22 �x؞�M��#Sm�pp3���]^^f2�f��@�o���t���P��oE�i��i5-�bY�P�2��2��`h��7>��׹�\�h�䍂!��4�Cck�ZP~�����4M�L/������k�p�hB�K��:��Æ��JR8��4�dKu��}^7��'u������S�-���H�>A��o�o�CJoZ3��.�{��_�$U	��Wa#>��d�%�
~���>b
]���Q��@1�tm��d�90�W���#~Ü�놡\������au����Q�I����EJ*��#?ܗ����1?�s
1�"�b�R��fF�Jtݜ�lH�W�%��:4��`�-
j�H�q;L�4S��V��Ī����r�vM5��H�m���9�{�^]s�}���M��5��*]��m�K���_?~�E���@Fh:�N�s莜cA��	��;��v%(FhBK]�I�a����3дQt|�A��1Ν����U�@�9/�i!�"j�z��l���E����K{E�YM�9�+���ڪ��f�ѪF�K�A�/I�������ž����zP[PB�^ft��wNr�<Ԁ��0x�7�鲎���a܎}9,�~tt ^����T�s�,�Z��8|����F=�n�
�Kz��4Jf>_���ٓs�`�!��h���߫��az #4�3��d]I�)�udo]�\V
�3M��OY:S�N-�S6������)`Mc���d��qY�ZZ���w���=�蛬�kf��}Ԡ�a��k�q\�Ճ2\[��v��^A��\�h�K5�k�2��qI���M}I�eufF�e�%U�QA�@JU�B�mm�Q�H���@�.4���9Ze�W_�Xx�
.��n;}%��GH��RD!i&$�}A�t]?
2�a0�7
���P����u�r~��{�-�/�9I�a�&x�Z���XP��j��K&��H9����m�P�I������ZD[#�Fh;:��oFg�t��㎺�CS�����h��?8;07�ʼ��	��Pn0/����)�&z��@�8}����Ç��F\�Ҋ���a����E 3fpZ�����/X�6?_�3���61�!�P�����\슝�q|n"� tR��9,e�v�w����b�w %Ҁ�gs�^Em؄�-?��w@IH$�_��'AXm�G����S Ɏ��m�7}��,��,a;n�R�{��,�S��d;������cQ�H��B��U�Q９6Q5Z��v�~{;��,��q^`)!i;��(��=o��j5�}9XF�O��G��������s����Tx� ���1j-�£������<
�ʦ���浟��:k�`��k%r�H�ÄG��A�so�c��\���8��sf�m7t:[ʺm��bJ���9BF��TM�I�3.+^�%?q���b��T��`������]P+���`ۅ��
��	�󡝏JU����]
�]Ȼ�� o[/��x{�Uik�5g���W�F�M�F;�:z!]���'�qD<�vS�GX&u�e!�<J9,���x_�O��3m��v� 3�$��|M�ָ0@v,0�,�c#��F�b�>x�_���'M��U�Y�
1'�q�����t�T���ǻ�	���:-�1sn}��h��:r�11�`��UoZ�	6��O�nV:vm?&�#hVCUz�bq�U��ZS�b��K����u835'�w=�4H�I�\d2U,¡�z�!(��WTm�Y���]�DKh'�	݉�E^�H�6�K�sؒ:�a�4�~ݫ*�
��a� �ۘ8�p��u���L�V����_V+����9	���8p����x�������7\X���(>�>HB�֋p#|]��W�	�`��m!�Y%��d��fҊs�eMs�IFHFj�e�ɂ���dK"�!�.��S��8U��!Y�F��F��,�k�0 s�W��������u*t�Ν��e����,՘3�탳�f�P�Ԓ"���ӤL%���� g� ;?hKƅ[���/U'��w����	�Kj�ul��	�!:���%�0��dH��	��Y�ǣ���X\'�F��MJ��ݳ��>A�yF����|1�'�ι�	3=(:���3���}�MR ]7��h��>��L��熦��P*2z�k&�~ӟĽ�]:���["�(n�%j�m۵�NkJ�����"j�c�E`ȸ�qF0��{�3}��&��c{�M�ƛ��HtI�Cgl΋�U��ƀ�@�o�%���KI3�ؔ��쥮9����˱D��FE���Ej.�m9��+���zjkW����H��*m�I��,�md���N�;у1�
Ɉ_4��p
��jǨ���V��u�sC9�*2��D�7�z=")�@W$�c��|�ƃ>�G��5OD��/(��ƭ��
/�z=�S�u����8�>��^�Q0���*+�o����90�s�$%���<.�jE�/��I���).	@8^L-��m�{:�C �<\�3ݼcg��#��ES�_Oj5�u�Z-�zm�u��F�1]������I��qcaa����n��t��q�z�٬�]�g�;ց_��>;�!:p����@�U/�"�9����%���yvG�0�6G}����f`hYE=�ڝ��rZ1�?���h
!�V�tF;i-�fʭ�j��	Rj�0��L�z�N� r]�J��d�?���ں$�7�1h���>_0��:���djMPzڢ� h����l}I��	�xr	jP�U;z�ZA��6gBRd�x��,W�:Dn_%*A*���9<�Z���.��A����9�����n��tXPz�樮\�b����pʲ_�;w���Q.���t]3�ŨJ|,���#�u��m.�O3N;�'`n��j� �|hv3l�&��_�nQ*MJ�Z�)\p�P�UC���o���s��|��;�h�Э
<�zu(�R`�������GiH�X�j��mW.+�1��-^�����^��@���$�:B�q{��Z'��}zT�=9�����Xk���(�3���������/��i�;u^��0F�B����Qz��}o��0ݘjx��wm����>{�,��&�IZ��A	{=�/��D����x�Lc",���m!:�2v�mq-���k�B�[~��wP��n�������h1�k���~%&QR�TҀ�0���� �삀��a3	�ޯ��QBY6e�m���԰��1(��S��}nm̤\8B���cV��%�_G>jj���I��J?�,b�`B���ߡ�Ӧ��p-�z�}�z�ܼfH��jPh�fg+r����P>8���Χ�1_.<����)�x��L-�g�{�$�+�k�08�d+A4��O2nۛE/����58��;Z��w��<���F�AG��{����5:�uۋ�5\�㰭�4�8Ӊ͸>�Pr�8�cwۆ%�RMӴ��2ӥ�.�0�.��;q��7�a��Ep�]h/`�T1����yWJ�xb�`�$"�ʺ��\�̖������:_�����\��`8.�����1o.�zU�^��3X}�S��J2�F(�_�|r������{�̸a��D�۲�����ǏU���4ؗz����6n���Q�9OP
�����t�P�P���i�A�3_����,�����J���� �0@�hZC�rR*��J�O8�t�n���J�Դ�����m܉�5$#�5�U����V�6�p )Li�!��N��t��/�39�������߹s*�0��j��k֧�Z.��	dbxw�\�a� 3?�8��&��67'��i�94���w�-0�ܕ�Q�c�z�E���9�+���B\7%�ց!�t��\�w]�8GLz`'ɘ��֋0�o���X�fR��LwGrF������`k��#/(�yYQ���R�$jUr�>/%k/[��@����X�B�<�»�Ŝ�^�j��YS�������O��s������Bx/3sՊ��O�G�s�heh�ݒ���ht��|�z�j�6;i[Q�"vf��a�CK4f������r��|�$H��X9�w#�E#����g�6%����?�^o�Fe�>_��i�;NqBWD�U�ק�k�_���\z&�8x�]���Lx^�e~��ӱ%���#�r�z��? ���>���uUI���_#� ��M��P~����4��WVVV�����#sI��8���������ӧqڿ��±��zx�A��7J�!tLSHc�L����	��j�Y�ρ��\��n{�3��1��΃B<���h���F��F�y�Z��cZ�*b��0��<���ibl�*6Ηƃ��(��}� 6�q��GY]P�tn�A��<�v��L��)m�Z5A�q[�b����
J��gf�tX�33���/��\����/�\.�;��>�r�q���O���S�zq��O�:�Σ;��#��h���di<�6�#q�ɗ��I�{�+s֖��B����i���pjji��}�Ck����K /}�����]g/��DӋ�N��P��r��k�)�A��i����iHðl��"|Ҙ��z��$�ǟ����g�쓚J�g�ƌ�k�{?��i�����(ڴQ���ZֶaYѶ�����'�C4�V��V��ޅ����@�u�p)6G�&�C��jk#JŚ
��a�,Ɋ���e�i��j��'m-@kkkj�[�j���*���qxrj�\\wg��(�-���ps���W#����PP:�D)��=�lS�
W�/�ێ���FZkr���]�)����	�"�����ӗ�I�xa,�k��80�7�f똪���&���c��hIFc�e#@!9��Kz���#X�Y�υݔ�S���(�:�'�W�ok}��5��?:�K�o֍wz@����ʎi&vH2R�wu#�)B��k������_G$(���ǁ�!�s@A{T[֣���ͩPIo�NA��������co������� ��i�Bd�K����4��e���dt�`�۰�u�}A��g���ƓS7�[���A� ���^�����^�'u;uIU�39)����C����ՅvY��)ϑ��X�5�V���C']t�kQ��鐑��v�4�@�=vb	����uG#k{���,�gmZ��u���s�w�#w�Ҹg�{���V�HȈ��,�3�<���o��{L �={R�wb���uZA��M��XVw_A���DR�4�a����|6��HF�4KCe%%%����S��T�������._"�k�#�>~�x�m��nˍcM[�%M��m�l{=�2����B��E4�9��k�B�#��X������=EM[��л�q�$�m�Лt�I�STŚ�\f.��&�j���kL�EI�ӯ^��a�gn��os��e��Tg�T�+J�g��~���R�rҬ0JY}�j��I�S���Lߔ��a�ۣ���a��
a�^���ۻAP��I��*�5F)�4��h.��x��8c59�c��(��̚:o�B� �V[y���T�g:^�o!���[1E',�IU��`�8n"6P�a�@�����$b�P�8&$�-hCO�u��MqR�4՜�:Pd�yc(��!���Ac��/�����lzn��}�:�%��a�7�jљaa�΀m�o�H�Ό�*��"i��G�z�/��1��&��L|��t��!Zk�A��� �勽���Z�;���A���4�X�:x
�ũ0Z$'�����*�su�R��hz�����=%����Y�|�i��-P?+��*�a��� ��O]��xާ�@�� Bg$�"6���n��i�ƺSS�(`\��T���&�*����K���GoU�F��K�kY��"���ۥ��J7��6�jvE��0�?�zj5��Ӝ�֕ܜ���q����@��&�Qq$`�h�?Fr�ƞ`��!! �N�F
���1�'�`n�9������������b{Q#G<7�S�����I/eI��Qlqf[XGn&�ٌӪ�e9�s5�[6� ���^0�یsf�B�Q�lʒ�!�z�ŝZ��ڐ����g������Mٖ侷TU���R~�7_�]ʖ��r�	����S�j�Zn�C2Ͱ���큯���R[�&��c���da C��L�.
�sƛ`F� ��d����.]��5��!�#�7��Ŵ\���?�a�+n�n�k�����Z
�7݃R�&c���m�����|�������z����F�2�.��J�F� S���'d���7)f�n��,�A�]!	I[#���L�%;&q� ��j&6���c��R3��t'$��StF6Y�7M�e �*�< ����G�y�6;��l��e��d��G�F�����4AӴM]��-I�9�����&�[㭯��B�� �}�}	����-�ڭP%��SG��iƥ:��D��x�J���cʎ�i;��t��f6���X�O�=���'5S���4�-[��.0�8� ����|G�r5�0v�)]��,cl0.ˊjH2 `�8:�L�u;O]�l�w�G%	�L�K��`ҦD��1���1$d�c�$�@��\� �ʹ�3�(�U��I��eE� ���2`PTS�]*��o�yah���*� 3TE�RE�UU�P�R�������h:��F7!�����`��u�83�n"w�3�����O�$��J����a��������% /,X�}�ܮ��@C_��!V{��x����iEy�	�#��yҲ,��o�ff���1T�QEǁ�ss�IJиc_�3^��A�B�Kp���s����P�k[�2�m�͹}��+=�L�Ӿ!��s�����q��z��l{m'����'�ź6����TqeݲphZP[�{.@���B7�����B ����?a
�)�k��R��Z��eYQ40�06}Q.7�\��85媆d�|����sf�\1���h�,D�d��mt���V
��=qH1��Z�4�š]�h���
&5-�l�E��ܑ��W�?z���/��b����+���1�G��0�3����K��
ɭ�k�Mۇ"-����*����ۊ���A�*��s=��)��N�!arhK<���!�%N=�8A�(O�z�B��B�Bp�z����B�^ϴms��E�Ӷ͞jY��kw�a�4TG�j 0��|uP�hR�R��wM��� хXeT�F�`;��$�B�z@���M0ע^����P$mºU4gZ&����qS��-�v���i��4n[�G�����ۇ)oW�kY����9�{�psͼ�CAXߐŃs�rw���zm ����͘��F��N��{z7B���Xc��|A&I��bPq���dė����k�j�&�����Dc�d�u����H@WV&�������~�,$I��0"E�bIR��2ER�$�H�LJ��,/K{�  ��*��0�,����笃��EM�d!TM2��EQĘ�?xm=��w�ܷo�z�����a�,+�b��ej6�� �X7eR`4d��M,���F)H��t����/�_��\.'T��	UkQ�:c�]\���h;�=0���ϑ�%Ș ��&�����Az�,6x�����&^w�ⴙ���e$��9=Lzl��APX��w��믿~9�B�9GMI����F���M��i�	�i�".�W�a.��}��T�Z�I����|&��f܈Hymo���&�`ua�jR��6��L���^��i6pX5��1J��
Pźn�{�W{�G�O�ע�E�h��MH,�˙CA�*Jxд�|�}
}��x��aƑЪ�&���]_���v)j/X�;�CLw��a�M�|4Y�#�=p��aj��G�����ȉ��Xq�	a��B�6˕�:�mH]-�m��r271o92��]��9^xn����Y�S�^�h�>��:�;sY�����p}h.7/XЧ���U�E����x9CA_$A�?Ζ	`����L|?l+%�v=�����J
p�ZnO�p%>l�:��P;:��[����Ve��q�k���Q�N��Ӱrf����� ��a�I��"��o�SS�����z�;��cQ)4Ę?��x��)HtR'�nw%xnn���u�US?%��A��8�뫌M�:c坌������ ��K%���KP,N��h�T�H�X���E�:�\i��U]�dL�K;tݖū���@��ң+w�-�\g ����*���:T�W�æ�s��u$`2i��YQ�?���6��HF�5�����G8 5s��V��2��t��7�ĵ�*���u���U:�.�H��U��)M�Z���¢k���iî�����[�	���
�v�Xc;NP!���-��⸚\D�3�v�D��W�*�yR7�O��)��j��(�3H46��(���gzOM�����|��3}�����BR���Е�<��=�P����~�:�RVD���]�#.��v(ԃgMw��~�=" v�T�����R�Zo���)�Ѭ�����*�}���M��Sk^�&bR/{Ϡ��8��=�>i#������EɛYd#�8^�	�N�9����̲��[&�@0��[�6����tr'�X��B]�d�$x4��3���-��������(]��jអ��S�1�&�H�xէ�Ƣ(:�0��WX���Xɏ��N������G��G\f/��4�݇ކP���:N�����p��rLU��`�o���ͤI���$���v7��hD�����v�T���7s+�xf:�ݠd"I�Mv1�RBh5]��SQ��(�OOǮs��F���m��[�8��F����m�T�S*~X=n��z�PPz08g��3B$�̃dɲ,[�M]"�0��#xC�s��!_V�b���M��;�%x@
V�s�a������M�{��l/f����K�ҡN��d+��ʣ� �o�~	.�lϳ˕O��*�Sk��2>��o�U��C_ꝣ\����{�P0�y��t����>��9��]B�������z�e�nG��ףw��O��`�O�%�0+��"I��b�Q��������>�B������w���wf r#p��%ZL��ZY�cK>�p�M1 ���@8���T^����&(]�������z����=����9v`��t�nt;B�Z���u.
Y$k����⢞5b�ɞ����8BID�lZ�sH4U��RṦnU��uϓv��]��0�����|�����O��/��g��#���, ��-����npeB	��ww;�,��a����������z���vO�]�s��F�C��g�=!l;�����`9:�/k��b��=�N`\�T��E�'���?ù��&�������Qs���^��̿�G�ޕ�-�����z�-Dx_��s-���&o`���4u)��c9r�n*���nڬ~����a���ap�ap�ЗmP���A����mx�+q��V4�v"�����"e�t���Y�mT hU��Q:�wdG0y ��$���LP��u�
��N�G�̮��6�m6a�Jh�A%t|hҸA��u�a� aEac].U���f��)q;��d��Vj�ԁƖ��"% qןO�N�ƀ�OGDR�ut��w��,�~�V����"�z�=�p��={$��w���l��O�G�E�|���L�Z���Gv�ˮA�U�4mN��/��q�Eh=C�� G��v�vR��&�3������8E*����Lm��KЎ_$L4�Eǁvt����4�3��Nt�?�w�8i�@�KL�CD�-q;�DQ����St{���rC?-&)X�y��0}0��Z��Sw#�,;�������n�o�$+�Bԇ���S���[]�Jv�/�,�E��In��4?�����o��S��[]��>g!�����s�l,�K�.��=�u�v��MEU��W��#TG��-�	�/�vB����#-J=#�e)�m%1)�o�Iau�QL(�N�#��t�되��$��H�R�'E�F5?�T\��%:aLQ�mOFQ���T�E�3��z������/��u{���%J��^v&�29l}?
/�ڎVэ����{�H5G��i�j3#jV�ckR�����r��)U5���q�8��H�&5M����aO���[\I6oKs���|��H�F��7�H��U�+Ȑǀi�B�n�q����ԋ�m�۽�L�`��ߊ�-T+A �j��±>}VH���Mƕ;�p����Aw}�:Q	�BrF$�`��Qڕ9���0|�C|�?��pz) �C�tK������^d
�	�ɢٓUMm��yH�Ҙ:)c!y��6��E�A߉�0k J[8n��rxF���e-Z�yN�0[��j��3�`�i�'�\k,�PYq����xԎ��N�-�0j�YG�l!n��S�"�P�u�/�f�t:pʭ�j�_\��Dĸ�<����V��g�I��(�����15��r�j�~8~���r�����S"ےfLL��I<���ɘ�M�&�z{*� ��[�ZKa�:��<5���P�"PA�@�u�R��Y����DG����(n.u��:G��	��E�Ҩ�͘�M���x�N ��i��K��mf� `��u��	��p�z��}��2�X���^<��s��b�1~�a���
΅��aĜG��2�.te�����D�#[H�yr���K����Wχ
/ꁵ�� pp
fP8V��� ���g7�z`�Mx`�o/�>�p09�窶.�nW�S�8N��8�OI�-9VaJK����1�Ϣ��I���Y�/���������B���fǷ�$0���_	�u��uu'���
���j�5߾%��rι��vJ�8EG�C�86F��e�zt�\��A�1�>�Z�n���,j�^��0�j���Eۚ�H�����~(�/^����c�'�
�	�~��`B�6�C��/��]�g%� �RK�����ٓ��T�d����'t�����h́Kܫ�X�['�t��ǝ������q$1v�l٠�
��5œXy������YoI40IRuur�m#xnmm���HIzGq20yiv ���^������AG|�=\��7��Y��w���z��Mi85�ٳP8k~F�([	~�x�X HV_V"�F��/�z��\��v���i���B�P��ʹY��R����Jy�zA�+W��3� �)����.�EW�k�]蝯l�XC��$�?����Ψx�J�7�XM�i;I��щ}��4cB?�q^���]ʺ�N$��Nj�j&-͎�{�kk���Kkk����(�`LVq���� �����Q�xC�Z �*�Œ���^������m���cqs�t���Z#TU��&Q��� Đj3[w"��n�Jn/M�e��.W��ުJ���u�\ӠOK��7����S3��"����4p��#̃P)��: ��#e�M���_���D��-4� ��\��I\ޅ��᎒	��I��o��=�=�3���lk�R^�H�x�J ����aH�"(�IMӴ=�3�L�Ѵ�(�����0!(����#{�axk�5���ѕR�ьdJ��@5��È����)��~�eZ:Y�8a���f����K��\�l��- u��wD@3�����I�M>V�Ո�B��.�[ĖI�K��FMS� �q�M�U�  M2���h�T�&ۻw�ń�������I/��b�x��cn�fމ�Ua���
+�mӱ�)ip��Ç}Fܕ�0�0s|_R�IB]���I��qU�@	�-Y��T������ӵYcw k�i^@/q��1��9��ʄo;F��U�c��giFձ��\!�(B[���A��qt-z%z��:�6%���E>�뽠�Jmͥ�,\[�+�8xL�s��L��Lǫ��&Y�Y�m��7ZZ���ܲ��b���O}�͟n����U�KgM �lI�[��e�����K�8�:�h�J�\�`x�$�K��ս���tM���1Vӄ2c���u���a%^�&Ǘ����HwMF�;��`��,I9N��*�G��熢�m��(ɤN�6�^.n����%A��܈tk���Ⱪ8���|6O����뾱�{ׁU��!�����|}�Kg�>�n�zi`�p�O��@�d��B���B�nk�L}@Fv�ɉ���[�2t�Ew�נ���Z���?3��8��jxB�VZ�K)�!ݿuQPڃO����~�8���{�>�bA́	������Nt]��F���ѯ����}/��0�w�&����Y�+P��0�GN���p'�P}�ۚ7��c���ѿ=�} }�M R*T�Xǃ�yJ�uF&���]�;}�ֹ^;u��j�&� 
0�O�Mlk! ��ߌ㘳>�s���vcr1�{�8�>��,�GOZSKKK3�3�,�_�����mC�����G�����oRi�H�A�T��8"�4��q̈́_еg��f7�B��3�Y7������������&���f ľ[���Y�ҥ�[)3 �p���/>���l�a�(�����L���>��W�rK�jSS�f(�a�95U����f�����Ԥ�P����~��~������ᜋeӿ��,�dW���G��r\ڸ�����Q?������@)�� �C��)��،��AXl+fDww0e ���jݱ�T� �}�l��SSסPLnI����O��N��Vs(]�j���&{�������B1AZþuB�7���E?���"a�`r��Mf�����A�m��_�	:/l�u�v�����Ɲ�����|!����?dw��V�JW�z�l�wy��N�m%zsW�������֮����[z�u���ے�q����EQ����%��L���g��u���.��:lpx��:^!���`��ѤiN�o� �[;���5ն��ͦ�H�V��� �L����F��W)��QN��D�C��r�v}���p��[#�{!�����f����7R0�&��Y'AA��%�j�0(yV06d�(��@��Z%5��,�!�ݫ_�������%WfG��r�!��>�G%��
o)x�f�3����>~I��m?�'��V�%�m+G����w@�tt`'N�0�=��� ������c�ћ2�8C)�z���uĄ��Ψ�5�L�v"�h'	|�h�Xjka���S��N@�Zp�1��K�ڠ�P'�_�[4���Ųz�6`;c����Q���� ˏh����������4�f�[m (X�k���qu�q���֭��<�(�ӛ���9�`��x�Q{�iUw��� �HM/�g5+*�}O�f�Sց�N��')96�˰�ٺ�]�p���ތ �
P��R�p�B*���	��v����i�X N`Òr��ݞu3	���p@��,f�WAIc��r�^�}�[7T,N�j�Z���-�u(rhJ�Gs�~\�T�c��2�!T��.��-a��kkk��%�R۶�Ϫ|/ ~_w��.t݂�Ao�>Oa3�+t����<�pD�pKj��������DR���Ta`�)-�q�~�}����Q��^1>���CcgZR���\Ŏl�>�~G��zUp��C�҈�k=|����.n����1�+Lo���H]����!ʭ�X�e�dQ�[�jo�zK��v��+�$��ϖ�18�~o��Q*����28[l6Eeo���sG%���F�Do_�z�?v��Rt̃2�p��L���f�j�G]�c�`��H�.�O]w�I�m�q���e�����N& E�z4,��G����įr>3_�(L��|���b�^*:,�Ѩ'%�a�Z��Z��h;:�nF�(NKh�`���q���1�-ô�^l�/_Ѕ4MkF���F�>�۽�f�o��:�II��1�q�!��EQ.��3��ޠ(�5aZ�  6dϓ���QCD�F�������Ƽ��Kr�	ۼ�l;�]^�%W��mp~��a���wcF�GP�1U0`tY3z�V#Y�ՀD��p��j��t�8�V� B6Iz����}�Z���㋾���Q���W~pA)oKR�hs���a�.�$����|�{��g�$
b�(���À@��a�^lK�͹%K6�U�{8
���w���d}�m9�٬&R��	Ln�dh�>�4�h�04�}�9�7h�2��������Y�nۡop%'���7Gs�$���k�HJ�]��C_�ɀ�pb��j7�`�TT�7���ڥ�N@��=�#T.��&�s���m��Q)��ɶBwU�(z� `��C�1�V���^۸����(���a0�%����a�̰גe�?�]h������~XۍP�j_�L�m�3�>�."f��HP?��A�m2�' j.Ru\��cF ��Zbw���U+��9�M�Ĝ�w(\�9���j.s�s`nK�Z�2� �mb�5)5]׮��U�J�'`�ܰ�_�Ȩ�X)D��^�a%������;�Z�&��1x�R.�	�\�踮S� �k��ŭb?�W�h|�:���g�x?�چ�E���G���0��Z7�/��)i&������k��L�a�\�ۖ>?�[���e*;�s�T\/�}�i��r�O]�
z�8���q?��f���kk�c���"�9��%���\ε,7�=Ӕ����q/B/u�*�D��y�2�g���u�S~J$C�|����;m_�sW�С9� ���I��0M{�X�`3�N�������U�e�������=��~h)�O�Jo{���;�/�Q����~��?�ޗl�̨s���/�����T;qB�C����F��P��u��n�n��v�f\�0i�����I$�e)j�V�:��!��H�Z�ժ��t]��|��#x���^{���r!,K_��1����'u˲҂�2ڢ�m��g�.e|
ێɹ���ЩG�h�����������UToqK%�s�Tr�`�y�"��m�o�2�FW��$�]�/��̺���0�f�>��Y�t���j5iH����<Ҙ�q�4���P�܇��Kó���D閣Q� �>0!3I7k,���c�66I"�U�C!E͓�'�CU%�1�V�ބCe�o�>*�����]���8EIb���~2uTp����h�%G�辰I���
|�C�g2ar$�������4U�w	+��U����5�TU�N�%�� ,��sͅ~n�S>�@b|�]���?L��`Lٌ��ޣ՜m*&;)��ʪ��B��\�;�v'����ʜA���7�^�%�݃A(k
�q�u'��x|c�T,�x���,�n��8t�yZFT�GE��0���_%T�_ٳ��ښ�%�щ923��x�2�Pj�F���²t��+��6~3��²�k��fJ�[L��X2Z²��
��N��9�����=�7�o�E&.'����!�Z�:��=�cchv�j+o��l/���~������"b�pu��J���6"A���B! ҉Ba80�:���Bg�����B���`��>��v�vkb뵫
J�(8�$�&�bH����Œ��lS���'�v�Yp7O�\RO�o��>�d�ws���k�X0c`���xH��%ԁ��ƾv��#���<��!PdΖ��X z��D�았�n"N�#�P�j�i�k�0��K����|/���h'�����z݀�x�R����D�7���d�l7����9N�3nh@_*7wEѮfyI���Yl1�ϥ�q/����=٬��6z }�����
�$���4Si'�]�$idy�: >�?Iav*i����_1�\�mY�]��|$�a�[�l.�p�	Q�"Sww��
�1��@�5Y	`�kV��lVJ�a:���q�-l��O32�Q�����E���-�q(�w��&'��!�\)�4 �m�3F`����C��gϞ?�P���a9V�χ�c�y��ɵɢ��0Fwy�|m��'pϗ�[z���w�wKR:�!��u��C#�����ڤ�|�S�:[@ף_�aut0m/�?��6�rٱm�\����v�nö+�z�R��Ǉ�w5��tXއ��*�!wz�x�x �CEU���� T�cl0jO��v���>�9nY�/�Gg& j����9�G�x�VX�A��m��\��$�����]�?��_[�쎝|���G�;w�]��/w���Vq{#����i�j��ޱZpLa�͌��T;)C���ZJ�qJ�0��v�Kf�M�o����(����c�6�q4��z��]vY4X`��{7�(�v�-7syx��[F������Ç��#
��������k�+j��!�vq��$#E0Z���^-4ѵ��D&$�&؋O �T�Vr��_*�]��y�snY�d����**,�8���S*��� �l�^��E�:�_�����˲�=Gc.�,���ق�Rƴ�t$��:�.�ܫ���6����7���	n��;Dy4�D~F��M�8No1U����Ic��HWe�R4-��+�_�XTh��EE)��_N���9Mk�o`��3+�R�L���K��>������۔"\q!
�����:ڎN�S�`|�C�����4=h��"�E���8�����b����V�T()����w=���1���⼱���R�]�2vvyP�����ϕ:R\�T�
���[�%�W��9t7�h��>���m�N&0�n`֐��ɞP��F�E�!�q!���ř��"+#*n�֋��ݺ��������	�r}���3�Ճ٥7�{�cn*�p+�r�y���/��ss�WZ��3
t���ퟛ��c�o����K���~�;`�}�s���;.m�V�Ʃ0��H�U딊�SO=�������b��2�P ������oY#�{c۹���!��Y�[(A�����r0�mٶ��_�n�Hn�x.$:��ۂ��^�U-�$�o�s���
4վ�p����j:võ+|��|8���7" 8~ �K�n3���͐w�}�֋�<|k~	��s�i�]�ЏF�atj.�~[�6�л:�u&�s�7���:K���n
Q!o�F���.�Y׍��ZU��į�뮹�%�🧞�Ag����r����iL�毭)$|E��U��Jc����!����+7�N��(:�)^X���rg{t����׈6����r������uσ
�@���L�n&]�z <7���eYް�U�W�_џM1�$j�'O
�I�vAs�>��J��3Ԏ���U"-0�T��;�<�|=	D��t��9�J����c�a����Hr4�I��H3��#o��%L۱�l&��}�>==� XV>��-@��8N��T^ʵ�?L���4�*�<���W܇l�χ�*�G��z�ן��P�[��u��@I��
+
J�3J?����$W��������2���F6VT0�`��7A���Pe���r��n��:�x�Vk+�2��x�Q�5-�`�dx�{�q�ߚ��@�t*E��;�N���i��M׫Ś�zr�}��\"��P��D�;pkȆ	��,)>q=����qr�2��|�:j:ҥػ�����>�N��	ݣ��'��"��� ?������.�i7#���6ٕ�`O`C���HlC����5;˒��&,[j&lU�s!�o���b�g^�e[߄Ȫ���֞�|n��e�iY�\�x1�8x�)�t�Έ�ju�N�Vӱ�B�H�o�C�8W��z�>v�
��f�֣�F�S�*l����[U�F=M{(� �hd�$!���7�eRwu/�Ax岸0�3�S_�-t\�aY����W��tBxl&���O0��k2�<������xrJ~}��@!�� ����٪�,}Ux*�]sU�<�������a�&Y7���=�6�T�P�e���ۃv+M���t��kmM@�N*3�.nz�u���M�Z��@�Q�p�5�i�h�ɷh���9���oA$��m������;c9bH�*��B��#5�Lj�X��&
�o�׉q��s6����ǈ���1Ϣ���>��!�خ>�7#�V���CK_"����㧹�I��yO�oΊH�3�r���b���.p�L�fi��a/��8^n��oL�X�+�ٛV�M�aЗ��'f&�튥���Dk-1<��y=j���V۶���q�f%gY`_ք�� �	`��s���-��%����v�
n�vMf��PÛ� �OX^�������&�x*�`Y��uCk�󹗔P���ϸ�V�Qb%~$)�t���<�z7����(:w8�};��������U!V_>�y���أ	���B���g�
a�U�j�B����8���F���Ɗ�c��J�5�3{}��ڪ|m!�)�z�^l�I8T�õ�~_���c��.K�=�\L2{&�=�r�M��r�3��Qk�w��p��a p|8I����,	fv��ˡfs{.tu,}S�7� �| �_P� 3&��1�*�{)��e
�T۾]�S๵��Ch�$h�4=����S�7�����l5򉮨�z����]�~$�4J�]�|�)2�vU�>0�4���S=:D&��6��U�`�g�8�SwB֒lU|�0�.$����D�ݵ�9��4#Z��և+�V����Zx��H��Сx{#��E?0��L�ݏ�q2Y�0y뭷0�\�B��@6�ڿ-ht�m�!΂w�0��V�i�ڣZ�O�{6#/��!��ϣ�m�7f���y��?m����W�G6�-A:Y-�e5W���Qr}E��pK6�0�a�h��k���x �9|��[�b~��H�F��b���kU���[�QbC+�(|J��lm$���Z������왯��x �FE�݁�E���#��T8M�p�(;(:*��t|�O��M�t{�����ia�t�+s(n��u�(|e;��sW�!{}:�8�t8>���6����WA����g��e���Vh�#�7�m��4��=�Gt�Pj8c|1�58[����)�����Eǁu��`b��i/*���(�����,�	��Yj� ��PL��k2;4�_	�y" �4r���E�����5��O�:6�a,ƔD��G���r�_s�!ͮ���+]�_@���x*�[��V��^�__�I�^�g5�.�,^���e�B���}E���^�0������
kpt��2��ugh?:�nD�D�EϠ��_G_@#�{h��l(E�k��+��lG�;ҎM��r�=���C�\F}Q���gc�Z�3Cp����4,��;d��¬��A�����Vy�ne��h�*�?^�/f�s���c� 
^�N�>��r:�����l�-)�C�4�l��Ъ�l�%��\�ȱM�t=j�0�����(��x ����;Sdӣ�ip�4��}o�L��@��7ɵ��,�lQ-X�^4�2]�5s�z_= 
�x���4��Rs��v�륶,g�rҌ�W=T�/L7
5��t�5��3�d��#� �Fr���4z��p�Ӗ�̩�Bc���P~�*�f�c�2���݅�mQj�.S�l��ʿ�ވ~(8PD(l23W����9�L�=��@wl봏�mP��}������t_{�x�~�4h��4F8]�("2,A�9�C��>�;��뉟�T����r�i���~�P+��{�Q� \�:L5I�UC�H�|�%�8�"�0Բ��tX�dI
Bbf���5��G�W�`�@F��Y-�?�mS�Z��ݱ�j�ZB3v�yGxK �0P�i�O�M1z��H��Ѵ��MU�*+�:��)Y�#~5)"�E�T�:�����b4%K=C��q�l��F�q<8r�7^^Dn@��	�����؍�ٜ�k6�;)���.W��N0� ��k��V��&��[���
�(z3� 6q⧡l.���=,��22*!��f�`���P!痆���ҍ�)�)� �]jP)�$��䐬�~/��6�CE(M���3	����an��㊿��;v�l叔u��_�)��5.����s�K�8�P��6xR�mP�r1����x ����M7�ԛzh���߲�vlXῬ���ճx�Nt�ZO* �	v+nͱ�_4�����"�{'^O8'��2�c?�`Z9�>�ml�ǌ����Z�qa�,s^�Z{���?���Tӣ���Vo6f����Ē:�I���4�J$	d$k�ac��J5� ����hA���� �����+��]Ž���)�� qf�5�Ҧ�_c���7��ei�̘qM���$ư��!͑L�R^�.;�>��3�D�d�X�����(�"��$�?�8rPj��:݂�A�ס���- p�(���sdX�0�i�qP�:�:C?�^�=�;~���4P�'����KMv;K��`�O]��P,���Lk:�yE�K�	J˶Q�5�/W�Q��c��m���� �h>s�ذ�ޛd�4�d�����{����(��3��S���������L׋Q�܃���g��+�|��c�����y�
;?����z� f2K<�)ITma�����1�Q-��S9�a~�s��1�O|�Ei .��~̥Ȭ�܆���\�ZtG�?����¥[�pɆ�ΠxDcɋx��E<�ލ>���-�� 
�A���@�)'y� �����7'K[��L�Λd¿�u���p1����8�&��/�>@������lԤ9z�S�[e��n{5�a(��%Z� �ւC�����*����Qb9�D�e�7E�X��Z�{��;���_���w��_�N"�IY
"��/J���_�&���$+*h.C�V�쌡�y�Z~��������z��B��;���~y׮]����"tbN�c+y>mk��h7:�΢���a�8!	�t� �a�v���v�rCw�e�������N��Yj�9�$��iH��jTf�0T"Qw^�~l�Kc@�g.tqDzN�15~��(2��4s35xC�u ���\]�����o&�ga��?�
q n$��L��$}xi���M�Zv��~�*�I�A{���� &J�2	��F
3�(>�+�J�Htq<�8�(���7�z��7���6_e��*����dI%����/�O\�c�fZ	����\f=�[,�������W��!��`�����AX]����}���b�0y��7Ӵ��)-p'f�G'�ɹM��ơ8��֝�6���N��W]&tɡa��Ls'�4�����1ǲzgΜɰ�� ������(%+F�+?0V\9<-'e8C̏f�л9�x*弊���´,��o���>a�Oe�%���G#����:�%�J�z^j�M2��Y�z������)�����q;B��/������8:�n�:��(�r����1�M��$IZO��r�Rk�%[Q�R׽�=��^�����8�7���r�������:�[�Q����v�\�rG9=�Ei����|�w_"+�6�<@�&�G�/�
�9�!t�؀H�q��)�K�ܷcr��XQ� �䦴����Hyn"�8�g�@�!�+����w�&_ضm�eG�g����z*k��>��m��V@&����rbZ9��DC(�V<�;����mm�ĒgZ���8҂��fI�P[��7˦�
��s�M��M���H\Zl֛�?DN����l#?�^y;��b��{���#�C��*/zFQ�sG��
�����!t����\�K�u}BG&��(K#�K	���k����`Ap�Krm�a�#_��*�)���m�_�Ƣ�R��y���YZ����(���PZ~(^�s�r���x��@Ͼ�j$]z�s3��C1������v!�;��e �~��ҵ/�8�S��ͻ�u���V�3;A�c2@y���\y�ޠ�w���w�½c�=s�����o!��F}E-I�;�H���i_a���ºU'��Eܱ<ɛ�?"9T�7��:V>_�|��P����7��h���D��msQ�F���U�gyL�Ou6o
a���jX�GS	��M�>��~�6��-#��8@S��,-$��kr3N���>��?9�aQ��s�tȝ�Ҁ@���!o�,�4镔��ƱD��Z������"wh[�s������v�	]m�o��},��Ё	I"`k�^	s̝L�soS��c�h�`ooG��+��q<�#�}�[}�rI�չ��lo$�|�NeyB�&�^ߴz��2·�4p]rʟ������v*��%�g[^���F
~`lW��wY��U�i+�[V�	7�����C�g|"/l�&�n�٫}��/ޅ��J�zs@N�t�ɮ$�����Gd
64��\C_v�H��D�r%���b��ro3�X����Bk�[��ZZV��b�u`��y�e�ů�	`h��D5Z�'��Vk�"�GaOl�۷o�fX2��.[�\p��-�u��_TAr�ah9�`;:����*h�S5 ~���;B"c$N	3�B��	�b|�9t?�w�s��&`��w ?gq�z�y�n��'?���Դ�)��q��C)W�gd?�`VM0n�k9}���i��6�g?J�O~��W��L�i�����"��@
*o���%$P�Dw]_����R�[���@g<��&��&���H��r�0�kp�5�j���w��gL�{C�|��)�
�M���t�����&���2f�D&$|�ʲi�&=����:�����x����_��p�����4~��W_}��ʹ_�W5M} �`=YyLX&��l.Q*�J��9k�K,+L6��6JgTFsxM�k�����˭��� `�N�����3S��N¬�"˗��	^	�e){NY�Y�wG���v�H X�4[���5�y�d�m(��b �^�>����<�Q�>J�dw�b�	M�qa�\%��սW��XX ���=�*<4(�L���J�<��z�?%�Q��R�6;�	cdYW�I�Q�IT}����UK|q�K�����ވ^�{aGG�݃�Q#��ϓ.�}jqS��YEH�5��Z���ZW�j�n��m�	��.ٶk�qkk�må���Ӷ'XV6��e g�Y����x�!�֎�Z�6��ۿ����Uj[J0<�RHfH���2���ȶ:����EerXǍ�3t�6�$5p+���m�2M�Lp�?m� ����!�w���a2�| o������"�Y_1Z�櫩�
�*ֺ��v���s��2r�y�ցN��o�o�@T�O�Ґ��J��1e��
7C`�Ga��˲6y�3#v'����5)wW��{M�����t=���]w������~wպ5�ٙ3gZ�ܧ�ydu�|Z�2<�S��]���Az	�j��p�����f��v-'[!�fW��y��������t�\�O�`��b]�'�hA���k�G��V*�y��y�l����W+��;���k.��O�_��<���Z{Z~�x=�-� yv Ls��_���$ɻ�����?�S�"�u gʵ��竏��D/���O!Y��It��y򃗣����������X����ƛ�� ]Ѻ��S��ȏ���֋8��eo�&���`�Q��xO�A7���Z[������]���धJ�87Hì�3�ߥ�J%�DD��+e��a?]�"���K>*�Pt-�ōd��	���V���3��	�>ДrΗ4���И�Rٶ}?>�"}A"�x��#�Z-_q�B�:RzhFтg��j�z<5�l�g�(W��xc�*�^QN}u���������W�O�{oi��o'~�V{ҭ��ȇ�TY���UH���W/�2�Hu�,ٍ֐�B��o�ם����Y/j,ټ��=];
?�qnQKr��֯ے�%��2��ub�~W��nޮ��f-���{�P*9{�r��4�K�,/�0D��<ڎ����:z=���m�@�9�Ʊz}����\I�r��1���rr�&~V��Uf�]���5�f�V|��Äp�'�|��&������6���,�
��5�@:��z�BU��������D�m�Y(��I��ē������zCt�bb����K=�g��h���VJ!��s�nf�v�o�I�ܙ-n
�Xٗ��q�s�_E�8��u�B-���̉����}����'k��s~Ζ%A�؝E����t�P��[��t25�c���k{gS��LJ��3�/�݌� Jf�.��I��N���)�nc�*i�����o���/��wB)�������撷B�}��(�;�3�b&�~��]�ןտ�d���	��x���&�^t݇�bHLT�s���]�Y��t{j�dm:㳽) y^�1��ID�sKc�IAQ��Q�T$L�n�NHW�dsa�v���}xs��RՖ*Q"�R>'�2Yj(*��������6_%\ۀ�S��(�'�`b�"����v̎p[���$�[�(�/��p���O	6����JJ�{����#���G�Q�9�^=T՝�#]y��*�Iĩ��>	J{������"C>t��	;%z�ֲ�"ڍ�A#�l�v�dK�N��G�
oB�(�Ł��"�������BP����8�:��{/�trB�"J�skkkk�?�1�R2�1�x��/�N�҃3O�u��������k�0�'�����Ҷ�����;y�kT�����ee)�q�8ۮ4u����?:z��nG}�"3�=�h��F��dB����wr�	�}Ĳ���Ay~;<��9�������O��E�Ͳ|Ol��К�T�v�+ļ��%+���ϫ�((Ҥ��4eRRt�J��W:�}� �s��R���ڕ��'XY���U�?g{��e�ﬤ\��q�|1�b�2ɘ�S�[s�;�I�����GIo�y�p	�İ	�� �2������V��� ��^���.˕��b�S��&��׺����O�Ψ}��̞�����J�hO�s��Sv��rV!������I]?���	/�+�/!�hnݹQ=�u��$mE�"[[UҖK$7N����Z9����^�6r�ZO1��=����[�m/�G�C���.˛-���zVf�5�v�_zA4�	?gi��y/��b-n�B(>3� �Zġ0L;�띹/Og�����㖊nVb�`NJ,�O�ʃ ��º������얒뀛-�'���7%̦��u�ii�}w��q��0N�`,-C��z�����G'�l49�q�40��ظ���WU�$�Y�92�+ˠ�dA����9�@�w����&���VG����z��x��{����b��dI����Kg$��	�@�H&�}՞A�i+%Ê-���v#K���HM�[QQx�rō=��0S�r�;"h�؉B�\o�F�`�U`h�j ;Pg�H�����>�֪�o��g����m�C�@��n.�7]7p�� ��5^?��S�r�P�~� Zr[�vu%�M'D
2]��}[Nџ9��_|=3�,�3�[�Y:���L��,�7c[�b��`�12|���"��
fڤ�R��5���B�q��t u��Y��֏��j��sZ޲�TF(�ɥ��y|,�ģ:RF�8�r����R�mc=r�V�h�!�r�:��i���ǣ�`0��g.����o#�@���OX����A`@AF"�D�;���S� ��$� ����7��zk����:2^/RN�q"��<��CQɱ��2D�aTn�yk�L=��������1��8^����Ur�n��ẛG@u�V��yI�ԕ�_/	�B��&|��f�7�����
��R��	m(�P/Z��ؗx&�;�h���?P���.kI�����a�Y֚iX�T�����}������Wq���9wmmm��R�5�Z�|�rLc� ��	���dRnoeh�����@�C��-����:�0PƵ6
-��5�R��0P'P�XУD������g�e���+j�a9k���X�Y�w�>�M�S�t�T��So�eR
9̞���cU*�c���>r�o����>
�60f�68O⪤�{v���u�_ͤ�f�9��l��0q�2�%ݤ���+�7��k���]���W87��(��(
�ol;��?�a���'Y�s��S_���>Y��G?*�(.o6�ǚ��g��|�0����������ŕ�E�(�ʸ���%�������Ǎ=k�#�I�� �BØ��KB/�s���(��S�N=�3��I����r9�mȓ��������E}t��Ojt��s��@�Vڜ8N�i�?�"0	�j�u3��"�ס���Ƅd$K�0L�$%����h&�1䲬�.�B�蛺`�W�@�J]]�e><�}���{�Ue�n�Ղ16�577�����'|MU���Y��1�ΈR��p���x_���T*u:�S���k���fs_��5?���������a�	�g��w`���&�p[=��SCPj�A �:�y�^�%J©8`�v�� �
	4��&�6L��jD�����
��23���|q=�37�t�^.+�r���)�c칉��b���>3M�O7�t�ñ�5� [��ޛ�i�����bp=c!$׷��B����<��!�$�� 3X̸��3�X�\U��m�ҍ�hk���gI�L޼�39r�4��`�,s���N�:�\/Pg5��\�������'�����������S�ܦ�߻&o�PD��*��,��E�O+�ވ]��������X��I�F7IBȡ���v�=Ʋ��M�`E[�Y����x{)��<�U��f�B$�`�Zbp�	g~�=��h�*S@�h�%�x��J ����a�	��1�l��Ã�OA"�?\a���hb��ۜ۾�����ױ�[
j��0�Z-(�/��QM�����n���0L�p�`�U����tMQ+��xV0K
����͆�4�t@.:$�?�za�>}zf��}��bھW���(nQ���p z�Ѡ���gF�����
m�O��{�m�}���,��uv�X�hvZ{��f"ٮC�!�<�=�UT(�O�5�$��q�2t��%��	����������k���(�0W�?{�b�� p���~�_��(��߁�G����1������r�B�w쩆�l���T�'GV��-����Z��φ:q�~���Nδ�	M%�kU�h�\���V��0Ԥ��@��޺1{����Z��w��㟭P��.�w\�О�ȸqrR�"MQ�J�h5�.�|�P(����������I��^�g�	 ��wV������5_�J���p�u-��	dVj�}�pv��I3d;�0(�qr}���$��8n��Bx!�7>�&�+F�:��]8��N�o�������iA)|_�p�7էu�ֶ��}m��R�iq���ٷ������s�����d
��� �o�{8��A�RU�p�/(�%Z&�v��!��M�z�M��?l�y�Qu�����%@b+K|�����I�EK����yDf���]K�yw�]��
?L��>K�8M<�$܅���r`��?�;e�1�d ���k�
0)&��0D�h�Y,�	8���v������`��A��.wZ���Gh���~��-�X|N���Q��.�5F��kd� �F7���4�<.�����|`���[8��0Rϣ6���M����=�k�m �*]܌Q�,�A�q���W��H����ƽH�JԱ\=8���i�byy9[�ټ�M��{�9����Q�G_U����y���X�R4oȉs�4�bn�. �fF�Фw�����^̕�=TCm���<�>���,mQ�g�z�Y�̍B���Đ���п�fK%At��j��j��옎��-{|��.Jq�A%:�Ys*�z�H��3g8TM(R����p��9N<G��b�hҜ�B��7Ny�q?�/��7�Q͠�V�y�'9�j��������Ic=�<��?S��F��~�'zT��/�~rv[���O|E���������!�p�r��!E+����\FK���-eK�PF����8���w�N�N1��-�bI�M;�7����bqj�$�1aY��$�{�^�@#B�%r^�.�q>&H�c�����Lb������� �4�B[�^�B�9S�_z�L_8�+���+�	j�'�6b(:��QA�u��a��p��.u������n	�mY�賨@�Mnߤ�y��
�l� Q�q[��j�ɡ۷A� ��!E��S��7+s�p=�7�.���%�}*�yx���Z��Q�Q��l�̀���f���۲�$5:��9"�*a��� _h���t�Ң5��>��<ϗ�X���o��om�7�+��:��\�J�w���h�zRNUR-�vؚ�o¢uA�CǙ�k��eB�v������9�����
�z^J�忿
�5��92�kh��������ѩQYQb�ٽ��&`ؑ׺������y�f��2�dK�lo��4V���>FK)g_\[�ke!x�/�����u��s�j8����Y�i=��xS�6����W)��Nf������5�.䫮p�n3��m��.O��_������/�ł*��8q�lzŻ���u$]��!&����)"�ՑiR�(��C��r*~z˲�DH��-U��HO�̾��9�� -����d���K��x'?®��}�B��4I�b�4ڥ���bR�W���v�q;F��m)�q�doss�-͍� ����/�)��������O,'�~I�W]�՟�pő�9rD9p�'��3��7��ػ��L4fߍn����
u�׶���VX����+�,��֬�����9�\�՜���z�ߋ�ر����U���P����:��z�y�K�Ѭ�j�� �������+ՠk��]i��v �^o!=b�v�~'����Z�90�����fگMB�-=c�ւn��0�t�N#�����_�(�MTL�k�����1���nEQ���R�Z��{�1S����8��ð�X���0Gm�m�<����<��S�a�c�՞� =�԰�@�6V-j"�6�܂.��3�4���c`���^����������4���s�ކ���B��3x̶,)w�P��уO� ���qŭ�t9���S��w�*\G
^��&�����X@-���gŨ�n)! �6M�p^}�m/b��zC�x�}��}�-��>J �<�^�z��7yd�y�7�2ʣr	���p���ߍ�22�X��E)TJ��\5ͳ2�Ao���f�EO.zI��)'��e$������Ɇ�r>�j�F���
&�8����$�f���	���c�#@�`4����������`0 �ѽ�
Pb|C��|�~ed;�m�m'�\Y��;>��ٵ��[T�ӂ�8�3gzgΜ9sie��\�\y�/���^H���g���5��}�ԍY���s{��k���d�����S��5E0�~��|{�8v�Ių�vݴ���n#o��Z��7��G}�¾ï�􂍈K(�>�c���B���#��J�)�$�M�M��M�Ե��_~F;��ăa�E��˨�#���{��*[%Zvlcڭ���I#_C�ΪEd��N��m�R���_ll_��0F�6�ŧ�gE3��]P��m0�/���4���nDЭ1���K��QL���e��L�&^�/�t)ƦY�=6[Ok�i �&��vo6�b�ݪ�����0��4^�x)�t6s>7��H�j���D�H@
�Ŏ/�lRTxU�o��$);�vH��'�!E��_��FkS���Oi|!���̷�$C<�:�ێ��=�?��P�6���rD��l�"� �%%�nlԓ�v�m��)�?�2�D�3D�/-�.���2O� �2�99���s���5*P���M���<%����@�<�����Y�d�
ot�x�c;�a�nH��ˑ�����+�V�i@��������	��f�V�~����#1p#__N���+�>H�77x�lY���[�IfehR@����Q���r�Aʗ��G唾��:c��x���w>��C��f+gx�G������	5�օ�Ź) ����k�����t��J����>s�'�Y��@��]�v�a�mk	^�!5��,u�#ug~X���j%�&�7,:���<	�Q8�������K~?�U�� ���m7��4��iJ�c��)LN���cNXq+�����GGo#�ӻ|�Wp�xE4�;`��k'eԹ��^IFL��E�^�&�祒�/�Ʋ1�S&��j\���)\��|�� B;ubP�ɟB/W�U7����N�S�W��O"�x�߈�q�Ŧ���SH̝�����[��2�n�c�NtBiI��y��v'�<>F$q�}������?U�eq�ګ�ިRUS�N�t��^3�����D��w���c��j�����4�^[t���zN%���}3�E��.z!Z&���M`������i�Mv#[���^���|tl�q1u��*��)y��֓}�f��0�����.�p�"c:��vq8�i19�N:�x�T��7FP0��뮋q��1T�ıv���v����R:�:�J�`,&u��T&O#�u��,[=p�� 0ͤ3�z�� �&�z�CC��4��Œ(,��L����,��Z8�Ehj�v5��A��yO���AW��(�Z' �:�1ϯ�|]�`���U0��ҕ���DV8�n�/��n���ͦ�+�����?�ޏ�����RuX��=R2�l���sq�u�:T���t�̝�D��2d��0���)�� ՘��Bx��9�{0n�]����>��dP��b�n������L��o*�ZS�a���a�����*��C�h�P �4Hѩ��/:��@/�.�9JZ{�T�_� �m]�gs�\nVWu{WŶm�b��`��a�L^�A&���j��X[۱2��Qi�WV��a��z�lF��������s�����E���e���Z\E;��
t*�,�v�s�srՈ��f�f�I.��V'����C�"[�C�5�l���'�6y#�\� 7[��9��~krqAQ�>���6��'�+6�Χ?-F�e��u=�A��nu���m�Z�;F�_��Bk
-��֩"NWMb~f�0�ہ�Y�jٙ�i����H����6*����)��3wxy���+^6�R�ao��l��>I�6����1�� 6��$>貯�2���8�Pq|I:,�qT"o�p���>�޴y��ڴ�g�U��A(e0x�'
��m?`�ΦU~~M|y��<��VT�P4�x�>��L��PW
y�q*�G��z�xڗǇ�aL��A>?d�4'O�Ɯ'
���:ἽqH7O�{�s���m���m�0,�k��}��'��oϜO�����,��'�z^�4�W�ȳ	�0}��Z O��$
؀���@1`X�&[�O�t�&���G�)�:×���x���7�	��0FE��]�\�?���"�I�[�*Jt��rҫoL�s���o���gK@��[�[�a}����Z{�����⪽L6���Q�=�x9:i�g;�H?c?���N�>����+�s�&�9Z�E�$���������d �����
�몦��)�
�1�T�����ƺq<��a������(*O�hюj22��KWW�W�͊�㕌�(�w|��Jv1u�O�űơ��m�2]=��	��۽z��?��wB!��*UN�;��"��	��J%�\�c��QT�$2:Ƃr;&�p�{ukϞ4ͫj>M��i]��b6z��HW�@��.����Da���g��WҦ	|���������m�(�S" A��:|Y����WM��5��yYa�Uz�U�/�u�Eb�i��>|�4�_5my�e��jǘ"��<=���	ژ�L��}s�=�_��7ݨ��ӹ4%u\��TG�z�l։rq!o^V���`H�Ao�ǖ���YU�}-��x�_(x��4��z2��������QT�(����U�M ���ji��TU�Nn��#�q����������h��o���Px^��&�X$��l�0m���o=��&<�LNR�á����
�ι�1U�γ��؉��d&�˅=�؍���v:�7�l(B6���x�o��yձn����{�x����D��*Q'�����2=$��Ob�=�H.���r���z��I����h�il��f]u�%pJ��0��d��=;^��2^���q�L�����aֺ
�P���P-��S=%s�Ĥ������T;Ƶ����Ї��m�el����jSm�GT:�_����4�дl�C����k�C�m>pLr��9�y����;܉IL�a`����u(���ނ��Y�c7K�ي-r	�qP��r٦�h��h�)�&sM�
�&N���#��rc}"N�*�Oڷ ���f�}��[>OPJǅ^��,�*�?Â��O��3c(���T	���*�gѲLV��
~P }c�N���
h�_�ɵj">�����dSd���Zm&_/��|�a�:�i�X?�F���p\��7����w� ;�c�V]Ѹ���y":7CVu�J"�i�;�.W퀝C���_���L�gs��p��J�V�U��dk8zhsK�V�M��e��y��1_�ǒ�b\��=Œ1m��ǰxi�羇.5���Ǽ���2��ᆛj�r9�D,��8n���P��o�yw�`O�����}�ǧ#�ƭ���5����(��ۨ�qq��x�]���C�E#%����F��8V�dO�j�t����������©�\(��ܯ�lF�A�V���>���og�/ ޻��R���� �g�cD�"��]�E�N��䏡C�'���/��W_�CP' ���?[�.~=b8���Am�'���.�.T�3���X�M�E-�G��=#vr&����>3�Ѳx��������5���!y|�Os��|�g#��{��ղ&��-���4�z�7v� kjr��lG:�0������_�I1�+&X��>�b�P�aSQ'F#Nn���w�ά���;;�c{��0˫����f�#�����������j�ս�m����Gs{�~m��YoJV�b ��.���!a��f�Jva�-1����P��M�ecqq7��v��X8�PNA����8W���bk�Z.m��}{�ڛ
B�0��m0�/� �Q�%#Jf�/a���V�%� �.0�ٛ���]���������P�N���I��K�����e�X���TͲ��T� �O+j}�wT5_�ʥ��u:T~7��d;�?��������}SU����Jz����a��-�<ω��dR��q�H��GF��Uo�Fu��\-�_Ǯv{&�}E�g��]K�~� ��^����Be̩�J#�mJs�2������0�Rթ0�T�]�J�D���TV"ۦj��(�6�2�	\��p���������,I�ͱ����TO8$�u�8�r�9��b���ƒ�(<�WL��*��+�f،4)�-r��T\���WY6>�L�n�:�=�D?��rP�gH�a�=^���l�<=]M�0ԃeܘ�%˗,�����׶^����&*���\F�ޜc��Խ7�G|~Z�|�'6�|��*�?U��t���lXb�ha`C9
�#Ё��6'��
	�r�	DFEa6��,��g5�;��A�����Ӥ��)˄��Ϩ� }��4�}�.�=#��ޏ΢��QT��* �"��T!��h£��ɸz��k�J����u��8�k�W�,�����r×���O.�r�;�A���������(�&p�"����e���ox�����ӳU��n�9�|	�������կ@:�SKi*�c�	p+rX�⃔������!�5�ӭ 싍F�<ݪ4[�<�_c����C�Ll��5�t�앴^g��K���t�j�_����fǠ�-�Ym�}KÎ�h^/���K��R�"�����������=.i�J�U��a���vX_�����DSh��\����T,f�X�	 �	+Ԗ�[ ũVk�'��:�+�(�7R!��A!�;�;���TZYX@�W�gƆá�~�^�$��'��B����֍�r4��p�>lA�|�+��B�Zݮ�*oG�1��lA �N�k������6���x�E���&z�ϧ9��C#?Q���$���?��)(�6c�Mo����4@�8;�����/Q17z�6`���Sxw<��J��t�7��.a�iE$����
)$���&i�`�U��
?Kl;?�j�׺U�a�E��9�yf2lt�~2���%h�5�Ft���a抾��,��#TA�7�Q|�`-e~:���#F�l�f���~���F�M��Z��c�R�3���%U	�q�Gv�;~��q����`����o��EقK���lM/ڶΝ;9��T6�tTf<^3�O�^`���Γ���Sx֛���dC˕�n��ҹ��|=<
��/���%�2���/½�꽂6��"���?�sq���'�q9�/χ0�sݦnE%�����B�R:23�U�^c�+��.����f�A}�D��d)%�[�L�T��1�D�o��KKK����P�}��_�T�ú�Z�<�hYp^��7���|��3B&[�EMݔ*ɳ�'UZ<uL�Kz!���;����:��)(�(��D�:���i�4^�һ��֞���L*�)�lӥx)�t��n"o<��"����w�;�9�J�:�m�s���d .�����:�#|��R��������iHh�`���В�r$�H�E��H���IDѝC�+SƆ���<6YJ�(7c:��� Ȭd8"�dE�u^t�)]�����S��xQ֧G�}v��e�ɏևe]""!�@5��s �^�4*���D�eGVّu���IBa��9NXy{o������ә�)�FݲS_,;���0Fϗ�y��?�F�Q�������ug�v�n��G��s/p��C���!)9 �8^�N1���"�k�	��=�������s�	#���5p����.�28 �� �(��y}�GW� _ Y! �@��z(��4�Z�����|�tB����ř�RB�������]c���!��F��L��H}܇�ztt��`���-	���8�#��Oo�2�i�lSB8(��m��~y�]X�di!TDA�)��y}���Zihn�D#4���!z��1�X�Ν7������DQ��Fgn6��O�����n�a�N��c:��u���\�a�O��t>�c)���VՈ!�`=C,��dP%�:^bG��KY�q*�C���-pH��+9�f��-�e�!��I�:�¯�/@��` ?�+ɑ1~�f�r�Ɲ���YۖEUSU^�ju���pJ�"�{"�TW���GU������'�g0B&��ܑ�k*������{p�'$Z+SFei��oc���Ӧ�&m��V���0�5JZ��d�(G��zZ��e�����%�I�ݮk�ioM<-�Q�N���i�B|�V���W1JE�-����U&M�T1D�5z��_~��i�j��VK�U��~�A=ڻW,`���������B��u������#I�^�q�J�F5uZ/�P���[0�Ą�0]*����?7�P��%���gɥp`����$�ͅ�D�ŁpT��&Qҵ#��p���쟧��ض1_[l%�s.����bmްm��ʚi��ҝiڄ�K	[�q̎��y���бg�a��a�7_~�}���p���6����ƻ^q"��FN��m�K�D� �Bʟ=�
��������L���G�9�jQ���X��n�c��l����~���>�o]��c Y*�+0�3=�]��zm�m�8!���;�$�5ΰ��L֮;~SKn E��%���B:H0�F�&��<��1�����v �b�*��h����:X�[Eק�0T�s�}2�$�@}f9�h��p���{_K�]��1�ҿ���ʎ�����,!VQD����v�!�:�4|�!��8���w�ȥ�;|U������X����rЛ�3{�_�z�6�UK=hjh�6�q;^�!�F������0=s�����M�F��K��q����`i1uF���N5��� ������32��p!D��a����T�g�w�\�^b�|���r8�=7����'���{��(-�/�X�a:�p�>������Q#� ���͋�i��&��>�q��JgΜ��378}�����\��nnnR�0ME1Mâ�=}������0�9s�ǝ��O[t�h�;����Bs52N�+��V��;V����f�襍PR�a#�5"���`�-ۍt���`3����C�	oU9��ll����H�R���y5MM����D�����p� Xr��f˟p���)����"��q����2�"\.�q��V*|ܙr���)
���/��[�Y����uZ�ӥ�{�v���"J�M�f�F~7����W��r�t�0��`�4�T�,oYχyʔf�E|�7�x�a�K�a��y�tm�(:Y�Yo��a��l���ϱ#T@�Sh�V,O%ꗖ���g�4�L{V��a�W���{lYR�p�G�Zc��V��D�Q`:/M�zR����&����}��~���666�����fN��FnCP��pc��;��6���8�%ť�NZ`V4��+U�㒔��VR� zzw�
���ҏ�1m��>��f��qZ��H�����bH�H�--��tY���H"�/$H>�@˽4��@%�GM����	��l�gdc8;�����v׏�	�Ӈz�wG���2�D���=�M~��Vk�vk��"�g�k�}s&/��u��v���KY��ů���v�3�G
z`�+��L��ʛ����D�$Q-,l�_=��W	�ڳ/����\X%���E��V����*y�[>�.�&�`��2�כ+;����e�V�m}���]��c�+͚��arts����������T+���*V��r��r��LMZ'�#'n�V �h����ի��d�9юpcv�#�?UZ�X�������Z��k9=�[�gj�V5����P2�^L�����L��C��,���h��gG��)��^��((�W*yo����T���ُ�Jm���91jH�NXP�4�}�[���մ�g����qϝ.��L@�..3_ sG��q�Ip�c.�}��[c%!g0�m}}=�I�b`�֘�^=̶Q��/����"|�EW̳� � z����,G)��v�#�����炠2?_9G�Jҹd�ޤ�~��j��p�/�|��X��oȲ�n�6�b��\e~��$�*
=�n'{�&υa�ժm��_*��.�����i��6�S=�٬;q�0.L�r�Ɩ_�����q���� ��h����`_nv���;t��!te|>�yF����v�L�
ތ�x����A`7�3\��Kާ�7	�ć�#r����5�m�Z���^�5E��P���Yґ��^p��Va���z�dg�WX�Ϸ k	�ڧ�^t�V�t�c4�&Q-���7��3}�8�it�1��]w��0L��MQt�TT�T�0�
=?Eb��yñ#ˋ�;���7�E5LE��<�o�9��=�/��+W�
�9�g��j��#8��y���<�������+�2��G��7d�V��X*�^�e��d�9Uc��P��dǑï{E�h��*��gD~YF0��Ҳ&���+=�86pX���	�����L�.�yh4&a���8�)��@�� ,19W�O�dY�?Gݢ�$LD��w0W !�z��\���L�5xL�֢S�29/��V.Y=z�J��Abk�Ɍp/�dz�CY�@�Ͻ3�{��;���-ް�TW��M� [W
����Tk���П��FX�G�*��^����8��ߪxR�8p�9yTE�qFĈ$jx�9K!b��	���}U�"j�ez���^����W�!�ə�^I�?q�F�IG�5������
�����B�����a�$��Éi������. Bp��g�]�/�?��G���zA���i�8~��Rm�
aph�iu��ib�$v�с;Kuj��i���>���׉�:/��!��!1BW�c��G�S��#��>��_D�9����\����ez�ug"�>�#���mc���!��`�B(瘚������D��n8�	�mbѽ�ߔ�((CE@�xz���!M�����Cpf9aG����fV&�M��I�A×"�`8�F�l&�Wo�_����: #dc'�n�8�ij��@qg�jtv��ü&q�����������%�ϿՑ��Y�����������w���o���`8w��1
�	�0 )�����:�� 5.�Ⱥ�s2?�9�� ��](��:H���S9�����������8�B7�ߜ>��5�l �~4g�&a���8�o�
�,rn!4A�d���k�<5yz�O	*fm�`�n�O��w���bY���}A������a��j�ZYn� ��u`�K�K)�E۱qE�����M����w7�D4L߰fV.[球��7|�W ��L��9;��3q��a}�i��G/�H���T$�դ*!�3��8�N�s�;���KCG^�(/�Z��i�c�*8�
�L*���r��}�R|�8W�PU�|D�߈��������~l�.�2��^"��޵:?���F9R�LN��/��xP��_��5L"�}�		���g�����7ˡ�<_2�ZI)D�g76�JlƝPs$g��@�ǁ��m��l��`�]o��SvD�p�%j4@��(��5������^.���x%�S^~F<�~�����;o��v�lEܶ-IZ�|�Ji���K�v��v�P�/����U�pJ���k�:��W��U�Q:�6��7��JJh!���I�
%'��t���w���z�y1��#E(`��}�`��� ����-�ܖ䶒�E���.����ћZ���i��G�I.Ady����U���B�<
3Nj~�JpA	�.�뮭��o8	Z�A�6��]�5�ȃ��yr:W������sm��7�B{���9�@��I{9n/����7���Sσ��=:�tg��.����,�r��)��o9�׫����=3'���c����>�a�#U��E�����'��mk�LnT�Slc+X��)i&�W&�@ĝ�����Th#)��t�OW�@���Q��iȵ�][C�c�`�RᖯG�_܆s\*0v�Gb���@ث/��<��oF&x�!��iU9� �IE=}ʰ��p�R���%��&iH[�����6�ϴ�׉��:�Ѷ��29%���t{?ikTt�c�}u�>t:���k����?��d\0�.>ul��c/�k���T<Tͽ�k�{@���I�&[GX����=p��I߶�Z�b�4�����y�
�����$��}t�!|[IM�E�_a�� �իd2s���dЋć�;O�:�k�^�}6w�e�X?�յ٢�m�P��4��7��/�>u	����Ϩ�� ���ĳ,��#K��?�Vy���?�E��C{y6C��3�˵ۗ�&�r������県>�O#/��S�U��n�mbG�Nq�u����
�%M��ۂQ^:rӑ��y��\��S�Iǎ��������� }_��vͥ_]4��@��Jd����>�ϳ#�x�u���m��{?�F��ݎ�p�:ϵ]�o&i4��*���eb��Q�*c@URW���?����l��e�h{D$����pS�z��"�p�|~L$�,th�N/�|�=~h�zd2؈�1���'&�*�w=�z�΃_Tw�>K�-�
�9eI9<�sى;�}fT�ɴ�Ҝ����J��z>�V�m�����X C!���߯��;��'7�5B,��w�t���~�}}���s�k�~�
o������𧏔��
�S�g���^��匾yG��[��3���L�]]����tS_��շ�x|�n�0oMg=݅�G��8&,��I*)���Sc��}_xp4����Jұ�+��pE�?`]��0�-����Y��v܎M�v���iX��PSc N�ȁ�L�EX��D�T͵ss�R)���*���i��� rL��������0Y��x�J��y�j��n �&��������f��c{U���~��C�z�����)��y�R��YL��X�W<q��!� ��ѥK�Q�G�.h�$&yD���1'���n�C��=K�*�NL�-li8�Wb�*�F����a��F��X细���?j�=�(c�ɼJ,�q�!�P��˹�㺶�i�9�=�;�� c��������u0�dP,��#�ba,�N���f��������p��T4��>Mm����d��b~�����6�P�9��y�����3���R=qcYҩ�7��16K�$�M�iz*&������:�؉Ix�֊�k��.�`,;/#��{(5���E�q+p ��JK�-��f4�!��X��"����|I�W��e-C�P��>����\�H[�nh�����b ���q��L��"���%�LY[�J����ن��¶����5�A�b�ʰ�l4�"�f�N"?���5#�k5�OP�q<�������`��Yx�W�|ޙ�n���
q�kصt�kN���Oɭ9�[O�~���g�*�Un��sve�D����t���ջ�%J���h{��������d@H�<���ݗ����4�6y��eP����Q���oe���B���/�JT�r�T˞�!\Fo��k�u�� �P o�\G��8�Dj���t�,�{��"F_O�'N�w��e��_/���0�(%�EC^�6��4�x��׳�|����Ɏ��9X�bJW����-�=�3O8ۭ �ǵ�2l8BE�[8�'Q�C ߥ$J&�$1�"��0	#'��J |�,k�.�ذxQw�gY�؅�#R�_��~d|��B�Y�?�-��.�G,k����у���5����ŀ�#n�c8�һ�Dt��	���Ν�cPwhy�T����uա�o�P�Dr���i��W�].��o>>���j/�]F��|̩zDF9]��B���5ކ��>����}���&-M���͛�&��&#�h?RoY���3��m9ܹ-��^k�$ݠ�yhݢ?���C| v#�n�IM$� CZ]ih�w�_gV�[�I�i~~�r��hAbK����6�LE��Lz˺�On�V�"�Ժ��q�>�3�v�i�� ��%D �v���J ����D�y�S�U�M7g��˛EX��ƝV��M�Q��Q�LÎ�t932�	�I&����Q��rK��H��[<�>�2t�)ƙ�a|�t��"[bZ�V���3��!j^O���K�?���F���dZ[�Y�Tǖ�J0g�����3b��g��9�+����.S.���Ս�j��JV�"�S/�D>�������Yi<��>OEoR��8d	�A�P��!r&��0,�}��r��	��Q츳W����R�,�p|��S�z\UUW����>�S.���UU�WAv
z�4;e����d��v��ֈ��*N�gV�sIj\w6�n�4�G�)Ǔ��[�(���[(�3�q��q��P|�nG��]��K�@~�r�����Y֚M����p%
G�΅����ں��b��z�r=߳�50�q�:$E�:f �Ej���[U߃��S�������]ժ�u�Iٶsi6�S�(��7M��1ϫ�Ҽ���6A_U��`�J|�\X.UЉdʳ�I�Rf�� �%sG6n��B��L�f3_x�Qݚ���>�I�Z�z;�充B�PXXX~�Z�֙Wu�R�]g��<_BC�@iﳐ,(�� ����W?q�`a��{V���x��y$��"8/�΂ o�5R8�B��}�
�<�|IЮ�g��`�<`qJ�v:@Xp�z�^1�`�G��� {z�J�M��+���Xen��8P�^�1A:��Oy*�^�w]o�C�ob~n����0]��Y��u`���,Ro�����j32<�ZFU5uCQ6T�����m2"�cDӤc�x0-�nz4�A�Ռ��=?�9$%�#��<[
���Bπ�4����xK�&Y:�m$�-]�3���$�í��fLP�UE`�2�4�F��4iƿ�\�B�G�Z!	M���?���H���W!v��8�o� ��m0���݃�w,��.��0Un	�B!Ff�uId���
��Ad"�^KA�V.�W~< !��|�P<7�v���
I���G����A���J�h>vL�Hi!i�lKHJ��q/��3��1���!W���7�x�E���"ֱ�&{�[c�ah�!WU����:���1N�`��x q|t^�VM�5���x�{v��d�4� �p�i2V-~�4{��f��ٺ�S��Sհ�Q�Po*�)Q�N�U�S�P�`;��%�E?�u�_\\}8Cl`�S���n��Z�e]�Q��*?k��"�����o�D4�7���֮�ޥ�2�[1�>s�C�X�k��,�&��(�6��q�N��!���Ȁ߲W�������ylWJ��i��ӽ^������0�����P_����~�%�ԗ&a��74V��{k��vAW�y�$�~Aӣ�,\��i��4 ��kǒ�|�KL(H� ���'%Å����<'?7Ъ!�c��j�����1x����	��Т[���ܐ �PC�`� �E�P25M��8Q'.�CW�?��q&�'�͸�^�t�)��p��8�/]?!W�n��i�P���G�>௨�����3ϔ��ѡ���V���N]��9����s��ׇ�^��`cc�m�T�xM^�xSG��e1����4��>/�����י�%)�	�k�W��v�&i�5M���"=�.zI���6-���4	Cm�T>ԽE�D��m�i�ˑ�޶ˊ�"�^A!�_,-o���ޓ�>���|b�}�W�^�'���>���R�T���ë��x�䔳8�N�r�eKݐ�� P���J�U��ȕ���Q��g?7��il�KI�3V���>��P3��L�ô62�|�-D1�^$��Wp`�t�=�PH���%���隳�Zm%$+�C�-�F��C����d
PV��s�Փ�|IB?C(�~7܈npF�'(�q$��j�l��{�C����"�k�z��MNNz^��}���	��U'�?���n0a��L?ǚk	?�� {M�ƺ�x�������<4n?���Y�Y8�U��Q��{�9��Y4�N�[��j�d0��!7[.�I�X�2���I%�ڍ�D���J��S�S~���7�٪4����iu��e������!���c�c�2��E���v�v����ل]�L��:)|��h�z�롵L��"�V��)�׷7�y�S�~�c���uK�x�]��R�Z�R~�Ɵ�]��:�2�d%�a�Q��7&�{���q��m��h�?Hj,%]zg@R���A[��f�v!:��uC˨��6�1k>ۓ�y�	�rLy�P�5�b2ŰlY���e��|X�,�O�`�,D���D�+3��]`��f+?_Vkm�1&X�^I��3��� �����}�Tb� '�3��#�ؘMG�?��jm��_�����eh��P�cp`�f����ki�d+w���8���h��ǯ�CG~|�"�Q�T=�3�Cw���q?������DaA�6!&Hhd��pP����f�N�r E�x:�%)�;d��?x�!W���RI����Fç���B�&���u��Sc��N()T;T �ӕ	�1�u���=/�j7Pr̅s��KOu&'�D@Ղ0�8u��Q�5Q*�t]�u��:���Ƚ�uN�����g�6oI�X�?��Y�d܇5�:��� PÑ�~���� ��sZ�A���&Z�� CD��O�F�h"��&��5m`�#w��&�� -�SB�D�^\�5��5�w:��h����ܱ����;���[���H�N3��VX�TQg~�������x3��`��,�L��^_��{�!-�lkò�Y/�Pu�Y!f]�
�����gd]�^����.ٰD&�$L�b�A��٫�@��>�{]���߯��K�$��|�I*���"e�}����ϟ/`\8��gϞ�l���:��C��o�<���'b�pH݌�Ô���E
��h=�7A7���i��.�����@V�~�W�`�0���z�#�	�^@	X��{	|���\N5���\��U�ϢH�G�
�j���_���=��$u�T��0%Ua]��~)K�a4�԰��i3�*xJP�^q=��?3̕��χ>*��A`
	����D\�A�Oax�}&�ضgnp%,� p],}����N���9��<���M�b�ˮ}�Ӷj��s!�u����}�`�4- �l&M߽�Gנ��cx]�V�jDQD���~1g���FtP�𜩤���M�-k_}
�B#Ai9��h �ъ�0,W�~�_����-�JXIIB��l�m��S͛K�=�c.b �ѣ�}聶Pt}ў+	�<�ɚ'�6o�O�� �>����q�����~����a���QN���<�c�h���p���MS�+�>�,�>>L���V�?�d.�}�^�}Jc��gU�>�YM�]su	�SNC�F��ŀh�'�@���{��v_��~>�E��%at���8�`}6���ԛ�s�[��=�t�9�W�ӱQ [:o��&�^t݈�Bo�_)5ȳ �'��R}��2��AG���d�	�)�H�"h+ ��y��������W����[�)gY��&�,u��?\�1r}��;	u���ǳ�V�ժ�wI��z�5��Y�j�/��j��m-!l��0^��B���Fr�OϢ�jw݈qG�N�!Ѣ��4	7%M��%j�1�("���R�i�8!��J����L�8H4ʭh��a�W�v�n������5K/��暽�gK/	{�e�WVV�X���++o|S�ݻ[����+B,v�}��:@}�0V6*_��{ؗ:�����N:݋�t�em6������j���5��o��@��BRUcG�	䘧�����m�/.bI��xq�r�ˇ㲛.�%=�w1u�/����{�F����{��eU5`'��/`�A�:P&�#uw����Ri7��pO2�x`�� ?�Q����¼q�Ԉ�1	��P�/2F���R��QK�~k���щ�^,arZ�ѻ`����)�E$��b�.�N�L���u���.[QY��uuWK��m�}�,�,�ǟ01��5���[�י��w���M��D͚�%)d� �n{^����rdr�u�KIF0��f6U�C��3dc`yF�^��u��5��'�����+堟���7ㄍ�t�}6�Hς�pBKS^���7G�H��f�l��e
82�R4Rgu����U�ӒLA�R0�i*�_�ކ����dq[�.��[dC�I�v}�[6�Hcd/}��@N
�9p�p��hUbK<7�w=��#�?�W�������M6�fb�u�U��y�����(���F8`�i���l�����zϣ��6�>O�X�3>��ާA��)Y���}l���8r]�Pc[&��-�yۮ+Nn�}XU
��TaAU����Z�fg��)�]���n;�;I���6�/Ky;bU46cQ���+��s���Eǁ��R�f��^N�1�����s�#�(Ks�g����_��?�P�F^>�'���ˡ!jA=!�L� b�/�is��wT�x��,˒	��yB�m�h�5����C���|�K�D�ڣ��r�>I�+��8�o���#dΖ4"�s��m�v�R�k:�4j�e����revM����9��:h�G����1��i3�4c"Y1�l���g���J%��&�'�}��	|�СCQ�
��U�*�;	��b��TMS�VT�$Lv�ŏ@w��mB��!����R]�h�QE����zP�e�Ӕ5��M�yE�w����di�f_�����Z� �e��!�`k�`Ũ���+�F��}�yʂL�Hu�w�&=A�*
e���e}�+\+���'S�O�a
��s�W��YuE(r��p�8���Z�\�z�����3��_b��e����d1��jע��8�E-Ȋ�,Њ�����d~}��+f���k9��T���{�F�d� <Y��uZ��	�Ͼv�_�Y�dvڎ{JO]�h�h��+rAi�W4�p�o
*Q������0����k��{�����\<���qa�d<�ٞ�Y���D��-B���7`CT�[�	�Q۬z�jYc�J����u�x�g��33ۋDb�#Ȭ��[v��oY4�s�!I����,�������C�Ԃ��0��hT��x�	=%̥&_���%0�� IH�Li�a]�z&a�h�֘{�O����؟�G|�+u$�8b�j\���ƕ�b?���� �
��;pwi���.ۿI7�N��'N\s͉;���Я�ɸA)�I+Ͳ��v���W	e�.����b��.��k@T�I�S���q��{�l�]��j�b9���w����h=�ރ�G_E�_>�-D�����B��>Qyg3]��Ӷف5Ӿr�	�k�:!r���15Ŝ��'�׶���zK]���%��>>���������z.��zaUG��u3h��V��v�� �l�(�*H��v�޻:|�fx���t���������b�?L1�w9lp��_��5�W�o��7���4�u�8G|�֨��HN��:�G�F3m*�Z�E���t6s�D��}����O���G!�j��cC���
��i!�Y}7J�`�5��k��©v��P@;���`d�1��!j/zb�?ض�(o[B$��d�1�n'B�V>��aȨ����DxϞͦm	��(��3G�F�h�{\z%9�'r��zb��<�Q\0 �]Zp��[n�YS|O��-�rur�2�˰�-7�����{P&�s³��r�}�,���[*���ry��\mz2p-^�{@� �s y���ב��5C�d��G4C����d^԰!�Ƌ_�����Gt,qa[�4��կ~�|� �f(��W`�U��r2�?�ms�~��p�p�m�I�h^U�H�ATma�+���<j�����?��ʥ_�����_���B���"��͖ڭN+�E�Aw�^s$n����b���q)�5�J����A;���:R(�PC��+��z����`AwjN�t.�S�c�X5'��<�Y��J5��'u~@X��) dMU ��Y�oj2P�ۮh�osW����у�až*+�Ǟ"˯�PԠnB,�������$�a����iU�����!E��i \�)/���e�;	�g�P�j�@� 0����E�dI�-�uU�r}{%}6�Q�U�JG�e���0��.���7�NP�Aʎ�t�^�\��O`�.���&��z���]���$�섖��/��~��6ޤT������@[��ʯ��e"�n�j��x,��d���)Z�/�ْf����O��-V�������xe��&���w�0�����L��^����3��.cBtힽ���r6.�|6O/S����0�,��XW��)7d9�Uxo�8p�6Va4���)��B(�}�1�Y�ǝe�J|4���@`A��J�Q�~d�#�`F!��'��)�XS����ի�w~�?8Ɇ�4�̀_����`��ŭ��o�=�]�>��0o�;����� �=�Ѣ��(��ecI5Ra�E�\�I�%��hp�
�L�2_���v���'����
�w5>9;M�Կ��8&��]���+ruϽ����Qqϥ����5���eϞ=��H�9�hf��n���;�Lw���^S���HG���R�Z�퓍]W����`�����]ʽ_m��UK^/oZ_h*8���7�|��TL�6���8s����y�L���������Yʺ���aq�r,W4.�BJ�|CM�Ek$U���7�-;v��1�Y�L4���Yع�!�]����픊��D �2��&CYˁ��!�G~N|;�#��F��&	3�J/����>�ն�)�v$�ߧ�N�v��4B�rk;v�̶*�j?:�f���	��F�d��OӱD��@^�˾b:	�gX�4,��@!T�8�\i���y	�m�lH��Q� �j�xH���Y�CȐ��@S#׮�R5���yB��������̂����ﰶa�1�D[@u�>��B�\���G�V�˦R��6�'��r�b�tn��3��:xjUt������!C/�Ӎ����VV���6��:Ns�uΉ48�P������.db�e�*,)�[<%o��(�]�LɌ{�����x�������X���-o���S6E�}�i�-�8s�[*x���As�)؉���Ti$��P�����_���f�
ʧ�z�*Z�����%�P�9h�r��R���v`���2�R?>3j�&.U�udɸ����mϳ�B�fC��Y�o�ѝw��ywn�����)�Jv-�X�8gz��`��Eb��y����!�\�=G��r�V��r�0�P]�ߓ~��]h�/՜�	�B�(�9��,�QB�pn+��*	c�@��)oցD�Ԩ��5D��&i�f�T�-[��}i� ���9��zn-�;(�|B��0O@�˜���f|�ә��>cYV��Z�Vd��"(�b!&����� ��o�7��F�f�6���!(������P�)p	��l���f�E�`E��hEHFhk`�.Gw�wx��)�mo�k��,��R"��QW����}͒�˜߉L��ӥ5�[lnR�ɐ��9�x��T�ꋕJ�]1ˏ�l׍��<Nw�T*qϥ�nd����&���s=�"��z�e�D ������+���s.F E��ř�d��˔��io�L<���ҒK����^���8��8�1g�\.�>��9������~q�ȵ��`��	��+�82+�8�N�c�'��	�,zL?g?3��,*[���������� ���~���C�Q �[�b��`.�i�Oeg���b(�,��LdE�;-A)�B������G5�1�4fxcDP���0fy�,��@�cE��`kTQ0攎ܢ��:�P�v8GBd=�(�'N�ș3���8�Ähe47���}�sD�j�d)1�6�������{�׿��
�a��61-5���D���?25���W�
w`\)U���1����^%@S W�7�	��9V@W@���7T/�R�� v������f�P�
�9uxc��$�7�urrw�-�o�{ij�S���W���ٻ���;1��| ���7�CЋ.q�TX�2��ͬaRKd&ꪵ��W�HjG�y>�٥S����
���{�,Ue���e�H���T�Ը��/1m��^��hKtL��Ɉ�"[VylJm
�-�G!>t��W��iia�������afzo$b�7q������5��v���`=�u!���d�fs~�夾��{�ob�����1����T"����p���谟 2\����k�V��UgJd��oO&�� ��G�{�3A�Ի��F�7�G��-_�����.j��;��������q�Q��g��KR�o��=�n��e���H��1�N̩nw�@�H�ޏA��z�r��+�{`��f�b���U�g���g�m���X�BbV *�s&K�z`��svFwpPw�g%�8������V���ql�3L�ޅ�|]��/Ǟ�rW�cD�P��Y@b�d�p��ɢ/��p�O6�u���x1}�R��\ ʉx�_��,����)'����z��ۇ�VI�� �s5H��Z�;y�Yth���V �R��9�����G%��W��K�cRMSڜ�� �����֗���$h�rjN�}g�􍠵�0KŤ6�k �|	5�-W�0�c()���h�.��Y�Imʟ� jS�Rxy����?�U/m�J�t���������?�V�s��tb��wF&������[��e+,�G%*�E�TYͻ7�N�\G�]zd���5wp�X�,˽L$��՟&T���Ё����.k2їn�O��G'�9y!l;_��Ҳ8�#7�BWN�6��o��R�1��ƛ���mK�RZ~!H��Ͳ���n-��dn*�1��k4���X=J����Z���L���K,}Zt���˘c!�����'��D�4�:M��%�9�Qw�t�g?��Z�����cB�5!ָ�8�^/��3<�9�i���޾���-]��5]Q����-q���e�x܁z�N��ǟ]�x��'�_�ѧ0�Ƞ׭G�R�g��֤��[&'[S�B�pnk�����秧�܇'	L�ߎ�_���3�)�A��QIծ|}M!���Kq`����5��{Pm�&�CնW�����!����������]��z������s���"��_���#�{�񇎶��z��>�8Ə��~2�63`�w���Ȑ�Â��@����[U/Q� �6� |0iQ��\�l� Bbᗈ�����)��m�e��D����f��T���L�2��bD�#I�Qk��U�S�D8����L(Ί�u0p<�h����s1A�+6�[s>����-��f���a�g�B�BA�Wm�6=�
�H�`~�6�`���;����q��>���粠�R��Ƕ|�ff�N��VK���QsN�T��.D�g���Bз%[�	��Y���jdFUfe\SC���i/��&�F)kpv�ZځKf�H��k���߈Gjc �π>D�� �C2/��GA2���>[��_�ZާC��W��h4����^��۱��b�/�Gj��&�:O~އ��v��T���.=�3��w�N"����?�ZV�c�0{b�N��Lt>NN����qu�>���cxr�V�g�V��_ͳk񫰧��P����/��-fB
o]��n@4�LKWIϑO��I�g$��>ϞD%�fh�J��:O�U����Жj�%M����}�$v�<������H��"�ϛJ��DL���biM��G�VU��tϖu���)�c�zZ��-V�]����zܴݨ�jh�Ɗ�7%��`�۬�RԨDj)mN:�)�2�'ǟ> 2M�^�p��n��
0�5�z��>������-������2+������ֺ-A�6����X�ܜ��s�r�����6�`��h����J���R�wa����
y��/9>�c�����I�>�>�Y������!���{P���ƴ9��������2<4�~�r.WO#����w�ur�� �NUG������_�]�5�8�������2P콵��!@�B�wa%�]5+���9��H��rr�Q�Ȩ��c�exH��&:��r�ƃ)���Gqm��(Ծ %��nWR)E"��Q/ EƩze6@R� �-��L>��\�����r�U��Js{2M��63�N�Yv��.7��� 5aF���p�<�ة�C��Q�]�Q^�����[�ð,�����u���x��e���H�>~K+�������QzY����?��C��h�<h�d����/J�i�-���6��7��ҟ;ud�}�3��u~Ԑs��Z�T�Y?����[d��0��^���D�{���p5�
C�{�F,�����p׌�/\Q\hw��&�4k�X<�Umo��m��^�k䲺��]9�a�,Ї����[(Kb�
%�ڠ{����_�Г���w�nc�)Y�X{��f�@��	W��컡El����b)�Ɗ�d��QL��Ս�R�G\oC�&$B�3������3��~��,��Y�#~_�$�s+͗��p����;�����6[�� ���D���6��w��D����m�?�Y�|I�U�iG (+�~�:ΦB���{�,5.��隬���鉉ª�%CX&[^G�gѮ�G OFϠ�-x�e7r�e��� ���}a�Lǒq����_�[l�~,!.M��P[܈�Go��Q����NG}��
�_7������u�+�9	�qm�#ͦ�tq?5"^/�٩S�RdKt��x���b��i�.�K��,Lo��2w���=kpIN�� j`�UŜ�;����>��h�I����J����,��B/+���h�j�Lb�iݲ���� �o�w���N�73{�V��&���ø���Q(�T�Cr���� �}b����Jm�Nb� �����_��fg�WeQ�N\�5vFj�Ï5#O�ʅ��d�fã>#�I1�j�uj��^�Uk�NQ�q�)�MA>���$�$�=��1݃hL4�6DA��Wa�[�K�CU�N
јh@,�gGs�u���f]H�����u3q�r�a��LuJƳ��ӧGO\ϧҎ4��˂Vy�'X���BH��
¶e���/�X0��R�_�X~ʯ��݉�d;v|]S#�|n�XX8������I���ˏ���#�����랂�;λ��=E3���yqC�@����AsL�㼦:��Y��{Z������9CJ�˺	,<#T�^���~/�a�[t.N�H �� d���|u2�M-W~��	`��UL3]"��8H7�+�H�ũ�
	z=��g���gz��V]�1�}���6�C�kݏ0�B.N����0��urlB�@b:J2�xS���A��(m)�}{�Q*���-�
JG����Fi1֢=A��Es��T�6��E�:��K܃#�(AHI��N���l��6J���@F2�ip�N��z�WE�T����xǌW��e<��x|�<��b��$+��������L�'L�g`^�lQ��BY{�
:aA�R�5Oͩ��)���˲rmV�F:/��硅��ʥ{{I����g�l�^FƧ�=�x�6>�5,���c7C�$��3�j�������s%&�z�B8M ?��|��
�%*z�`9�!Ќ�F���qgP��L�O����L��G-w9�Kt6)��l�v�V��E~hm�=v�C���0��X�NyV��J�����,��O��������ǯ=}rw[Rm+�Rh٪�2����{.��g�S��9�b���}Q�_�!ߕ����K��������6��P�2�lL��Ҭs�L� JJ�F�:� b�%3�C� 41 c6��ƜMF���G}F<�/���4'��h�)e\*p��>������Kz�.��͞&��+Li���*�aU=�+48���*S��~�m+����2�l}���p� ����ux��)XA.�F�Ur���|(-�I�I,_E5Q�<�����#�R��Rj�M��xPl�=��,�&�ժ�f�lЁ}�`�>Yմ����l$D���w1sp��72����X��:�.����#�����g:b��Te�.��u��K�Yx�B-�vB:���n�HQ)&�apKKxfZ��������Y]]%��������J�I��}�,?�g,��(&��]o�[766|N�u5�op0�����5��E�2�ˋ�L�z�ժ�j���1�T���f=�v\���
���.�kf��3 (u�,-� �)���D�	�H�FoJ����D���l�x��(��^�`H�+�k��%M��G!o��[?�O��~����5{�o|w݋^��B�BA�@_D#�{��_�gT :�'Dd�	�,^�{�/�x�l��d؅O�W��?�?�f��X�ɸo���//	�jܛ�7��t�����֩�z`��_�d���~�*˾���ު�o��W_��u�X\�h;z5zz?�M���bk��
rG°�, O�ͤ�ҥ��Ʋ�y�D%�RF���;���H����(�5�Ha��2؅�qf3���5�OR=۷Ύc $�[&'H�n�~`kJ|I�ǒ.���(�T�2�І!��K[��=�'9u m�X��n(٠|�S���k7/�
8��r��e9�h�~M����eb[�|}+אNL�S$ +^�/gJ�'3W��W=��-���RM���R���~C�t`�7�w�J��5ѣ��%S�J�����'�=�ì;ZԎ��U +��S��.Uu�OG ��c��H|�m\�H�T��yq�i�Aa��_)`��]ղ"�%�<�AW	�F�%�x��y�E�擖S��%��/=��Ɔ�9�	վsP��d�J��	 s���:w�]�����nC-��&X�e�r~|nC�&�+������3���9w��Ͱ�Ѯ�IP��<����[Z�� �֩�^i�	-]J�1�|rrR�~I'�����jU��.M�J��3s6DUbԪ��u*�)[B��''''ig�K�j�d�Q��9�J3���uc���Ӿ�P�3�V5J2��S�+���=7��?�l�e�:K�U�*Y�4�w*�U��a��t�8��&Ւ��8�CgEao��Q���3�y?e�N�a�'ښ�(l�.�[<��|>��K�/
����هz�A��?|��Á��W�z���ۗy�eb��qq���9؆��_��M�%D%�v3��п�]l����t������ʦ
��圿�0��e�aT�Qs���xЃX�' �[�q�� ��U	L!R�k��B��>{pG}v�/�e͖�h'B9m�,�Z���<:���9�:Ș%aB#+RD)�S�F*�4�qg���"*��ޘY���J�!X��h�����h�T0�
5he�������^[p�xT_$sn�����~���+�=�k&dJv[H��b����W�q\r{�n*�&%�V������N�/�s���i�85��,+"75U,P�!۹�%�n�=/�{8��:�� b�D�%�Nz���t
ƅ71B���v�h��T�cY�q�	����q�0{����-gɃ�#��W7=;�T�bH)��G7��z����{����0��0�i+��S��؜�H��c^���ʚB� %�+����	2 闳��S�p�;Z������L�2�S��|T�P�F�,@��G!���i�%���7��p�^�A����hx�\�P���W�n�e�O�
nY�ͦ����U`9O�&;�o�}C�(j�����^SMлW��D}��KOR������ :�,��鐛��j$�3$׉�%BW�P�MAi�#��;��e%�9�TI�����`���"�~�K��q�s�����3¶��m}@���i߮��|��)�m��}���P��+kB�Or�	W�MB�S�h��/>��<"��\���1��'�O[��z]�������j:��(�fgR�K�pbb�^��>����ץ���Dµ,IgfKE�����s��#�:j�A�_ʡ �����b�U7����x�Mz������>�J�X��&2�w!W:����K��� ��X̱F�#0E39�^�G�(��K�Rː�'���2�Ƌ��X�O��F
�=! � }�3 y����XA�&�C��E���s�t�7m;#��XsH�RJ��N�n۶l��.���G��K���Z�o�``�*��:�?�����HY���Z�C��N�~�v���-��f�֞��ĊPBB07}r+B��*���	أ>���pWC&2�l/(�`G-���������_jC����i�;ea�ӟ>������N���Wi���:��>�]�1E݀�/�/p�K^?�Z�yM�X>R/l��s�\����4 ��GU�a7�R�*����zƊF�@������=~�<���`��Hz��'C�X�)ьBS���b�v�Z���,n�e����k^��^������B�?[5hv�+��׼�5̲�kt]� �ϷK躮S��]�աJ��}6\�2k���<�N��Y��O��'��K�m
�d��9��Vb�'�ÆK�����.?���pIӴ�����؋��L*�\K�B������c�T4G��$M|�T���Zת�N3{;TU$����+��O�,lk�U`�_YӲ�y���#�p���	J%w�Vs��T�S1���K@��E��j�S�8�y�	_q�"C�����Uσ�]<Ҵ����E��&;�)K�ecl[�x*��"�j�v�*�>�7^rX܄�|w��ڤ�]8��Վ��?�/������J���$*�i�i�21�E�O@�\	���x$r�!	�w⎍��0�Fipc�M��&�l�9�H�a�=v:E'еVf�Iߺ&�Ω0��,��Bg!HV+m�e�	I�ߝ9wE��_wx?缾�΃o[$�u]<X���R���$�`F�3M3��]u��3��^kcc�1]��	cl��m���uiB��>����ˈJ#��!D��	����}ncc�R�6(e\7�%�/!M�����J��4M_���ԡ��8�6������ָn���&��?��?��B�嘘��:$k-ι.�V�l5M�D�I�ڋa�&+d���0XN����ۓ����V�^ry�m��■\�o���#��J���>59y��ݾ�a۷��[���a_���[���A2���؂2���6*��d@�\��	���	�s5��j��� dcDE0
i2����2Fp����~J�r����3&�д��mMuE��?SW_��(.XJ�mß�N�R���"_���7�˭�;O��GE=N�����ġ��]�q��]��_j��$Z��	�D�Є����v@��8��{M�q��v=�MY�>A�u�_Bp^>T6L����{��c��L�`Jj�ې���-���$�4K��S>T���ou>���3:�K�U7�������/���̩Sh�8I��G�6p���۲���'NLIolX��&O��d�j��g���t��D��T��)���]��;��ig�'�lMP���#$M�!���b�v`�ь���s�رLW$����	�~�Ic���f�~Z���-/��3(Ҳ?�@A�[��o��>%b����Tx0c���׵��o�bZ/�����X6�x;.��WBG2]�:~'gp� ڡ��2r����I��^U�P5M�[�̚��p����'M�>%��������Fp�S����6�E��X�Vk��z6�<8M^��8܃�"�ֺ$��է�o�.n��Y�Gk,��{>%´��B����l���og�7�}�ӑ��~�d1�JϣRx�Dr&9�����
�1�5�,ϸEz��"��JR>�,a�y๹��UbDϧ�Gu�u�0�d�"N����%g z$ݏ� ��پ}f��Cp^a���n�6��a�����h�T�+�u��1��E�"3u�w������ho���i�TvU�q/��Y,(�����0�P�.��vJ�z�N�rͭ��'� �ë���j���Q��>�����7�Ν�s��E���#B(�GgP-)��K�&�V[�#�
g�AG�%�eN�u�3���כ���.@�T ��m��*W_���!]�[H� 	�IY�s ,�WeY��EF!@hk7��#�Iո.��m�9�s[�R�Pa��Ϭ��nQ���~g��*|�(�]�Y����י�~K��@���ce_߫G�����t��|J〤�+G:H/gD)}��G���m��I�@�s��R��L��\ۥ�� �ȗ�Li �\��u��f�j�f�~�Δd���U!g�6��	��U�z��TFІ<�S2_N��J�鴑�.v�u��ɝ�;]���F��v"�@�XK���ٙn�ʯ��\Kib?5��i�Eq͸��Op��p������,��b�-x~�u�u���s[W��jVkx�I�۵jp\�|||�x���w�NWo�s?���{���n7��,������[�����']A�k�U�&
��u*h�o�r���i�mOF��P~\������lHwD㨂-��}���8"hĝ�pyX��#���?��\��>�i���j�5Ms�l;NSP]�iފ#C?W`�
�ŗ�g_v:k���Tliळipp���n�MW	@�C��r��=h0HnQ�}̮�gh����l�2��-���<�%d�4��sЛП��4�a�3�b��݋Vt��:��m6�A�񛶖�0���F)^Z��U�Z_��K�[��j[�K�.K��{�f=���~���Hc�b��-+{c�D�Y�Lz�M7����˦�3v9�}(>,^n�Ň+Q�%^a�7��Xћ�Ň�N�*�\�\_���
����q^��8��>u9_�eA4`�ǆ��D��ؖH�����%�Ea��5^/e���S�7+�z��;�Po(�l1�m��݌%̾�{�V�BX|��	c�݆�6S��fu�j|7�m��b���	Ŀ0;Q#�{�Q.�3@�U�Q/}�݊W2�&J�� 'JY'sj�D�n��Y?�x3�����զ�B��1�"��7f^���X�{ 0����_�^�J:�$RvWz#]���v h�L��4}M���]V��8]�ρO?ǉ�u}�7�@'L�m&�jojo�NXl\�##��Xj��utC�k�b���b����N�cH���8'&3���#�ӎ�B��x$
E⥢%h�Z�D�+)y+��_�Ã��č�[dN�70V�?���E�|����]�����	+&��߸�����?����WF���tC�����n��c��EEyl����}[*�"��F�wl�r�(=����g�A���$=�jS�Fv�7K3�v,�g����oHi�^����7����g��F�-�a��|ܮX+1'm5 <7��&�H6'dfHt�\Z����Q)Asǧ>���hY\¸�_a�� �Z�.,,�tQ��k��F�����/����u�$-�+v	m|�s��c����ii�z��-�3ڹFq��vE�bw���h�Z*���{��-"l��G|��t������u�����4�)XGنg�ހ��;x�EX�3vL������Q�?Z��'IB���I2λ�t{7Cǥ�u�p���,+ʳ�@�2J��-�.�.%��/ y=g��޿�,`]�@� �e���)����i�(�1.��8��M���8�W������GoVױ5�1pnE�d�.����ݟ��5�o��I������&l�\��LE��)&�p�b~ےP�^I���`��i�K�>�{SUL���
�LEuy��Fi'������vp�k���	�D�{�oO/��q���	���U
R2�4�f�W�xnEQ$�F�A�Ý�_ca�-W��?B�oq1I�q�z�k_bʄ)s��J�C��^��E���TQ�z����<�Z����&��)��M�h����t���@zu�S��%M�����t4ͣ�R\���*��I�F��/.&�8�0ϛ��m�O/Ny��Մ���(���󙖊rt=���%Zf#���c�'���]_�����!�-~S�:5���4��!�z
^y���=��! ��� �n_5^K�� �u������I�}`3�68��&���N|�g�����c��c�v6�t� ���77�&}�}��DD/�~	��CAT@�zj���n��Ǟquƙ��% ]	z#3��k=�TS?�<�'�S�E�p�N�Ow�ܑ�=��Ò���ޜ<~D �K+��렿p���L�S�Ý;w�]^'�'ˁM���$�Ee+���8(�T{���A��<�I҈O�L+�H<�6���G���t�)���%����x^�������d�d�j��\�ܢ��1*K˔�Y�lfߟP);z�{ ʒ�ju>��K�o�QI��F9�2��i2G�L��43z�V���W�6���|x I!�/������g'���.����zlUg-�F������{;��c
���Z�������J�4U�OP�$2Sa���|_$ /[2�>��tg����8�tySYn�	/��0�̱��\�8@����
|�?��?+jX��,o�ې�2c�+k�B�673���>pyW�ih�E�$�Ί�Gq�7�RN]��;�2���"���"&B��}�+P$b��\"֦:�g+�����mt����ǵ���2�o7f�F�ˮx7�^��F�w�\7��FY\^�o�ӧ����n����E����iU66�D!l&A\��H�|��[җ�nr���°׻Q�������m7���W�ފ�w@��.���6B�G���k�'Ћqt�!�J>y�I�z���
�"e�"u����K��2rQ��R���&O����h�)*g��s=��P��h�A�J��Ÿ6q�ünry!�� �)���3���d`��|�k���]�}'�H�;�ƾs�T��Xl}p��O^Vs�,E<��z8@<�e���b��&��r�e��[�����E��o�`���W�ޗ>��#�>�DF~?��$t��u!�(q�LIa\���N��p��ŵtFf��R�_sss�m�u�M�9sR�*,�oðl�����sg0��PQ�I��w����O�C{�!=X��aK`Fs�����דU1u�~�������6�<�!�]�/�p樾��D�~����ܼ��z Q9�4lK��_�u @�@r ��d2��4����cI�՗��&Ƃ����X��)g>����3y�����y��w�?�ɃNA���۵E�� ʢ�Ǐ�I�}��jQ�� "-���:��iP*K	�o�������O�UHL1x�/e���سq�%����j����������"���T�G��Q����P�@T���b� ߻��ޭT*�I�RQηmX�B6E,�`����9��:�ٶ��]��S�����=�r��å ��F`����%3����ʘ���f��=\7,�6�) �i��2�mCǠ>�����:W��+������1��1z��Q:>P�ׄ�CEi�^g&���i���РiP5�\���|�t�ϡ�,7	�H�d��SMO�������;����+�v��Ü�F��6��!������h�����.CY�?85�����N]�k�Q��ۥFc:i`U��ช"`�զ���&��ɲ�-F�a��0������Y��"D�3zX$��F�%�:�p51�ja�v�-���a����W!����&+�M������yQЖ����)���}S!�3�LU���8�Ty��5W� �M�)p(eO1E����yQо}3\wgy���E�
N:�m��^f�#��~�Tmϵk- �*�֣�,'*�#��ns�%��ߞdiīE���6�O��?�D�8�$*wQE/H<Œ��$iZ���!����x�M
��]O��ժ������o=�]���U�1)�I�w���HyYd����9�����W�XV�����N��K%,���XaH�-�4Q1(�r�
\��S��B��?g�=��/+����^�i.�8�A1%�P��T� v �6��E��Q>�;M�/��Gt��D���yrK#S@y�>��7����(��Q��CVM|��8��¨�+�)8/�	۶��|�4X�~u��ֳ�a%/�/�z+�/,�&iB�&��8M�>����&%	�Niԏ����O���@D�̡�(M*�SB�5�~��UU}M#_�ȒV�&
�!�[K���"��dk� JŲ/{�K+(}��j��Y.���Rp�IQ�G���@�u�9��G�
m�^ʢD
�D5v�F�5`5���Z�c*i�fۙ�s�s�a�RbV�qY���"��/8?#n�AǃI�9�&��,S�CQ��L��DN��0��p����^��믭���_�j�,��m/���샠=R�<#d�y���B�F���x)��q<5���Җ�v/]lRc��6�`	��o6�7lh����e���ʙ}��i(ز��Dq�	���*�ּRL)�S� �N�9�h��=�Rw>/J��<�ۏW�?G���h�~�mM�7�c��[5��5��zY����{|坈⹉t#���xȓ�,tܐ�7$��*:�@2n�V}�CFlk�FU{bMw�a��Q��
]��4��"�VT���b�����]a���L�VU�|6�N��YSQ�iP�,�<������Z�>�=�g�C�Uz�0e^q�z�U��W���k\MS'>n�ܖ�l��'TMs�A�e:��.:��Œc ǜ�(Kp/nɖ���C�fA��K{v�Iʸ��_o,(�F$DR��f춖��#.�OQ������/މK�� 2 ��m�t^~���B��)�~|�����|�s��Զ&�_���};1����¡���'���'�cXnY��qnۚ+3�6�{j|�� �1}�ƩC���2�S0���4�Q�xQ�E�~�6h�ؠ@JaWӎ��M�mLt�� ��M\i�f�N;V����Tp�!Q�_]��J�U�}��^�⅋ׇ��ͅ$^kEQ+-%tz��דV��f�ū��Q���5�-�-���+T��$=�Q3� 6Ħ��SB���N�3|��I�}��C�F�>_[ƾݼ�� �r0�sX
�����+��mI�v�Y���q{��Ba;�d�;�,˪L��F�3e�_ ��	��f9��rZW�[yz j��#0��
�ePE�$4 �r4 E2��?؈*���eI�E���p���'�(�'`>T�[)>��B�h�����4	?�t��?���O�%pe&��U0w**Q�pT��_�j�2�9
�f�&'�1T�z݌ޛ5IR���.U>vd���``�>$w�����v�U��8���z�j"l����̮�[+�S�kbM#^.���xnn�p�t,���yJ�4ً^g�<�C�;4풖_��_%�4Hqk���R�	�<�����v�_Fet�ۀ�����,9�^���9�$�I��֯AX���V*aܬ����΁,W��A�8AV+�[u��o�
URu�G����_�w��I��/��VK��(XP����CԾ%'��n�8�K�/wA�♺	X�5_&�mpM���9	�uf��H��Mx
�1��59� �ŎJR����:�ßc��D_V��ZVefDuS�,�8`�@O 2�@V�uņ"����߹��I��Y3�!�
>`�/�R��ǅ��i�^`�sf[m�	��+����+�����>�� 퓤ʃ2U6�PT�LSF1���#y� s!H�����`� �V����xA��P��t ijd��p���Z��H�95K�64� �6��}�&'�d�ra�o}�_B+���tP�M=�����҃�͝n(�9o1!)X��v��v�}���7���kc`�w�G-�2'�IY^/y�|n=LF��^$󊾧YGVo4 $�y$��a�i���$I� p.��) �.=p�z5&hf����e�N�߯8Ni��w����4!<ϐMӏ�4�}����,�t��>4g�1'l��UV��i̭S�]y��Z1��N~�i\�c�.��Z�������ν!X���8�f�ǐ�0J
>y����A�yj���)iU�r�0����b�������
��	��[��W^y�jc}"�_����E�4�������4m �^�ZSS���ܔ�߯�?������ckjn�P��ji���XUЊ�"f^�B�'�$M�ێ?���Oi������^��g�w趍���@��|T*�T9�S-i�и8&؋�lMf�����a0]'\��|3X�kq��-���-pO�`��&fm���,K�b��,o��}[��J*�W�=3��Z-�>84R�Q,�ƞ={�̼&�/s��[8��-��!�X�y�cʡ*�e������l�5&k�)1�<��v��������O��J�"�J�;;~����N����{�3 �[~Ƿ�I�RG��
Y�Iδ))�۽�ޔ���HuBZ��`�V����k�64m�3��-E!ji��X�y�"�`���.-�͏�ˡ�J��W�ju��=��
���!C�%�v���A0���.����!p�/A@~��8x�V�
}ǖ������5R���쁸���a��3F�Mc"�n�F7I��Ԫ�ecG��j����+Kyk2?}l2�tr˧��aW`���:u�zc���G޹�P@���k˥F����:��?Q��osXU3�����0�*�O���f#��nA�� ��٤AM��d��ϻ��^�!����H�>>����K���N�i��P�k��/]�������9iq6�S�"��Ue���Y��nض $=Uˡ_�T��`�p9�,f�͹�r�|�O{�OdL������?����'ŗ��z�G��\yvFÀ�_�5�t���w�W�n��v[��3	�8PL�
ëv�4._Y�V ��F8����^����B�����ةj\ctZa~��J�+����q:����O��l����C�y��W����S~X��D;�
*��2����)�%?�:�OL�n�����z�_��V`�nT*�N��6�k��L�f��a�VT ��v�g����P������x��8V��]%f9���b���<&�NM-�߻y7�d����DR�;�
���1۶+u^��w|��� (��mLxw<���Z�Fx�afڗl�
/��?�Tb����
����)I%��c�4�<JpG3���y�
㕫��űI��	�$��TǍ-�ƥ�)���������2�8P���H�GXJ�m�a���	G�b�K�B�im� l��TN�S���z�M�k3���B
E�Z���v�m�����ű��!�9�8�Kk|`+��W۪iZ�MQ�zZ7�!O_��=i�Z�����%���zΎ���@����4��1	�Wju����9WS��mX�շ0�=
��'��� �'��Ӭ�l�N5�rg�5��O���C2�	$�D����I��A:vR�
��ʣ4��WQ���f^�8%Pj��!U+KԀE����T�JbyccCy��r�i�?�MM��gr�y>=�=S��;��2����r�$`�?�o�lW�D����d'i����:�������#�7�BrD��]ceD��q��o#�D=tz3z7�����2=g>/_\QKWPh��lW�-�/�fj:�a�'��3�q����ˢ$�z^��M���$q�F������q��#Ro��iUUAUA�U՟�=P��X�R�7Vt��hh��vk����xq�I.��
 �)D�nP
3�Z�e�T��I\���؅���fg�K��{T3���zu���aI��Z���N?��G��u=e��;�n�n���}Q���; �}���t�B��Z�OO3�ZR���|�S��1�fy�u�ܹs���x��߸��Ӯ8�\���`�����^(�=\�ݵG,Ӭ�I&HM�\���hGDŬ�Æ�0I�����;d�O۞LH���x��9ݶ��
A�&F<�.�'Fo��z=������3�-Sh��y���0�m[: c��)��"�Bׅ.)eTLg���Ɍo!�1��|>���\�T15SX��`�_!}z(���`'��)7M���\��L�k����asI�%n��h
�i�DS9'��,�4����o,Y�a�J�f���Ke����M뵴�g���N1͇�f��;��\���d*|2=r>g����ĿZ��;���ė�ۘl��LĎ�,.>��+��=�������iJ��q��[�mT�H�S�T�;�h�vÛ��f�:5Yڕ).��V�N�	�ށT쨊p��$)�{ �h�;U���"���}{L���j�/E�8G;��Y�Hz��u�|��f��O�;�s�x�����EDQ�=�J�w��!�q{�RJ��kJ�ZY�� &e�U�m��_�6}�	���JNRmW�Y1���1C���2�۳�)���J��t�}|�N']�4([S���Y�m=���{�ó`�wI�a���m�HҔ��y�8�,J�����w}1o:qW���v��t�mm�V��+�Gg�Jt��}�#K���m�k��&�nMO_�R3�7g����0M&@Qe�2E�L� �]�4Y5\}�)�e��>рC��X�7:A.�`���04E���jZ�u�H\��v�/XX;e�4l-��>�ו��Z����OG���vn�%��9,�w4b%��I�����zI��8W8��^�/9��,^�~����<��Պa��"˧'���_m�-�;�IE���<[���.��\21�����G�MU���4�^��]�ĝ��.������w?-�ґ�O�m����8�t�I��S���{L�Wr	^�Eχ�¹�J�;L�5q�[8E/&����·�Y�T�*�wq�t]�׀��nI����r��q5��k�&��ۭ��~��>��v��K�0���;�S�P�n���P�xܠ굮�L�\YV��QEVҒ�S�V~��bzf[�ö�i����j��c4��◎�e�C��g�Aɖ����Ux�oi&K����!�I[)DQ�Ԑ+�Q���)Z2$~h[�,u���� ����@�s><�ńO�*����'�n���{7�����e��:�#h��.�[��X}QB��؂�?���1�k$EV7p�S{,�¸�:+a,�Ɉ����KQ�$�kzz:�c]�$��nsι�ӵ�eI�����$cE�6M�麮3 �4%�*
�eI���tIR��hL2M��C��4U�dI���>AC������S.n��c���(R�rls��E�A�1�wM�&�cC� �%�֋��U��B8���,�%�%�-	��^Vf�e�U�4M�T��F�%s�1�E�*U5Y��Զ)^�O��li��dk�ȄȚ��t(��R�[#�|÷��W��н�L��*n�'��@rF�E� zhM���NL\�o�A(�wFZ�ݵ�X��Prw8_P�����	U��k2��מ\]]]�Xm�Gp�c���D�k��u��4�P������9E�+��E���z�aM	�!��9Q�@iLPAJL���%d^'��M� �$?�)Hi���9�ɱ(����B�5E�7zH����;������U�y�?~�����
��,�g��X�Y_E_=uJ��K�`q�0	i���� d�\�M���ഥSYΙ���y�	`>��n�7:[�^Ut	O���Wg���g��bn��87sh���Q^�`0� )ь
5US��;Y��� Ba��£�
���T�uԮ�R�!��G� D���@f����Q4۬�4B�Q�R���c~�R�Ԣ<%�A�֜�"S!D�aE�� ��@�4���*
�� �4M#@ŊB�U��i0f�d�&*+��gX��r(EG�M�-H0�@ ����x����2$K�"�L:���l�t-�T��E�?�v�i|W�sh��^t�#X�} (�L��z ���
 �Z�����[f���:�u3��@�cS��L�.����RQwQl�cR���&Y�V��������Ԕ
}%[=<3�y��-���RD��$V��v��fgF�������դ����Zx��0�������TI۰�2 ��#�ཬ�������a�A6H��1ؑ7,�G�) �����f�X��p�0݆�F��7���bC0h�����_���nq��4O�!� �'2n�z0D��$+Ƙ:��:̟�A��.Jބ,��,2ne�PC�J��x�i��M�8��z~�l�Sl'� tlePaw��Bh��4 �/�{Y��]6�ߨ���w��qf��.��=HCF��|V?9��At�V��4!N��L�Gb"�dn�֪|lF���w�nP.O��S���sn/\�ž����*MU�W��!��M�k������*jQU��Q*��W�V�?�뛹EH� H�[M��.�%��Xi I[Q��a���'R���4ڭW���R�����{
�o���4?:���1[Z���)@�k��,E��pŽ}��sz�\��H�����O���˗�t�^J���f��%�� z���=�V�ڤ���g�|}&��yI-Ec�J�m'n���،�s��4����^o�i@��d#$c�{)�O�z$�?�K~���!�yw�!��j�#\�����-�����ݽ���zY�Ɠ���g�q�� �CB�2x�8ue���$�T��u�P�f�{�j- �7hm},;FYݩ��w�0 $7R=>�*���5�I�I
f��Nj�Α�,oAޘ(��pA�sz�0?g�:����f�]'�G�$QլvZ�Js�a����I"eW�q� b�+8
���9jB����T`����ie����b4!%�]B&D*��?�[�$]�rY
�,�Hu�H̪s��܅	�{�1M����q�&U�h��a<���>��c%j���Y����k�ڹ�;A�74oC�i�"Ʃ��h��|��]H�t�uQ��g-K<��R�Q	��|��8T6���3��(Q���TtD��Q� �w	Yi\}�z�K��={N��_)���gw����Z�_wN��x/��R)�V2��C�,���|�*����xŁ��Z��{hk�h\��w���y-�ɸ�#V���Uq�}��ύ��i��#�5�1Ё���ew)�8��s�gЕ�V=�T��Ɔx�j�a/�,�8��\�Aٌo<�'�����j�W�R6� � �V��l�'z�d�J�Ќ������V��ո%B>�@�}����x;ʸ��8%��C�h ���I2�]�B�z���D!Q��J+�uq���w�f��X�����ReR�v��9 ,S;Z\���++U_'^��Ug%�Ow���F4A���R��/ͪ�WF�#�_U䌼�Mz� I����,�H�����,���f�������+�_���h�bPQ���1�?� ���uC���WCP�2eP-���`�\�F�bM�]�_͛�b辫r��333�W2�y @<=333=�]�k)kڏ�U]�
i�`���pF�&P�p�����j;B�����;�c.L� nDN\0��O��n�q��}
\#��������<9��O�0���mA���Щ��(�%j�˰�pDPĥ�^!m�O��w�	�~���hO�r����7})�4x��������g��䊮�fr��؞�-C!=�2�:�`Ö�񦩾��	�VvD~ݕ�U��%j�K�[�D�t�]h�Qj�#��r	>s��e�@�v*�;�	Axjr׎�����3����h�~���zn����ۘ^]�ߺ�։�Ç�fsT�5�z升WWWWs�L�'��?�1m|:@[��NGD�j8@�����4P�F��8�
C�\>_\&�J�t?�/���l�}�J�`{�$�kJc������;����^V���3Ql�������ڱ�٦��6ѿ�z���j��.R�ȉXF>�k�:�����#���C���T�c�OްP]�^���� ~߅֑�`��` �B�zES�ҳ^�h2,A�e9�|
�7E�Q��B�l�6�a��B��8x�"����a�(���[�ߵ��8w�Č^�Gي��b��}�x("�X��ц�Yt�υ�&`�o�E�1�-V��(x%`#��e�m��3?^ǜ�\Q�@|�'�}��)��ߦ����S܃_C5�řU�<�)��r!��V����:.�ozW6����g�=;v���&@aϞ�s&\aK�q%1_������NF�uÉ���3�^����T3e��Йw�FM����C��M�)��w��nM_B�M�䜴fP��@����ZW^��i�C�$�I�f�"M^����w}��&+?���`<��&�8��[d����M��}�!$hI��]�#R�F{�i�L�
��+Ph�;�h��|8�TQ���X�\�>�O9���B�|K3IHA�$u�������b����Z��$P�V�p��{F�%�{Y�O�y���mIulaP�R'�p�8vlqI"������@��;�pN_+���_�g�XR[�A�IVTEg�� X8;�� ǖ4P$"+����W�����p>�2�Y��H�# "�?=��[7��*�%2m���m=���p�ze�?���O̅_��w�r�fo4�I��$:� <�3���cV���|�7>��NWo�".a�3{5���b����P�J��XH�ݾ�n��� 2�#�(�uh��D��W�Y���ňQK<�rf��������A�Z�(�;���w���-��qs?��8�X�"E���K�h�F˄�5W>9iY�������N�j2��#k���b�xQ��u���,T!�e�?��*1�Iކ�j/�l�u�Un\O�},V��x{RZ��>��(�{��K{���/(�����#$S �I:i�X��˭�Ǘl�b`��B��}s����U�g���oX�Ӈ���}�{_n�U�<�-���"��0��0��U�՛� �Ƶ����؃��JB��"�x>c��yN�v�1J[��4�Ҵ��i�[�B�3]�l��Үӟ���e�[��x����Nh�k��)|���`�ī������n�� ,�ϭ��t�UA0�N�!�1�yN[��/�95ǣ�d�6��赟�b�>5�&��8S�S���f�N�(�&$�ax�	�Uq}�A��d�mSN������;�Vr<ԭu\�W`�W��tk�C��	tC\v{G��I."y�ӧ��lAKX�MY�<�i�� 8{	d�^�6��s˃� �o����>���z�"ϭ".-���^��������$�&�+��z/�?�FX�o�Y�+ [� &@�$�N"�8�C����L�=�S���r�ƌ��s���)�R׃ W����[#�{Z�;M/����_����^��z�Z����?p�P�q䫤ֽj�<�����X�QT��ɝ��[�x׋�a��( ���G\� q�{LZ���RC����U�l��^!�+���e=�x9��2Q-@�G�2	�p`u���"����}~J]%�Mt��͊��B(�-�d|�$a�*l��'N�ϵ\5����T;���0x�)�Wъ�Q.�ϝ�lN����'\|,�8q�m�5��z;; z�k��{[�Q��X�b�L57��~�@��-�5��l�d�[��Ԕ�������V't�h��v��[��-��*�+++���ZV|ӚVթ|nj2�������3�4���=�ki��1�\s�5�qM��� J��>��h4���0�k��f�� ��Iu�{U�7(8�$�P(��4��
Iq�)n��/���� �=��t�1���Q���� ���M^E���p8쵧��%�cJ|~�)S�H�8�Ns)�᝽gxϠ.�S��?�~�<�m�(R�L�ꥩ�����~^���c���f2�2B8`g�:c�^�[��m�s���w��֍��Rj{�_��M4�-e��_k)����K���~Cʟ��K��J~ܓ���|�+�ˣ!��zŽ/��� O�ı��Ǟcog��oY�m�ꮏF1.+�:ޔ�����T92�b*//ʌMT�]���6����֌��i4[{��Dfl�7g@x*u!>]�۷uj7�|�v��
Y�>R�%�����(�9`SY,�녢"��(}\�ui;j|-#m;r]菕쁽��]uц�Ii5S ���	���� j�#��E>sÖ��8V�+u��8&9���)H?�8��1`E���]�9]V � 1&�(�j�Q*7;�cK��P�T���ݛo�XĤk�ƥ*�2I�g �� ��hw�6AXm+n��c��҃Si��"�r�,�g����CH�%�w�hn�x��e��SZ��P���]�BD: n�r!�!�N5�j!��T�%|�9���^=�q@�i7K��m i'	)d*��r[�ۨ�5+F�+vTI;��ؖ���u��u���H�#�aة�u��{r�f�:��;��eߡm�5����R))�TJ~DJ�&ưvSg�5#3�1�`��S�^c�셴���k�8�Y��U��3�KǨ��V:ߤ�v��tXژ�9�����L!:/I��O��a�m�E�#0ҹ����^���5���*^U����$J�� �R/Ӹ@��%K��o�}���ǁ���P#0Y��g�
5D����!ʘB�btE�l�d�Gh_����V�X�d�Z�ʖ���А���O��2@q	��o�o� �9I��8L��z�����2��[*��Z/-/=���,r��n�<|�����6�;���9�q�,/�bor�Ia~�yƚmzSGQ+]��&\��N&��c�l���f�М���k��+�U[�^�дM�<g���#(6�����AH'JQ��Z����Jŉ��:�Ta���Z_ ������+�^d��B�����.���n����XBS&��T*_آ�W�G�/��������!l!��� "���:u��P+��Bpf�G/Y[4/�u|#i[=�7R�P���֟�7�g�|&\��O��[�D�����������g{~
��VŴ��m�DX�J�5�Pov4�M���9�fB��@f4���2��4�?�;�z�N�t���7�T��Жu�;����%$�[�i��7��/W(^������ؘ~�C�
��!�X�����)�����~X�Q�Ӿ�Ng�ƶ��k���D����%����rBt�k5>*�%�,�qj ���q������u�êi�k�������D�]��xN�
Ĺbo���G٫��.M�	t���O�R�OV/_�r�����7�R(�����˷��xmk����ĕ��XG�}Ō$V�!�E�1�/�f���j]Wk�,��8�����;��~���3�c�TdPpy퓋��R��z��|w�sd|��1c�(|i]O�J8�������]B
TD�:��M
�TDͬ�I�_��,��8&/PxGK�D��G����K��f���x��H���\t���k�-������(���o��☔���&��mhǾ���9Ŋ���Wd5�X@�&��T?�y�!���N�(=�F�c=�v	���.m��z�%�������D0Dk����~�!j%	�P�#Ѩ��Bz��&��H*������P{<(W�}�
�&@��+�B����Z��V�MJ��T�R)��I�VY��@�
���ۨ�_i������T�9]�B��|�[�S��k�4�3H]�:X� �~��*�����I��_1�0�+%�,�����xg/�+)��ԝ̳d4��p\��6;�(&�u��cJI�L�VK�!+�f�̏0̐�?�3�џ�Oh�;e��8N�[X�٬��cї>f�)d�s���m,���*�>$a����y,Y���9���`��7�P��?@�H\�d> �������S�;��W�pnA��ݾ����Q{�:�o"ˍ��e:��J��kGQ�O��L����Sc�E��2Ê[���Y����������z]��P�q�Q�L���l����F���}�|\;�<<�$<�� ���9!���}�!�)��W*�D�Ĝ�K��k����l�+���~~���9,
�ȷe��h��_��@�>�d6�������H�ޔ{7��\[�
z�c38[�dSƩ�̯������/}<�h���?HJ�#�8r��}Ĩ�!�^S�f �8G���U���JkF�/��82��8ҏ)yz<47l^~�gdh��S�(�ћ��6G;���X�YO�{�k뼦N=cM��2�]�x�l������Rjoa6|e�����LK���q���Y7 �c��qJ�;I�G��#A�.$��<�mK�ɐ�1�l��]0��ଜ���j�i�_�Ƨ:Pwc���`]���y���ƥ�����q������ŝ�7�M��鸧�Ri�1A�A��2�ۼD���/��)��Hi���oқ�����vrI	)q�pf��C�o"?j��$y��H�Ap��
Q��20&UG��&�0�Y�����W&|r�#
��Z�%	�$A;C�$�n�����l�+�3	�BQ�~󛷫B HQ޺P*�E��n�Pڼ6��OJ�o����6�OJ�W׶�������W�S����[(�J��Z�V:�'V�ڲI{#�w�9��M3&��S�5��V,b�M$��dR�"�\3�f����#�1>|�C�_�[�u��Tց��Z�'��%��J�V��R����Q�@�סf�����"\�zcko��hԷ��u��qm��R���G<َcG_�t��&�:BG�8�	�S�I�0��Wxͺ�q�����k��p��'�F���AL�?j�1�%&����3B��`�9N�Ơ�����9������A^� '��:�S�pTAD)��b�>�,yZ6�\Z���Zq��C�,��@��q���j�D@��鉚�hȄ��
�N����T��v�w퍩n�Jt��\�n�!�u�bE$fK�4����J�$;�p�D2��Lh5 ���D�g��%��z}>�X�h�Y�9{W�M)6!HS��[�4
�4�����s��;w.��)���9%�i���<�kf�l��	�W�L�4P+�B�Vh�����uT��0����#��f:���;v�WA����:�#v��Ax�Q��m���]���������$���(�f6���B��Q{�7�'[���~G?��ft�Eɻ��v��5� 7�?_�i���X�g,[�QE*y ��X�|~��u�*9[$����ҡ�d֎��W>����Ҍ�$�Ύ@awtd���%J��Me�0?�#{�_�<��=�>��-�u��S�F	:�Ab;���a�`ǰ�׳
!�#��kU����[v�>��5�2"(e�*]�8�.�`������C��Q R�*z5��U���ɺp�{${!��3��� ���
<{�}�}��{c�]��ڸ��k�]?����8N!o�������nUۮ�T�k�ZMۮY�B`;�=f�t��6��`�z�>��J̧�f��s�
#������=�|iB����E	��/=�Ԓg�}��,9�k���G������ͦ��}7io���&��~6v1k����"z�sP?N����?1����߯����m���Q�4�Q��bM���,�=�\%p��_s�G�T*�[\ZZ���$�J29|8˲�N{�ҕ�k�����Z�Y\ZZ|_�r#�T�g�xr䧇�a��ل�g[��?�z���'v=���x�_ �o�D���[�8�6�� zy�d�̍]���)�gYv�!8��i&{\��u8�w������g�<29%��)���a�8ꯆ��.VN����������j��ZH�X�B;AR����`�h�	�E`�Y�B��:ޚ&�0 �_$���Q�|��c�|J=�g�֢T5�\��_�d2@��'���Ns8�D`#)�~�'1&(I��J�FX؁�O�- �����O
�x�����D�'��BĘ�RO�v�W>�#O���X�H��;������:^�\(��Awι��$Nf)-|X��M�.���c��+��R|0���՝b�eK^�W\���Ri�8k)�ln�ׇ�S-x[ŀ��7A()~�17�,����"�����8�N�X���\5��F�]VgN��TY�zBQ�m�G�(IS�2������ǣ��kmܤ�v�J촳f�%�9��`i���D��avCm�m׏�w8�HA$�EFG�1�8�@6ĉ	)�}��L��Nl��u��N�
���"�VF�.e��*6��ҺF��L����SE��D�1i��fN)�N�_i�z�n��Ap�̈Ҿ�sB�ˌO%&
�E;� 2�:?�9iQ�\`J��++��$��[��8��x�έ�vu�r������Cȃ4���d�5FS��-�+���ERJ��Qj��������H��|��u�ҩ\����;����P\�)%�+h>8����۞�ܗ�n Dб9C��K5ebDD�'1%�h[{q��nwv`������'S馑��z��p�W�WFY	s߄͏q���ј#�HB�x�R��;7o��M��{��EOz)��<�>Og��|)���ժ#=�m&E�9�sn���Bz�Ƿ�Wo���D�AaWs��@1DZf�~~{���ɽ�_C^���Rdj.9��K2.oq���=�<�����RG���{���ք������(� @�Į�0��q�c���޿�V�g��(6ў�qljĜ��̩9²t�>�d����%�;��[WSz�_�8�̗�f�~Ҡ���#䝍?��w��hM݀���bgN��Y!D�'X��\����1@zQ��U!��_���������z��m��]�v�v��_s�����k����޷����-�0��),�iп:��'|�b����x��F�q�}�}[:��2fL�i
]���@�d>���*�C"��cH�C�:��W�9(|jW�ݩ�za���`�U*���X2&x���z���F�٘��q��Al���Bu��Ec���o|���~�� �0c�ab��E���
���k+�$�#��|��1@�0�a! �X9���2��yk��߈��%��o�nX$;�|<u�Ӛ�8㝂>A}qi�(��'����{r�\K�s�d�+� ?fz����u������d<2P�J�l�R�_>��HӺqb�ň�ʻ���w[r��nw4�vC�����=_[�}w �DBx��sӂ��6�t)��F� ]���/r��@�d��z�������Xo!�h)�p��I)�Ԏ��T�6��T2|�l8�>3���x��ڼ@�	��-��q��6I��9bks�`����1�ԗ���y�pf�������J������u�&��N�ӔF�V�}���=v���u�O�:%�)Nn�0�&~��B�f�������HIcNq��)�+B�P��p�b����琀_���w��ַX?8���	-b��d��d�����P8E�<���:[�|��4�[�(j�d߲�kW;�LUW�߳ʙϼP�.�f'�d���8��E�k셅 @!L��'��XVz���c"�6NU9��|���Ha�Ֆ~�mD
�8�K��-5���d?Ŕ1����s@��J��S�q@�u����q�(r�TX (�!�Q��9B;zpG�eΫ����̱��E�������F*%	�l���G1�u�)��dU0c���{L1�g�0���G��i���|jtj��@`:r?�s�(�	�-Bz��h�O/ʈw����TJ~��D��D�2BH�A�%�.����DH�O-<ڇ�����A�R\jS�Q �i��)ڠ�ZzW��c��b=m}����o�S5'��-��͑�F�����4�9t��it��x̸��@l�ҹ~z�e���(����[[=��U�̦?�;G�����������p1#6��{g
��f�	� �q$8���	M��o�����g�ޫϢ����sc*a���[�mo=�2NV�cF��J��X���RL�<��J� �Rn��u ly���|��5����U�u�z�_f�aY�*�v*�"��k"��m��5nB`�<�H�C�G�v�W[�޷�'A�}d0(�����j�|Q@���������<XJ�k��s�l+��rZ:x�xA+c���n���"�@� P�_}	|�������D,���rK����8����O��%���޿����
�>D
�zR���0Ƽ�p<�7Nr�~o���"��LH-�g���K�Zq�aWY����S���ס�UXd�U����(KR@�ҟ�!/��æ� �	�&V��V�(�PB����=�3��Z�3�ttWf�� ���B�%@����O�{b�wZ������=ɮXG�_��e�7ql>GhG���w�P?�UA ��I��hi��_c�
�j���2k��x)���,B��O���][��y)/Kj��mw�`}�e{�'��:�����H���h���FK�&�@1 [^�Ó���{\+9�ήSr����E��?5K6�G�Q������Y�D�7U�]�J�$#�D�ĸ�V'�=���<y���L�_��%N�d�mn���=  NVgn�b��k���ϖx�U�ߎu�z�q���q �͉���B����4���A��~�)�#o��;|m7���y'�sϲ��ˀW��+ӗ��"��@�л���/���D�¢���%YMp��pߞ��t��z�e�m6����k4>W>��P@rB�������/W���!_���m�k�p_�s�ʡR�8p��*Ww'����W^>N�+�_��	�=�����wtu�%T��%Ƨck�*Y;��`�y�uŒ?	eI��:�}-��ԁ��mb!03!EȬ��{�_�4�9���sM�8�
(�~*��z��)�����,����&��d�'��l�C'-7���$MA��y�2�A��B�ٳ�V�[�)̾�		���)X�������D�e�l��!Ǒ[X�Eb8MG��6Un���FVk�k���NA��&�ݳx�1%����C|�p���f|��ge���W���v��F�(��2S�����J(�>fWJs��g��,���F��=�U��
�j�s_��^Y�۞>��.�H:J��R�F����ciLM{��h�;82H[#��Q�8�lL�4��fӔ�Q��ia��R�y����'��˰�d��G��Ȗ��k�~�\ B�..w��;9>g���p|�� ���B��?>mzZ���c����vl"̟��z���7�w�4Z�|�]}?��D�Æ?�؇���M?����@��!_ۈ�A���u�zCze���i/H{�g�`4�[n��b�3h�v
+n]��ߥ3N:i�ΐ�$��j��C3�+B)Q|�=.1z��0Lf�+�2��	+Ŋ�@��I(�C!&�RB0,�g�ǄR�1��` @���ĩ��`֓g�f��7p=���@��c�����}�!;�{�3�؁+xq��j�1��oZ�S���#��:̗z���
���
�'?���y0)��%icB���c��pX2���l�	�ӿo&k��5��BA����D?�2_>j��)� �o�d��q}_H�R��}!)qMѷu���mI}��� ��, .�C����3��-#��)_JJ]78eP��^�C�+��I;.Y��J�E:�[���
g��^�
�LC��n�����k�﹚���#�����o����笗>�gƴ��a��y.�o�7c���?���#Z������+����˭��k)�ş���l�Q�~;��g��?�����@�9�{���Z@��2U�6=wB^�Ro8�琜v�Sk�xr�85c�@��E.�����#{5Ҕ����?��)Zt_�u��8���W8T�\ػ)'�o~K�o!����E���y 4� .�7S�-��8��/�j��̺�����c�΀RDb��K��,J������8�X�0�o�����B1��|�łϤd�r�Pҹ���9}��S*ȇ����OS?��}K�h���������f#���766���9]��x�j���Ž�����ߕ��쮬�����_�D��XwX��*C<�E)j
����><���M��4Wc}&�iZ������R�hY�E�v&�������
]�������!�]�^�@�{��m��N)��#����r�/��Y9?e>�YG��𥾬9Qs���M� �:��Sk�"ySn�ˮ�T*�qc|���;/�H���K�.����9^�f������q�7�1��K?Rn���7.]�t��sf�(�.4�be��WB<`�:���S<q_5����S̙tĜ*$��'|�.u:���큼���9��s���[oO�3��,��)�C���$��	�; ���=�(��O��Q�����z�(�l�G�������*�J�S�$4c���������*]�2SZ9jeH�(�B'�ecU���걣0���q`
�3{v����֛֝���^�i^�$�c�N�Ni�E�1�¬�pq�Y��bO����vgW9��R��S�z7����z�/�fS�,LC��E˵J��iҳ�Y=�i�g�Kwn�����ևt緺@U�sn~�&1���:D���Aɡ�?�mp]�Y�s���Y����r�ǝ�D�"d/i�D��N���T�����[�y�и��ϱf����]�=�E3��D��OEfvVW�8�@�(������ϭ{V��R����;p�g�I�k~�.0R�́���5{Sg�a����F�r�K0�]v��D�!+��l��uNņ�R��iU(�����z�X�������U�Vn�����hy�^��3���wa-�0s�9�R'I�P��65aI�)�I��²�=�u��j|v���L�&�)Y֤���D�S�uB5Y�K�����-��d�����$�/H��^/�T.���|!�Q;��"{v����I�p��]����Z��4,7ˊ�~pq39����Fq����V�\�o���oh�g*�W����H	�E�(�H:���V�Sj���)�f�hI��r���ŭ9ܰ|>���j1�i�3ay���}�y�gxW��]��� I�CR��U�$s��-���c"��3��ڇ���]__�h$I��y#���������T_���N������	�`c��m��peW�!ҷ�^h9�:�7��b��8>h�)��0L���3��I��^���P(���������۷�s[;��x��߸z��	cq�Ѝ�������0�8q~�P(��h�{�������Y�R�F��?��a�>bL��ZK9���ȉ��6�Vpr�:�σ�$�НN�4�3�$dK�n$���4M��O��[(h�,��2��|�[Q��8�����QA����{�P|�'��p�d��|�-����XE�h�>��+�1���g�`-��~<�N�>�P���L@Ü�p�]�m�����@2P�#���7�y��oZFM�ú��F�>T&��۪���CF�� �>��B�r�bA%�n^ɤ'G=��?��Y7���!��zm^�8��B�Y�����GR��K�q�A:ܸ=�K��<�̅���7�,�<�=;�T)�K��-��i�\�lU#�ч3����n@HQ�zb�(�8ʙ��TB�3mw�(���S����ϵ�s`��CA�+��0M� :]�l�YPx�9�M{9��=�|����}M�++�M ��@8x���-N��������K����Y3�d�A<9uU_�+J)=���>��"�{ T?ЙJ�����s�tLX{�Sp�&ȋ�Kݒ��)��k[3�9��4��&�ʅ&q�6��>�=�ϝ��n1䡲��ܭR�(I��]�w�F��,�8S�e�]��	ShJ������g�_]~������Ȼm�$�[v��`W�W�� �n�qb��9s�Lș�oaߙ����� ?[�z;w�'Њ�a��A���)tze�
;gu暒#x��M�lFG`�a�-��P���L�GH�R��U��cj���G�����W�cʹ�+T��;�]ᨆp^#�L>��ij��������ա�V��C�zA����jw)g!��
!1�堺�Z��ǝ��U��[��ϥ�+l�C�Z�85���F�?�l�`#�&E12��0ߧ(����uàxz B�4�Y�A��&r��U�^�-#��,+u�J�XuF��Mř��BH�i�~s������7�@�R-ٞg#�Rv�����7U{����~:g'���ߟ�V��;w��z�qp����R�Cs�fR�XQ.~���m�5��7m�+���Ą�|S��u]Kt��`� w璊5�4
2]^�$#òo��q�2������w�o�aC�jS�͒�g)�,� ��o �?��g�;1�6��i'E9�&��v�BM��*b��@���������0�vO~��Z-	��sD.W���Dc���E*�"v��쟶͜�v�[�.<Ǫզ�\t�6�n���\�:�Fgѫ�IS`Y$��F��H8^��k�\X*�9��uB4ojF���4B��v��E�E��������&)��8��� �d���!#��W�k7o:���`�����+�!���D�PW)k��VV\G��HȠT�i�d�i��k�[<�j9A��;�
�;�b��Iӥ�$�q����9��x����ynW�<�k%k7N���4��v��
r��NIG1�*͡�MM�s�ޱc��N��7�o��zJ��_p���HRES�  ��;r�(�@*I�j�"I�������A|�*��&(�H)�)D5wt�S�PO��T��t�*q�G�qzlM�0�����.�aY$�Mkc������M6R!y�Q�e`o� ��'�ܰ���3���̷��kv!�2Մ^K@8���}���.�B��Y����^�GQ�Q�ڈ� 7��A����*��,SN���]\�o�����>@X2�q�n������E����*�a�BYU�a��E�f������[���u7���c���I�Rq7�ާ�:���qXfB�M��4��}d��	�J|�:��72�qF]>y^N��=��SO��@.�_��:��΢���W ��0�2(jO�W�(�+q�u�M"�V�����N8��z����>kJ����0U鹿D�m����e��*x����G������w�q�u#*�)n�=I�_��}$��񿻞_�uq�6%���P��R>�`�m|��]@{2�٩t��>�,���A���N��JE�Z�m��	a�j�0�A�:�⎴%�*a����Jwܸk�@�vI��]7�]Zŭ��^��G��>zz=�>��I]M3����/�Y�(�7�4�L�dZ۪)g�4�^�^@i:�[~��d>V�����͘�z�`|yr�QG��!K2��_�ucd躢����ZxRU'�%�K�{���X�:�:��϶�YU���-�`�/c�P��3S�m�R9�3@��̓�J�E���^4}?����_Ĕ�ʍk�ڍA).����t-ό��9Kҕ�����}��e@��^Q����i�-�1��C(���R�Xx��n��������90���M�K0���2%'=�Rrh
��B� ×L+�,S��!��a��/�$�
6�#0��81q!<�L��Wȹ�n��m�mK�"P-;��j�ah뮛+x��]�U��g>ǿr���ZW�c������~�Y�Ϡ#�P6�\֩,]Ӕr>e��i���c_p,h��q;���N^�5H6s��}*~-�������Q��B���	����;�|��Ĳ������ �&lnsk��=Z��ֵ�Bv�r"���C�6OF.R��v#����XG�G:
��d���r�����B�,h��ؙ��/ퟍ��ЭR��5�E;�E[�Z�^��� ����f�j�]���O@ٛ\�9�M���Ԛ�lQ:x��.�3Y�s����pzY8��N8���� �V�ጮS6�LP&f���xYf�7��M��F�l�Z1cV��jS0&k?�$����L-]+lY�'�ahڞ���?����c���K��̍R��y�#g $~�w����]�R���j��U5�e��Fu��v%��%�j��$�h�SB�uf���n�P�}�雃�����0Lc�/Q- ��:%�h�>ڄ^�;����U�M}����]���/7�}�t�����*��O���G�
�y݄�Ef��jz--]�����_4ݽi���������
x�Gb����2�uAi�e�Ʒ/G�h-�1���*{A�gY��x�����fӜ�
��hm�{�>��N��3��b�B��E�e�5L��{��]�OY6�J�&y�����e�e�q���W�?|�J�&K�:�'E��W ���̎��}X��b�Eo�v3*���������_���"쨮k}�v(#}�ʀ����ݸ-*�%m6�?�OY&X����F�"�ҽă��4{�N�t}>�X��'����|Xȑ)�LX���1�����zJ{lּv���ڑl�����I��?FJ� �U�?�|-��A<���a��~�D��ϋq��@k��虉�)�VU�0���@3�e{�˚��Ό��e&i���˲a�����Ĵ�h��!�E���Q݂Ȯ1���n��&!���N��ʟ�z�A��m|���j�B� �ժo8�.\ Hg������o8�s����p��\4��@��$����e�6q9e�;��� �~j r{�v:��Ͻ�L���3�<�̒=�]���&��{���r���;hY�u����"*sG{�ݤ���\s�1���	�3���	����;DSȠ�>�ɝ3�l̆�������Iڒ��{�#������t!��Q��l�`4�=8�Ǆ���E�&%� ���yA�&�fӢ�uмJ�#�
���űPn7>eA)��0���\�\�Ơ*�s�Q�f�78��5�z�tE�~ �*_���:_�\W��h>_?��2�(JIi�SW��y�H��.ep��j^�O�[�4:�]�Wnu�r��6�	������(�Ѩ4��$$7T��n�3�A�I����8�{��`Iq-.^��
�ۥ�B��>)Q0}V�v.����,�nu������n���b8%���$!�N�3aŹ�Yi2������:I���X���!L�5R������Ea^m�Z�OPHo������0 �>gO�I�v��in�ޫ�����;�wD�O���xr�Ej-��J'��h�ʟ{�AP��dI�/P�����b[S>#a]p���͜��)6u;�7�#�~�� ��F�N����;#G�h�ș����	7lƇT,�P�hhç�[�p�㍍�="g�wNp�k��{[#�ga�?̸�7&H)�g���bA�̯��똈�l�j.�!��!�b���z�K�j��V��uo=�J2+qn����y�ɒz����\��&�C�	�̇�N��.���bl�,j��I��¤i��_5YJz���)�x��a$����S�S_���gY�����s�O��$},1��5��m͡#�Z8f��ץ�Ǹoq3�u�ge8t��p�������_����=��� ������ـ2�����Vǣ2��w����,���>������W��ͨ5U��N����	<�Ϡ���6f��g��c���qIz{2>�e9�i�S��5�+���o}͡��4�=�ޅ�C_�Mx�����@b�emg��n��@�{�1�mF�Z�a�l5B�RҜ	�)(�+4/�z5wp|i�����}�����p�"Sm�Z����6���sZ`o�Y[N����b�O�JK|���X��-p�5�{��<ڋ�Bw�7���O�o毧����j��B@o���BL�\vMV�T���?�Md�A�i~l�v�|f�*!HX�pe�*9�ӱQ2xC� ��ؒK߁#�:�h~�0"_x;�S�"��
�����KzG�R��K�w7tl�V8
�4����+x������t��^�B��(�=�>�>�e)7U�j4�讵�%t���z��a�Y7l�-I.i�͐�u�#�g �D�=JR5|�Ց�A�~[^��*SY�	�J�Y:�FK�"�gr4����#5
E�q��A�(� 1;{�T�PM�i�WQ	Sj[��t�4��`"������������ԩ�Y�p����MSP��a[T� iO�7���q�ۖN13�����EQ��YU���r>'cɱ�;�+KX-8����2��8a��֯�$�h �aHX�6P�HX��F�A�\���|��v.'cB7ue�W4,)���S,��)��hV0�t�%�� 7�GQ�����i�Ò�"�d�l^fB��+�]�Ɉp ����A"-$K/^Q�e# �ݷǪOě����<`bi�C����2av��*z3z/�1�۞hS.��|#�^-p���k���E�� A"��.	��ª[��[�d�q�|^uE:�,�J�����h�Z{����k���A�69Y��	,J(F�������,˓�Lf0Ur1v%�̴�=˓�n/���3��޽(Z�����Ga�M���3���r�ԏ�뇹=A)e烐���sp^������+O7���{���j�z2�]�m% ��%N����T����'����j�c��cǎ}��w����5�9�`�d�&��Vz�W�a_zoC1�Ccْ�t��7eT�Z�mд阾A��׋�0��~H�5ʨ:�k]v��S�c�#C����c�P��|���U��[�� $�q�S����/�QիU�������/5O�D� ��0X�kğWc�ј�a{�����v��l�T���l+��t#'�џۃ
F=��䂎m����9��+q�bDi&���A�4��A4��-�+X�p֊����%=���Z(�TӨ_(T0��&Q-�J`�Z.�բ�ۘ�)�rm�Q�����ڭw�E���oE�#�>h���'n���q� ֑��2[��kq�z���B���zmϷ�*b��{޵��S�d� v�t���)_BUd�i0jx�2m��c�b�ǵ�bxD1��%�`�+�9���xJi"e�)N.B��W`Ҥ����K����xS�Wljf����R�Ofa��Y��e��������ͫ>�ލ>�>���~���/��C�8KzW�Ma9�>_��JǕ\�:�A��pPj%�JU�Q�P�[yc;e�Ze�r�8+�_��l���W�T� E}l~��~q����_^z�Ǘ�|���������u����ttn��	z��a7j�	���[w�L&N��HwI����}��?���\��wћy=ƱB{����->u��;a*�_@��ܿr���²�%��Яk��}��$�t����w�h�=$X�J/a�Z�'K<6�/ �̦U�_�)<>Er0�۷��@�-���T���KW��)��nǰd�p���k@G,�8��������_�����i��izh������e0U&�m�9F�X�x�ݖhg�m�yX"�Ҋ�a�cڋd��v� EŻE�aBg]��I��kd'��?�CO�w�������gѷ$�4����L��~�jq��*�Ҋ�Y�����&�C6A9�.:�7�A�����A2jxW����:����J�z�ۆ_�	��j)�����V��=��Zg�ߡ0�]�BPm������)��T��g�ß���2�����4iO�Q޳օFe�0�����3{��jro�����F��B�.�>33S�P,��Z�)�?R֌n�닼�Q�1L偧��/��V��I{��
�I����+�DC����TL :㶊�h��375��>9A{
:~�F�?MSނǛ�T��>�lm�9#iƉN�9a�'ڇ��dfϟ�k?��_�$����y���3U,�te��{��[V��B/��W޴P��������WHl���k:�!}lg�h��D�>�$Ɯ��|�ǡ�R����$T��1����"oI�1V�Q\����d�rKD�*�c׺%>R�ScE�ҟ�f��i���|��"���WL>�G23�-l\_�F������Q����O�$���zT1�#���2b cK���J�@|�����?Kx�2�t�!�vk�;�8>�nVS�T
�R� � �Ák�7���U�$�R @��z��*@��:)S��^�["G���7BC2��53�;|�#_^M��J6$�b�^l+)�3��)C��h
0;�T��zP�J�bB&i��(N��ڼv:���+��mnB3�c�{�������p��������L�N���qz8�{�$�	�l��=���?r�f�'�G���˔��ѨdA�^����Ui�`�鮬�����T`j)�+���tΐ��姕���Պ͘]�6������?� �� ����w���W����^�ǝ ��k�j����Rr;�W@��v�����X������W��j�%��L�M1��5ӓrcJD����#M��b�0>��)yET���Wŭ)'��]mқ%$�;�I���h�ة��ʭ���h�"*�1깎+��~�;[���l)���x��0q��SRH��\Faқƶ�%�$I+Vq,�#V���D��
U��¢88VX���S����RxGg��]�� ��نQK��k ��ڢ�؞/$`�u}K1��.��!��"4)R
�J�����Nv\��G��-��� �(Z��^;�ʵtXFq$�{�H�x��Hw��x0���(�����jK4Q�x���D�����P�4h�SJbL�(^�w|F�6�me�+�j�^��ԙ�80�ʔ+qw:��鴋���*f�3���Z}Q	I��f�.04�h�)%1��G�5���SJBL! b��(D�R�,0�X`����1�Tu���}ێ��n5��d���5B�pƲ*����|��"����$`��q5c�cU'dmq�����j�ьl�x���M�}BՇ?nYG�bP��H���"-x<�����x�(�M9�y��z�^�k!��8O��u��"��<�t�JWĴ~���(�	����I)>�6��d]8���,YT�27�q��#��Y�$]��L�,挱̤̮2�
���f�9* $Pӗw%�lL0�!�M���`�%\ʪ6KM�R����I�x@N��H��\�bL0!$�ݘ1Ƴ��kp�d-�U�1v	����Q�\�1&]��FD[6�T�F�����TO�a��S�����=�����?M:���̰����������q��*^p����L&�[H�٭Q$ e���Eq������4��������P
��/!��%�/"�/��\F����É����)�a���L/8���q�N�hWmmmmmm����z�M 7�^*v���ׯ��5�<���wd��!�e����ab\㲨�\C"�ib\f3f3���)�'�.��(���9~h^��D���:�&�L�Q��_b�֭���F*ʍɆ���F�(HoG%n�5~k��"�Ϸ��l:Ig�Y� �#�Y��7�����.�mN�,��sKpp�Ф2Y��%�����%��*����\��7��hj}2k�����Vu0�@J�?������*�w���<7�����<2����� ��Ů�za�B�n c����WI0N"�`*�kw��	�	�+���Z�{]�
7
=�s�ȕ�{+�	K
�kA��xjm ���u��u�į|M�i�	 �Y5ϫ���셕z�����d�&R�.�T6��NVu��X��-�R��̞��0���ͨ2�d�	��}�`*�j��YXh6���SJӅa���J�{�{-�t�A�Ri<c��ߑ|�섇�c+$ @ �h�oE(�w*e5����a�De>����O�Ӆi�j.����c��~ܵ�����[ �0��o��	��v��*(����N���C��Ҧ��>�y^[3˱�#�uO>�e�ʙ�;��t� (ip�����;�RoǄ�[�d�|�A��Au�I��ޯɛ���H�_���t7�j�=W�1/ x�q����O~� O~�U|��I�2���݃^�>j0���O���Q�<���d�,����,�c�e]�E�J�zo�\��d��d��^ʰc�$��0Cl0z�l�fm?�J��������|���9\`���U�n���ջ�v�����U��/ǥ�����I&�n{�HN�R!fѧc�V[\�6��ٔ�w�x���'��2��[�J�\�����I�8t��=���|vXD!���\�B����E�|�(z3�nF�����/�pN���^�������B)[l�3&m��֧������BR�&0���^�u���]�����\ۚԿ�}�ɪ5LiM�ͥI�`Bjլ���&Nw�ÁN� 'Wi�q6���pnG�F�qިG��
���;29����!�����"d���pH�"ee�qG2J��8��4'��w����,����H��1��A�)K' bU\��Th���׹Šx�J��:,�8.��Z=��za&/EY�y^���z����H��0��0��l�)�Z�@�'��'�
��q	�cY��ޭŷ�)@�b����5S0��a��J/kgFa�>h�-Q�t���b�p�A�긜` L0Řl �� ���|����r{�I�-{b�X�@O��@�m+�2h�9�H�k�ܗh����;$
��$*r%C��9xHenb՚���?�C�P��G����pC�Ò�z�g%I����(��I�l�G�dڇ�W��k���׵A�`�)	��t)�L
�d�uLO�|�K���PΈ�R�s��$�@ǫ�>����r=�'T�$��%�M�P��:���
c���C\/�)�\+�4a�;C�3��9FHFk2�ک+�*j��HE����|���k���UҌ��ƀm�b���+ϫ��\ f0���v5��"�5� �q�74^T�ܻ�*�,��F%#���^%�L��>q �JË�\���c�0�c����Y�_��lX[ո��ɫ�K�#�BT�4�œq<e�a�!������1��l4.S�Tz�P�,l��կ~���+ �9s&v'��07{�M�tC?
�|�xL��뮻>m��w��?� ��;���Ƨﺞ�H}v羈f�6t�w.�RI�
�T`=�������ͩ��QS�c���X~��xEN���������(r�0�1J�Q�����2OJDx�
�H�@���^����,w���'�-�lRM�P����Rs�ћ�M3 ���fu]�,���&r�1��8�X�U{�+�ww�}gQ~Y�>���|,O:�4d�����b���`'
!�C^��a�m�10�̲��B~:纼eR�^�"t1�J:�_=���a߉�Ȑ0[e����p�][�V��)j�PtN_��F�mV�_��Ʊ��R��3՟��,`�&3���hcc�:�q}��"Sռ@�^Q���'|����L� %j��\�I�.Vz�J���W��Mn�B���(��K���a&��oQ]���ڜ��H���W2�^Y!��[�"�Wׯ��边Z���T���V�����'a����%֧l�������*:���mlbA5F�[��S��A�U)�k�.��,�q�Փ�T)�85�$B��"�X��2JiH�j ���TU?�;���`I���lqa�ꪄ�*������c kf�K�Kz`j4m�ۘ OVU�P,NN��AU%���C4������w��)�A���s�@^��}��eKls�mu0ݜ�d�q����I��/_��qo���n.�2��rx�^K��^՝�K4�ɀ�`2i����E邓W Z�����TBo��b��[*�FXw-�ݭę�]������ÄŞ1�|�A;$*���q��F~���{a�k�1*�j���nmlDn��0U,�k��`:��6��{U��R$�X�M�/�I���|��.tF�Ϗw�[�a�<��� ��k�;�yPTm+�?��߹�x>�%|�.0?���X6�1&�͛�W�<������`3"x���_���_���b|��%�y�"j�$5�-��R��m�`�\�+EҲ-��f�U�ĬE�x��,Ò��C�(�f��r�R�K�*U�rH,�%����ݪ"��2�����T�Q�s;��y���_Qz
蠨�TeI�a\�$Y=�H���B���f���_�R����S�jt�`�=��D�F�t��	�)��+�v���|0褑�'6�c��W�]�B/���v�v���t:*c�]�F.g,�e2������-�)ݮ�����b�X�zz��-���js�^�w�|%W]uUo�����c�d���(3����~�g�8��gggg���m�z�~�����9@b��pE��EP�B��d���f���A�&R��`�v\:�UHt��/�Z�K?w��ۺw�����`	�������nI!D�q�zP~GxO!D)}�+b�e�,����W5��\�U?+|�g�j�n����	,R�C�y}ٜf�m���)���%zP�JX/�t\��#����,�UAtKp-}=�ގރ>hDaX�戱`�cď���:�Q���*뢘��yUo(�e�a�&$�:3.	%IS��6�Yf�G��cÝ��P ��x"��[�_-���mU�s���¸h`B	��R�I������+�ݼɅC��sJ	 �b��LH)tȹN&���ճ��Ug/���`��}�@�{���	�#���Q۪p��1.��,HB%x{1Nfw/r����R�LF�2�(Ւb,��3����'��[y&�]��+��'����$�F�8����)^1�����k���X��z1�9��d|W��э�u�Ei���A����V�B�|~M>�r+�� �8�1Ͼ��1`�p���������*g�݃Є�$�5��L󠵅�`x��+J�BՀ~�u��j�v��v�Y�g;��?�x"�v��po�7��y~i��,��#,Ǯk[�����ˁo��ȱc�#�]�f�����7��c����'z�s<��W��ö�t�E�yT�z=KD�N� k�C�d7�?��)�\�(��O=��nGPs℡�y�3�W�Ǻ4�K�ЌD]#A��j�{<}�A-/�������Ʒ�A�h7�7}����iZ��� ��+��r��I��]��7����Me�g]�ՏytO�φ7�y�w�=��ͦ^���?|t�/d~�O%��t��w�Q��^�>:�^�MF�j���Y��Q��xK��lc+j�1V8��.���Nec�ܱ�P��Dz��k�cJ8�s&�\^˦����F�gI����٥�I��}U�OS�,��\�Ψ�ScSV3�i0~����w�(@?�4����'�>"�?�ض_]#% ϲ��E�B�A���>�@����}
�Y�4�-���VD�L�n�1wJR��w�����fĤ'@�(A�u�A���� ��3�v��p��P{B��e���(d�.����{��G������޻����}��s����9��u��������^����I"���V�U�F�h�p�-
m��1)-�U'� /.^j�ũ�8��%�抝�ۇ�&��cW�J�XL�-Kbe">�F�soX�۝��1�ڒ���J��]�����t����W3���ر�C(��I7��·�2c�{QLm�t;�ƫW�`Iw?�z@�TRl���5��=C;�KJ؀�fdu�]n[�0`U!�z�kk�Py���[[Bʄ|���>����	J{�Z�}F�:�<����_H]ۅ�l�L�����^�@�Eh�%!��p�;�S%ք0�Xf_��X���E#v6���x����ktC�SbP�co�>�c����K1nk�M��SlC#jS�$x7[�W�:HL� �5Ec���8�L�E�;�<7���5�� ٽ0��p}�E}߽|ͱ/����S"�=���;?��y��6�V`�
��|a{��h?b��c�6@;EH�rF}�����@��s��K8���FjQ�-bH�����Z�'��inL�=&N�ٍ�+Z*uǊ���FEZ��0���/�p#�LB���n�dw�/s��4���ؑ'�&�5B��1zTثv���o�<yR�����"_!�G)cP��=�1 �������X�����8!�4��_K	U�œ'Or)�i�|T�~u���R�����Z)o~��߯(�;LQ�v(�
.��ۏh�3���=���1f�:���{�<��s�$���Ӕ��rne�{�>C�s�R�=|���k��K�(���I��R
\={���o�q����C=��!�CZK
uN�sJH�B���-�E��P���|ߩ�/7���Ѵ���e���`Z�L~���� �R~C�O}����RJ��
H)᜔*�R���˚1���(}S���f�S�T�������R��Wwn���_*6C!rq.�B7-\��q�wpK��v��,r� Gt��o�k@\����I��r���)m�GNp�Y�3y�=�M�����^+�؊Cs5�**���+a�0h?���!��	pR�	���um�a�PS�+(]��z)L�rI��o�ړmtc&8���NEԎ�A�e l�
��D�Y��X�36F������0�0�Ri@*��c�Mg�)����u�A/.KB��6#D�����ϨZ�����Q�c`e���*����q���+��9/���y��c�~��C���\X�O/r�&)�˽J�q��`㌹��#����W��m�'ܾ�A�P_[e��Ж|.BB�a��
�&�%��b�傋�Ia�E�_#��dC�iZC�z�xOմq��h��[7]�}�TM���V�Pykh[J��.��F�|�:X9m��1+�a)e��*�v̘�laѭɹ���hNzMӀ�yzzz?��G?E�D��q�Z�6���@9C$��D"�d�>.��tp�U��(y�wtjل�5^����m0�V�_eT��p!�|�Ϗ����n�8��Ws�m1WQFu�ѨkFiSE�s����`uE�`���R:�� �$@=��:���W��ԣ���0u�����$';	�	���F滋�w��>������^�_k �^�J�z�)�ۡ9�UO���s|���C�_U L��	�a�!���ŞƄ�Z�6�D��xr$c���l�g���Re�mD{��e��( ��c�h�A��@��`9�G��|�h&+R}�1�	І{�e�UW�V*��%NV�������v��D
��ԗ<���Q��%a�<�c������ �.�z��ռ����,MƤd�9dP����Nö�S�P?�
bț�N� �ْ�vÜ��9���juߪ��B.�s^1�5�3{(Gh���D�U/��a4OA���K�ћ�0%�������i�uN	Ba=�\��p|�>�OӞ�Tǰ2!nQ�\0�_�/HQ�Hn�A�<��n'�S��[���?��QIvP�]n¸�t���(D�ӧ*ښ�.�,X�Ÿ�&��Ǚeٶj1)Y��F&%k)۶��G5ETY����� ����{�*	���7-��yWH�֗uz�e��(x�>���G���T��h��@�#�-�w�t�tG�:Xo����'}��B=�8����������(����;���h*��̴b���ғ�S���V|_����b���e q��ⅸ�!�6��tu�����k�{ѧ�>��=���p��� qI��f�ur�%�����Рh��w�,W:�Kb��@,�-<-̥�l����:�rA1�x~an���K�'��IW?�τ�~��|A&\~z�|o.�8-�ɒ�f�>|]��k���p]I�pVn<�W�t]w�F�!pg�gڇ�f%J��1a3P,	p�Q�|�(t%i�F���&N�L����+���l	���Y��o����{�ӟ������p��?�����C-�:ӷg��/1�ǌ��g�l6G�?��?����oR�G��ö/���y�h�sumQ�.~�V���2�ӱ��X)���r�#��c����D�)B^t>�Q6���)6���ͮ�Q�kQ����+"q�5�z�+��E�8���z�ȨgV��z����3\�q}�W�9!86��|�رc��;�;��:���(�J�3���q���1x޿���oV���^�>\�ַ����(��hY�r���h�|���}=��tT[,����qG�Ǚ�N�Ԃ{@�v��S��ه��5�����0?]����m[�"۴��b���TIaA�r�ł'��D%��J�^��Q��.	4��$ۢJ%/I���*{�1��R �	�`��&��m��Et��O�e}�,Z�#1��]��(+D���.����\����N./+a�m��ܘGW�oXds2�y�nHQu*��Όீªz�鉨�J�,�7����L��t�4�����`d��z_Em�Qfdn�h+_�}j��0+3#o:ZP�)U|I����)?R��s�\v�e�K1�c��.�htq��ru��|��Ӿ?����掻u��eY�axé�_���O��̽{���2�qMF��z��B;��&�]1�����\o"K��{�_�~�i^����R��J]��(].��d[:Fø��������S�(_��7�,L��3�g�:��mE����(�n�lD\�F���'4�%^��N�y���J�^��;f�C�ڌ/`{�|�-��HnO�(j�d3j�g�z���k��c�w�DkePxe�i���J[�CY������B�A6�J铸ג,a ����g���"�n���蕻w
��h��"��hG1
�w����~�7` ���¶+�桾` u���r��B��>OAD8�� 5Z�O���j��f��4�����1d�����۳gϞ�a�u+�a�S�)�Qg-]�p�ќa�\�d�4�7
b�:%�O���LR=�V��f^�9<7��,U����m<2_P<@��-��q���p�f�p�.���l^��{�(�m��v��t���aǞ[�!�	�,�?D��e펨q&�Td�Q�m2_e8;�WV��38*!�IJ�8H3?�8P�]� m��
�;�&�t�Q�s�P�O댫:����{D����r�8�9�#b-憣SC�$5I��kZ@�$���j���p�X�+�i��ǚ!���?=����b���#�,�B�ޫB
0�N`6�j^!��9]�|���GiU��K����R��2�5E�����ɋ�U"��b�e5������i����2�a�l���$��+Wڋ� 	�>�v�]�zl|,�^8�
M�)�~��,�^;�
�s;��S�T�Y�'K�gJ>��]����V6�N�C.r@g���٬��ѡ���j{���\��z�ͫ��*5}�/s��p8�Yĸh�N�	q�,L6�E;��b�����w�suW�iO
M궩n{�M�r6�7�Öh�T�, �l���u�H:�߿2J	��3��*!Ľ� Ũ�eYUĶ���\%�v��ֲ�Vݿ��a�}{4�\���`��b�t���.�<�sv�'Zt�i���I^��z�R�캦�����T��.M�/��\�u{��k#?DY��K��p���XGpT�<�0�(6�t:Q=i�e�?&_��2X�'1�3��R��I#�2��m���%�Ж��-�L��-p^�����߰��lD�c��V�f%�4K���2�.�@:Ɛ�B����� Q?ѕe8�c�\8|	����#���|f�}��!���B�^,���g�T�K.�6�#��:.��ٳ�'�G��#a_�O6�ݑ4��>�/�f��.^��������L��p�t�L��S���#��*�J�
X��;4:
k7�gR�=*�VV�?��7p�tK<�Nf �6z��y*�gهT7�5�۶&�KOqiqǎ��*^@]�׶�X��a9�TO�#G�����?���Nh��LT���h�8�Tu���A��)4X.螧��x�d(n+ԯtU\�ȑ?~u����\�CK�\W�dY��5Y�t�͉��\��M�o��ZE��͐S�g�TI_��`����(�$���:7t����	Qu��!��$���k1�O�~������s2�m_ԐF>8ʲL}���}�XƘ�@�QWΌ�/�sf�E����=�n�'X1�@�/�D�~y>o���|��s����C?���.N[�e�>��@7�!�h&$���x;ͤh�X#|6�4��S` ��J�N��n�Ue5�w���CU� ��˷�z+��k��S��r45��1�� 9��*cx<�0�W_�\��>7��?�Bab�X�	�n��9-WL	�F��wx:���,�J���=Y~Q��`�pO%��.έβ��<�h/.���Z� �&�B���xD���X�;N���ygy$���ɴ-��t��N=�B�c��ig�#�dy3L������=Ş={�hԮi^��.ڧ�R���!N�����OH���w֞�%-��HK���S�������~�
w�E�u�#7�T���k�#D��[_��i�����GID�V�c>g,f�)%��Fy8�n�3)g��73z�%�`�&�.�,=�[ʞGCn�퀭G½�@���ڏR�L��k¬'I�	��G���\%,+�C����p[�~ぽ�N��z���`���;����o��O9sw�c�dJ]����I��F5&Pn� Y�!J�y�~[}В!�N�V�7��с�A�N8~�q�&ٚ����}9=P�"��y,)X`L=F�?�v'^R���x8I�ia��4��E��wS�D��,bI�zN���%��%	�6�r��OK����`h1��b��g�*����t�y�^u���(�f��ש:��#��8���U��NM����3Z�K��ϊ�Eꙁ����O����m�������6�ۻǪ�
y�؉���=֮}�.w��VY��ި<�K��np�~�NX�R$1R+�]vX"EC�L�Zјg�Dk������ݵݵmA:����5��K�~�"�Dy�h�A��rŏ�8��%����P����c&qbt�C'ݳ{L�@]-�>�S�3�i�6�� 6k9�Z� �^��A>���	?6����f��ñ!2OV�]�-%�%EJz(�'@0S��)DU����R��UDH��"��k��7V��]_�e]o2iV�.�!-�c�O�`� �uH�T{H2��C�������D^�S�m3��C5�3�ǜ�n�%\�5�냐T��A.3�Cm�w�R���+��Y�\"V�C�T��@0QM��ո�o4i�y���p(,�0d���WU����E��{ '�t}�I2;����[# D3��i��S��j�0�*ހ1fY�
�X��Z.���9��6
�o���u��iDh��vk������i��u,�qv��w�����S���Ā�7M��z�����f���=�zxz@�����3�asQ(��{��W*mD}�u ����P�����U�)T�J��s�� �N��uQ�C�r����a�S��`I>YK;��R�G�{�{�JV_�d���WD�Z�s�*����tṹ�*����_n�PƼ,a��3��0�yD�H*0���#�%������f2t�<]9�����_/.�Ŗ;s�X�U�4�f�~5�ձ�J Yb�[_w��t����	\h^0���T������Pt�&n���P�iWz���CGѫ��R�{4�b���ż�K�wL��@:"��џ�x��U�R˃��H������������@�����W�*��1���`��� W��9V�����,*�)tIOU'���~mz9�T~�Y�O~�X=������޿������3r��W�;�e՜���!sɃ8]�-<]�P�-e��p��A�zso�"��G�	.��@r;G}T�C�0��B����ieT#�M�0��m\)8�
�q(a�,F
ܠhM���{��#�Xn�3	W,0�W��{/�?'��i�G-UU�5�2�=C!D>��&��B����ݦ���4㪢�W�������y��tV�G�(ѢA�r�ڪ¡苉�0z�G�Dc��-x��l(��<9۝�pC��&�#jY4���jYv5�t���vӟ���[���)��0�`|!0<��f�r���RF�0Zƥ\.��n�{-k�ԯT�7��4A��g>_?�>/Ǝ;�M�6�S��V��jTx��:�������\�έ;N��8G��Ͷ_�����[Y@���t4�B��;���x�B�k���O0`.�?G���^x�W�_�Le�57_u���]?� 7��ֵq�?̯���C|�ix�Ǜz����%����6���WGtK�#t��[/G�=X Y.�7�{��'
l��m3���g�V�f]�,11�nOM��u	/�ބ��~��;
9>�L��b ��c;w�\� X�	�r�`n�����B�R���k����OL�fQ�,��N������-]�|���tV�)����x��W0�/�y|�e�38�G�0�y�
Ts���4;�vg���pjD��R�0�sF�΋�V}�U���f����mo�!jH���A���K����t�9�g�/@1�h��bD��lmm}y�1�F8����r�D�q���#Q��?���c��j��OE��5�nrh��i�"�n�8�DJ͚�5�	r���$u�)	�c�^]� �dzy[�V*e*��r��y�β����J���U��u*u�c�bC�J�4-�4��t��\�r!���\�(;<�;Z<c�O���$�"��`�a���Н8ᎉC�����o��� �l�T=Ȳ�� ���G`@9&�M���bP����d����`���C�� �/�@�z����v߶B�s+�l���I`�j��D���&MtX#T�� �+@*Pk����*�O�@Wd!����<��77�'���D̀G�Jň[��g���M#7��x�'(>6v��k	3�D�T=a�}T��J��6�c�R�!1)�S|-Q���G�S�]'"E�"��u��"q���;��|��YmC��m~���BCuq1)�ҟ�	��YG@�3�B����|ZC�4����=Vi���"L�6��������,e�q��
��>�4]��濂���EJ�����U�W�����$�R�O=z���z���fs���_/�RsW�'�Z���;�1�t�t� N��W¿N�ML��j��K�(����0�Ax���c�~?����������7���yùvҪ���2\$�LQ�%��
Q5�����n�J��C����+�U�R%�PPJ2)�S.+�jmY�{�e��^�ڲ6�ԍb�&���i���P[��dR2� ��d������M��z2�{׶�e떥��U?ϋɠi�.�Ɲx]�A��1E�*;��X�3Ɛ�:���0�@�F��Mx,��p��>�vPԮء��j�9\	|�O$=u��R?��Jiȁy<�r��!8��������_��n�MB\YZx�o��.O1�sܤ�6xoEy�n�O��g�m�c�6����a6D
�@�����tY�:���ڨM�fY3�VK���'����#��)�u��ܺ�\ͥϝ���&ol����l�v������ܹ?�/p6��>�O��Y���-	F:�%%cF%F$,1�xeR��qd~Q3rE%����[z�ѣ���&��=���Ѿ��rR��|��d������}�ݗ���3g΄2��\�?�RJ/`U;�֋���zW�t�`�S��x��vrʃ�aG���1CM����wvQ��tzz��`p���"9�I���#�}�t�U��i�|.�%N�m	�<�EF���\� l��1:�f{Kf�n��l/�B����{�w�w8��#��`/�]�f�g����uO[x���H�>{��&��GҒG $��#��g���G>��_�%�cN0fp0����w���f%w��Lt�~L���������w���U|F�6E��ف�Ѩ[à�I�Jrb�ѡ�,�/��w�e�R�x"���Q
p�;-/2ީFk��J��=����?���n�	�w�m�`�)��`
�:�g@-`�rg������c������t��R���n���B�F)�oSvY&��k˱�$ �j1� �(��(G	䴿O��C�	���,Qu�
�]G��3�]�r��/�!U�(;!�����Ά�Ï�"$���2�<�"�Q���z�hE�T�
a��mR�	ǄQ���f��~P���TIF�r�z���at�z�0m VY�(��}��V�	ٴ��a	nеM%��H���g�%t�+H�.�r����������Bio�qa���(�d�Y��iR�\#��cR6��Ǩc�ɔͿSX]=��p��FÔ���ڥ�Yۏ�bl%U��a�5r���3����J�������Z��N���J�T Z��)l�L�x��$�ǩ���QM)�j�x}��Eń�jL�fnߢ�k������F��u�f��.�7���F��.�S���f��JL��`�vι ��]ow��\ �NزP����*�TB��w:�ǔoE�q٭"	%8�:�:(aNפ'G��y���t��ť�n{^>YYi�����/�A������=��At^����7`����/�t ��]w�Vk5߽����n���?��|�|ww��A1��"f�F��vO���bgf�#l<9�gc3����K��``r?j�Z�����\�H���,�.Y(04���Q
�_��+|���m��#�j���>j*NT�4>�6�p�r���(a�b&�r�nd��7&�m���i{H!rݑ�Ns�%{ws���>N��AK��5��CS����ͳ���Ž��Q��"��h���(�y���$I�q�&���&�2M�ELኒ��n�\L���r��9R�Ȳ��⪅$�JPbV�a�3oH2Yu�͍��\%�`���
%[o%(���3;[�$�?�n��\�<�s�[[ᒤUgg;�2�$��u ]�^�_��:.vV9Z�\	�&�0h�����'�]w}'�Eqd�Lo@q����	�9K8��X-MLLY2r�bΐd2�-ӸbuuUh�qN&
X�>*""�"k7ǒw��]�8S�A�w�R*:��%�˪�`ξ�����{���>�]t�_�z<9��TH0o��+O����`���&_ߠ{-��f{�e�֎�D�S����=���(�׫��r/��b+�������UdCU�2+��B�U$U�B�|6��N<�^㯘�q�⸮S9o0�(�,o@c)��R�[�+��Cx�kEP7��\�s��c
��E���O��9U�ֵww�����C�L�d*����f�&��u�L\�l�/��Vc�5)؝6Lr���;��;���jg�DU�!;�����]��~�������Y��uq�����lߩ��نy���2Va{vv������z����7��H������z=���ҷK9�d#�Yʺ�Q��p���/\�Pz1�Q��0�ԙ�۱ B�g[P�VU���M��i�1_�p�By���\"���g�b�1{dH%uř��x�'E4�Ρ�>��A��Yd�����=g�>�������Ȃq�Q�6�F�q�0����(S8�lg��1��8�E/�tBr�G�$���$�Fbze~�$�bҎkc�k��:ێڃ|�8�8C��T�8�_�c�ibr�(��� �]4�a3�{��֋�^n��P2�$.��1���A#��`�3��E7���ɓeYPw�A�#v@s����.�lZ'Y�j`�@��L'톊����lZ�+!���6)�3�qV���<�wTP�p�UW�?�(�R�'0(��e �E1�����m�"�/��n�����{k�R\*��ɩzy�T���ӧM���7ӗM�
9���H��a�����og����+�/`�������)-�g$i3`�쀈(�6�e����U��0���-��,�����b�F�}k�h �b�������s☳���\�j�q�f��a|E!���%�v�GU���O�C�����_�?s�-���İl��>]׈�3��ͽ�i�f*v��3Vl�U-V��q�$��%�+4s���d�Ga�C<��Q�/[	I�C�ʹ�&�8J���Ŵվ�r�7��y��3�]갎l($[���({�Nl���ʾ�g�M��LE�n��D��v�� ��M �b���)�r�H�岑�B���.������� �z$�;y�����J�L`��	𼪲���ROp�<��ŋ�1��4h����@�P�	�c�_�!2��M�S�d�E��`�Şk[�bq�7��1$I��4s�Ҵ�q}J�(>|���8w_�� f�"��%�/oK�8�?��L�L�Ŕľ/���ZpQ|�|��!�����M��H�n�f�@6��:n'�x�O*��<�>kDa$�����/��/`�t�5LW���V1���Up��]w�&��`L����8&��i��h��"gvM��v�^;�ם$N�qy[]�a���I|�qR~9z�,�V�E�b^_�m[�?�����5�/�g*"2fH�2���j=�=0���i�N{�r$\�}3����0I�(�z����E�`i�����\��0���C�Ƨ�6��PK(-�ꦱѡ��b6�xՋߔ���p��H�8�I�KnQb���[/ƈQ"�s�L��C�0!X��F��^l�����b]�������Y9��¸q�EBk&�l!�l��
ӗ�J��0
1G�!�W�fܽBa�'ħ�(j�T�^
�H۽��ǻ������Ҫ���r	P�ˠ8�9Y���Yv2NT�?:��-&�(�Qcq��TV�u�{轅z{�KǏ��������{Br��� [9XKᆲ'��a�;S�'A�B#����/k��O�
�iG���ۛ�>�ӟ��O�M)�CH�l���08�Ǟx�����$�%���R��(��U�X�0��H��t:m/Y	�	#����R��SO
*��:IZ��`1��ehb
�=|]�n�s
�y�HK_��4�>wP�!���V�����s(E<��eiѴ�nNR��KjS��i��,�T	���M͟O&��;;�`z��/U/�ވqԽr)s�f�ы:�fKWvC�߈�_D�ra���J�^S2"c��.A�����O��@7�W=��t��um ���%�.��!Y��gc����emB�F�0���e��-lo&'lsҰE��W0Yr,�����W��GS��fɻ�k���,IDS{
�f��S1�Lk��$��T,�V#`�:���1i��+�|ε�n�$�Wt9Y?��3���v���,A1������ў�IS;�JB4�r���x�@_��V,�;����T�i��fX�v�ֳ���`m�Qem��@o]R�}3чCMa��<�`�g?T���' �րc�|πݟ�QmE|P�;����i�j�%��=���7�'��'X�F��'m!��
6�oy�H	�	A�u����߲,��ؼr��p�q�]�H�e��<��(�G}ߧ�=qy�0�>��r��Ǻ��Y��Qr�k6;3u�����}�M��;�D����Fi
c�G��P�D��iO͹݀�Ge����$�EG,����`(/̟��K�鹹�TYh��)��_��U\M��`&�b�U\]l���3��[Z~z:��t�.q��f[R:7Ww�H��R��h��pl5��[R����9��ڮN�ђ�i֭m��w} �Xy���+q����h��Nv@��l�������&��}����z�R�o1�ؑ��"ي\qH�q@J�;�`����M��qqtw�E�c#冉��q%�գA�;�#5]sy���J�'���atɲ����۷�i�x�:�2��)���TvYO�F�����هC?W
�&�Ko��f4N���?�,��Z y��6(�m`�v�5Ӿ,���"��rƴ�Z��"E?w�����O�u�Z+s w'\�=�̭C���F�ǽ���K����;�%a�(w\����@Y!��g#I	e'mؒe��ts�~�^��&7����7��΢�[ڷ4w4ܷo'���	�/F��CJ7�8��wRr�bW�n"8����{��#�[�>NI[���a*���I�G�IU3!#ч�|���2Uo>q딱JB�D�bi����)�v�P�Q�=pʶc��{�]��ӵ���mL�o��~��y*Q;W��}�4ro����q�4s�ɺl��S�sy۰se�V��7������릙��%+�딪�)��8�`���o�E�_����JhY�+J�M¡��T��"8���� �f���L!~0=���L>�33݆N�m�%:��UjA����]ٵ{f�ٙݻV��2��S-^LgM �97[|j�����޹�)��ۄ�a��h͡.:�Y����y�����̩j�`jg^�hqnt�����5
�z��3gZ�@5>~���ޗ�����!��0���q��"+��ox�j\��F�^Ǹ^o4I��|J%�{[�Khb5@"+��F�h�0��Ȼԡ�����0>��� h�@p0�3��.���ۯ����:�r_�_��<�Q�ə���د��	U4c��Js{�L@t�SW(���̧�:>��L͡�(�����M��yC�����D���V��Lj��|���Z��#\�/�$��q��g�j��������*X��+�n���\Q�t����[Z*]� =��w���"���%)�
��]E��,�-�"'���Кp��~f;��N��_��;f.����[�`����y6/X�e&y�3�.�@�,��R|����T�Qpi��zG��9q'��e�m��B1A|�C�DoF�GZJ��I�D�
�����;*4��L�T���/dc	�uKn9��i_ �  $�+$�q�.�	�C���(��r��EQ~�1�à�sE� q 7Ĝ_+�\���F����=,������֧'>޴��|���0�GQ�axP׭���*��C �XQ��`+�`l������������ֵ���yj�Q�"��1�W�U��)�絖[7�����'��t@�p����e%ynl�%��9��ƅ(��CQ��l��m^o�$e��Mjh�?�c=7y��o#K���jR��=.�u�"��*R�G����J�A��렘�#^�1҉��-N���Z#:� �t��0�Ս{$�^~a��k��Y�/�K3����W�������}0"X�ꡂt�mK�4<U U��~,.�\�N�lg��s������N4������K�Q_���;��������	Y����,'?,3�}B�zF1�gxv�Y�fi҉M"�s���Ů�\��Țe�,�O�i�^7��?m�"��Ǉ~���
�_�Nt$���}�P۬nA��&�Ǹ��k�񵗤�G{�@��_��k�.òĩC~ǫ�'fvLQƖ�����`���~�>�/A�V�o�4Mu��Jv�;x���Ki���¦}iS����uX� �}��-�A��M�"�|ԥ���G�׶��Ӵq�����������P(��+��ކPܹK�3�<'���)w^{�f�����UzԔ;���l�ʚi&HI�gi���Ə����
���X�h�Zŭ���	 ���6�X�3��i��ZM(���q�@��g /!�V����~-,���F�*N�H�qȹNΠ;�*�j��ک��r�qnGi������c7�����9P���`�rq��?�QEz�/���n�J�ƻ����i�Ϟ�?FC���e�~��h���k�%\�Pӥi%^�����D�6R������x'fi($����}/,.&Պ��3�� um)θG�/z����:��Ά�gZ,���n���#Zsf�@���>o@����I�.�����V��������W:Ȱ�Q�k&����>S�m�FT��ʺ"��$Ta#�Ѓ��- ��k�$��^g2{��5
���W����=���,˙�wf�_᝼��K��lmm}5G!�4_>��g�A�� �t.��
7¢W߸����(�u�������NH
��A����p����F��sY���`����P��U�sj�)/�!U��-u�Q�&I��d�t]�'_��S�����B��u�XB �_�͍-_�lsc?�F��q���2�M.��|��W_�3���}t���+�����uc;(W����ϵǾ�o<;ZpkZa�;��2�F5B�-�l+O�����?���&E�J3�_��C-^gf�$�@�k��t��:�7��֮��E�Υj!A1X�R#,f%g�UD+��Q�����	2�]�?�\Aj���Wʎ{���Y�5ƴU��6D%���ë�HF��N֙ ����臵�]FVv�wcW4�:q��N'���h+.�� r�\_���[�E�:�ի�Ft(o�$i��L.T��0W`6�V'Nt�#!˥xr��~����"����]@0�~��dO#�?I��T��muE�H`��5��%�8�;U�@�y 8GdO����'�A���;�h��/��	s�k��_"d��&:�S5�%T��+01e-˾?��!i�]���w>c��!B�y�Pj�]�$���tf�#"��[������ҁK��	K��Lc׮s�v횘ea��	̉�����RC躮��R{r�
���]S �u˜���LR.c\.'����#%�Qö��(���BϘ1���+���Z������cLgl�"��W�AU�휤i_oj�<�6m��a���7��*`y۶m3'���,�=�>
/��Eǁo�s�����2�M���]J��3�S�	g1h8��n/��hؘ�k�Z��j�0l�8b�[�e]+&�p8�����p8+:��QH{�L�cI>L)1�)�U��K㐊�ŷEK�䌝t�f�s^u�d��k+��m�d�t����$Y$}V�J�Y�h�9�fL4ҋW4.��tڅ�i�X���	�R����5|e7��jT��ZV����ڌ<�R��[B]zI7�Z�2�_��6Vb�k\�V��}&Zm�� S��n�z��7U��W��ľ�T�[��}�Y��bcB����t�֛�S@)��m�b��w�]Ao�vi������9ة]���9�!�"̒��&��^�HluFNN!�����%����[7X��WA����p�k"k��QlK�>FW���{�n]�d���x������["Vp���:n�����l`ʅB��p�-��g�&�'�%�pO(|���	���C��d@���A�}��%o��j�u͂�yP���P�	�#`{l1(�A�ɂ�(� J� �wP*�@��ɂ2A(� �~�P>*��a@�P���P�	5��j߄:	�����gA�,h��}!7o&����x?
��#>0�����%h�VQh�ڜ�v>h� w��.��^��n��=z��3<	�(���ǋ��>�������_������{/��
�r��	xa�&`P���� _
���a�f�Q]a��N�'`LƮ�q[a�&���v��@O���L���`�f��^���Ԁ����-��nX`��|X�
{aI
��!�,�����V��|X����[;|�~�?��'7�{���0�ℂs��M��	�w���q l�
[Z��8l�ÎYN��/�1ع"y��s�=�`�)���A;��CV����c����	'���,8�sN8��!�2��Bb%\+�6��n}�� �
�
��*p�H�7����u�ƇچQ�s�CԱr�:Q��jE����/�ǋ>:�>n��U�'�� �܅�h�����v�k�D}�Q?`�AU��4d+����h��4�Q^4:��7�X�C�O����D�:hrO4%��hzW44���@����yh�-���bZ�
-��<3ZfE˞�^�r+Z��q�����Y蛁��V�V�{��A��V���4���~���M�_�e%*��_��oI��/Zm\�6����A�h{�C��yh��v&Q$�vE��ch����Y(�DG��O��С&�P�(V������Q܆�7�a:EGF�#O��s�8�DtҌN�S=��v�t�Y���G盠�qt��.��E��\]���q�p�kvt-���эwЍ�D�z�[	t�	J�Q2������н0�=x��ѣJ�E�(z�B�O���艁��@O�t\�t���b���f3���o0k�:�U��y0� �ys���`�(�g���r`�1�� h��`�0X���E�b!,��5��,~K��s�dK���s�TB,�K��2I�l,7���
!��+n�J����?V=���`��X������`�?���Xw	�+���`�	� 6��l8��F��l�o�&K��lv�'��̂�B��Ol�����-�C�;��N)�s� ���n�{	�~{����u{��
�9�}�`��[��3`�=8x�p����p�6�G��spD�#v��8*�N��_��8����z��8�N���V��58%Ny����gl�Y��.8��=������8. t��-pQ\��%Sp�\����Upe\UW���p�\Wן��ypS�\7���1p�ܾ w\��}pWܽ �����������`B<���#��x4%������1x��
�����x6�;��7��xq^��W���x������a���]o��;�n������8>	�i|:�=����c�gp��8���؏��4Ϋ�8o��ݏ������8�S ���g�/!���q�q�w���
��W'D*D��/r�#y�G1{�X�Ql�^�<�Q��(n�k��G	%���B�|(q��8JB��!ׇ��(y���R�C�ڡT�Q��(M'��1J[E�(b5����(]yC�J�e�2�FY��l��/�F9^�\��1���Ey��|�Q�ۨ�uT�2*t>��lG�B��(T�=*�J�Q���t#T�2*��π*�P�˨�qT�<�<	U	���Q�����h�j6C5O�Z�P�ǨveT{5��չ��G�&!����~nT�6j0	5,�yQ�0jDMZ���f.j�5o��_G-��Q�h�jj������P۞�]��:j@�ߣ!�11�8uʂ:�F���.��q u����G=���YP�¨����Q���o3ԯ6��
���B�4�>����Cф ��M|�&�F��є�(�E�,F��дfh�w4}�@3K�Y����hN#4w ��������ZT-��%���QhY-�V�h�k�z=Z��ݎ�G�ϣ!�q>�D��-���Qh[�m5��G;�hW���9���;���с :8
�:�9����.��:>�(�N�F�:����Cgn�s�����B;t17��]ތ�FW+�k�����Fut�>�D�����ѝ�nnt߇�у���f�h(z�
=Y���G�N�Ћ��U;�ڇ�Do��w��Їh�17��O�����g�u�6}������W+����cv�9�����<��.�����������_ƒĒƒnƒm���X�qX��X�X�FX?�6�ET�"�bQ>,�1�n1�=���c���2��2v�2y��X��X��X��X�0櫍嘍式�^��u�|.�?V`6V(+�+r+�+��J�����^��@��@��}���\�����v���U����5��O���y��^���5�5`̓X��en��s��w�ukÇ�Ѳ 
�B�eP�'(�yE=��W��gP�7(�0Jh�?AI���$���Gi/���(c6�쏲����('�rAy!�_�
6��PQ*n�JΣ�Ϡ�Yh�h��Z�����MG�Ch#h�d��<�|��;?@w��=tout�� �6z�7z���e�������8�Tz�3z��\=��	z���q�jz����fs�vo��x�N���_}D��>��>�>��x }�}�}�~X�~<�~y���c1��>�+����������i(4mi��VG۪��ю�hW����w�D����������dt�1:Z�CǷ��!tj:����} �?�.ރ.�G�O�+o������V��=�}4�#�5;���ڍ���e���ep�p� �8W���q�ָZw\]�F�����	�z����q���|ܬn�7�����­��mܾ�Pw܀;]ǝ��.����na��d�3
��������}�~����?�5xp���Ç�!<
<*������ǎ��j�q/�	Yx�l<�0�����l�S������ó�����9���7��x�d�p2^�K��ep�8|4�X�#�Q�q�#8&�F���8n8������8���\��L�r���X�7=�1Z	���1����q����>3���'��?>��x�oa����38�o��LRޯ��c������j�D��`��dky�L����mMS��C&b�e�i�]��Tn��m`B��̧2���|6�.[�^��#w��6aB���c"�z�w�:ٞt��	]�ї*�枪�#���J�X'��5��e��N�aE�1�z�Rϖ�r�k�0:0����?ր��V�lC���������^��Lb��Ż14��#Z���9���%�`K:�$O�Y�i'O���%��ǗG��=��ϸ��}���8�Ҥ���ǆ8���)y�����;���,B��|!ڣ�ѠH�ܳ=D��6�HH�a���['��z����3Ձ���

wOF2     c0 
    ��  b�                     6$ `�P � ʃ�˃*� @eA���QQ�a�I= �j�o�����_����q�<�<<O�V�V8�3�i9�j ��4���R�J~#��K����'z���l���I�'T\ŕ��"���p�6���i����ÎeK�>�A
��)q�a�����?�"��>rs\qR�C�����i�+x���5V��5�FU*u���=�A�c��I��r`3f-8;찜%R�g�s2K��dYK��������J#�,K�ĎKK&��i��%�n
ԓG]�vQ>w?���S?���L���_ ��P��Y�}Z�NU�W� ��3m�v�����鍗��.J;<���e)����/	��.h��(UZW�2r���̬���5K��9�7d ���`�``��L��/��΂uB�R�BHé|��kat���FAc ���p������ �\.�U
�*���!� � ����%W
rOi�a������1���s�6�<�8���^����ާ�̕�}�(I`��5Ƭj��r(�L�du��Z��nu
�1f_��ȳ��'�GP����?��~����S��@矦|�������3�hFr� �Q~��V>X>�=#���I�M?i��u�2�#����uq+����O%�P��b��%fq���z��e=:�V��^�E�^�5T�^��5�����UB�pTˇ�Z>��1�V�C�Zˣ�5j���� �@�ʇh�t��4c�'�7y/-���G7~�+�ªˇ`-O1}��j@��3�����V�ǳZ�P�|<ܡ�����W[>�9�S����=�7��[>���R�ɪH��J5,�(����c����x����ts��!h�>sk�����^mi��:�]kexV�p��fk���i�+�;[�������|ƣ�j�G��V�f��������{�����vBï��zԡ���<]���Թ6�Y[��J|'h����3�n�v�Q�w�I��v�Y�w�E�\v�U׻��nr�[���;Gw���x�����H����O>"������{�}���@~,w���sECqMQ)Z�)ŲbE���Vl/z�����7|\׸M|�Ou�!5���?L���4,�H�+MLӲ�<�H��޴/�H���t1]Iק�R-===#=3=+=;�4�<�"�.�1�9��Ξ���s�ƾ��l�~�?�O�_�I�-q$�$�$�J�KF�%������RUjJi,md�L��2S��� W�<�G�J>�w�!��F�
ZQ�hu��������:P�(���u�Nՙ:G�^ݧ����zD��q=��������%HhX��E��x�b^	��W�+�5��x[���[?������������d���������'��� ��Td$;�iAKZњ6��=�`��w�6Ȭ�g���x��Hu�#����1��x '.(��jk���u�}�~�	=�����5����W��������� 馤� zV�� zR�W�;z��Q���Ԙ׹�\7��sٜ3��1�g�����d6�Yk&��G|]{ӂ.��������)V�S3LL��ń��E��=�nq7���>ם�w���|��7�����&7������8��y
�p���y �epN9��e�@���^��{4=<�r��t˩��-�h����s	+�*�+�+�+�*�+�*�+}*����G^r�b�e��L֖�����G�-����w�lf67��M�&g�����Y���o��q̚��8�cC���Ɩ�o���.�N�ē����?�߂�b�n�:^N���1<3���x*����U���0��u��qL������h?�%�v1݋���g��Dh��q-Q�_�N��`b��->O9�ള>K4�D=����ǌ�N�w��r�g�&�h�6��!S�{�I}��O4�`C5�p#�4J�v:u�+�6�X�7�D�L5�t��6�|,��R˭��:�l��v;��e�}�;�9Z�i���V��y��y��x�{��z�Wx�Wy�7x��x��y�wy��x��y���i}v]��r���t�{��ƌ�84`2�	�}pf �A8b��cf(��a8a���Sf$N�Q8c�pִ���yӉ�M7.��M�+f4��1�ތ�fn4�q�����D�b&�]�6�����9���:��~#�D��Aݏp�}�M��s���>8@>�#�v���!��O�|�|x7�~�^��}���T�w�����~�f�p������F��M14P,o�X��[�Slc���y�/z���J�2�ȸa���ΰ] =����ǧ����q0�Tc3���P������tR�F�@p�4� o!o'� �H`&��"M�I��20��$�H� ����H{[�`>�h$���`!�"XD����XL��t��j,#=,'�0hv<���,؉�w;@9�s��`�1_� ��.*�]���`W�]T{�$�*�s`���>7����m�-���~j��˰�����'P��.H4�H��� J��I@)�� 	�� ��$	�$P$=$��[��@c��@��@S�rlmE���
HU9+�� 5�_�l1��4i<
�5H�y�@ƀ��+|�j�5 �cX2d���\0�����ȅ�×+ �����<`�}�}` �G` �w`����� ��8�Q0�h`(hE�� ����#Ak�6��M��I�=@{�A��^�: t��� � ����̰S ��ʰ3���.N@�ݠ{�٠�0� 0� �0�0�� �(�Gr�� =	,=e��:�M`1�ml������/p��8I�<�)��T�t�_�8O�1�@�.R��=�����L �P���!�e�N�nPփ)���&�p��3�C�u����!�Z�Tp���!p�\M��]r#���}��N�!��=�6y���|>&_��o���1e��FQ���{�RQ�D�"�B�&� J_Q�P�2��@�9�΢즜� ��(���aH��X=	�$Q�Pn�r�RS�۔�<���%e�(�P��e�(�Sf��@��(�Rֈ�O�,�e�Ȇ��"Q���L�&��@'��E����([E�a�xy	�6/�2B�C�<��)�D>��{�/��� ��sP����rD�o�"���� ��6hv���E
�g�.� �n���� 7v����Fn�)�Հ���kP�[��(`ף ���)������a
�k���-`w���[� � v����݀\؝��ugAn ��Q� v�� wvk�:�nD��ݙ�vw� |c�e�{�I�_�������@�>
p%�ω��!V_�X}b�%���{o���% V�@�|˧ ��5E� |�II����$�<;��C �y*���Z�x셞T<�k���(V*�'y�I�q�O� BYY___}���כ����򾅽��!,8�@4���t��C�v�ݻv�ݾ��n��;�m�̧/�?���7a[��1 ;5.yQ,�X��Q��5��6ψ#by�N���u'<���fz���"���$�?���	[l�\�T�"�VA��}U�q���(��;D�1?m�6��GX�܄؃����c�a��M�G�&�3��Y�8i���G���k��݄F�0"�dD�.��%ї���f�	���w���ע\U�5�qͣW��`o�5��A�Al�RU�Zsy\�PQ�M]�+���my�7ndD,9P�Hk�A�`>��c�@210>��y�f��;	�蝵���?IS�����]>��M�1F�s���yC�)M�ҩ�$��	MKq�ͤ9O`�#��8�MgHj	�x*���4 ���� y(`��Q�I(o՜1���BH��!%.��������k���בR\6�M]7�1G�/ ����� �����]@���oΉǢ�'�>�X����$��V���S#��'y��&����~��x�����xڇ�)W�ԐY#���8F����r��wr��#�1�j�-�0���
haa�R-$����|���)V�����6�9.��U�<�3K�r�*b��ø������O蠬-%�����/��e~N
�t]��҆���u:Ѷ�aW� �_)�Tr��ZoZ����y&&����*��\c4*J���CD.��L���7&��ljز��{6|-kx�}۲���.��4Z���)K�G���bI�C*G�ei���R!�V�b��%�!��m��S��h��A�׸��퐃��gF�k"���w�8<.�'Ur�y��*�qYE~��z�`9�ʺ�+u4p��q���:;��R�)�F*��(V�J�@<�WG��1������R����`E�f�|�����ն杅�GqYEq=,��'R9,�ɥ�.��h��t��;pa�~4``�7��-��0x�bu�k�kd?j�:��.#��E�!���b���x��Ѣ1(�KQ!*��}��+��tZ`���WLT�f�1�)憆ƒQ��X*GL�Zg1zX��0���YRVm�
Dx��Q]5q�(&/��s���j�vN�-t��KK�--�c���b��X,..��/
Ր���\�-p���۶n����=�/�|tM�����D,+�G��CC��e��bm�|(��VFl�0t{dui��9�:�;�  �����H��Px��C�cUS��8
�_�c�ݯY���7S�,f\�o�~�7~��x�@�57Ý�[�q��{��AW�`g�����tK��_���\5��N�1��LD�ʟ��}���B)9��m۶!?T]tn۶��u*Gl�i�762��|�Q3������&W8>o�qG}�� ��W�$ �R"�D5�V�,/�b?]�����[T�F��YR�������Y!����5BH�����G��27c��93����0;k
a�J)�<�$�@N���I��PԵ��_9�����*cU�ρ�hZ�w��F��Fk�d�!א���Ȫj�}T��"�ơϙVWt�����SV��T����!P>����|�|��F1�oNoL�S���j�Z�����4����kr�CV��m�P#,�"���hoO�{|D��'1u�E�n e*���;��W�����F(��u�GUW}A	𻕠�A��At��+�b��Gt���'tv�9���VL�r�
4K�>U��Ұ��hs��7qϱ���m�[�>�q����sl���z���s�s�Q� ��q���ċ�w�O�("��\�}�7�7���8;���>��_���j�w�H�au�Y'Kk���I�9�T5�_�9>�y�S����O�6�Y�^�����2
����!�������^�Eq�d�8��j�Ey�EB���N'̢���q��=��ӵ������2��~�c���. /�� =�^Ξ<�,�c�t�B��ݿ��͙as�����Ex�HD�d� V��i�
׊�R�I��Y�~-	�H������>Ui���R���?�$�s+���p{��������vq�s������W���(Bl�sm�(�k���!5B>�|Fӌu����`0��,�XފA�i
��楥�'>�Z��ku�hZ �@ <�	��3�E ���D���L��X�{�(�꩐T�Ni�H�6��?B�`��s���x�F,�~��l�"�gY��z���p�د�W��q�|, �����!���P$1f<������T��w<m0&E���'�|Ҕ�{t�ƺ��߰�{\�| @8��g`AC�=�UC�x��9
�3���FJ�N���{�U�N�M�CL1��G9t�f��m6]w�u\��ˏ��Z�[}h5�iYͯ՚����aA��fX��X�c0>u�r7@d������8uϣ�>���X^^��+��5�`P�Q����|�[��+��S��j,���Z�~���gݯ�|��2`���_�T�f.Iל���W���Y���Q��m���o�lq?`6������})/�s�U��OS�2��-n�_-^5�:����,s{�ՙ�b�#���ѿap�Qy�Z���Y�(�qZN�x�r:)��\y��M]r�0�TsL��~u��YeW����?64`� @�L �^�������-����zEopH� �(7[+Fy>u��G-�b�q�������{u�E�/����4d�`����Њ����REg�Z�zY�[��kZ��"K��-�r���c/7{��T��x�嗙�f�RC�_���
�����M�A�;�qM+��`�� �
�Q� �.0�#�Mea�w-$mڔi�=���w�*c++���ʊ��A���]��vо�c��ⱷ���E���4�̋�jǮ;=D:�g>3��֒�lS%F�#|O���t=��󽈐�f�&��zH~�Z�2����#rkz�e����*8Bb�~B�(�XQ��D��bSJ��8
U��ndiM���%��v6��o�~�h�}���4��J�^,��(��糙�b
��u�"����a$���)�{�{�z�!D�Qoz>���t�@�ۉ�9˚��Ͽ9�!F��jZ�� vE$%{(��u����e����s~�B$i�f�ؕ�����:m�D$"ג�$�F*���ШH�XA��$b:�dC�E�s�!�[�c� 0e�cϖ/���}���qY��y����(�O�µk����U�'N�On[���.�?��8M�.�v�����u�͏�r|^����k�v�ڱc����2��^���/�c����xl������d��qFl^��8��M�慥�%��$ˣ��`���p��p���u�6x^')���g�a�@3�:�y��<'��sYT�j�,�a����p�Q��ؖj6-L��է���O���������ɡ��'����1������;z^�I�Ac��*O���������$]_?�o���� +�1�T�N�b$�x��R�3�
��>�嬸���T�i��j�f]�in�ʛ�� }d}q}��G�ױg�����$�*+X��y_O�X�!��fʒJ"m0�K+��v�"I+�v6�a=��Y�ͯ��\Y��#��VV6�W�k����$�E��
�J�<��Y��ŏ��tZ(�������wu;$\�3���c��L�w���y�A;6ap��i=����(�:�Un�Qs��b1Y�f�)+^�|DGw&�i�����i�W�y�9�W�Zg�Y�9�ٺ_��Ͼ�P��|�Oɳ�pTjmD�n�=��/MI��GGC�Tt�#��Qm$#L��i�1�"�t:O@(�F�����V�*��:�He?~���N�����XD�^("-܍�ue_25����8 H��{<#����|@1J�Ó<��f=�nK͎4�����c$�֪�^Vz� ��8M:����ã..^������x9�F�JM�	��2A�*�g7(����vN�"x�"(�8˩b������g�>v"�D�k�2�V�8��j�������j�OH�����Y�$ɤ�Jһ�'%Ҩ���T�$��fW�T��W�O+^�6F�L�>7r���:u�_Ec�����¯����4 (b�Mu�1�Sp��$[�о���Nv������2�8�S�JA9��AqO�Y��K'O&}�M�u�-9�]��)���Om��T��E'7���ܠٴ�(��~�G��*�(&����ɥ���0]�?%)F�k�ʩ�S�ˁ�M������k5��@֢<�;ri�_�y�M��*l�mv4�����H^�N3Z�ZȠlΧ7G�c�F�3y9�Ge:j����Ʀ��a��=��6�����s~��������e�6	��p��"L���a6�;٪z�C`u��N��xpW�$����P )Q\vT�9jN5y9u$E����G=ؕ}�o�������s����]�����#ђ?�2�ݴ�F]�:�� N��-x
��w�7 `��Qf�cI-+7N���K��GE�V��T�	���E�J��U�|��G�q��T�\	i�/ ��g��}�G���t�U�_�Q�Cc����c�6{����(4����r1]!d%�X�2�m��!m���E��yǚ� ��0]�n7O͖%+-�v��
���pD>L����랇�6���ۮA����bz1]!�M��s��i5�㙉��!�<��0�⸟�
_(�
���F P�y���aG�T� c4����]�xv7��9ȅ$.�Y(�1����a(�
1�uq؂g�-�� ?��<7|�
L�~a��o5�'j�M��D'�I!���,��(����0�؜�Gh�����(�r"�R���x������^gp<*�0��q�������KH�׏Uڏ�T��j\Vi<.o���
�]�>�5h)WƷ]-6����~,����xo�'��~���2�0�2��8�-����0[�:2��G�?���Q^��l��8ҟ����f��>(��9�~��hֶlT$f�M�
*u3r�5F�}\��%�P"E=.g��}Mk��kj��u)��R��\��,�e9"�0�/�2�]hkF��hxn�j��h�m,�Vk��h����,�gY��)F��8]�a�"�`	��+Лb�c���kM�O��%�8�1�,��6*F��qz��:b�����R���*_D�����V�a�g�Ka<O}�V�}��:���S��o�6�m[~q�zjq���b��Vo�ں����X�|��k���g�|��D�B����R��7�eY�g�(�[f�Y��N���Y��v�K�~Dx	���"���<��Z�k˱����9�k��	_kK����ט��_[�;�5���H�'`�	����Ŕ�ܨ�>��Gԑ �\��/���<{��Y} N���V�N+0����)յ����Aк��;;;��륏�$�)�����v��x�D7#2F��q�SqX�G�p�|�8� hi����nj� �)7 ����#2=,oF��lk�ҡ�?�cr��=��+���h��`�^�
��4�.+N c%<��x����1Z�����Wƨ�K�("S�������R�h�z&ӓ*,'��ƌ;�L�D|��#CFVd�	85r��f�"�L�M=��3n�L��;�s��]���n#��ٺ��ɫu��%�m�@4�3��\�7�y�O����X]�~����יj&1�[�f�=nԣ��9#T;�.-uc����Q���u��4P�p>��p>4��kʹ�*n�?��%x^�%:��8�1K9�B4Q^��Ƭ`��
	����Μ��+j�L��ޏ?�v���c�8��ٮ��F�뙶?Ʃ_�w��
�����G�c��E�U��qTh��tGŐ��n]���@�a��,�=�ytt���rD~I
Q��8��a�c\6'ȏ�s������ϝK��rv��'��	�%�e�1Ɠ�;��s�����F�ny��P��^�Z�4]B̺BH#Bn\��a�V��4?a[���oٖ%a��T�Cm[�QU�n2
���..���Dי�-����9������_b[�B��$7���=����t��\w���3P���N���[y�1�=gIqMx
�`~����'����
��h���[<��T�PvalE����I��ei�O�a?�*���L��Y�걏���4��7u)��;���L��X�������&����*I2qM$�pN"���s�/�s># eTCk��y�y�#Fa�yGG���#�����q�7�������f�QY"�cQ$d{=PRtV�=<4�s�o�'���ur�Ye��>�:���D�3?K���1��a��]��R9��}�����a�l��9_���k�+y:A׽�8Z�>:jʀ97�^T�S�&��r|E����ᑡ]7T�9U����d��H��X�3��hssO���,�y2V�:E6�.�n7����g3��p6*�$|ԡ�-*%��!��q/ zy�?6�OEx�!d ʨp3=s�%9a�+ �ٰ�8�8a�~�mJ�ؼO�����x9�u�M0[.�f�z����� �S1�g�\���� �q�l7��}ސd�y�#%@�N���u����L���G�Afy^����1H1)�X��O���. �[6�o�0'`��Lsv�D$5�f���)1��Vj,`��0x�?��5�U]U�5�{N���y�J�{8�nI�&�e+�&��ˈ�������m5���=b%���QE�k���t]�٘麮�1~��X#����|��
Y��fղm䦬X����$Y�!����p4�g��ֽ6U���{�����jU�N]gGL�u�1]  ǿ���~6��IƎ�\`΂F,Z��2͙g]�O��/
�{DuV�J�!5�0���*�0��I?��ӷw�瑅�_�+-���O	���W��[s�	�a���f�Y"s�Y(D����WI�,ɰ�"�
K�Z撬b� H%QX�F���$����ew]3-K�^e+
�ؠ�b��[��e<?s���;�u}�G�g�wWX�V��Z�9�cPZ����̼ٽ����&yf+���W{ؕ�;� d�
!����&���I�v�wcB��$���ݤ���n�fj�Bn���V3��������a'��:ADM�eMQ,E�!W���nUUQ"Y�"ˊ"K�ʵ3W�7*���N,Dg����� "*�,�A��/�qQ�e�ZA���H/�T�
~Ҩ&��k�.��X���L���msU��N����|�m���]�ZٶmGQm*�rܮmG�ZՈ�.�5���p?<o�4�8gd�ds=�1�͗ �'���	G�Ǡ N ���)���o��@���H=�;�{��%�^T�����9����K_�����e��g��D���W�Y!C�J��������hJaea����#ӕ�R8#�!�;̆�4MSH�sReph��n�0��"oG�D���n�n ���9�9�.�P�1�*T�����o�����=�N��p��B:��2=�86}�������x�j����������(\�}��Y?��-��m	�n`��� ݝ��g��@^k�Ӆr���Z�����ri�7]�N˩*�/��S���S kс���u���D��}����}w����bMV�n�h{�ރ�w��e�����t:m�{�X������֎�Z����s:�9�|2��]a^��%F����sKKKK��i�e^�$�ϵ�ı���uM�,M��~����g��<-�Ѻ�f�j1J�FG9`~�q^�4e�Rt]Ȳ����"+��*������JO��6���k�u�9r�<�	x�`�v���R�J��`g���:Z1�7*�!�Ӵ�����C�T*$��.�
�B�v{e�m$Ԓw��h��D����N�=��kv��Y���5S��+Σ��t:��N����!�K`�\J�"Zh��A�#1F8�+�F�������aО��ۣ���z�x�e�^`���ө�H4���)��b��~���vT*A`���C��A/�`^bSP�+2���%�i�:���c��l����$���,-�l���~��4	��M$M�a�]3��o�{�b���,E!*�|�1�MK]��Vk��$��]��q)c��ju�цq�b��&���p�����bY/E��lb��-C*���f[$FE���GB�2�D���B|Jd�M�LQ�`�>�re4���hrn���1׵�=��9�u��/ѝL&�=YB\�N&�GW��~m2���Ķ�ۯ����T��B��{���k��d�3�Ҫ@:>>��/C�P�~MK(NΪ�/}��_>(�y��,Q���H�:�����mKc�8^9^�{���{߄w~�ӟ���'L��7_�túmM�ǃ�4�c�}�_�7�?p���( 4��6�:��0�����)x;�|"����ơ~ҏiv؉��.��8�t�:R�q��QA�HD?�&�J�"�P�v��WE��z�'6~���߯Q�D�QDT��/��)��n��yU���'Z]I"�vE|?"�2�,ˈ��I�|E�$�_���8錱Ԗ}�9���l�������}�r�&+j%�5����7e��ޥQMNW�������$�s�cD�]�������/�zl:����1м����]�h6 b�/h�d��� �ۺhc{ߢc���tJ�׼��vCR��v�y�r�:Q\h7"_i�������C�$�_�HT�&�0�H�G�@�kn�[�8����f�卢T�$5���q1���M���a�E���!Xp�Y�5
D�'�E����ݡI*�͜Y˖���t�l���W����F�O~hkk�{�t��P��(�B%���e�N��u����^�p�E�u���O�t�Լu>��n�S� ��/����?�2F�\1�!q�DA���	��O7����U�a,����� ��\��nW����nW*�<�߯��u�~G����O����YFp�vJ%�J��$b��qV��"x��?1�����B��X�/,���sXt�~m���S:�6XUw9�������-ϱ9G`�L+K�"b����i��u��4Q����D�y��Jc��j�kZu�X�\�����a^]�%��̟�0�=5	�	>���;�5�1�lD"�$Q��_�fV�fj�y���rv�큑e���_SG��9a�~ı�CW�M�5�.N`���B� ����>{��+���G����ٹBc ǸA�~6��رAf�O���� ���~h�/y��9Ǝj�k4������Yi �A0�;q_S$'�̣u�Jn��k����Z4\�vu	54PEå�G�?�*?�(׮~68
~�w����,_��t��:m�-K׮.�ⓨ��B�r��Ի��m���YeW���0�(���b!��t|�\����坅V�t������k�x�ͫW�^m�6��9�E����W��}�y�ܮ׺��S�>����ׅ��B0P�M��Io/��!TϺ���9��0 %Qd�؊|�C��fW�bdv�x0̆���5X�T���B)�����W�e�����{z��t�-�tú�=K�m}C��%��ȩ�K�u�+�����p�|n.���ɵ��Eϫ�M�q�j��w�Q�T~*"$������G�c���r+�e㜉:<�l�wpybR�BcS�����W'����Vδ ,�l�9���a6U&}�S�Ϲq����Kp�ϰꞇ�_����[9��i�H.���C�=�nހR�	Fx{Sr�7DT�{��3�\���3ҕ�:��|?����^�ӕ�o�"?'�{�]�K�D��9"_�� ^�g�����wL�0M�:��8F-��� 4�,�"�PС�i��G�I���~��'k�ZF�=C�J#Q�H ܍m�聇v�~g]�d"�Y$���Hǁ���%�ƘBè�YI��}s��b��k�7ފo�{>s$�cUM�V���J'�Vs�ky���(���d
a?�H*5~�����FQ�n3%Q�`� �zo���"ʮW�g�"c�L;�q	��[檤j3�qD[�'��	�E�j��v		���щ���G9��y���$�fx��c��k�\�ܰ_t����B�BձI����`j������w�W�V+���w8����+Q;���""�=��A�b7�	X]+�;�לX{2"$z�7����T�xFz�%8S �o�Bu����P/��*ڍ��ϸ	6\,F��%n?��*I2���P=��5���{Tˮ�"�5m5�ƸS�m�`��P�tm��C�,9^���a�U�}�4��P�)��˚煷X�f>�qQ�5�W���	�rMl��2.���S6�Z$4ղkO\�3&+�W�eE��_k���j5
%ٵ�Y�J!��Á��S[���*�m�R�6..b��e�]��Эo�2������(��{<�������}�� ���D��Vܗ���D��Z�B)��/(r���3-��N�'31L�A�`)�;�����5͖$�2e�~Zj}k�Run���'��e�sD%��oq<����T�ۆ�u��L�^��1G�����E�YoيLe<ͥl��Z[��&�U7@8���'ɌWk���n7�"UP�!"��C�����C%|���rNϠ��p��.<���{؜��K�4˔�|��s/�2��I�$t�����Y~�\�b	l�yK �(��r�a�a 'B���l��*b�<���ԃ@��!D�j�ڰ��$f��"�J�njU]�3��EQD��K6S��2U��@���y����P  ��W�2n����i�8���f��.D�DL�U�䴧��[���"rp��}2�O@`N`�|�f��b*��O4��E�f]�M27EA7��KF�u�,�@����ȁi��߸�����7n�whVy�Q��ڒ�f��Q���R�k�?Ź�O��q��cl��ʹ��,//c�d�� ����p@��L \ŗ�E"Y��fT��0�8/[Ǿ)���3z0/[�8e�kC��*���:�����kQlۜ����%�#�o�mE�����m�m�Gh��a�xn���p����ȏ���h(�{Νt�3�	#I��8����Z7�sݣ0
��ֹ���o��:��i�ur*_$`a@���B�Σ�f��(�`�ϰ�t$�u;Y��u��Gg�~����MH�|���I5--�wy�9kf<�q)=�t<&U���B�C�N�)?Ж;���)N��i�� ��yj�h��2 �Hd"H�d�Zf�l�	��N-��	�/Q(+@��٨ȁ #I������ �����./WH�G�2*��?1�����N����AŶS7-]G۲�����^�����'�Ʉ�����ߣhs���s�JP�xu��,]gm����%R_�4��N����~Ҹ�i�s�u�+\�R��s��؎���������Q�CZ�Q��B<��� �G��1ȸz�p?�Wg����=�z�wã��n�M&(�9���Ob�aZe�UmP�$�̣�v���ܙ�\Ԣ����-͘���s�(iBP3�y>��S2mNG����8:]�C���w��A���8HɌ���H'�q��ݞ���'\�U��T|Qr]�#b����O\��he�:M� ��~WD��$���!����R�>�c�:U$	v�a�e"cW���p�k���
�����L��ٝ�fP!��V�w��J�M%�������ig���/L���{R���kp�(*�Z�3S��+s���-a�2&L4\G����Zm��0�d�����MD1�"b�p��rJ�](��4_Q����:��5��J�6I.�@|6���l��������E;��Y4�b��+&vk�#o��,��s��$����`Q��tĘ��xYd����>�F�QD��2�q6��P��[��ہ�Ew�={GD�5��v0��a��g7s]A��~KZ�LO�HtR0��H^�4j��X��E����D�Y����H��;��o ��'#��u���$���_�g`C��^x|�O8��ֶB$B�B�M�%����&�u�d�Q��h�f23	L<͑�����/����,}C��c�q��(~vm{�m<�p��>t�|�1;=�ssss�\/��P�p�!�ܾE�����p[�t|x�p�F�}�;`�����"`�Z�Zf�:��<<�6/��u���Դ�Xc �O�|���Qۦk6�,z�!L=�Am�<��8l��7�����|���$ .�9�x�i��0FT�i���~۽t�:T(W4�m���2 N�1�B0$BЊ���p���T�2�M��]j6�a��5E�wH��g
�8�qϙ�bҐ�s/�x.�a;���W[ ��C�[y�s��������]����oΏ�(�(F\�b[��alX�=j�υ��ݜѝ�F݅�#Du_�s���/�D�k�$���Db��̒"��搤� ��lz�2X��9(��Ȓl�%a|T ����,���d��ɓ���U���m{ݡŻFc܀�JN-�DY㤳�e����}�V*�慣�L�o��>�>�-p��0;�ɕ`Y��Wp&�n��ܹ�騠�=�̋l������F�Ѩ��g��p�{k�ǱC�Q�o��J~*�CdtBkZY��Z'&Os�u�*���E���0Cs�B�aF��nm����R�ղRK��Ե�rb~�ӟ�����łY��i���궰<���\S�>Ud�;U{�kt�Ӄ�S�js�@6ڇ.C�#�SDB���w�αB�,�t&v(ҝ�P��B���(��fp�e۾�%��^*����-U.կ�o��m+'t=n�BY��.ʰ֏2+Y���؊s���Zî[��x��x�U��+;(�0nyx��Fǲ(6Z���^��C��?����B��R�y������{�󴣽�Nޜ;��2�Y 39U�� �,�S2���~v��� }B��.����}�K��_��(��tVWWW)N}�q��@i}�y���F�����]�N�Q�
�i���id�7|�@U/�����&ڭ^+�X�M2OOμX���4MS���ڡ��i:ZISXOBL�|�1�,���X�Y���B���#Ԥ̒���.���%�	�|��+�l���m��0x})PU����G_oM;/� �����TpըUH�6oj�Ƕ}�y��K��^3�3ˏ.���R����dZ�=���I(Ÿ���!% p�i_O�����+g�?ʿ�����jO�C_F9R�W]�T���0�?�Vk�*��ekm���H��Bh[��˲l)��r݁���D�	&���6���j�w�ۜ� �Z�n��'d�QV��T��Ԏ�Y՚��OjӴ4�zEs��d�ה�E���x����:�y�4Li{�r4��Q��ƘP�y�(ͥy'��\+��Z�Ʌh�t �Ov���9&�!X6�Đ�T��H��Ϡ�G��E.fy|���6L�BG#Tm�|��/�2����vt ]�V�}�!�|_Jb�v�	��a.�����d�A`�9"l��Ŷ���u��n�Ϻ ��:r%�8�X�4ϕ�Y[�dNW.?�$�K���f�������t�����b�.��DF5�)�Q��[P��w��.� �\n4�eE���N����o���d��<�&#��Qs����������l��,0od���b܍3^̗&�&��L��V��/
�Y���I�y3�^o�HC7e
ѭ'G5�7�N��h�4È���ܹs�c��ҥHซ�p������}���Y��>���l��;`�(c�:�]��\K��p�6MQ���^/�pf��ُ$����4U��<��L[։�=�#*&w*ae�N{8Q%��c��Y9�	
C��H(#������3���&�o�꛱ʍ��4K���y+I6⑚�tW�Ȳ8�}� L��Zs���:����d��K8��8#qvX�Ɣ+ �)�@�Z��q�X�N�}y��;Q]�N��CGL�1��pwyQr���#�,��}��Gƅq��9&Y����F��,�*ark^�Ffً��!�#��bO�g�+���2��#%8��ܰ� J�_��2�NlQi���vj�l��P�1�i��nw�12d��MMLw����즶�����\�� �@i|M�M����p�ѹ�����6c���^%uL�)A�C_N�Qw��N��A[p��X*��*a�)��(:������z��P��.������ڲ)��%y��l��'�MԶ�.MוJ:��e?s|_k͵vmb�%� X\`��]Ծ�<Ԟ8�6M�4JZ4��T+Nw�1@�\)F���m���C0�u�6��m��`����6�r
-#�~�j�C>=v�� �0&t��( ���'l��^�čև�M�ڧ�>t=����p�fl���"`�JL�F��*����-�D&�t+���E�oL�>�J��Em�B*:�ס�(��r����N�\\�>#�I���C�2�mϲ�����o�V}mW�l;�Yn�F�_���n��|���۬61q��^A��_Sѐd∞jœka$�ה�(yܴ}�z`i�������LPA� g�����Ӓs%F�&�\NW�/y��y%5vO223C�$��hwF��&G`&�w�t5:��F���B�=4ht�S���,�������s�HW�(8��u�!�-�A!�e��¹E�9���1"Q������Z+;��K}fy�(}T�R�Zu��m7�h��F���J�R9��6�����d2&e�Z���-c:"Q�u}d�"�pb�7'������SS?�\@D_��LAn`��Lb�c�,˲��� ����$m%ި�j�~]^��g�}�$͚⠶"��3����Q)��*���`qB)�/�n�Q���բ����FŐ�08�sÐ�0��  �1NחU�����38��67%-��}�X�	�S�������<)��2��/v�����M����I�o��s���Z�OI�����;�'�Oj_@��@��0��؜��P���$I$�7e�j�^Z�f�1+DG�s���4E���,���#�%�لa	j����,�p���O�����^�~�,)xS�����R�K��s��9�����4�:A��cL;�g�4b�5�a2�h?`����
޲���0���^a�!0��-����%�rq/a]B��$���s<�d�q�4.1���Z˽��:BO��8��m���{^^;=�l�)������fS�^�7[�0�5]� T��i\���3��0���J�x��%�.��U�g�	������x� h�.��|F��I瘲�=��4����T�+Y&���K�ѲE�>���bYB7q�LA� N�ɦ��6�`�x&5'-R�v�|~ލ����żJ��S�I4Ց�`��d��T��p��J-4�x��F�SB�����
!6�R����"�ELb�K��
�0�w���0��<��cd �d�"���m�]����x����>CP�HO@j�s�A�ʈB�⌄�-4����0���]�獯E���kM1�O�Oa5*��O�:b>A��EGt�Ŕ鵚�㱻�@�uK锹Q�+�3���QfEި�у�#��m��Q����j3'���r���Og�/Q 3]��Da�\5(]L�^����T�Ab�l��H�׾0�ʙߝ�Ԧyz�u��F�S^���ߥ���O��*`��:Q��%���Ǖ���?�@���d=�_����Qs�F��w��dc��F�b��LdiB�p|?��M.E<�ӳ�FN��C�X�o�������
@�4�v�E�����}��;�"���O��M�θ*>�o*#P�Ti�:�2)�:�}�.��2c���/Cwj,� �R�o��^ʇ[���i�ϲ�8��q��!����o�v�26�2#���1�5����-D��	�}x:\�?�i|�=�2钻�QLc�Z�c���{?��5qL���M�j�	��}S��ͧ��T�"�h��뭗X��{�}���Wg��I�Y�ϝ���˼����Ὼp,���Ň�	�ïG��J����V�+���W�S;[��Xwlc���o�����ݓ�o����P��1:7w.L=6ͧW��k&��qfc��s�s���w�]�_L�<��#�ϻ�����}�b0;85L�_�o�?��Ħ���7�o��ܻ�[_�m�?n�Ύ������]_ܽ��l���{~����/�����@����6/����O<{H���.�����c��egw��.oׅ���[=�={������?;P?����9\>�j��hr�w���x:ys�����l�7�5�_�'�S[R��W3����������Bi�y�b��  vp ���򀋥�(b��E�X���K��ǁ����J��?���<���q�"�Eˁ�k�m� ̿k��@�Ɠ�E���$���%x]�V0�jX�۸6��îKwz=k�@�2�����*H����W�f�Q���<(m'�L��^_I(����u�Yok+aw��?���rJ=��2ut���*�N�Z�a�)k�Τ�Z�{��?-Ŝ�qDA9ZXʚ�Gm��+S8R���Z�|.��g��Q��xG�m)O���Ј�D#�a����DFЈ�t��z���!O{��
}����pD���%���O��}fg�$K��θ	���1�h4�x�<�l�滉/M��5�ګ����6RG%α�I������C���"�}��U7_�9�On"p��݈b�@�Q(��Ƞq������/�����   

wOF2    �\ 
   e �                     6$ `�l �:ʋ�8ːp� %2�q���<  �֟eDOZ- UUU�	�ݫ�~��7��ß����?������v\�7��7����"��)��#r�z����S��+]�-�%�2/�{�&��D̋|'F�+e
 �_/�"� O��sP�� ��;}�U���'VH�
P�6`��"�1�������+�K�O�̯�S�Tɖ�R�۶dK��l)�!'��M������塞�g��@�%�#��8l�<��f������߫��������j��sf���A,i`0$A&4�.�%dc�l tb��ĉP�9_�}fF#�2&��r�6�%�I��+Zю>"� `E���'�Z?o43����(Kr�l�rҤM�ݔ`��M{]�,c/G���G�C����U�wU�[u�7�L�L��n��%��r֖I2��X)��v��s7��1��BU�}��] `Q:A� EB�!Vٖ-9Վ���\\R�}��/�zןK����$���Z�age"�O56Vcϴ�+g�t�.���Fk'V����50����$&�D�����d� �J4��n���L�C&'3��׸
]�k4�ߗ���	�_(��G��n�h�U���>�>_��<��yD.<"sᑉ�G�� =Y��X� Ym ���b׷�@6��f�@���� h6��OpD��l��Ue ��(a6d+Yꋲ�Q�5J,��b7�����Z��z�b5��lVR���P����5q!��*c���)>,�I�*�����-_�X�<�p�#tM� ز�Ȳ�l{��ςyC�ز4�$澿�ߚO����dS&�oN���i�8���`4�]��l�󷞮=^�f�� ��^�x�v|��YNo�B��W���~�/���J��Nk�=c-�}��@��g�Y9���:l�?�
M\#���y��È��!��.ǒ޲k�Y���	t�"|I	(VE��D���������k�_H�m4����+��)���_�Υ6����,Nu����Md�&��xk��1(�>��)�%Jd-��}E�8��:��5.'����Ԡ��Of굣�n����۹��Z�נ���'2Ƶ��Õ�+-1��'ۤ�J�/�q���,�g�q�4���s�݁2�~c�"T(���Zy��7��o�|�E2}Ҷ�"�l�m"%]��s�V-]a�U�+,��Ձ%�9�)�\���G���=1��Q%R�D��̠q�.�_752���e�\����6;�AF7�Ub��͏%��I����x��ՍQ�}�U�S�v���;v�Р���\/�S�f���!};��E��ǃ.E��T��J���.�uk��
���6���_�u~E\�ߍ����q�0�?mR�Y�;双��>ZoCb>-�H�|�l]��?���u�(ǭ��"J���S�\�N��>iR�SS�2�,�;:��Ǣ�+��3���j�nuR��	�gI9w<�u�t�������V��=��-_Id�0h���8C�����
�b���������\8.�^���   � �m?	����$�V�!�����zo!3d��P�@g�]�t��zAo�}��0�`Ca�0F�h��pΦ9��l��e�eZ����Z���Dk�M�f:���+�;�_y�����g�g�gcZ�Ai��n�ѺMϫ����vzW}�>N��������]�]�}�ub����Q¨l,6�[���a�q޸n�5h��o����*�����n���ޚ����Xs�9˜g.2W���#�Y���|n:M�������������� @f�
y������B7�=�'���ߘ��Hm��J��7�����y��zY��������ҫ��o/[�'���8��P������j\��(����?�w��o�P8�P,��T��P]�@��+��A4�4��ZF�im�]����A:IW��#��q/�y
��9��W�:����(_�+|�o�M���1`'���2����E��8�Nf��eY���瑺�hD�u�����]h�0�G�3S>�n1��W��������3��o3�Δ!Sj���_3�3:3^�x1C��c�Gٿه�+ړ졶���#�l���Q����jI���Wͭ
5"��t�� � �Yx�{�S���~�^G� �Dz a6 ��d�$�"T���(�C��|T^*ϔ� �M�rI��lW6+���[S]U�_�W�K�+�.[�SlVlZlT�^,Y,^,�������xg�=�o�7Ǜ��x]�&^M�*^/��Ƌ�E��x�x6��xR<>�%w���-��������[��B}����y�S���C���}k����ok�ޫ�T���ZmLmt�O�����{Tw��Tݡ�uu���媋VgUgT'T�Wޫ�[9��we�ʊ��+�
0��t�����ow������p��ÄúeIX=,�Iq~A©�?E~��u������~��ìV_��mݬ��\���9�vէ��v_�����}#被n�롯~�`�Ab�a�a�QFc�qƛ`�I&�b�i��a�Yf;��Nw�OC�P�~ad�Gj˰�ƾ�0O��L�tt�,�Y��Ǧ�m�C������.��N�C���N�F`�C#�ˡQ���h�vhv?4{�=��^�&`�C��N�/��d�wh
�?4��M�A�f��C3qȡY8�7�f��Ax�<�<��!ϋ���]���(yI|J^��:�"oI{h.yk�6h#oG��=�{�G��4�����G�z��G��E�|<�T�F>�'Ѕ|�|�K��&Ѝ|!��O��vF�o �H�J��|�;�v�e�I��|'��n���*�az��'��%�]�ȟ��� IJn�0���#�Z;�:@�=jL��tZG�:�0��h�@�����b���\��r����:ث�^Z��`om �f���6{�y�����QP�`� ��i�π��4G��}~�}a �%����M�C���С`?�]�(�_��t4����:�o4G���}7���t�%ؿAg������:s�#���. 7 .]npK��7�st;��	�g@w�ۂ�h�m��np;��=��st/�w'�}��-�~p����{p���
e򵴨\n�� �fCP6�0 �:s��K��}(o����u�>��9��ys�1����'P>6G�B��}�+s�9����P�9G_B���+(������7G�@{p����Zs��ם��}���/B�%Џ�~���gh2�~�x��n4B��?�q_����FW��^���m�cmL��#mbs�[yn2nY%��6c�Hyunqe"n�I�M�f��Lj����u�㪴�#eyn�չ!UYMͤ*���8��Hr���F[@(���@��Q��
��9��M l��`�Y�Ru�iaL��2$n6�XJ�°i��a�8� l⹾��\�z�Y�&�ٶ�۝�f�6����8~J8w,!���q�"��5���5,�K���m��k��w�B��ޏJ�BPN���Y�p0��t\�+�Y�q��:��
���q�tW���0�t{�.ܝ���ڻ���㬖�ka��F#ܝ�F�M#X���X���:��'�����V��A����Ln����6/}�yɓ�sBė�G�e齄��D���!�����'DxRا����#ĺ�^�7�{��g�ۯ�'���;T_�O�x�BE�ʤ&ᖞ�b��SS�qUN'y��f
�죱�xt���"aĔ�f1���PE�X�Zݕgy�O+�cq�'����<�>88==8��?�b���tvZ��4��ǜA��3�n"d�R?�v
�<��	�v���*�s��zP?�0��p6���lޓ�`:�;��&���ǘ�ȱ����t�f�P�pn<�3�*]l�b*�����,�h��B���ޕk�;v���:�y������ Z'p���E�v�l_���>9.���j&�ր�+�`�N
'�1eQ��Ny��cu;�nG�Z�X���:+5�f�8��T��+>�r�<;��kwj�Q*���{�(���W�|��80��������$�!�oR!g�
�j���CU{�����������c��2������X�&��;V��(Rk�7���⃽	~�5��R�Q*V��^�ݯ��}�o��H�z�뮌w�VoK�}��l�՗+��d�ْ��R���o����{�x�Ko��^k;?�V˞�����/`ߋRt����G*R#3��l�gy�#Ŋ�u��Ue1ֱ��t \O
���av�fכRƺ�ұ�{W��xR8��{� �x������Ҏ[l���W���]����@[�=�o�����c@׶/l!� ���?�ܸZ���B,.������NŎ����C2�h�`�k/��I��eŋ���f�הUaFfdr~:Z�5=P�d@�L�òW i��a0,g�p ��La^��;�@�љ�,�{���-�r�����ΑK�:��`:�F���.;���&�_p<��.!Fژ؛�G��.��VNTV�+�lh�{�fF?�܍�]l|���!=��2��;ؿ��1�V�?�8���˱�W�x����̰3.�����ù���'��2.�X-� fB�B�w��!�lᆡ�`�
����~fH����̙H�YxXcG��@�s�(��|��񤽂�5��j�EfN�t�+O&�R|��K��0���Z>1F���`����x��)Ӥ��8�SDf�0�c{X��w���^�u��ݨ�}�����$	���&�F{9��ill����	�Z�\�#�^bKt�!`˱�5��/�ɿ� ��:D���G��,��\��(K���F���$H���;��v:;��އ�z�l�w�e�Č��0�e��e���#k���~�0�1�v�>\��e���5������?�>�f:s,N7���L�m�YFnH�ie�?;J�o�f�I!����BHF��w=zt�|(WgB�R&_�
�(��g�[�ߟ��xw�°e"e��@���N�tJ?�	��i ���� �`c�$z61����ͷ����b��{0,��� ��,硐zί?�-�@�A�Vl�H��'�/��9�5W���#s�q�t\���gN�k�_�?}�S�u�t����q�+޸qp|||��+��8q���N��4���EZ��!��Pz}\lnlm���Gggggk�^�B�>����l���>s�i�p���Mf/��]�pQ6�Bt����ͨ.w>8���[t#gw�U띙��[��@'F���7V��G��B�_X�wyoO����=�|�k�^h�+��vS�r�t] glu3sX�1BC5UF���}<��>��YkT�h�\��4����j~��o6��\h�J�/5A�	�6���ʚsh��+�4����.B��
�%r$��F[jP~z����Y��ۍ��4��OT�~��g��g�y��s��>ཛ��R*������ks�ݶ�������×���8�՚�Wc�F����#ض�����}��^c+/�9��u�<��`y�;N�
a��բ.`�A߰?�ޛZ�?A�����$�M�E�J��������n7�w/_b�������u��������~�c�#���`LЦh�s�p��j��s$R��'�O���߇m3�8�m�WW{��yl�a]r�p����lðb��k�K"�>ޔ��c���po�_���dz��t��	�k�T<�vw����fW�����-�������q�Zd �S]��l�
*(�3�,����<۞�y6ݰu��n�U�o���d�P���.+u��~C�8�G�ŵ	�O&�Ⴣ����R:�u+�VК���������˰y��OJ��ޭ@���L��Q��\=v7o��p�}�����h3�g���\���~Q.'�~j����s��ɚD� �N�(\���;�$o��՝m|��X'��!��[8�A_��P==2qaP��!�=v)S!�"����mA�<�_D�ڲ�2�d��(aTn^���uӗ�R����Q29��$w �0�ǽ}>{����궧b!�E��I7�\Ǝ{��D��4|��[�onf�X�s��'��(&`q��G����=�JnB(�v�x�sX��L$>%
	���X`����>S<��n�,`�:8�����30% �.��;�.�Ѽ���o��w��(C��d��x���xl$����N�gG){�(��]�2��#8��2&�X�C��B�����}�x�-��ݖ�c���Jz���i[k��׷����X�����yD��ݔ1��{� ��!��Q&<��+�@����
����g�������2U._�����Y_���������:R���я�#��я�k��%���< ۑ������~����ď���w�����jS�u����qbK!\��oG�I����B��y|�K�mK!�曝m�7��Ҷ1q�7��{����(�mY�M�[3�[��˧}���e��ԧ�a+AX_�"D�����-�H�>����VwdK�tc=R=ɪI���":�Q���'Y��"{ �d)��;F��8�Zا�<�'�p�H_FT���%@���� `�Kh���mۭ�����\=hw�kw=�<�w \J�mg�J@z�80��Uu�����
��(h��t�8�1�$	x�1� ��u�f��!���.i�<��Ÿmcp)�[[a�S��18�l��z��O���||�i�ڀ�[_�mX �B4@w�C�z4G�з ��א"-�&�����y2���iQ����N���Vʪ��;Rf�/ѹ�S�MjR������Z�@f�1��4��
%[��b�������{����V`�}n1��X�[{{�m�m��k������mm%/c�m��Foc��� V�ěg3�F��^�}�c��z���KOٶ]����[:����}X}�Ï���!e��_|���~_�'�����E�jA���]�N�_�7)�!^=�<6_���v��F!���~h}Bò�+�!���j��Wt%��=�捩ʢ2�)���F���e��!���>�v����d�n�)�@}��ɉB��˔P'0��Fq��@���}��㓓g�=9�>�LP�n�������)�xgcBo�cF�)���2�B���-P�N�xŃ�|��
9�a�k��i�h2���z�@�/��n�2�p0������x"�mA�ݪ�ݢ���+W��8I@�_�/�;�f���V���5n��FI2&ftcfFDߗ.a	Kt�P�O,[Ufj�Q�2SSj�4W��4�$%��2�LMn����>�=�����
�������?�}�C�_��������^��������0{�����|�������W���y�"�����Z�Dh(���+��Y>��o��l:�7882���`ϓ�/����-�[�,�N�S�owb%���2����1�*qש��ez}1z'�.��UX�k?^Ɠ4I�4k���hJ�$�V�b\����m�Q���,c��*��Ǵ������7��M+��$M�$Ϧ�t2�T��,�b\�s��c��nH{�=W����7[!3K5��g۔��k���E��!��������0��b# �B�ž	��j�iT�9~8^���v����6@����_��/��V���uj7#x�w����i�����Q���,�R �c�B ���5���?T��F���t��0�?�
އ�h�TNɗ��u�s����z���2�j�}���kQ$�N�y���@֢H�)}������+�����r^�Ǹ���~����[jAC����c�FPCb�?�_�_E1��^��EA߂L�$��,���T&˳)@.M�Q>��yr��Zf��#����ux>��^Y�תΌe�<��L5��eUN3���c�ͩ��*s/���Ei��������]϶���o` ٖb��,�s�a�_�v�]�8wm�Wj���Z�F�;#j��e�*�y�4�8rݺ��c��!�>����s \�^�뒲�s��h��] 	�(M%Ƅ���ޥK��d�D�R�q��g�99�z��'�sj�� ��x�e)�2nl0 �	�:���&��K(B.B�ބ�{�vH��
]C���S5U������i���� ?8]��;�<�������7����˿Bю����v��ܹsg������'��dN}L{�;��WCB�T��=L��I�eԵ�J�Ú/꾙���q�[Lf_r���U�^IZ�V��slq����ӛ������cC���7���M2�=?)0���F#�ۇG���Q����Mn7��'!d�����p�'��7���oE�2f0莁���(ue.a��������&�9�Xd�'L�$�Vj�rwx�#��C���Ln�;8�#^�&7��7��>����5��unY�^W:����Z~��Vw���Z;	�������|_5k�B��ڶ��"O|v��7�f j ����tp>>`؞l6�����%\!CEB@�݀Z�3A�^hm�=��-8��l�E��q�^��n9�N��H��_Q�zׯ;7WJ7|����7�~!��8��!<���_�?���.V8Ah��<��^n&f4W��IL������M%k�M�����Jo\�&I��*n"c�_��H�Z���'��$k����Rm"Γ]mb%����Բ/��|�����Qg��cw��E�k�ʌ��h�2e���n������L��j���`~�xaRT�:P��|h���$��!��f��O�f�����┱��2&������:�8�N'�U��*��e��xU\jq+շ�B>�RzP8l��i��$
Yu|w(s1ɳ]�;}�L� ڄL[ �b�ic�-���	f�E����S�}BB)8 +B)�DSB�%,�[c�@�b�5hR BLH��??��Y���`��� ��m:E�7Kjw�3�z��m������ls���p�} ߇�'��L���^�gaL��ԥ�Q��%� �N\�vܯ�5�8�+=A�h�Z�2�vv�}ՠ^
���$���8�R�� ���OH@(0Q��ƽ��/�0�-���fa��&"_��z����ގe4R����K)�f��8�c�,��$�?��>a��1,F�΢5(�J�r����H���lL�D�Җ���ma��u��,;�Y ��mn�y�׳�^�*,a����~*�C�V(#-����𐞿�����ȌFi�b���Aь���t�Ծ���������dg'���9<б��y5�
�m�a؂W{^�B��������j�+Dw��i�*S�r5��������'?��O����y�~��9��/�#h@��*3�N��j��^���h�kڗgy���n��S++5����HG�,W���`������ @�S��\�vc�l(6�Ͷ;m  ����:����\�1� �*
�g0�sBƘ��*� p+��7$F1�t�9��S����U��1�j�r0 	�2 B��z�s�����H�:�q�X���ݒ����M�ï�^��z��Aggk?})j4�է���R�f��"J�q`��K�z�4�k�{��e����zn���v�xo!���#X ���)z�a��,M7��&.�Ueʼ����47Y��DY��:���$���� � �e���-����?��ɾ�����, <�, �/|���x*k  | ��3 ����L> /��XBzx�!!i�{��>xg��"�xZ���9#v�{�v'I-˲Ҥ���_��Є�f^����=��ao��w��^�,s�`66��'W˃��?���&O�i6�J>�m
����������:����/��������=��{�w>����?��?�}(�З�~�	~��G�(���,zś)�O/1+�����V��<���8���� ���}��t��;ֲ�ڌ���;@L]DӶ���ax��r���;&�ȳL! @
Oj7�Ȳ]�̶,Ô�i�nw����8Q�sz�w���w�a�5����ōF�:�5�a�q�_���=�r'�r�z�$�R"Z��c�N��7�%]�M�#�22a-f�b��W�~��l�hB�'�}۴�,���H� �:�
���`�z#�1b������R�}��Ȃ0~sc�?��	��*�Z�B�@��O�;`��8&u-�]E�N��� ������a��R���[�q9�~G����}�$i�	��<��ix��Q�Rl2
���E�8JӪ���n����J'�ʘ7���/@߾(/���FN,�@��X���	�KI���p}�� ��\]O2@�p����5^]�}q���5w�Q�����������������L!�`����;j���)�����FG������/Ʉ�����w�a�;�z/BJ:�$'ɝ��M䝄T�4+�2�s[��ҩ�T�秩lͥ�~�xR��
b"6m;[*� nw&i9T�Yqn��A�7�p��"O��b��r�N�i\f�<���|=ov�6������N��}�)Eq ����rl�i��A��I	���)���^�n�0@ڄ���<�^��{�����W�M~Y���ez�e� ��0������\˲,׳Lx0�'��t��n}�jJ�O���{�y)�L��󸠤�Y����?�p��8w����/�����n;�	�}���>w���?��Ä(B�Ux!�N��m�Y�����R�̋�2f���9?/��4�y1�4��|�~��4N.6��C��#�U����F��,�t4(�2����jhGpFbVlD��s�g"˹��?i�Կ��R	�-˸T�f�SqS�ٖ���)� m�A�7�0����{�����0���0�l��v�4��ld7A�^�:@�Q�L< �C�����\SQku\�0L�$���AE-�z>�a�P�hE@FY�Rt)E�.�����H ��)E��0��`�Z��>��x�����׹a _�8��8��^w0�b|F��<��z��>x��A�aP�J�8v��Q� x�{�5��+ ��J%t(E��C��jo�SA!��?���12&��9r��^�)B�Y�gY9(�*մ\TU�(�ٸ�J���t�6�T�l�E�����r*��q6�5�����8��qL<���fS�K� .#��KXn�*|��ٸ䕬S�uR��<�T� �6�`MY7C�{�hM�m�ws0��e����l֝��e���ew����2G p���A�����u����0 �
C�-s<� J��2E���C�Z�-��1!��^�3��( ��`�I�ˋu١"\&sr5yy��*
�6�!��eQ���b��R٘O�R�E���7�a%.؜sM����=G9]rp�K��:B������z�Q_j׵ֶ���r�&֧���z�v�/;�ֆ{��a�@k�ц������W���pK���E�qc���fʱ�֧Ni�lG5�~��Zk������|qU;�BO��I~p@����Yry�����|�����۬o-b�ʲ,�x������T�ٸ�XK
%X��J�L�I�0o����,KEj uf����ټ,�
C��~V���v�͹���НF�2�~L)�af�
���U��T�5�8[������F>�;X��u���K�  ��9�y�H�]W�����A�f2��F}�?@���B2'��ȶ)�1� Z�`E��h�׏��B3j�ƺ����li�0^��ڠ6P!�  i�4�^|O�v� �PB� p��d��NH�P�|޿VT��,��1}1QȺ�)ȦeGR���aX߫��d�W']��Z�[���WŦqU�5�u��{�nr����U��XW��h'IvF�{���U^�;���z�����M�����P����4�7��*�j���=T�vk�ܫM�*պ��!B	9�^�6��}Y���Fi	��4�)�T��iY��?�_���U�Z_���:T��t��?�勋�/�p���p�?^Ե ��I�A~?�N��^6����tG2˲׏����_�Po�z�>4j5�W�@�����J�u��{�?N��Jr'!#�f�����X������&��(��R��Y�����R��2$U�ۭ��`�֓�1�u�̲��t�V[^���,o�z�dy�V��tk�Z��p]�q'�t�e��c��W�8~թb	��+�)E��ě�mZ'�=Z��^�GG�\�#~ ����+ ��4����g��;J���GN�5$�~��9|\&9�&'ɵ�B�,�$˲�KY�RP�2EQ���4-��Z�ZҲEV2��ʢ"��EQ�O���3MK	+�x��RðN�����ǅ��W���R��՚?�]w�u��Տ///S��f������`\�X��`��?e	I]�Ja��03a�sEQ��E��/7������Ϻw�ꫯ�az���y�s Ԃ��!���Q�er���|�w�&RHQ�GM�I9I�i�FY�� ՈŮ.Sr��z^Z�ǲH�������.�U�`�ܖte$KN����q��9���M�E-p��A�g�|0ϋ1���J��-��Y���[��w���ln1��W���.�ɴ���X����>�Y�az���ck)}Z*�,��us"�{{�0�^q/gsB)�*�� )��FC%5�o�;��6�V]��A�w P��0��x��+#�Gz��=x������0�3DJоykC�^���+�&c�� �t�2A��`X�y��ٍ� ��k*E\�1c��fکx�P0 Jgcx=g%@���_�.�N�������^]��@��h�q�04�d�SJ��û7�|f��0xB���yo� ��Z^��y��(g��} ��?��A�"	 �Qܦ�5x@3�S���'�;w��RQ����9���nRΑ6n懏�t��Qs�	�=��,3z�1N;��Z�qFh6�	�r�Q��)g(=��۔3���?Ã�a>H
r-!���y��38��,b\��;Q���(7s�o���A�?8�S���m��� ���@����8����G�Z�Zٖ���lL�o5�%�[[�G�����umYZ돜�ycmu(-�0����?ߣ�5�8^[ˤe����{�{��p�(�$[����C~��+{�����:�v���(�}�.�B��^T���B��Ry��`��<I�,�X3 ��C�ؓB�}C>ƃ�I*��� �[�z~��{�>?���4
����͕�� ��� ���� qD!���Q�G��f�5"�;v9v=�����R��Z*�)
���)��ᶾٌ<�s�_�~>!F1b�k���Uڋۻ+˽���~������� t�S�b�b8�!�iK)�� }�i�R�P��Sせݎeu��A�F�>�:�ٖ_�q�NY&W��T�l�b��9��<��C�{����0�o���~�{z���^��.�z���޼)�z�������R�׻�ҥK@z���/�z����ޞ����p���a%�)����T�i��Q6#+�⬜?��U��05������M���~�g`��*�u	���^�J�(=u�Rz�O��k��z>�	}߯"�X�\�kKY�r,�e'���U�m�B �'��� 	�8���:�������)�}�"�䠘Uܜ
��gQ�	�A`VV��2�Fr\�|���RYe1l�e���,�Rg5"R�r��G=�fK��fFڽ$�,܏c�Ҽ��4�/�A<չ���Ȧ�ȋt�M'�E���Q�=)�yn���8��l������8vӍ{{-�#�nv��=��$��<��^ow�H
���kJ�C�2 ��("�;a�}#N< e�aȘe	 ��8�]�4��-��-KHʶ4 J�p8�� 2�0n&�Bm�����'(eH)C�EF)ҿA
�������Rk��z�
 �rd)r� PJ" w��qE52d`@w;��h���J�n���@�8��w�0�����(P
W��g�����^�z ���(n��2�Q�9 �BX&b��
[�- �T���=�ӛ{;fU�r���+������B,L̟@l���.������e�>�C�g�IS���0{aC�싒d��>ư��0���<��%P���Ϊ���g=��yWyQ5���WW�������GWWX멜�o7���}V�΅"�|�xy�g����z�_��g�i��$IH��?��O�K�5�n� }}=�(����e�ܙ�6N�n�*7O����8y�>F�43�1�	�A^��v�%�����Mcӎm��{��6v}�]��]���z;�ݚn\�; ��U_�ϱ���jՍ���.����}��lDF�ٗ�E;�y7O��9�cl0~����J{���q�����p�'�&F1?�8��Y��]�}���A+��'��w��x8Γ�8�6��V-ոk��¸��Z�w�a�qL�4zwԾ�c���x���~���Nù!�9|�4����&ߒ��>����7��t:v}�l��47V���܅�a?�L]�N2����c��Б��c<Ǝ"�a�K��q��U{��1n��Y�؞�Xm�N��f�����FSfv�q��>�ai�Y�4�w�}�{vG[\��h��1��Ǝ1���F�?]���,0T�S�wNE�$�U�91�R��9!ٰ0�XVd��T�+V-w��H�(�����\���Պ(Q][3�����^�/�r���
�!���e� L
�����2����D��.Ač����w@�a�PϤ0[��z1��2IвZ.�ʕ]۵!#�n�ޡV2,�9?lW�X �|w,
��`��nOV'�wIo��3��R6�}�a�X%&KB0��<�|�L*I ��7��7���ˋ<�pG���1�8t]��g޺��lڶMs�+����l$�O	���
�:#��-�k>��gWe�|rPEN������	�[f#1.�̂�؂���z}��-��"3�Tؤz)�	�P@��L%�����9*����Ty�m�3���'�f�_�C��4��`NӦ]�h�.�(���Z� <��>�]5����ge��}4� 5�g)�)��R��Q�
c��z#��nNVݚ?�@����%6�z�s��\���W%ߙ�x����$�$w�y�V�o����d���Ʊ[����~�v�n��+���d�7 ���v�T@6��v3("u�!L��eQ�����<4�q��ն?l7vc7m����8v=����q����m���v���5l5Z�m2v(W;�+�=�FY.#Fn	�Z0��ڽ�����+���w}�^_N�B������1�f�}~�(��h�DW���i��a}�6��sy&��S�*^2��b���������N><���j�,Mj6me��.{�8΍VA��:Hk5�Kk�f�X��p�'��   F�!�s����f���\Z9��u���*����f���Z=�e��_�O�[ɳMFD����s�Br.Y�i�]-�U<�+)d���f�,���".EZ�U��k��X6��J��z�j��F�v�M�@�z�E�Re$"ll[]
��z��L���Y�ܣ�}��Q�<�Iٳm�# ��ZE1�é#�|�S �c#o. �;�,`��h���T�#�h��Xb\x�5��
��Y瀖�J�����E^�ݴ�J?-��;b�{?\de�-I�R�w�*��k��N�����U�Ԕ���3�@ot��(TM�m����v�t)
�2����!�;q�Ҍ ��(�=�x�1-j{�%J��p	����������Ѩg��|����Fړ� �G�����vt�K,�^�\�j0�ڀ�Nj�CQim�<<��r*dC9�T3�fi��U9��ԷXN�Z�{
X~衇^z��7m>����v3��G?��x��$uË^���wߏ�����O��O�� i|��Nj�OL��,kR;�fSZfe�9s��{�����3?���x�����W����;��ٿx�k������G��� i���i�	�Q�?ȗ����b/��N'
; ^{]�2��PI�=�eK�8'	I��OM�AlEҜ/�.�0���tF��}���=�v��s�{�Ν;�c�:wn�[���6h���`��;dL�hL�M�"/��U	I�F@�@�E8*y)�u��=���B�����$�F��:����wr����ѕĕ��Y[pӘRh��ar�7� ���տ��WB(��3p�\A^_%$�fӴ\T�?g��<ꀒL�a��vU)Tzi�V!���q5�\𹙕h��%�I�m@񢚰uۋb�щ�q�*���è�Ӳ\�{�d:������-�,��(�qȲ�MW�n�A ����xj��q9p E���J����MeM�xR~�Ԉb��J���g�td�G��xm�@�1�@7b�I�Ҩ��h@��O�2*��Z�S/���\��F��,LӲ��F\kw4R0-ˤT�;��ВZ�i�k�6/�=x�Z���Q1Sss%�J�(��
�2�	��:�_���W!Wr�;C�:O� bk�+�?��@�Y�W��$`f���"/�]o}M`j�V����E^@�-&�!2e�`m�!����0��!B �v�Ƃxa4>�=��{GS�SB��s{ee�^ܧ�����*�1D���4uY��Ń�77t�"Mˌ�'�#S�b�<:R���Ob��,}' S� �)ZC�h�c�`���jDW٪�!QV!���C��ծi��@�bP/���
�ChE>MÊTń����k4F�ًԹ5" ,��R�����,�F��$������s��%�%�=+i���G���l�>�1��X�qqc�m�ǹ����������Fs?EW��<�c�����֗V���oI20��kG�t�1lR��ݙ��D���a��G*�s�&�0��(UeڂÛr�>Fe�p��6�&�X؍L���|���,���l`��j�6��k��n*owsƙ��qv��6�Зp}\VH*�j_?����8��r>X;�/ۏq��;�"d��Ҝ�19�T�MӶ=;KA Xc�� �x�ҳ��MS��sY���Ĺ���EQ`�����~��F�B0Y r�b?r���su��"2�D�JD�����9+K癀��ifBLP3����k#j�K��f�4�%�!eZ�T޶-!/�HA&s֒U�R�6jC xg`kaˈ9癬�F��g�#�D�DL`���,�2ghW�s^�e�'�gY
"��Q
��9�D0�3ʂ�lUb�`�y ��ܶ�U"K ?'�A��eg�&��w�D"���2��ɮ�(��� ��l�ī^6eQ�W�s���ʼ1��j�7�Y���>0��t��Nd A���*߇�"����TChU�eV���k.o���A�#�=��̃'$�D��pYX�%!eQ���b�ㅁ�^.]�͝K�yM%��4]�"!�b�*+�ʥʭ��E�/XeJUI*!/r����y�+NY ,���Fl^���V��� �4M`Mǈ�3i�˺�r���>V9�%�[1 D�(qJv�n����6[e��vV��Z�f�'7��Atjt�S���0���>��z5j�m����"m�ݽ����)prۮ������f;M��`-Ģ*Lҗ�-j������ٽ��P�Q"�O��>��,��'	+�CU�'{��!�/�U��y鱑��S���̾���je�z��v=�w��m���?X/6���w��<��mhU�m_܇|s�y��D����jj������s}�W+����=��`X���z��/x����}ѻ��p��_�]K��~����.�g�d|r��/yg-GW�1�z[~����}�>��~�~�mr|�?��������O^�)�ʟ�'?� ������n·�HQ��|��~R?���?M�_L|�LN�]2&�N���S�jr#��<@�C^D�L�C~�|��0-R�R�����������(EZ���i��	�H�墐e�_N���eR�֖��/��2��k��'#S*+��6����ʢt��B�I*SMuT��Fq���T�]tH$(�˳/q����L1�����t��Ȧ5!j�iYVg F��g�گ�j*�"�YF��d�r�iX��0�:���m�xE������4�L�����	!K�]�s�R���h�D���r�jv�W���F���Jw�kk%|*MSD�~}���9t�����9��o��~k�B��b�焨	Q����w�d�Cq���5Gퟱ,k�'B�����Ug�����R*��� �'��I��=�1jp����x<.�$�iG����A�F�4--��$�t1�)��`�W������ęZϓ�y���b�pvV�v[~j�����41�.�[[�P���8��G�$6)5�0)��ϞNV�<��#�i�9]߈� pryk;�!U��l����2xk��?�v����
hsy�Pj6ˆQ\a}�AXZ�~�oڞ'%b/��Z���
2''"���N`i16�����7T���=�x���i�/~��!�����/�;߈��u��q����|]��y���s	��~X'�ƚj�jμS�Y&�h37�,�/Q���x:.'eMtmB
�����y.����?9���;�,۶�ضYӒ�����0�Ń~S��pd& �ю?�l�.-���g�
��IR��P+��5��8vr�5Y�&�p�$I�k97�t8LR���iud�"\&�x�iY���=���%��շO/�ǰ��C
l'�;|^��K��BۙpM�GZ��$�o�;wƖ;*���!��?h�).׊�t��� 8nBp��O�� r�9kQ�B3I���m1L���|>c�$��=[1b� ���K���X���΍�C�1��+��4N%���k�l-N��JU����[_F&�}�J2i�p��^3�����׋���en�[��=?4���m^��C9���8/��HG"JR,�.p.�j!�x\�	?Հn�,��^Sjs�x�p��um�Q
T=,�0쵃4Tq8�i�]_Ym� Z-ۊ������:~�v�����7SU��~�j���cw	)�LH%��C�~����b�g�`hc��Z�l1б�l�Q1{���C�`�wd9I��0�Q,*��B^P|���X39�`�e�NW�Ɓs�ǟq�$������y�)e��>ضĉŬ�~�Q�:v���my���%%x~��� ��6�������BJ)R�*��G�(P�N�"�S�����CEJ�G���Gn��k���4E�"A�V  gAS���ӑm["Ա�֠���²�h�&J����6����w���ua�g��ޣ
��"`��E�AFC�5��n<7N+�����@1�H��R��q ��|Co�g+��l����C���u*ϔ֌
�s��,X]=~�ʲm��A�P)x�=�h� ���&c� 腶U��BJd�gVWa������}���~�|�Lf)k�ǏK�k���fˢ���3j�����!����P��١�������F�ݶ�(r[Gv�[�7����]�����{;p6��Sb�S~���|!���s��ؗ��Qd\�(A �1�q�jm��m.d�g5 ������WV�l;t]	�;�����~���Y[�yq<���~�:B6�煖��d���vW=�5(S�@I�V�����P,9�����E��t]φ h�^3���qr{r��yY�܆�F��O��_���͗�Y];��Eh�V�M��| ?h�m��B�7��>k?l�J�KmȾz�F��~/��@�f��Zڟ����	�G�")�!�-��Y����<��S��K��^E��ܠ�z�5���-|�5m���Y��魪������0������xb��l0 l��r���B����D�Tق��ba)\�[C{������;�s#u]�F�� p��x�w�R��4���@'��d� ��epݴ�9��M]�?��f�����w��r踀�ґ�����"	�	�y!U$�R�[���� �����U�:�Iڶ�`�D�Z��ޅ[�YM���<�^���P+��Hi�1����rN��|uu4�bX���A�^_[_.��z_2��`�p�$B$i���Y��`0Y�Pk��Pk���A�� A�O'�#��L�y���^Y�{��(:��1M��N���Z-��R` ��`5I�P2IV+B�Ȩ�������!�7}V����D��-%�����;�Jy��{w.���:<�;Zc�Ϟ��������X�8���j�1�&!aHô�ʰ�s>/�j	�#�H��ϔ$Y�=�D�f��ԧ�'���ibLs��?r����y����|�|w�yU�G�9���O��<R��J'�����=���������z����xp����>�\�;�xP�!@��>�\ĭv� �I�s��ё� `�^�\0J�?�(¡�'N��$��Hk� ��Y�"��_�<� �V�i��@�,�"9D�y�y1�p���Gn�鸜 W���R��<������&��UJWW'���⮯�D��G�����'_{��ӭ��i��MG懩�Q���R���������?|�y�?��Wt��T�0T�d&�E�T�l��� �@����
Ah���h��)���N��������G����3�1Z�����$\5*�h8��� ¨���p8��`lw�����ԭA?��ة#����)?s���~��~��ׇ�}��^×�uSI��VU� 6��1�  ������(��u�r�1�|��F��NCO�i��O���_�{�/M�4q����o5������.QS�7����S��ׁJ����������JaWT�u�xO�'��r��cǎ����a}�����z׻���ܠ����i���]�q����}o6#H����?��N�}"������d}ȦYS��Dp~��pڦ'�A�_��C=�z��8����� |�e��������.�!��0�Q8�� ���6U�kƥ�o'M*Ɠ���Yowz=���`n��{F��o����z��j�^��v���A��~�y�i��E�1%!H�A��ϗ켲NWm����~|0B��Ч"���:d۴ ���	13͘1
���� �G���n�&V%5�82��>�p��R! [�LJ�C�";x
^��9F�(��F�졔�Ñ��#�E����f8
�������L�V_d�H�K������E�8v]��5n��bv�ίT�%�s �~�D�v�i
 5�R�q�l��nG|����@Fa��[i/�f����l屟V�V�X_�i���S?���e���h��O���h|��[����~^������`m2d��569�F����Q%�9t���ͳ�T�鈴�Nx�O�p��x��bZ��"��;{{;%�"��{�ȏ�ӉT|���q���9��ټ�s�/d;�����NF�>���2����ȗ�_C ��{���Ѵ,��%�2��8�N�Sc�դ��Y.ǥ�����A[F������s!�sD�'�7�?���4������ʼ7�}����yUd�H!���(�ʅ�QJZj�ЖXm
���jiQ�^*�E�o���lb�3rደ�f�0A'���Iz0�����8[�lu(
L�C�v�	D���D�XD���8ӡ/@�G��H���6$0��;x�j���l���@��嫾�Y�8�oh�9�B��
�v%���$����7m'@��H�XI���rl�l4 �R
�R _VB �@) PY�:�A����c���/���ۈ���VO��dZկu�@T�1ʄi�0)Q(�SӴm�8cL)�mŹ6e�a ��!�Js�4�KɸЦiHf��6LJx�3L���N�H�8H����Pf �i
 KK��ʌ�w4z
n���!�N��h�Ϟa�o��F X�a���	�z��3a��X����v��%��Zh��T1�1�������@F�O1&-3�]ϫy� �P�4����C ;p�"0(�r��4RΨT���R��e�!#�D��F �3���i[�e4L��:Z۾�g��]K�^G�Ѩ!E��؈�Qk�|��	�j5-��A���K"�*�R˃�����
S���p��sE"Qp�Rږ�KhQ�4������H��
?�O�Y&[���<@c��	�������i��x��9�'7:�1J4���!���H�sN�@��Z)�P�Ek�hn5�TL'��x�6��*mt��/5�=�ա�1������0q��5�:��FR�jC�T����o]���(i4�&j�d��e[Y_�1��E�y��e�����~6�ҝ�U7r����CR
�6�	U�#�2�ʶ�K���I�R�Fw�����������gy�S~����9I�Ÿ�HF���޿�~i�@J7��m'�� h��j�K��>�T�o(��ж�J�[-��`�]qz�C��^w\�?<��͢}{�,���Z�-� *�[]׭ۆ[
�ͅ ������o�+�7�2���q0b|V�q�H'vX��絥�h���ERRk0 5�x�ʹL$���������i���:�j		��Vc�gY������t���.��!�[.�o��9�׸��?,չ^_*` �m�?���6B;D.�NbiP����i ��P�p�q��Y
���<.g��h��e�)�^�,����+Ne��{����O�uЬk׫}	�L%�2/XR}AI�����-�P]�zg��4J��skp]��`�z�W�7�R���%���[�h�zݳ���"�^�FJ����E�Xe��c�&2�?(��|�y�{��@-���8usW�����=�1�$���m.� I��f.up�=�|����w>����6-
�@;/r�ĦL�!��|���̍��+�8p_�$]]�2�ru5�)��t:�$���(Rc���V���㖸zy��5L��^��_y��v�^s�z��v��=��T�$ ���K#�&o&�0
��v^�r���1)�N�I9$��)M�!��RF���.r�¤�\^�H?�Cp��g��%������+Қ!�^^�e�x�t}=Mm�,�u���#O���8~li��͍cǖ��G����+˳k�n��5M�i��=Ƕo2LCZ�a�Ҍ�Z0�S���M�q�h6r�qo��}��Y=y���]w��n[S��tu���J�.d���R�	�﯂������a(x0]]Mk���tl�0�VӶ���:ƨ�X�2#�l��Q��D|~ �Bl� �wO��q�W$�����߀���[��۷-�������͏���ܶ����ǎ�O�y׉���	ڭbi<^*Zm������N����� ��w�"������e)��̋��{�t�B�V�~ �ZY>�k�YF8� x�B'��.��n�G�o�XV��܌۝v'Y�I�]I�a�v}� L��6-C#xn����~�Jj��X���34f ���nO5@.��0�D�NE�&u� !IF��4�;]D�TE��K��B)����2�"\&	�%r�����cq]�����O�e<�F�Y�.��E �߿����O��pT�m�������_M��
��cI;�n�-
�Iz�Ͼ��߆0l'I;������\8^ݸBբ欼��f�r	]� x�S�W_o��ۆa��54@��H;�݌ =׫�P������
fs:A��$�x\NP�L� �h:�N��z[V��U�+ê6n�=;�ˬuz2?�;��,z}� �S�G�� `�ƭ�ͶA�E�7�U�!� A���U	�o���kwG�c��?6n� ���om�A^�	��b~��|����Mȕ�����Uy����i.�5�p��_��v `o��y�Ѽ����?�-�_y�au�?��om<� b#�T��v�~J��p�^�D#ɐ�_ay3~Y�~%pƪ��X�)x'O��ukq>�� ����_z��_=�,��d���zzii{�T��F�9*Z-7��/���jŁ\՝�^B��=x
�.�4ɀ�PV�(�2-e9-�TH�
%t�<��y|�����޺�⮷X�g7ZY�_;~�w>t'L������?n���A�j�^^�������=��o���X�Br2��p�<�#���ޱg5I08vb�С�U��k��N�u�[��}�Ǐ��r�Ϝ�i��뱻�mY!3M�l�X��
��?Z�M
Jٶ�0V��$��������g�eE6ViUf��������x�Ն�A�6, ߯��"��l��u��4rl�h}�iy]���L3����o���o��	`�!GD��o�u��l򲸝p�u�Uvb���Y��֓é(�ϓ���{���������4��J]&C'H\�ty��ѕe��Mg41LO���u�̟�z�JiZJ�Tx���V�\� h��ך��&����05 \'�;��b����S�0R�-�6�z�p�MWk4[�a�-3Č�v�'�ڢ�6gȃ6��X�����I��*l��^��yYQ�ŋiY}�eGs�S�C��5���n7�a���s��2�����g�/���^����� �g��xb�M#��e��1�M��� �q_*,�G�I�\�#]��® a1Fq2��H��c�9����zF�ߡ���z0�a͒�?Ͳl����f��X��M��'^I˔��O�>���t{��=�L��T��C����N����p�v���}`s����ڨ~^�y>%�Ѕ,ϼ��A���!�h��r*[#R�sЦGB��+!U�����~��[}9�� �i������BT'�{����?�)��A�:��X$&9�${�9On'$��g����-f�����I�5c�v���RT<����L��n�ϟ�k�w���?L����f?�}⿮z�w����Dk�_^{�˭���k����U��DyD˷�0!a;�=(�����t ���.����ҍa^�We?�eI���4M���'3��Z�_k۔Ҵ���B��VL��������?n�O��^��,��˹����v{q�g�N2��N��L���C �g����A���c���4��M��ƔC��"��Ӹ��$5r%9O��|��;hB8#�4�q���I	di�����g����Hx6?/��T�V�'+�sȄ��-D���1�ˁLd�)tI� yM�쑝��D��!E*KaJ!�Uac�����
y�-N�y
E�a��h�"M��ߊg�|.����9��G�zݑ�9��Z�ʑ4!\7s�WnK�S!x�	T��U ;�,�2�R��ݏ#���
��c�m�0�`2�19R�RDdJH�f���� �ڦ%�82���� ���"H����@G�#�Ҿ�����_��5�Z-�AD�N �\m�O� ��j݈�9�`R���.� ���0�R���6�Kp!��,��ā��z=�4��r��C)��c���Y^�m��`�(�`�:�cF�R*@���j��cۮ�5�vl�JY���0�8�� G��A��J���6��&�����3��eY��rU�2
H�\��/��%��� �ihfT��XU�̕Wr<(r2q�sx�NMS�,�4H"Ld���cD+�d�n1/�ԏh�NGƭ$Q*IZ+Y�����[[�l��,�o-EP�a�UJׯ[	݆i[n7B�¨�#��a�;��� X#w���^���8\mD!7�+���kYTQ�ͧR�[E�r����q��>��G��~�@
����)�ʣ����7����OgE^<�Hq͉%L��~R���/_�����ƚ纆aܿ��6�R��2��W����8Ia��i��������F���Z�$R�9�����M�p]w-n�����7����ř��:��ښ�6�^#�\^��#���7�����ث�.�����řn�h6��%/X[[I�$�4�u����t�׮���Z=U�'��z��������;�M�T�mw.�������%���B��3���8ێ�����f�#1q^H�'�d�ܨ�h���ɇӳRL���vY��y� �v3�qqmZ�9�,j6ˋi���LA��f����~|2���;w.q=ێ��p��W�����o�V���3� �v�h���O�g�|����|���D��8? Z�Rø�w��a��e�<�T ����p7�J㞐�9�HҮ�5I�_�8�����*�2�*d�E���ۘB�А�%����+���8�ǏqVFeVsZZ��������|iii�����ʣG��V�>������k����DQ���������֚�I? °�*l�`�������6@�o:F���;V�v�ˆ�j�IO�g� 8ӛ��D�Ū=�9O /�X�W, uX��I'>2Π��fV�y��ۥ"�iB����"�{���7�e"��o>����ðщ���۩�,��ةE�1N�|������w�]�Q���Q�\��t��1Fa3�(��8�cG�k㱜\[� ��K;��XO� 1��gY5�'�{X����ĲLˈ�8�FB4�]e�ɏ��(6�*f�m~/��3K��+��2�{�,e9�d�iR{KE�[����a�I-�Ѧ��t1�Y����H#��9���'cI�&�X�{����9G�kB "H	X�BP*%�3)�?!2T̂ҋ6��@
H�(���i8px��"�Z���A� $�`���N�H���`� �@4�r����c�N1v�����S��z����Nr~�U��e�fM ��(no#���qJ���HO�d��i�  ���z=��~���/�ilR�H�<�a��x�I�O�YQeC0P��BH�A?I�0�7� ��$(�8! ĉw`�-�[佰���*x�[�%�W��P��^��� ��}���V���a���^\�t��j?��f��JbD���+�m��h��l&vVWMۑ���׼��O�����z����J!����ͦ��~	|�Sĭ�Y�&7E�.R�����y9�K�m1��y\�r���~�������$�y<�Q1������Y��ƿ�O}�������窪�>��'�<�ɔ=�����~��/�����J�_��Ľ�>����ӟ����>���h4��~���>mz�d� �#!���1��|��QN �⛷Y�K�w�1Մ�E`��(��J�I,��� 7��3xҹti�J"����~����/y$H@.-���r��FQ�1M�l�F��4�;�X괵v�A�Z;�[��b�X�'Z�����A�����d6)���پ��A�z��V�]S�^kRdLr��8N�d���&aZ�i���2M�Mk���7��G���欑. �������fI� PK�Q�=� ��^�Io)M#@�����Eq����J~]�u|7�]W'���0��RF�:�J�0hdq�t���w���a8����\��s��e�E�Դ,+iDk?A��s˲�4E <��F`�?e��璷��Y����x?x�e%��b>+���A��NR�I���|�=Q�r|��RH� _͔Y&wҴ�Ŋ�	�y�� 5�*��V�r6�e��!�FqT���`.�:&�O��%�"}4y��R��C�����͍� $w�e�* ���@��08u�:$!m���ض}�Q�r�8���2H��`��5�a��� ���2C �1
)#��s��7�I��	h�f�6���u��k
�
�V��x&"F�+-�����H�D�W��/�ʇ�.����������[�)��#�"/$����I*a���T�J(\<m�E�F�ŉBy`%]�Ax)����f�y�e\�W�����������,� '���4��	%�Wr���k����Z
؇@�a�Z�,�n��i�n������(��:�8#ۆiC+�u��j�F2)���P��!�p0|�=z.p�6-��@�w��v1�6\�4�@���m���0 f����l����������ע��>���>���� ��8"��yE{��,�_���#@��s��3
���0L�B�䞌	��V?!�Ų�*lj���s���"z촔.�����^7�F*�'Q�lg�å�++}e��<�=[ije(�$��|��������2i�3���f���*:�B��R���[+�]AG�Vxֶ�j5���R�l5;�ZM�xouն�ʴxb��pz��굼Xv�:[���晱��w�uU�VC����q�������q4ڪ*[gsc��(�C���h�܌��ٙ�M$@����Sp�\E�hP�e^�e>/�q�R���-_:o��g��39R-~�Kd��/K��ڶ�0���a8����۰l�Cr��T��o��((g���޲-ۆZ��p�-��� ,�y�j���-;�͢(��m�Gwwo��ZE�ZJ���)\"-�L��ry!0Is�]��(��I����Ȑ�*\JR!��5H t�b�9���[Lg�^ih�Z��PU�W�'�h����q� �T�s�L��6k 5�0��'�nl nl�m� n'�[��U
�>cp��p�nl��~�3�� �������4M)�O?6 M����%ĥ���%�q�j�kB()����R>�p�`���̣�P !���Ѵ/�e%=�0��e��t@�s(S�2t>�i�bvi�b%3W�S��˅�?ˡt|���Q2��	!�v����]c
.��E���5���Þ6�����6�Vw�T4�TE�Ջ|S��Q�}�VO��a�5��wc���|�[��B����ʪ���P�a� ��M�0�-�YY=3ZRȰ�(���&�|�n���׹Z�\���G��C�	��\�-+ɀ�c�_�J��g�}x]���#EQ���{���_,����O�s����~��o����_������Ν;��A� ;�����J�	IN���=z�|HLq�\���U�.&"M��@�ܔ)R�,^1�������+u���������S)�ӆ^�Z۱����;;;�0� d�{Z�w}e���{��8�����?d�.JeZ��ܞOJ�IUM��{ɣE�f�U�%�.mPaVb^l6I�yt�i�e��Ů"�ক��4���Ÿ�է��qe"i��8�F�ɉ�����J�J�5i���N���r��n�L�����<��4 �BP�0&mL��鯼�fJ`��Y�*Xd�;�<5���oG
�W�Z&*���j])Ŕ�+��Ж�Hը2@KH)�6MRژ(�m�(͜f��P�MK���vGI�9Gj
)�a� �����RJ�H5@ΩR�1\��!��)��(��2�S�HWY*�dC˶�Q�r�X��<``��J�f�9� ��3���E�͇�
H�'Nn��E��̵�������� %9qǌsC�x�0A���cTp@�d�	�`h)%
_���m�v pU�Ȅ)6� �@Q�RP渌J�)�)��Q�G��(V ��p��]�<"����4_�g�1~�NQ $ݕՕ�n
��!b���dH���(y�9�)�y�?ɟ2���}_'s�Dk2e̋"���dZ�ʛaҴۂD���"�y|w"��]-R�gi�!"�E�")�2�+@4�BN��!d~���F��G��D�r����7c�O���dccc�����sg�I/������ʅ�;�����v�o{��Z�������� �uWM�Y"�ɝ�e���s������m�
6���~h��~�ۚ�,�A��e�݄@�.��I�i&b��0��JfEZ�j6�d�Д��-�p[�v�-������Q,~�j��eY��]9�'�<��.`��Üsʵπs-�9e*B�B�����g���3���0�vB��P��A����hH�a"( �L 0���?��?oL�rS�`??�ڤ!�G}�m�"���Ѝ�c=�R�&F
^�>�׹B{�kJ�u������`Rʀ�Q��;� �@��P�m�g�M��=c-����@�Q�O�!���A� F.�i9U�*]E /#�"o ��g�rZ�"h�r��|?�B
�o(ס�H'h�.�1b�k%�N��V�΋=�V��?��.�]i��sAJZ�y��9����]�ʦYR��h�|O���{�Ź������G�fG��[�	��~`�oY&�j6�`\�a@ּ�)%�]��`k×�W2뢌"ֿ����>}�������8��m�9�j� ��ۥ�K�}����5cJ����)S*ܚ��f��=_u���W�& ������~Բ����}ϛ�����z� ��DhR"�����TEZ��RGJ��"��fD3��WS�s�NJY�c]�����ae�0�8i���C�5Ȯ��}�n��bHai����t����l�>��$1�;�k���#e�v�t:E��zme���nO-g��õ���jta(��� P(� ��o�{yE~�u����������D�ֹ���x�0�t$��Ju�	C��ꗝ�J���$L�p6�pD�o�7�j�cYab�`�n���e�� m�50� ��5�(ll�6� 	e5��o�`3�X`�ON��8��炡�W��7�J!�-3��6D���u,�,����L��2-�≠/§�2����y�4Cˏ��.��jp�gŴ��{����~���Ҿ$5�I<�-�۩Q�
:q�D���5M�����$�*�����76�&���7ď_����RX�O>��	b2����+�����b�`ڇ���Z�MLL�ϰ�w�D�����cp��ȳ���O�_����h�$M�C#J��bq%�Ľ���_He�0ŭc�2�r�G��24�fdT��\!W�����^1�N�X�g�J{!�J�
��o��X
	�MR݀�.L��l�0�Gq�a�4�q-��:.��#��_q�t`�YFM�6�}}n���rn�� id�0� ]�3L�V8���Sk��}��ڑ�m�@���P�#UD�i2 εN8���r]�Cw'��EzYJC�����0-�O���޴�ԝ����w�}��۟[��/]�t�a[��o���7`e���=�q��	|�\ ���������ȇ��ȯ�/��'B����o `CrX�
�d�����Eai�ڦf��\��R�q��d["�'�T+T�6��.���^�Ŵ���4����粒�b��x\��ړ���;04�o�*c�d׭�X�F�T'P�+YY�IH$���A*��i��Y�ɲ(���-gK���w�rk��lV�Ӽ(�A�,3S�ƀ��Vd��������R��c*��q��t:E�� ��R�G�t���0+ s���`��� �	`�?��2�O�S ܂�Ӎ��4�� ����Y�4.\�p݅�ĵ�^{R���!��������a/cB�+�5}�1�D����Ç_�<�+++��gHJ�i��+���;�;~1c�G�P٦Ͳ(��ǫ�B���Ûo��2�A����{�p�Lv7R��J�����ۨ��njY�kW]u�U7 ��G��=�����777��u��^y� ��=� |Ѳ,˼馛n��8��������ny9��%/�=� �b!љk�$9z��;�<ϯ�e}}��`�Cර ��nKJ	pǅdwww�T >��{�H>r-   !H��p�$d��kJL9�{��K	ymt'-�6-38�'�'w�\�E��B,�τ��[l�a���f�y��i{h��A���m�ln�P��O�4�+\���ڲr�:n��.���E��yQM��	��dz�^��ԩ�7�����18�Q�&�7��|�Df=t�UY��ۻ鍍Ƒɴ�1K��A��3݈{�C�9�����}�ȷȟ��%�D~l��	X�1TpN�Up3���L���f�*����.d��i�z�F��V��L�3�,~T�����@�nެ�����J�JlA�˨I�S��͒D��(u�P��Ӳ*}zG;�/��Y>��x7��Ml.&�9^g��u^����.�f�n�u~�1���t:����X�4��na�u������`0��~�߿������װ��4�Ӄ�`p:MӁ��٣/6_�1x���
�aj?Q����|��I�ɲ@k�wܗ��i�M�i��5MӜ���_��W� �����;�?��/����?5��������l���~�����4��p0r�q�e۶a3�0c=�|Ŷm�ð���$�Z�\g|���������)��~q��s)4�')�T�,��M)EC!����_�����G�����>���W�t�M7���O���������}��y����/���L�$�P������Of�!�M��q\fd�Y����e�]�P�n��6��#�*ǣb�����e�HCH�[��T;����<[�������h��I��-L%��|�k�ڝMB�����E�4���p�&՘:{/%j���^�, ��J��Qt��y�g�w��]�qIƄ��(vg��VQ4mM M�.M�yk���i�Q�����|z�yü�ǖ\i�	��r�Vk�ʆ�&XV�j��}%}o�QK�+�YK��4��Nh�����Ukk�B	9��O[dN^�oϼ/�߅S.8v��S����+�O
AJԃJ:�h��T��]	��4����m������Ro��Pg�I�>�f6���k�3|#���RR�M�i
��A+Cq��`�F�� t���4N�3݈N��l�ti�ca�SC�Ci%�n	�����������}����������r��\4�������O>9�����,%�x���tE,�R�*���
7as:�Ĉ_�z:E�N��j��*��F�^�*�'�o�����L~�q:�������&���΍���`m�ر�5�>J�h
�I�6OG���A	�a��]s�5�)������w���w��v�n����� ������4�:�D>F>K~������@CVa����=�I���{����O⍄�2/2/f�@�r6���`�vE�-�E:/'g5s�����By�p�f~�mK��(��I:��K�X �ѸbЗ�B��w��QR��ΊbA�!�o�rz&¬xe2�<|ȁ�4�#�BDR�eF��b�pv<��Qə�L���;�ڞ }_
 aD}�t�I��w!�c5��5L0t�c�_��W��pg�Wѱ��J)�4>	��l[/`�m��3��ɥTJ�0LC)E)�ڱ\)�)�Q.�BB(!�ķ�ϐ���YBF�,K���*�%4D���&���PM���m��m�vn��[�@L�����/Z��S��zm�'ߛ$��~7�U���S�vf%\�S��rW�ZͶk�﷢��>�K%�<�����h�V�1t3zz}�� ֚�xW(Xӵ��%i�Jx45����o:�ʮ�����	wS��/�ZL��!ܞCf�����<���qǇ�\A81 ��Z�V�f������		<�Y�*I��KRdyK�a�^��Kcg�����/,p���D  ���i꿟,>k`l<� 0���G?�ф<� ��#�E�.9�$I��ֹW��j��1�az?c,�E硋�}���e�~�+Th/z5���:dǴϭ`�
ڽh�n!b7��v�����.��\������I:���h�}��UJAPQy��E�5
�^�7�;�knn0�a5�8eXT�4�$ �a�֒V�V3}'�p�)�������F���v �4�{7n�spKI�m���˴A7ډ��Z��)�Vx���T1l�2R�o��v�O���f�@q����̂�r\CxA�N~[��q_?�8�����c����4��o7��οO����j?q�đ���(��82����t����~��~��A������/*a�n�
�uK^��K�ht��0ȇ���I�̧�:ډ.F��҇Ч����vF����`��z��L�;�E<(B� ���l
���o��1����v+���3T�c�hؾ���Vf�'��u�������V�h�ǻ���0���/���ܶ�#�*�J�M���.i`]�&K&���u�0p}_�Vk<^Y��hԋ���q�l��"77���۶qxn�"&�H�nG�����k6���u7͊�)&������ƙ3Ӿ��9<�`ccc�;0�ܴ��3g����q��3Ӟ��98�?�ꫯ���77-o��Y[*��$��_�oC�"��k�ؽ*?��}�m�&;u�ԩ��8䕃��h��	o�}>A|5[�?u�ԩvE>p�Ͻ��p��H+��:%?,�s�pmGG�4������p/���93bz��-�6D�e�F<��z��&���,��,g�ʘ�������3^%��؞�x�$Q]���|��5&J��7܎�"n��-�c��m*c�ٯ�cJ}f#���_�1c����B��UcE�:%����g�8��h� q�L�4��4M3䟒UP��F4��a�uI�urn�N�(�i����=��bm/���*����ˀ��_6S)�+3��`����1�t��uVQݪ�tE�O����a�:c�E���P7��۶mǺ�{�K�Nt: ��D
�9,Ȃ 	��:���l�=YQu�S�(*"H� �]xA���o�6Q������\H�];�ndq������J<;��7o=��(P��!=�VE.�BR�]�b���$�fVC�!��*�X�R7�ME)=v1������l�E"'�䙯I�kf���EAe9v��#/�'�	OA�!H�$=��\�ي>R0	��I��6�$Mx��`.�ыF�0/�0�rf8ݲkeK}e�fޜ�E#h���Q�jԀg��H*��+��AyE�+�+�Z�h����?E�$�ʲJCV�Po9��bg�i��3|o��&	S�����aқ�&zzz�,�� �}歌8v^�B@��|�H�����'E�\������xϦ�N�i�|�e�T����J��6v�b�pw�"��q��Y��MC��-Kp�uj�1<��Ű��TMug�*܉�X ʃ��X��$ɮ�E��E���D���y��/�y��f�a�y>�	��8��1G	f�-1&SʨB��[v�
�y�a��y��Տ�9�	�0,?cV���������w����u-�����;��9I���c�%y+c����º���q�q\�]��V��N:�u	Q(�Tf�|H�=k<�8��G�G����φx8�Y��7�q����ޱ������x@��j�Z��ܖe"�t���	��ё�� ���ޚ'Dм�T�Ǝ�����n����,F5Wy�����{��x�=n�=?���4x��2�qtv��k��?Z_]�b���Ov�ϷZ��CX�~�������%��yq��y|�S�Ox'�d䵝&i/M)�W�I��zy���^4L�l�$���zY��^�L�e�h���^�佴���a��[���b�%Y/��%y���0��è���4k�!xh�4�C�������&�nr�����7�lGFSA�n��`;.�)"B~�k;�v���e��	��= �ु�.*��Ę�.�NmY�[����7"���u�l��3�3Fe�Pe�E���;����t	W4M*�VV.�j���1ul^��a�l���������%"�X�P9�(QS#�L&:�	Qly-C'��1�t]�rv��j&���\�ϛ�=��a���fk<>��B�s_��Y��㳌I��A�����O�Id��qԸ$�z����`H� L��b��[��z��p��Tqu��'� &����L����������I�Y+Y���j[�[ �Rov���^��`��w.���־s�i4D;�Z0��
� =&uKx=��r#�"si�&��0��
��p4��+�V?�_����F���T ?�����^�wۼouz&�1�<��.V}?�i�E�}�պ��»˲*��0;�Fа*g����`xQX���.�v:�a��+c�du�Q�4��޴�p<�Q��Ʈ��~�}�4�b���a���#߹���p�_�6=�zD��mSB�W�;Y�0�!� ���k�$Iڼc�1�������$�j�
o�"�ISQ����p�=�p�d�%I<�I�����!Pj�eMc�����=�'�<��^��9I�@���k���ށn@�F/A_��(����0�I��X{�Ͱ�CA*i�
b	�2�����X���������ʅ4�(�-�r�Ei������C�K!RB_��*�df��A��b\Ƣ���!�8�y���J�v���0�NM5�$-�� 6,��b L��;{=I<������0PxL��F�N��xn�����U��K^���"8�s�F	�9��Ғ��<5ac�1Q�5����'S? ���ZՈ� �j�f�eͶgݦKY#��$Ad `N|���Qx�`rj�J�#I��El1f�26%I� o�}DH�{T� �`�Ez�@8n��F���x������1j2N��������ЉZǦ�B���C�u�C=�B}��ێ�Q������CT:�v����FY�2�fː�L�9S��N�8jOv=f��k������j��}�08�mc��������;Y�)4ބj�`�z�	M�(����i2��[�����S�
����Ŷ���t��L�Z�p��� `C��(UI�#Y�x��Xf�5��R.�1p��e޲E
 �)e (U!�t�p^�L�b�9��1��Ѭ�E`_{��/�	���l8{�C��to�����#Qr�d�m�SLN$�5_pp�[?�#y��5��]���5Tl�LB��N�y�|�����S�v�)8��������ᎩJ��C�sz�.Z��x(����%�X<y��C��޵���&�޻�������w�l;�����^�3��Z9"6�&O��v ��z���Y�<Ȋ���pv)��,�8�
�8�P��^G�Q9��ap�<�tꑎ @�!�LP�����cj�EQ��^,�P���[{����j Ƿb�Q����\��� KM�s�<��o`�՞�1�y��ͦP*	͊��^6�<~	A�����#-��(���j���	��4����;����"�daa}}a�X����|8�&�4��u]w�Q�e,�F��$�~�l�DZ�,/ ��4bX�� p	r�e�3K�4�qe�W��0��Z͒�p0��Uq��(��eW��PU�E�ښ=GU4�I�(ڻx xW�4�E�Д��>�&�ty���,��k�3��Z���Q��2�E� 
t���h���f1,&�#	<���]vώ���W���e��n�&�t�'��Nҹ��U�� `Vf��~Z.s�33[�NbF)�& Q������"����N�a�`�C��N�Z�}�� M0�����R;���A���W��|ޅ,4�.@�AȜ]t�md��[�7��i��(�M1~^>���RZ��$k��׹g\��s6Y\\�^�v�ݥ����33��~V�VkYq�׫� ���e�9�#F׎�n�\����s��ݱ�t{���+�#�V��T$��v
x�h>�Ӭ�J��ILcgD��eV<\��/���_����ַ�	��o��{k}}�����J����ɥ�y�{��oT��?��O�䜎�3c�==�>�Ic
��<��lq�'<�)�
|X�<� '���(�q���䎸%�k%�b;jFxe�s,mBׁ_A@�$�1	I�@�ٵ@d�����("h@�m�H@��8�� ���IHHH�	$�4 �2�8CH�AH��pB�^<[��aG�h"���&&�L���\�VEi_�J)]"diH�K��(n��E�]7��a���ä8��q!�d *G����_ׄ����.~�u�aL���,ɲ��.����n��$��U�2��Qo%���-+��85�Ԙ��u�u7Vk�,K�
�d��Y�� ���b����� �^1puݱk5��u���E�Zt�-�n�f�s"�a<����1�F�Ho�7ѷ���:BW��|���`�UY2VWI�a�w�M�*�=�ո���I�+KF<+�cƱW���|�*�	jǖ�d.�1���]�&�`�
�''�3@E4]�t���Z��dr��Ȭ���˰ommmϞ5i�o{�;�񎫞W~�[��{Ǜ���۷oO���gGi6�L��x�	���);8�X�`*�3�IJ��%�V�M��+_�(�֥�
�fw�NM9�'�x��8D�`��V�{IͶ�r� ����K�hQ�dY�6��P�-}�:؟��6�ݕ�m۱'��Vc�U��j������i�K�,$���v�rB��ƹ���#�!u�N��{��)DY�@���	�Yi4W�iz<��,�xrrLo�$��-w'�榧}|ojzn�߇�:t����ɓ�^������\�������ڣ�.
?��dQ\}��\�n\<�رc�9�'8y����u�!��YH�,��:Jb�<�iq�8׻�?z���g��o����=����4����x���7��X���76����������}�~
������ԥ�j#��0��E���:D�ԥˮ� ��`5*F)� V1�S��x��s���Q�j(J����Y#�Z���c�ʵ9���q�.B߁;�	u*�T:���n$��!�^�:(C;4��L �s�F�P�%Ch�u�7wrFI�U�������Z-���D�AP��k��YZ\X__X,��֛��n�[3Y��'��׼�5�Z��烪V*�
��n�VV��J���W.��_s]WĆ�km~!��6�
��v�D�K��Ŕ��``��R���XE�+"t�J31�rk��h�xnם����Us�9��*�י�o^\�I� �����={��G��]K_��G?������]x�p��sອ�X�����X���:
���}@��C��q�I�$������ڹ�۾;����>R	�Z.���ԋ����}���(��PhnN'��uv��Ϸ� �����L���q�[�u5���b:�EG�I� ���\*�~nmu��B�ZL�W�Oo��Ji�ݧt�,S�*(�q}i��6��Fo=E1�L�$B�����Qx_�-E W�
Ac0T��M�U�*@_
�
�^�K�/%{`��vJ×��X4����!%1�%��HO+ǩ�ju�Y�k�\Q�U�^Y��㥵���?�vv���K�C�k��!-��tG�t!8��[w]l����=�z���^�����(&����8PŚ�������S9`|�di�ҍ�1��������E!������|�ȣp4�T �}�v�ۇ�el����e4����Ν�ٖe�6պŁ�-�_;����V��'n����P}�ǴNn#� ��,Ȧ���
+��<�|QTCv+I��ϥ �t�Aa`�fB�ۙʤ��7���_�#t:�(��y�Bv��+��4фS��R��e2�l�O�~`P0�8Q`Y.X��=۩G��}����F���v4�~Zv�3�Ms��6�u�o��Ч�5�����q*{>�Q�f��qB�2ɏ�qYV��=�J�(����$�IU E����g�,+�h�=�d����,B�&I�z�r^�I��V����6�/��Mⰳ��]S�8�'�ݩ�w�8a�i�,I���oOvM�w��7w'������淾��o}���/>{ҙ�M���3��[�/鎬��T��3-�sN���s=c��\���E�/x����/�����g����泧�9>sf���h�G��8�=r��0�#v�6��HM�[M�i�ʸ`�/.�J�eZ����������O����g�t��h��19�k���'N��FahYn}�:���Ƀ�a����<�XQ���fC����z��{�}e�N��V�@����ӟ���� e�s�c7Hv!���>ۓq������ɯ�/��'�f�;��|'�s]Qf �#ɔ����9t�͹��:����%ƗQ�h�N�Q�zh��~$Ng���u.���|��C��7w>�>Ǣ����������B�]D�S.���Iδ��`�u�FM �,Ok�������A�szѠ�Ǒ�@�0��B��r]ϲ%��z�j &8 �MC���q��Y�\W+ �]W鉪#����&���;��A�%!b`	a�0{umeyvnuD'2����R�F��Ԩ��6{>�a7�ǖ)!�P!��vQ�Q랭5����z��)��VK�Zc4j��U����I=D�n�YF)��)����.�}�똦i:wZ�++�Wc�	��59�^H1ꍽE���x��:����g�7VV�������V^�޿�����}��(FQ��!�V���W(���ֳ�m_�)T0����*�"c:��䴌��]�L���}�o���������(b�_���V=̲aƦ���7�^���۞�뇐$�~����Ws���#Y�e�,���Z���p�Oc��S���~��!I��;RV�`�����x�bm��p��&�?����K{{X�Mo��;c\�_?c���e'E3@A݀�����cul���tΘ�����
������u��te��;^�\�ŝ�?����M��C�G��(�/{�H#[�V���>в�9���4@�}� �W�By�|.��#d�M3!k6�q� 2��U:QZfg��U^�s��;�H巣~�Ρk�9�Cq4��>�&�h)����;q�m&�6�g���)}�s��k�Q�m�9�|q�rEn�gDP9I�C�� �5A�rx� O�i>���.o���y����P[������Ŭ
�r:��Q��e�h'��>
���3�&er
�d$
�& L)�0���K�Y��z�r;�z.�v��r��p�p'圁��v�)�&�k����	���u$58����KH����)��	�Q��ׅ{\�(m�|2-���1���qd��  ��z���|?V���_��_���r��3���j�zu�tӅŧ��֜BGĬ,ҴX�i�s.����䜦B�Q-�nYY�`���LŢ��AY��ꌸU�jq3G����\q	�;'��ٙ�)]>�BQGBtk��{�P*t���*X��P��P��0�c�7�ˏLg]!<�q-�4��K)�Ԇ�����9�(j�V���( �9:Nmx��[��9�(��R��aHƘ͕���Ș�ܯ��!CC �ehR �iZ�3p-�u�Z�hx���4��?(eHiheaF�s�9�s�8��1�0(: �4�@sM*�$g�c�����5�_ԫ�<ЊP�!�Ӯ�V'�(�G���  f"�ij�F�Ƅ�֨��N)�-� �"ϣi�]/�9��o6[������Z6lyA`'Q$�G���D�g�|B� p/��v��d�ň���[oE��5���7��k)RFr&rD-����F�T�\��޿hk�l�Yop�4��X��3�;����O�g�W2�F��s�lV�A��l�?b�_(�_�$�L���t�P9�����*�U;w�ZDi���O8.5�6�F���RR�@1��0
�9�c3��+�-�n�6:Q$$��DZK��H� D`���ꃠ������RT�K�ˍ8��Z�$E����<3�(Zq�ؖ����Fd"�#ÌN"��t΋�R�k#���BQ���|���\��^,5����aFM������"N�� ���_Z�T����D
�����y���hd������Zl�qeah=g�P�D�"0lx��=z���@���|�董	��յ�ݼ@����[���V�,�3+yѾY)�#�7�y�|euw������B�Emq�y����3�6[Jm�=������V�aS14�EFt�Q����A�_�<2�t: ��dz���a�7�|���ѳ777�I�LqRx֩S�:'��UU�V��ur�����M���ht��柿뮻����q�:������4M����ѻ���gч/��FkDw��:�
��ȿR���"�Aˑ\\����7���|A��M��.$�(�L����qQ���g����t��&��g�1��@�&A��L�gs��KM�4��S}��Yk�6Ch�ʺ� j@͗�������k+�|ޒ�cJÆ��,�U���������tE(e�ѱz�6 t��ā� �"�_����|i	�R�NsO7��J�� j����^�	@9�TJi;�Ԗ)�iE��Rz���
9&��h���BH�\(!�J�Xi�{�z�
ڠ��*ː�2$�!5`���kx�m���1+�z��a[Ҵ-�~f[�l�4����+L�V���7��4��0R ���$uY�w:�Q����w�N��:��J(j+���L_\ (� ��Qʅ���(U4����A�.�(4�m�!}D�GI-�
mf��k;�sl��;��7��7	%�����SrS|Aoll���	+�^����Q݇Cn��e��>?��1�5`�e�7���u��D�(`V櫲"�I)˪�Ze@ $��i`��7�*J���ٶM]�q�e�������U6�Z�z�˙s�q���E�<�8��3�d�;߯,7\$K=����C��޽��OD�+����բ_�4�z�چ%��9��Q��<�9.��'IgU���Z}8KՉ�e!�%�"s�����~DL�# �]ge7^���LC����y��`���dʉ[�r�j�uL��f!�,aS�Q�Y�`�~�2Ѿ6Q'�*i�~u��7i��jR�wb�{pɐR�f��ꕀ/sh�����P!�/�FC�#������h��C]Sc��j1Sk���)dِ*
lm�����̴m�v:�6��� p������2ϩJk�R(q�i9�bX�e�R��h<�F�h�����M�@l˲�s��@F��e�62
`�m �� P !�B�u?������I�;qy5y~�gR>��|#�t 9V��آu~���-�T�A��ޫ�*Jrf#~^*����BFe��,%���ܸT�Pc��_����B�?��&7�U6e���5|�&���B�,��
M#n���t5���/@��3����@c4�!��ڪ��<�[�%`,�ԅ���iͩ���7�i���8�4 ����_����x �g])�6G*mǶy�a6˖m9ݞ`��J��4Ms���aS�Tz�w5T��}�A��߁l�;&f*�F��ii{e���\��ړi �u{N&��0�A�}�<����$ �^8�J$�s�Q���Ru�Yqiiy%�M���w��C#������#W��wU���x�Z��|s�ھky�[����]o4`4Y	�Ve%+YMT��Жeu���&:����n�j}��*�9�j��/dQ_��kUUV�Bʾ[�d%dH�evVvP��ɒ�oMwh���;s�(�n\�ʢ����������ۊ�e%��ċ��3���Y��Z�����V�e���Ð��v���y��߭�&Z��E�1:�!�p�U��	��֌ClI��Z��Ծ�5��^`6�����B%�SJ��GcK��]��\��p�vӲh�8�g��U�����( �����؆���>K�Rh1�G�+���a"��Y�Ք��V�Ela���G�x��ZD|1���9��@p�VE��
�����d-���_�Ϲ	[��wP=uðlm ��Q>oQj�9|�p���y�/ᕾ�� _�>�G��2X�K���(�-\��k�p}5s�C0L�ҕ%��.u<�D]cw�a����N��>��u���q�g�֞�;��^й�͟�:���F�)"��qx�&א�$]�*����fhM��N���4�,���m�X�b)Md,C�4aMҤJ{�+�� ]2M��_���=�t�q������&�.j���\�U��ch*>с
�)�Fq$�0����H�]J]*������e9(�1����WARf#.t-w���e�в�6��*�n=ěj��ܚ�8 J;3q��W���}J���aDQ�}nQ�4`�b��T�s�dts���6���BJO"0�f(�TX-�z��ŤMS[�ԯ�,/N�:q���sJŏ}�G5Wm�l�`��p���-A*��5ќ2��m��A�� ��R��q! ôs���-�����5��O3� �[�B���!c ( �/�9���9DŔ)  8�"�P�"Gf�����QM�!% c�# ΍��D�3x��"�v3���1�B� (#˚�Q7��|�$d�!W���d'��#)4�"�®�`�Wt��$�v�$�MR��w'�b���Ϊ<��F,�K�o�5���݉ֆ}����Z맹�y7./G�����c�sc#⎍���ug�~�l�f�{Gm�u�a���;m߿b�s=o�2��!�0��;ѶE�s7���{�������R���3mi��ڳg�:��Y��n��9,��YD����!6<�'��^�^-?����tU%��ipm6�=W)D�L��4m�� au�u|:�x���dײ�GN�<�.<����{�������Yf�WO�<�)<״��9���[Zv]��OTxz�q-�W���m�K����mëoǉlۆ��"y��B�H�,��)y����/�6
�/;0bkV�8�Ɗ �ʰ�\�D�5I���yZ8�"y`Y�GX������؁a�)����4Ƒ��(����b��?D�HB�QI��;6��Yz� 7����5ԃ�����W, �*b��t:�{�ۘ����D+q���� ��W�%+��R)�z�\�p�,L ���1��iy�}FQj�cN��_�S�n��J=�n�=I�T$q3�n��ڂ^,pE�l�y���eX��f�R����f4�ˋ�l�L�g�G��AXj����&I����n��c<.Kk3�`�s��YOi�بUwUٔ�ˮ�^=�B�(h�yG�\�j@�Omo�9��d�c��t�s<�v�5�V^�K �������3$��P��1��N|aۆF�]@hӒ�?��B�@o��(d��$!���{Z��#������_���>��K�����>H����}��ɖ��G��_A���Y�]�����p� -������ݨ�^��(j6=�?�7]Qm�ZJ�F[��n���e���Usu����V���3W�J�����,
[ϗ�#G��L��0:r��+vv�}���7ǽ��z��/2�����tD6ȕ�' .]Z3�
B	��)��
P@7 �~�����!sDk��Q8~�j6�Q�aJi�R^��7�R����qci�i���+�z���2��f��֦��2�[c�J��R��w����ڿ�X{����}��U��T�s7��\�IXL�E��䕙"�������?? �n/���M�����?�������~�7�zDv���:�|��������]�g�µfX>�f��� 3u�����>~�:���-/�Vi��.zdQ-���tz��~ݶ(Fi��V�-�����w�b���|Q̲�i��-�?�Z�ij��� �(�ME�,�\Ac1�vP�!u}���5�+u�����h�j2�k��Rq�i���KKK.����/� ��t�@%
@%
�F� 0�}���~���xm-\�cƴ�l���8 OZK&�A���u{ݠ�t�:��c)=Mm��4��v�� oǑ����K.������SZ�'��{��z�n u�$���E|%�$'��c�q�s���: B�a+nX�O��f0����rX�	��ME:-z�lʮ9�Ar��m���(�"{��U�(r��r�gQG�EΨ
OP&���+֯1�	G&��&mD6G��iR�k9&K#G�n�R����k(z�j�1���#%����P�\�*C�C϶X�?���BI���T�B-\�q� ��� hbR:��Z��m�`Jy'��"4M0^�=�h)�H!�Ӗ�.7��z��B e`��z����\Ä�z�6ܧI��@J�$A�aW ��;�ӄ֒c� FLH\a��[���Dq�?Zx�5�e�����B����6������=M�t�`?Þ+_&�鷫�nsss��v����vac�nb^>���	�Y9�Q��tT#ρBZZ����-N���~i��Z��p�����Z�������Zs]����p���E'ך�%���"Hr�Y\�/������^�a��0��tQ��&5��y6�8���X��x\�q�"�SW��'YZ��*+��X\h���d>.ǅ��r��[�L'S�~�8[�+��Z(�e�	c%'\x�_���rV-�"b��V�B$���\T�l=�%�A���̋[\����{D=�7	���(���t���yq�d�������E��c�VX_�4.�~!�E�@K��'G�2�G[
�<�-�����4�S�`�K���.�ޜ�$��[Q���r���ZiR���2=` `��p��� ���#Z��鹦/8�L[� _��0v�C�������ia�p�f�3D���Z�K�����궜$���z-7������ ��9l!6
M[r�D��Hv��F�˭V�q߲�������J���1Jڦ2ti�3J��8j1�2�Pʨ��1#�<�D�> ���@��N=@h' ��˙���/UN\y��3�\�3.����8�"�:�q�����fH�k(��T)�c�2�}n�\VĔ��S{B�6��A2���X:e�uRihEiF+K]Գ,@�7-^)�Ý��4�kZ؊q�P�|47�
bTsM̰�% ް�J{/󵎷2R2��gL��L�� ���0��
��py�z�_�QP� >Q�(h;4��~�
@Ʊ�D ��RK�V�j�"�& Ś�I�l�69riY��( 2긞I lC�T��%���B�0�(R*����ʶ�t8�ພ��w��v�x �d������T%e(��3S���ڤ�Q]�	\y��(�k֧Om���`�)r.��@m%���:��m����FV�Ir3yy�)T��u�4I��}C85)���kz�C�u\R��'~���f37��ej������.g����+���ԋco��f�Eqpl�Nچ:��x?��b�@��0�������fi��C�6öIB{��M���g`Y���=��Y!���N�ؐN��.p�͹^B���W�,����E���O�q/��N0K� �?<�g����A����eU��+�u���}���V�苆e3�5a��4q����c7�3�E���k����e�������!e�0G���$��sZ9ݧ~�����zR��<�Ө7V�n!E)����!�[�x���� �H��Wx�[�"'~��B�!��y�՘j^ɩ����L���rZ�7_q�W9��W�n�⊍����ͪ��f�E1�p�h�Y����\������ѭ啠�l=raV��i�Ylnv�pll\q�M}��w�M%��S�(\"g���ل@^��b�D ��	�. @��� GL�餚�I:�}�d4M�h�`,C<I�UE8!�W�ӣ�� (y�T G�V*8q�oC-2 '?w�Ug�sHR �}�������J\7�@�u�/'�i?N]'����K�a�뙦�ـo�p��C� ж-��=��č�%�o�c�_���u��z�R{p�&��Am(�1�s�FD.�6�7��?;2�v;�g�0��8lׯO\�'�p	���d�kk�>�Ng:�E�q��%+��9�|q1ⱈ/��y�����e*�y��l���q>/3x�[��ַ�Ͽ���������}����ޫ^����z���/��٣�����|p��N� yy�'}��H�4��;�;�ĵk%�`^�dC��4#���U�h��]�o��������?�O�VE|���d�W�lm=�E7ܰ4�!�`��,�;��������cg���Ç߯i�2��ݮi,�ֲ����P�7 tk秅�����O�O�#��J��4��B{< ���I�84�q|��e�8��D� ��S��Y�������^��ju%SF��l�^7����v�Z�n-�,��m���p�`sss��F���xmu�!���A�����45&�ϟ?�ZZ^//��9��m��E �W�=�	��e�i��mp~tc=@�{V��l�Z������I��J[�:c<�������4m�ə���ν��V�(ykq�Fu
�:�dx���L�]��8̦�g�.3��:�8�1(i>�"��iG��l�.m0�	����^�#H�,�Zfw8���%���ɹ8;6Y�ַ��A�lqlc��x��� ��[ey�z]�����Mf�$�:������V+wk��Ƙ�n'�����So�����2��FS��Q��y��X���zڋ�1K��Sp�X��t1�XXy�yV3����67a}펏}��E�l���.��E/������qI��ןL�o?z
�:��_���gy�����~\<İ��R�����mA�1�_\ȋl�����KA?����3z)I#�pZ�,Z��w�lP�l!���|V%�ݧp�ޝ煰a�齰���qF��O̞���H�PF���$Qnk�"��Raib0h�t��FӲ�0h�B�N�B�m9�4�:���~�pD��0���1<(H)�a ���7,[�'� `Y,-�a��C�����wGQi�m� l� �� �^knR�h�I	j7k%	G� 5,Du��5�������őJ�D�����j.4E�p *����A7M�Q)�06������$A0D.8�z_���Ϙ�P�M�B�����i"��6X�����qF�;ٯ�� ��m2��p��8��lDH�ڮep�����+ d�v�v]?�ul��=.(�V�D���Y��I��<` �W
R�n���=7I�$2�EIbť��x�HLR#m2ŕ��T'[|�1(�ꕉ���.I�{�9-��o�����B��Y��>
I2�������|Ը�ѻ޸����*I:�	���w�B�vW��� ��e��ɐ�*���2�������J�gy
S����9x����eű�Sx���������A��x+��\�חρ��eCr���ETr��9eJ�ev��DФ�P�&���Nc���J�I��9wvs�ԩg��ܹs���CZ_��`#��?��b}�O��m�׈����-��8��~��lJ������ʎB�cm���ur�\����xuSy����A��A{�����W5 ��㋗��m��?s�b�q�m�5��/^�xq�"��/6�/^l\|�����3W��ŋ��F}.�[���������}{�R\~I�8�J�N���t�R>��;�t�F��+m@vrxxTo�).�����/�-oyK����F�t,�2VV���؎s�yj�S�d�|?�i�iw]�BF�C����.E�ғ)�ܾ��n$��>2���:��~��	��5 zb���~�Nc�I�"x��aJ����x��!4Wȿ�&@8��C�Q8���M�����I<��8n��li
��'���8*�2Y�k��8�Y�Y&L4�$iT��q��)M�2)�qR&q2���>�����^n<�L'�x:V��ܖ�1;�m^n���������#��\L�Xo����jV��q9��լ��g�d>����j6�(H�܆E���Ug墜���lZ��j<�̫r\͆��(S���|6W:����{�Fg��94�LY���x�"�����l>����|<��ǹ����<W~Wپ��`k°�_>f�N�����#�;��I{�F����t1_X����0���<�$	c	�/L����}�27��y��2�5��2E)gL)�֢5o�W�������\�>��o�!�O9�C'�˭Qpr���̺�D�%�`��w�ԍ�Ph�E MA��龼2���T
!M@`h¾�M��@g*����� :&�fP�.�5gG���Bf1̳�7��S�~�/|����zX4z�7��e�Yo�!���  ]�z?=,"����w������a�����6�}�~7��� ���{�ncҶ%�	-�-��2��������?��"52:��uO,u��������Eō�pMgZ�̤p��0��v������~�G ��b�۵-��[cX��L�$1�"e�/��5�z/��Ŧ�p��}�2�n�ՖJ� ���tz�v�y�׆6�(���t��wޥt���Ʀ"�J��W�,|�������ȥH�{���E%��@���t����n~(1�X����+\#,���Q;�U��:�2Yg��f��r���4Bₛ���w�i�y�l�0l�i�(��E~$E𹡵	���N�X��5 S���鑼 �v��	c{0 �ή7���C�j�09z�i_}��h�WL�<|��L�
�1c�|��Y������n9���c�����虪�ߡ�1��,7��^���ly�c�=2����^-��M�mnh���:}��^��/sϞ}�d�`�/��;Z� �dEqt���� I�7��nO�)x;\"�٩C 5н�U奈]�d�L� p^���I۶��V>�[��#�n?2��#a~\Nʣ�յ!8����#��pV�z}t1� Ϸ�����<
}(Q��6��[a�[����$dL^Dj`�������F�}mge��+^�����4H�#�0�㐎�=��
kL�ԏ"�i�ȓ���!0ӿ� èS���t��5 i�;�&Hƺ.@���MN��Y?�?�����,߈?��߶�� ��0Iw�m�� ̶Y���j������n~wK[����er��FZ�h���q[���V��	|$�4�$���5�i�*0.�É p�l���./M}�0<���k�7(�Rqx��1� �mU[Uǂw.���J��43���^�өef��(:_��õ�[��W�_��q�g�6pxu͵-k#�ó��?���4VV�����<�n9ѐN˰̤�H��}JC��aY���|�#���p��������9~�{�{��/���	������-oyx��o��o���0R?��mj�#2�����ܺPg Aؓ��QQJ8��oj���.����wvv�;��� g�7�����|�;<�wfm�t�����ޱ�Cs����<�����*���Ȃ<��jv�	+_:��%>���l��HZE�^Kn��){���M!�ɶj��5+��Q�{���!
��Z ������ez4�G��}F­$,.�)�h;����/B�e��k�ji�ht��:��n�{����Q��(��`��DQSJ��a�o�Ji��=O�T�m�n��'��E�����lB���Gr�z�y��$˪t�M@����J��I�D�4�1�`3H�Jc�c	LB� D\\�e�n;U��bc����>dx.!+�-x�$�v$3m?�݆���."-&_�j�d���ƣ�R���i�*NzB
hwn��o�ը,�����^6!E/��m�� �2fw_�n�RT�K�M��7yH�s&�Rײ��R��BRj*KT:�0�R��XVhۜqJ�]ڥ�,�
8�4L��m;��ز������&>�⢹�ڣ�(EJ�W�H�tT��U�,�U>����њ89�y3����R�I X�Z�̚�Y����2�iQ
�� ������L����9 ֮�
1��=,�OO�K��(6yQD��@�M�yH@�RL`����TEIβњ�O�Ql���r*i,([����rT]1NKe���ȕf�߿&�*/�m��^^�R�~u�/q��Q[�n��c&��E�AB2���2��f��;����8fDe /Ј�r��f�k�2�5�u�r��� R���J��I��4/
l WQ���BE!�Ak��(�:0��`��K�i��ΓF�������S�T��>��5�h9b�s�"��"O�yvx�$U9@��$	g�Y�B2�߰*�:��P��YS��$�hcǢ_�>3�ܷ!���  ����# c��@K�X1%i�|�x�	��(�Bc��bjk����8����u]
��v��� ����������7����9�
B9:CޥKl�45�&M��> ��ţ�(v���<�-0�#��H�%�:�^���7��N=�^���rMH����L��̕R�7��i&PƢ��;�ڹA8��$+�pF���9�����ڬ<�Żm���f�n'�ON� Tna�,[5��	���</G�(�/\:�1ݶ�v+��t��t���2�@^АEw��@���q���QWS�]q�]����~9�cME�tp2Y��/�"�|���y6�4�Y1Z)"�И3<���v���^=�q�-�=��I�*Q ��� �v
�0JB��,W�YR�;X'E�� +R*73W`}X �vm� ^M?z�����1���b��9N'�	��AE�=$��ݸ��m���� Dp���=,Jk%��G�����oN�T�f��ޘ'�	�&q�C���;KD�U�B�c�o�Di%�-3�8G�di!ϑ�i`�$`;��
"-H
Ы����sW�+��w��R,�&Z�"$,A�xN��8L�>��-o,�	k�އ�	n��"������-�c��t�p/Ì����yx��w��}&U�қ{�o���=|4v� �}:u�ђ���w��kM��#�c]��[�������h2���L��t#>~����e�-q�йve{�zS�N��2�����	��Z�W�K�V��ÒV��9�J��l��!�-���j��ȴ�l�n ���~��S������b4,o���\E�i��J7J%Js�ֆ�>ʗҠU�T�Uw�=b��j@0&0���I1G���4�������߲}`-��R��QĬ�9R�͊A��QQ��OQE>���tY/�]NZ�jB7�#������#2D)6(��htϳ�0��PT
J!�i�4�/0Xy�|#�1B0�-�H,�3�G##
��!.t�Wp����bpQ$��D��r��v�f��L3�4����t��P����n���i�;n����(ܽ���M��u���4ݴ��6��T�z�9!�g��6��m8�}];,0�h�7~m�*�
���Z۝��M[���~��H�Ci<������`o�@���MQ̇�q���M���I���G��	G�G������%��-�J��>^[N��v4v�u�qt�xT�u.Bt��7~�x�0.
{�o}�y���ODFh �������r���o�S��|C��8��9�v��v9��
�/������/]� ��/i���%��*��44��Ш��*���r��{���4.��`�������������q�{�#?��.ڕU{i��,�vya	(
��#ԏk9n���� �8�A��p|ĊH+�h�^�`�x��w����g;x�_��zvp�l�=
�w��qi3�l7�/�x��b@sm��kɂy�z�R���Y��I�ϳ.�5���r~vv������yXS�,�*�|����~���*�['� }ZU��Z39xe� ו� y��eU��A"4�a3�ԬG����I�����F��y��x�B�����>�?�y��!�����0�S���G������-�+���?X�|�??��o�z�B�r[���	��/����Ox�UV*x+�lI�lx�-" `%Ĺ�k���-�8bD���J_hf���Hf����UY=%�7�������r5��qQW�j�ͷ��n��m���a(&����*�J�B��&-8IHyGJ�V>&"�>�D ��RY�4)�L����Ф�1J)}��g=�b �� d��r���lD�XH*� �c����+�1������"Pᣕ���0�z�CU'1k��XD�M ��F�#(-����}D�B�uR�8r,��I)h�6J9��Bˬ�<�H!$Y*4��7��ƒ8��r�,j��5�Q"���` �Xί�R l )��-U��O�~��{��Q��~�@(E�=p$���劣���\�8���i7����`Ț���LO}M8���~��k���7�������zo�n�3��� ̦��qb���i�f�C�������Lǧ�׼��{}_\���{�i*̀eᐬ�^�z�M�,��P��N�u4޻�R�4��Z�{ >��,�DQ��E�$Btޣ�����W���ey����{��Jwʺ�0���<Z�Z��`:�c�S�w4�q��;Ҝ ��H�4DU3�qB��m�7a�x�)��Ѵw/��WȲa/Mdb�N��F>	���&� �lx\�� �ACQ�%�8��W�	8�����>�>:.�������I��7`�y9��)���Q�����Yp�1��H<�/T�]��`'��1hC���-!ˆo;�l��r#�`1�U���� M���&Ǜ(�)���v:�w����~{��		�&�f�u��������V��'�C�2�G�����q��֘��$rG�,�����v6p�,>�H��ne�����[�n]y��1[����Y��2��(���#��o��:*� �AU_��W L4G���E?���»&�]���._q�jo>�>�8.ј[�)ۋ�[��S6��k7a�?��M����0�y���]��@�`����QՏ#��ŵ�1�v-6k�O�(��ۜϪw��@'�7�gu{���N�b�^ �rW���Gh�=����2��]ў_�s�ɕ�&��i�^g�;Iڷq3�~�~D��('�����͝3
7���[ܷ_s��	�i�&ϋ^�0�A��� 7E�W�9�r����i���+��� �����,��>>8;;�ߏ���W��box���'/܅���|h�c:����\`������t`�.6�D��E;�iqi�v!�i�.Zn�!��xӮ��KכE;�T�8ٴ��E5��b���^Ҧ]�J�_��vV��n)b�GI�%���I%�n�]1o�3߲�]T��m�BC [�m�����ږ�&FK ]�ԭ�G����7�;n�][�-�' ��RO < �Ro/��?*|�aw�S
.?�����W&����>�
 �y��_���7_�����.�N���~��G^zu/?-u�vp�������񁽺�n���ި�uC� ���ի�O��O�˟\~�3�<���o̻G��/..�͕ɝg�}�ɗ��EQ�(�+W�\��'�xbP�{h�SU���Qg�%�0�����LuL��Ma:on������
���H��7s8�(hj�v2`�Ev�򗽨s���0b6�6����m�R���p8Ĩ�Ü�/��sJ��_��C�Y�&����F��8������g���\�7�j�1��n'^��믿��d���rƮg�z
'���˦�M�$���)�@mf����N��4�[���"���^^6�Ra�=��~��k����H$��=��큁SІ��s��!�C��j��ag1���;/�"�n���b��$(ȶ�굗\s�5Zf��u��ZC7��j��F���)�v{����DÄ���͖벮e�*_F\��_u��_˞��$I�&	@���+<�e��Ѹz�݆�h���=�y����� TB*�PJO[R6�K���.���2��2!���,��(e���&�X���)��(c���O} ������z��ѻ�>
{@+��;�;����oA ����ܼ�=�Lvɕ�Vr�e�pڽ*J~P�jD�AP��:�c_�ͪ��Q3�gO�A�O_8������΀�,��]ļ4���N�`����Ȅ� D۱�.�HM���)����>��^�y��y�-�w�  ��I��=�)��B �: Դ-߲`8\,�C�,߲M
�8�k�k��ch;�\�V��s@!D����ty�i�aĴpo�}g5/	��i����!��uڝ0�ꌹH]Κi5�n�1c��F3J�gEW~>꫸�"R��,�)�\i�
�1���� �f��-�Q�
k�2���s������{Z�������|qC�s���;�s����Ol*������m{��[A��-{��q�)��"�`����$�K �t�8�.�y��']*?��;~���W8ی���Q^}���=�wl�_ ������J��Um��/=waX��Y��)G�嬜O��c��?��?��;�p�o��?�z�k�]��m�1�mh�.��8���q�i�"��(���v.����p�0�����������~���a�jmf��>���r��E�~�2��C��>=��bh>{����|�.sݸg��oZ/�8�z��S��%��oZ��?eP�����z�S���륓�,�8��'��"Ć�92&�I�<� ��W�y�3�ٯ�N�ܪ��|��|��WF���W�UE$���?|q��O~�O�+O�������|~�p�X�W�{�Kț��-�Ŵ���/Ѽ$����B���ô���;�sw�8�j��$�V��l>��hAG4���L/�K�,�K��c�@���rV�J�n���u:.������t����{{�X/�uüum��ٹ⊝C��Z�����U���a���L�i��1�+?#TI<���#�,i4zEd�W��////�����tm������O�������Aw\vO��p=�ݐ��C@nڶ�<�r�l���Jӗ)0�
m�~��gQ���-���ѯh݊��z�h�F6�i�Ђ�u�ƥ����*,	H:���?<�X��w�={�i���R��Խ{pv��d��C��{�®� ��u�q�P�$[�{���;�۱D�V0M�ת��c�Ƒ�/_q���r�Q��D���C�����������zܚx���Z����m�ZA{NS�x�T��~��������Fߩ⢚�PN�x>�粜��<^T���i9�%��}Eɬ�	�83�ә~sQ̩sZZ4�c^���g)��@X8�\4�g����������^~�v�q���h�ʓ�+��S�N9�c;���&$	�:u��)�����1�"ѻ�8o7�4���������_���{w�yg���R�_��f[c��sx�����N�i�P��O�t:V��jZ���i�i�iJ1�j��$���6|�8�L{r)��zIk<���]3/�P7�0uš�Z̕$m�?=����~�qT��Ϝ_���f�-R
�}�L
	��n�G�o7�%`2���&�Zk�֚n�������R�MЏ"�u��IQ�>�hҴ��� D�K�c-��@��F��6����?`�:|�4��gh�eF�,��ZRf�A0_��P^��f�V�L�2��8�p#���B
Rv�o��aR������oB������Kd@�E���\"{1��������Ǫ��:HQ�ϗ�ĵ��Q�U�>@>ݐ�zog�dq�Ȥd�i�zi�2��Tl��_��2鐊�	�`�����q�* �,6���b��i���_����n��,k��Fs;]`�m���|�8���z>C��V��@��1�t9k�e��m�w��.�=|{1ʻ]?��Ӵ^�~�����G������ޡ[[�[[���o t�{]�vgy%-��¶eۄB|.��������	����ZTE�g�l\�l�E)�`���RŘ�6�q�J*7��L+���{��)p'$�ؙL��%�H"u3��U��
�&�P��ع+W�/,�g/�
��5B��	'�Р�e��P+p@k� 4�6*�'{41*6��^n���lGk��{�w窫v8�4����F ����UW��JKa������������������gl�^�׸�'�5�֠жPCH���ǡ����0A�㼆��h]�-�ay��ѽ��[mqHe�]?M����*�j+VZ	ӌ�4�ߵ�����"X���%^�'���y�C��?Aí�BBT�ړ*��m�Ix�q9(Eh��ѻ,�A9(�,v�|zQj����P�*J� ��\�>�pg~?<��)~�測�VG
I׻����$�
�y�q���WH�@i�p���="X|�ݧ+i�v��ȋ\�_L��j��Q���ϊ���cf�8��&�`aP�^�Ū�t�$+��վà����"�:Ӛ3��U@}ߍC7�v�4�ײl��eؖP��i�ε�Q4[i���̆�v��4Z��'(i��FB�L�+�~��l�jG;e�e��8j�]�sԭ(��O��a�9� h-M&,>ϰ�_>=t����*4 ';Mh�6`�z��m���X�-xm���� ��퇎�~Di�XN1h'�(�,��\�@R�M�	�G�е-	F�����^嬌�册)�������4��v�̔��9�Z����j��O��K�����������~�)��ԲMGT&'T�Q��K=�C�oF�4��ij�0V!��y!��e+�����g[H �1�(��QE�/Ezɝˌ�%�I����J)c��Qܢ�x ľ �Z!JF���9�ļ�p��[Ae7)�p8��&�����\��'.y�+�(��BI��"H)�q)
�1~�'��y����� ����O1fpWo8��� ڝ��'Rz���k�mĦ�9W]s�)�[,L� x�eqJ�i:�yǛ��&�Ќ6�?ҁ�PQ���E�ϳ)ǋl��/�:�`���w�W�C�MFd����P��"��*�P���6�b�8uR�|�H(
Z�p���� ��_X~���s�a:��hIA�gdo	�?KQ��~s��R�������L))����߾���:�u?4L������C���k�q��%����_���G���+:=�З����k*!�r����A*�t�\�I���+���#%dvt�Ӽ��-��b��#i�c1rR�S/Q����2>%,;]�0l>��x/�D�ϸ�Z���fd�C^��g<#�l
7ٞ�M��ci���#Öd��@���0n�xn�`����m'ˎ��7��l���~�ML\�)%;]��ٮպ5����
4o]]'-s	�� 
fs��\�i�0�����W�I����:N�eH�ɭ�-C�%\�fcy�W�緶�b�yo��c���Y)�����M���/��+�W�#�AQ���N�_�L'��.S,����i��>��L�fZS�0Gq���!�&�Gc<E4��BƢ�g�1r�UJSƴ�\P�B)�*�X�N[+�����:��h�-R��3%k5��̴�d�^����@������i�L+��K<���!t2fV�H��xJnFm��8!<�(~BH�[�"�d�rY��[�5p�/r|[�Cݪ(��t�J�
��o�샽˗//2j,��Q-M�8���0�f�q��@)������0���7�G[	�)H�X�:aRiB��6�V�����Tp3|�m�s:x�2��/��aJAi�aęL�(�QZѥNą��!�BhCp.�V��>9�X��T����U����8Q1���HL/U.ϚiO��%��7�l�z�;����0��c���6���n���}���y����0��c�Zܷ�f7�)46F�}[J�l��u���U�~�����䰕~��sY��"�"o$$���q���l�W��<%Iafw	.z��Fn-��9�ږ�g�$�\�Lk�tGh9��p\m�}�]f��|�5��j0�=���tR�Ik���JD��>�N���Q��˓V2V���r�h����Z���& t�)�cǟ����(=v�i�3�Նa8�6�{3tck�l8�����J
���̎�uZ-_HE5b͍��4��卍��"ϴ����֖���5{{�+��9����@?���I�g�+�A��H��1�D6(�#ߏ�O�v�mϵ�J������ez��S��)m4\�@�fw<�!>�i�`۟�^D(��
�8a,%C���|�a�6k9�[�t�3���kd	�<�#�v����_��{cs��̖Zm�0�V�Y[���\��鸦a1�9�rT�F���t;|&�֎O#r]�Ȥ�B'�FHHx��G�'-$��)�R��(*RF��r����cǶ���OG9㛽1��e��ܓ�>u�u����dz����ɭk�A6��=������=!!˄�"-��0
~e5��]
.�؏�Xps�4�ם�������p�8V�������w�n��#�7�~���]��&ـE�a^�y~�]�,|��|��u)�E�Ъ���6Ԫ�E�.��Ɛ/ev+7�uM�v?qꦛ��0~Bhm[Bȕ��{��_/�Bao��D�,��ж����R�$�H�$F�<�����u$8��u�ƛ�f����n:*�R�P���-//KC�q�=�5���u`�_�����,׳-Υt|�(�A~5x�Ã߄߀/�ur7!��HK�������N�q��EQ�+�y��E��x��碀Eď
yH�R*q�wI��B�K��8��%��}� ��Ǥ�H)��T�n.�P�B�K�>D�Y�ք8�9�煸��wq>�ˈ�#B�����H����BT�s~�g�� �C!!�B\��$ sry:! ���d��������ͩf2�.ud��ߖ��S��qWM����
�~Po�4�3���g���囹8to�>��޸���_��2���:"!��F�Ó���^�I�' N=������ƽ^�Ob� l��(��XO���t��TA�JIJ)�!~���8I������q���G\BF�m���}.C��O{8h;�c�q\>^��G��ț2�-OHN�un�=��o���fNM�Cl�yEwM��^�|���+5��.~-<�t:.�xq���@�}n�#�XJ�,�� R�{�9C�|��D��1i:i��h�=�u8�f�/�7� Ww�\���3��bLƨ6���B&�ެ����X��e��@�̶�>G(�RѦ������� ��-�������t�@���k,D�l�PX��a��3�3&mӤ����\�
T;,���tlӤ���w�2�� �t=�Q�fץ���d(� �@LJp��3�8,3��R��O	��mJ�PV̵o!J
hQ��bOUj�U�8VBF�v,`BIV�|��=DC 2�pDM��丢�BwO��/�����#� ��[�;�`� !��o�~5c�+<$̩a�,Sx�s�(�������wn%2�ѭ[�+�_8�3�>������_Z}���mIe�V��Z���n1p��T4�-����S�`a�,x��W<-nx�ֽ��u&,�Z��S�ӈ����3ɏ�7�'�ϑ�������5((C�&i�^J�&i�{��#��&9o-�0��C�x>.q� �A1/�����N��0��
{% 
mp��8�Y*�6�2�
C�����h��_��n�
�S�!.��;��-n,^�'O==X��O�B�l4��O�SO�����NRh4�'pXI���v,�Ts����\藀�����b�P�՘n����q�mйr1D�rzTʡ!m�Bꨙ�A�T|,nQ?]�{�a8\���Z��-�C���]�y��%�0���\)�Li�01�`L��WTU��U�A�T7u��@��j��ǁ�4�]�t:�80���G���Z�1�S@n+{�*!�8�f$�K��;�3>�K�҄��e�nT�ҋ�B�O�?/����]�1瓇VV�] N
��*�%��b1���a8s����� �\�wXl����n�ټ9¾��)���C�t�>�g߼�5���^w�7�z�-`"1���o����+���еeYV���k�m�\�KD��t��$�KNr!W~+yy�<����(yC� /�a�	�䋄��*+���_�F��#/���������;��<�M��4�1[i/�X�����â0�_�_&i�,��>`@����=NO�q9���#��Û��<|�ӟ=��ϧ⍡�?��È��>��%�̳��lć��~�����_�E���~w��'(��JC��"����7��Q�G�p>o��.|���/|Jٶmi/��:��/�	u�{�Q��eX��ic�:�N!"�?`�������c;����Дz�<��Z�O(Q����i��nB@H-xW6I`&l�]�-��|Q���]ډ�{�8��@�,�[NZKSzeP��k�^4O��_�5-9��������c95�e��z��ֻM�M�gi�^Ne�C�MR�1���2 ����'�iB�k���w+�����K���{���|�w[[��#���p!�����,Z����]ʙi��%�c-G�.��swD-Bj-gʏE��#��[�|�IKHE)cL1���jƘ�	�b�/���O����#@�K��� �9Q#i�.}Ӷ�@���e�낶Hy}�:�b�ō=�ɤY1�P��d�Jh`���&�Nyr���3-��U�VT��h:�X��9�4�e��4O$2+r+e9��oi�ӱ)q�t�t{��G���)w�h{����V���Z�١C�)���Q��ψ$w\��|YJ	u=�("�IE��7�2D��3�����r׶
�w,�njx����Q����#
ɵ�%w8-��ù���N�z����ޠ�����o7qx2�t:����ңB����<-�NØH�i)J��j��oJ��`��yJ5�9tV�۱�@9�z���z[�h�����]F��a�q�`��((2��g���BpN���M�(g���3�zMPU��Ί�ɱ�W~Q�0�"D)#Ô�o+�T����ĥ߰�ǽ�$�������OA��Ӻ�Q�p��D�qD��8	E ݧ��8n:.(��X�8��@+����*���Xb4:
Z1bL��L��"��J0������z�_o��8���8�K�N7M�"�u�9��Lf�Q�?�?G�B��\]��6�x�C��0���ڊ-{jE�7E@�p\x� -��[�-J_�K�i��L��Ov'��e�$��c��g��5��]|=���2}a�I�\�_�4��Y��z#fÍ�l
�Y������b�񎬬dn�^K��=GaY�p8���V�E�-ì�A���*�vm�+��&W"�	�~����S��K��Ι�T� �"�c�F��l�2�dA�D1ؖ
9<љ���õi�p'��!�jAN&�-��b��
���k�
9�����'�;��s��Xl�F�?�a���g@C�NN:
���	jY�/(2��3C��n2����5���7ܐ&��~�����Ɖ��y��m �U����+Q�a(в\[)
 �x�K�AC��U)w��@�J���ݼ��H���h��������k����C%�M�]5��ɾ%�?�9�W?(G �����|%�n�ayTH���ҵ��:�F+���vcp��2)'��JKI�,x�Y^T��F�uc����-m)�ؔ���H���V�FFG�(�D*�8R�m��~Q���v��,g777+VD�/��^����u�(狅(�뎆��b�����5�4�t��VK�9�\D%t�8�f)�2c�h��ljƦ��R5����4�ZJG�%�=�^�<ϫ�=�wg�N��sg�X,D�L|7�gٍ���͢B�6�P� 
[�Z�z�i:�5�S���B8Q8��^�1y�����Y�p�H��-������Cz�N'�x�f�i�y9�8=ki,�"�d�9+��6�a���^���� ���8	��5h�0#� �ƃ���>R�P�r�s� ��G�(��^w�ɓ'�Fu}7�3T�����[�����/��gP�@��G �~�?�ޣ�fp���Z1^n,#�������W��ٷ��Α餃����Y2 g�#�i��D�-̍A�e���@߆������-��,2%TEDʡ�j�Q:)�QM<��:J�[��٨�L#)��J�^<�ku��(��:�֯R��:�E*�Ng��hHa�Ӧt0�&��+�D��ר��t;W"�ju�<�{���j��s-�7$E}[+3�6�I�aT��Hi�y�!i�߯[���ڍ�Ҿw��#Gg`LD-��[[e?�����<'l����:���xˡ	\&�p��HQwX�AY�,��¼̈4#O�����������=_ml�����H;�����5o0ؾnyi�|lh4�����=}o.���-J��]XNKZ�e���T�d��3?�3��W���#��+�or/�	��.�%?B�D>JH(2�a�L��t���M{���'6<���*�7�:�QCX��yž
p��P's��uR�We^���[T��z\>.'�X�e����R�+�l���T��BZ��)���1k��b`X������?h��dY���}��@�su׃&�� ��m'�����`b[z��`؝Rr����v!tA(��;��T
h���� .l����@��ї������V�C�\�1���ƖmYQ5Y�V��z���`�w?��[uP�/���$�9{�>�\$?E>�����4�=x[e)���� LS��x��KXJi�9���;/ݻ.{G��k��փ�&IdbBbs|'���G6�*�h�j�qP�4�3��Ҟ���5�R�Ri��_��K��1S;�s���2^�M�vlYp�iBH��1��F�`�u�'Cd�����_5���Q0R��ܿ��_��J�6���ð�)]G
0(R,TB� ��1G]�-"�z��eŵ��̤�+�f��Nv���i����<��H���h]@#���mu��i���`"�������x1�2���ț	jN�D��a� ��a��������a'��r� �7�Ah�nP��o65g,xG��p��[�l�O☢i����i�q : ��Z�] �J=��`0_^]͋v256F����lv��|i6[�w�i����k����|c8���������Ƌ�ry	yy�y��@A����qx��6rh�c��pR�_2.�L���D���	 �bg"�ʶ�#@u�l0�m�Ê�0S�RI){�s��HEF��R3
�I1*�YU�\	��CU��l\���Z�����TV��V��]#�(���f��=��E��nW�,��8.����p���YV��LJKYT(�����Փ�R\�)�4�-���Fv0�D�i��CB��͆�(��"�`�Qw("`^"	[P�u��U�[����r���Oa���e���z�5�T��]t��/k]
�Ft8�c��k���I*Q6��b�"��� �m���)�G(ۥp%��1S�ʂ��q�B����8p< ��<.Y���@�{�UE�  ��GD�-@)e4y�m ��H��K҃�4k�$-3����e5ҹޫ����?��k�/�_��K��˸|��d5��B��~�n}[����)��'?�IŲݬ���\,��SALe��Nb�*�*7k�����
ݛL��g��S`�	����j�m�N)K[�iC���M��-Nh�r�z���\Csc|���F|�j��	�H'����n�.:ZTO��B�x5\���2Œf�u�R@Q��d �:Na��V�*�: <1������C<$%���<o�l��.M��Q�*F"t6M��NÑ��]���x��ye�Q $��q0&�K9��<�L��)<��� �����Z	���+��P)�͍�B��O��#{�g�B@h����$ib-��)����c��f Q,:cQ��Ekc�m���̮^���T�m��B`�\����j�3B��Ȭ���\,  �I�hF T��'&�y�,K��"���S�n=5]AmH�������,�&���d0��{�"� �U��(�aZn�*��0�3+�M�}��E��;��5F��Z�*c�@�r�O��~JyQ�b��R�C���<�`k�AU�g$�5�YV��ԫ\9xRq'X�M�3�����W%�bk����ZgF�'��s�$���^���39`��Z�g^�W\[������_�l6o|n��_�?�������O����A�:���z�;Yg����[z��������Y������/��f��������쿲m��{��O<�=���߾�;@y��< ��HJ:���p܉;âkou޾��x'b\n߮m�����ͼ���fE���v���B�N�$�q9ƹ�lG�f5U�7����L���E��U/��C�8l�4愷� ʉL���uZ6e3���`N��1��u��lU�=��Q냩��qb���w�[߁���M�zP
@6�w/�b]d�ogEQ����}�vvq��~$I~)?y��o����8k����8�Ɍ�:QJ�:�Qj̯�޹�E��������� �"�}o^4 ��w��<f| p[�܈Y3τY+�40�Y3�,L����c	�O�eY��W����~�G������;�G��O�z���ӛ���7��z��xQ�cOB�{���zo�����o/".V�� D��'�Q'�*U�5�H�N����R3�CM�X$n�E��uB����dxK����G���Ύ�}Y��|>o�k�Rx�|���� ��
b�Ƌv�-�)�*T@N�+��H�d�N�{O�8U�'Z[�٩34�J��-�Knc2��K���nB�����I�Z��kBZ�l؝�!?]��f�����vC����8,���V��v3Y��ePE�D+��v�������˃<��@�=�/r��Nv�[��'ܺ�t���X�0���jO�(B��(M��(�"t>x���Q	J#�C�he��4��զ${7����f�m�c*��$�4hFb�sl�D���!H(�ܜQ�H@$�����,!E4FLlꆒ*T"�=`<���x BQ(���mq�ֲ�I%i� ���0:'�Uu�֚�sP�&(�T���C�u���}H�0�Z06�8a�M���Ì�(�+8�8)SA��E��t<�gZk��:::��ЈBI�-�W�`�"�Z��8�@yn@�^7kA�1Iڤ��"X�*5eNk� Ld��Z�Vw��;-����E�?��/��|9|��Gǽp�y>'�I!���[e��i ��5��7�1������{����ȏ�B1�!�~Q|&�^B�;�$ ��#>�4�N�ʥ 	����d�^=�QC��6o�xPm�4�e����M���{�=.rL��{9��d养��pw���)�u��C��S�}��}��=v��c�����{���߅���}ӛ}��G�wm�a�<~��e�i���<�����v�E�t�lߴD46�΄��e$�:��u,lh�A��J�^;��g(/��ט�9��@��m�,�_tGէ�ѩ��pk���V4��9;;�BU[�"�L#�ٹuN������痿��u]��8��^���y��$NK�פ��~����~��#��m�Q�}Y���L�KlƸ��I�1���@{~\��~j<��Pq�,������ @�k�{Ё?5Q���j<�� �n�9��d�E�u�%�̉�,�O���]Y*��yY}�L�y<|A�������T�.g��;��;�u���g�/«��ɝ;���`ٴ��^]$I�����e�<�ۖ�?8�����u�� NO_~u4LS�B(c D�G���X��i���:��C�^��Τ�'��e3�G�	1܃�/E9Qhl�]7�;H�v�l@������������~SÇ4ΦI���"�c<>��s�1Z����׮��v>���V�۷����zz��t�0����}���jq�}��;��{t>���#x�<ц�%w��$?��74��7���E�Q]a��N����t�n�_�ݸ�=�AE�E+qi7ϭ���&١DG�qEN���$+�|/f�	a$H���j�[;�2��YM9d��&㣲b�^L�r��[�^m�y�$����fs�G��`K&XN�t:��a�$����QT̿Q�v��I�������.��׾Ji/J_��}�
�u�w2�~@�R�T�<�����W 0��c�.�!*u��5��߫2�9 �c�ưR�./xI-O��pBT�E�� إ5
 3����U�8"RQFm�"
����sT؞��9�D�Є�|tQ�Z��W��q�Zc�%1F%�ۋ�:�*Jg�&�)�+$�q��SN� A[E{Y`y�D������H��H���8.���x)@-<����X N�ei����-�c�8>���HO�kF����� 4IR;�(Q��j��M���y�@@�:�)�oIQ���^�̺rQeMu5� ���#���v�L�5�K^ʬ53P���j�{�(;��wRd$GG�.	^�����������)��n�)Ф#=��|�٠�mL��3�ϙ��{���z����n��NdQ1uw���^[I(�(P俋�r���,�]�B6�ۗ��h�WϫMUV���8�v�.��j'O��5'�ɺ]� �A9���-�w/U���b��U��)��V��av-���Bi_
<�`�J�͛!�J��d1|�H+^} �;O�d�Xh*�`m��W։8F��^S��5�:���0"e�1H��#�pJ��H̓VQ �u�� 
��_q��4�8N�)���A=�y����  ����l�')����:>����U*�%���U��q�
�{�sMl���fi���$ffd��ՠU��=ևTq�>��	УJ8�%Ӯ�9c}�%��]���͵V�c�A�c�1�ގ�T��4ݪ2�Գ��J���1�3�� �x������xg��$���۾���21��M^�e��Kٌ�2�����*��Z���A\��Q���'D^]�B��_몯��pÊy�.\;�Cdo�y[��̛y�N��k����O=��S�/�烟|�����'}��=���^縳�q���ao��)����ˉ��Q��w.���� iև;�[O�w��O?����~���x���_
iֿ������~����������|������	>�Qx~X���+�]6��M[���	?��r�qʽ�ԁ����;�����'�{vv�����giݹ~����w��_��_;;{��ٕ�/�#���q��x"F�F�^�<�LY�i�68gp�`�*y����7��ϒ�1`���^z0�G��AړG�n��n���C�";��{c��q�������������18�tz\���==d����:��=γ�=���Ap?������_��f��:q�Λ:������t:���ժ]n�А�z�=��i'-��MY�I�X`K�l�xs�H1H��5i�k�Y���]
�l5M�{s���(f����������Z]�z���v6A ~�h�A�7�e)=�),[)�lP�;�~>0����K�뭥>�L�����,zvj֥ �u4\p�z�M����l�q���A�$]��5�ngs�ہ�a��̊����,K+�lK)lRË�P��Ox��yr� (�N����K��칕U�Օsgo�Q���R����_2��� t#��w����h���=/���F�
@��B���w��/-Dc�ǃli)�[a��?M�|s3ϓ�oO�kg���3�(�a�x?��5@�<7����x��=2�Ϧ��ߜu�e�W�)ɔ\a�֌q�����0�V�v1��e�;���]���(��x4\=��. ��ׯ�����߃���L0�k���e
�$�V�����r�h�/��(:��E�b}6��|���?���V���BXV��Yn�jRI��?���l���Zr7y�Q�6�DV�^���M#��������\�&b�l�gY� *���9��ޛ���Q��u�9zs|\#o���Ӕ�^����tv��g���GJ/1v�W�H��0I;���v� �<»r��NiJi*;x#y)��[�N����?>��e2$�ȃ�%�'�/�/�?�ǲ5/E/�|7e�}
�%����#N�42�®�(I(i�6�t(JbJƞ��jJ�ԡ�U��4)�o�7���XRc�o��/ϼ�DIi��Q��QH!M�htdwz�4"��'�P
uu:�F�GY��h(��M�q��mƂp& �8v�8ܷm�760���ljZ�cv�e����__��Fa0�]����Q��ݣ{뮻2^,����LW׺�n�8.Ga�8j��qF(���B Rז��N��̗;]�_i4������*��a�z`�Q�]7�:���6�~��#P�N���B)Ɛ�BH� ��,�	����ؔFB	 F�{M	�QF�e��0ެ (S\���&�������E�Yr! dY
Y�B
)~gMsQ ��0�=�Q8u3#�����E���}���%^��!C����ɴi�g��m�^�$,g�[ �s�;_��e�$��fYM�s�86�E:S����N�g�z�fh$��1Mɨ��d��J%�i�(4����t��������i&�FÕ�0P�d��d@���>����)�t�0Mj�g��y����d5���N��6g�A����`�eg��z=�l��u���֠��mm��mkp��M�&�+�������
s��f�`�2�����WlU�=�����[[��ӝ��7ڦP-�y{1E��z�լ���o_:��WHv��\L���j⎀�@`^v�A�9y|B����?�����s��C�7�E��2����`�l��D����v����x�nak���D	�4�;;7§�ׯ��,�_���:U�׺�m#��:_n��yg�@=�7ψ���7��ﮦ�Q��c�<��1��v�yӡ�>ō}{���}K�+�YŒ�F��5f�L��l�ʴL�Hjnu�M�iY�"���F�R4���綪�g�;���`YL��!4��4mY���Ҷ�$��i��ɛ���1v�Ey�mfZ*q}o��[n��F�z�ec��k���%[�ާu�mw(�ݙ��l0�L���^KS�|ر�H���l���(bp{��V���f�2�лs�p�0��LK��Z�O+���2�G�Z(��%��{[ ��uH����0��|��C��J�G���K�[�Օ�7oo�z`�e{���

|&?Ty-M|c j� �Ǹi:̺���{���.�$[�ѹ��=;�SPf�&���ӻ~�W�W���=���������VVVV�9z%�{(��nY����\�{�n^��UB��W++�Ht"�B|�o۠���?�=3�FQr-�(j�j~GC��Ӳ�+�fQLisc���z�)7I��(��3�+�kk󛶷�������=��A�lY��Z~�J�z?J�F�l������:���N��J�tk��f=�������Qr-����rKi��6'KK�q���K����%Y.6զ>��p5��4�s�*y��S�M*�����j��2Y�`3�gͣ(�pV�"���[�y��qQ"_fJ�eE�ܰn[����c��{v���	��K}gEMNաiH���=����3�7��Lp�4� z��0)�*0�q.9�ᛋ@���p�3k h[��$���2Y��{w

�eUg�Ա��m�us��0��� �n �*�$���+��D��C�}��݇��1����/I�����9��u��B+6`��5�Qס��b�{�H�l@�y���3�|:E^p��k}��̤Z#�d9CC�`�T�J1gu*�?�	3昆
�J�`�sM� e"d"%�Y��6���>H}�aNO�`��e�7�0���6K�f*���5�y��i^�4��T!��T���[??�}�7���6�m|]�L4S͸tf��_.&`�k��?�z��_g��4�`��7��������g>�����~�_��X��B��>`���ny���E|�\������ǥ��-��'fc��D���gs����0"������k�̐�:�@�������|����fkk�z�(��Эu�t��;]*����qE��a�\C�%�$o$�bX(��t���]0��R@;�xІ1;�WYd��U�N;�"�ЙF�Ӣ�w%ܕ|�HĠҲ9Œ�Č������0�UUU52��z��.A�Ӵկ� z��Za(�s;E
໭���KmǱ��q'���J�z�����$�V�(�VkI"�2����}��w�$Ib
��g=�YQ��� �)]!6��y��F��x`ۀ-ð�����/ǩ��z�R �� �(���pn������[�pb|~9���a��I-&�і�dz!�]���-�L�	r�~.ԅ_A��ӕ""U@���蠌g�8�<�\���Ȭv;J��Ɂ#3&C L��ON������	�,�-DR��:b��g�\�$Cm؎� T��M�l�R
=C��X7�u����A�r�n�֏�m�I^�kMK���uц�S�C��w+�3�=��/"�>(�T�������+2�R|��$>c�n�,3�;*�  �Z�0v'��j�� ƍz��}����S�Ѻ��*�;��@����BȢ���l2
��m{���m04RƐ�{(c�o	v����w���C�d��a~R�2�ȡ��fA�(͝u�|�0�.�zc�DO�%T�0m��"�Q���z����������Y��vW�8H�n�����Q\�v��rss\��`�)���M�ԉ��в�n7v���V�2�wL��k}hk{e�u)�jĹ�C)m &���\�ϯ+m��Gۆ�U���ZU��	4��	�[�Wi�F��Sx
.��\K�&�2ʋ����qT�w��\ ��4w\��4壬�~$���	�W_������=gs<E~���������_z�崶�N���ΝC�'U� ��8B��$����O��yAв,h6�JVk~�Z[m4 �յ��ln�����7�Ჳ����;ue������0��������* ��q�sR�BS���E�q�Ču�hP����>�<���I5�x��Š�&k8��p7� ;�@Bk3P�镂Mw$��ey�!�f�W�u�ii�̤���Z�vE���FڨY��`�~Yn�+)UH��y�+��tP��c�4�!@.0��/S �߀�1P
s��R�츊e��c�Q�|���a��A%�W��1B�@�:�:���˽����D�n���DxS�P����`^>�M���!B �?�2C��B��"t�q���R[L3jq.堢������j4�!/�oe�{ʸ���l��z�\��1e[��LM��+ﮅ���[c�w�9s����^^_���@ʇ�eG�L��I�e��z+�`Z�p4C����9�  �mE��42@@C&�AQ�\i߰	��ř�&B�}��ٍ�`���v6��m��I;>{�λms`����_w��hDi�t�Q�I���O��S*Ƈk�³U�VL��2(9�9׊Q͸I)2EE��1��[��6 p5�mG);
�&��Y�rP�%V  ۚ�&7����"����dl��S�>0ĉvvZ^��A%�g{>�z���ٜNX�_���G��0�����mC�ض|ȸ%H��vy��nݼ���������{�jw��:����p[�����F|�+���s�BEzدwUz�C���5 �~�U�����m��g���g]>�&��u���׼�R̯|�ۚ����_�����o�կ����i�������;����*�-��Zkl���E��������t�ڲ,W������tzx������j��`x~~~~�Ao}�[o�x�\\\���񋋋�_y�o��E^X_?r/꼢���|y��;o�|��!�\=�*�'w@�iSm��&S��LD�"˻&��Fn� }`g ���	bŴI no���� �sy{0�:ŸQ�f<�ݼ��'�s��[?��+G���k���ëQn�7�z����Yߌ�����ݐ�}O��C���[&�'���L~|��$�|bz����������x��y~m�<��{��K�^��\w��Pz�W��V�撚��1�<Ϗ�\??�~�0��ϒ�z��_��<��&޲�v!�?�|��>l�?����s�#q����c`c#�;�ίr�:l�]͘�0��ZFf��驊{;�\(K�Ű�ȿ����69T������&⛘S
0>*�2�E[r��W'�<~��#�"2����Br�d։0y�=F� ���L��O�8$Y5��-%~�C��]4�	پ�M�eI��d_GS����~\���t�tm!�n3=]�OO����!�΂�!˂�!��s6 ��ƩF��ߘ�G�e�I�%\��q$q:��1c��r_6�7^�k���x/$"c����7��g��Ey�P�tR�&�YqB�u|��QO�!��";����_�! ���! ���}������,x �߆����1��˽x�\aU�Y/�{U�*��R�v߂o��;/�>�(|m��%p�D�<��qS�yd�����n�f�%zx�iW��t���&���ڵ\�f��	|	wzUMnA[
���B0�8��E���O�@�,�/
�5uS�T���Z�MU!��c��{o�W@_2!"���۝ @]Ս�{�!(5��n����	�H����/.^�^qqQ�'�C�7������ۅ�V��4��qQ�:;��|����\}ɝk�]�~��������2�!�����[E1�!ϧ���>��f����6d�����`xx8�E�v:����/܅����V�8�۝N3۴�z��Cd�0�X�4���m�"�"r�^�|��V���X�&SR�M}����l��B�^���B��rհs�x��ݺ��t@�A�uf\b ��z3����� ��h��d�t@�J��pR0l��K3]�Ȇ] �(1'a��&v��l�w�O��������E�,1��M�ɴ� ���n����V�
 .G�+nʦlP2ag��_ʢ¸� ��.K�LD�LѶ�n}��r�n�$�&�N��v�K��;�U)k��K�P,��f����#�+^+C�LIl���]�S1ުΕ z�#����yaӠJz��=G�#fl�� ��I�a$�\�U�'��z�A�X��obє7m���W�g��v�����mFu�Y�9(��g%�Q�j��[ �,+�-;�X	�^�M�4��G��l �Le�*w�Q���z�������R��3��GJI���M����A^yw�/��I�|�������K�#1�@���Q�9	Z:��4I��Dpb���y%�̤d&$1�J�H�LZZ&�]�H��B���*&�Qq��J2��#�Q�[�@��~۩# �h��FD%�ҎkM� SH��(���(�>N� h�QĂ���#"��("D�9@C��aI�-k���K�A+K����QH�7��}M�#a|��J|�)C����5(�1JD��W
`���������Jy�x�I�REA��FuСb0Fi��W���j��f�i�E��C0�b�RaD �)�a�������֛���(�����~��0-rĸӱ��o����|)hx���^C_M��nw:x�tY�[<
.e�ҜWV%&m(�p��yZ�4P��>�SN�B��tC�(�׿���X�>ӡ�a���/,�hXi�z�p��p��n�v��u����p�99�iS�}xa9x)�)�VF#�{|^YM>e��r�GP�,d2�X.V�[�'��	3��i���;޳�H=�b@����w&����yx9�^������b�:�⠹[#����:Uh����24Z�vJ�{��.Q��cN�f�sr�i�����}~�����c�&o��m�����v�[:톆������2Vh?]�l�����yT^,����%\�,���b���@�Ă
���f��h_X��rh�����O�[��v�͋���tE�i[�o�iZ��ە�d>���f֬a.{�T������ɛ���r������9��^\r��#h�EIDi��"|�E�v����^M ���]�r��WE� k�:�p��u�����g�(��He��ԥJ!h}|��5������mU�6*��!�B��]�."QyAN�6R���CF!K���ޗ6 �B_C�eֿ����4��;��>I��{��	�w�D�MR <� �qU�I���EsM��г<��8$��:
F����ıq!�X����14���S3��iGGk]��fk�g�=��Y�(J}���'8~A�ߙ�p���䀚�=�O
�e�1�������O��e����E3%���K��<��q��fJ�f�� (eX}�-�����:x�b�_,M���{<�e=����Z�Bȸ^Q��3��'a��������4�Jl�9 �sE�s�Ĭ����:R��a.�"i6 ����Qlm�c��^��[�xF�"�^=�v���"j'����.nEQ;�`VO���I"H�'��^�03�U$/Ҥ�H!�M9�ơM��X���>vA����.^�4+�G��k���~V��G_�G����MUf�$풤@ �{"Y潳�+ys�Is��H�s@��3�=rI�7ަ njY����.�c�w�ݵ7����(�U�^ʢ'���^Z���TB,1�B$�]�(���fy��5 A����&�g�R����qD�bm@����(Z���+OL�m3�$j]Q�DVRF�*)�MQ��(Z�'r�Z�|�5�3;�>�,x^�;ֳ�2"շP�TfF��� ��ld�a<��;�p���H�,�(���X�L,��n⍅�R�e��q̺.�������u4F-1�d���D�5�Q����z��;ξA�lT��F�h�d�wC�����}A�Pz�Vd�����}vSb��.��<==;�8?=>D��V٧�9ҖH9D� զ
!¶E�(�� fc/�t�5�a,�ҳ"���ӧwNs~z����ۭݷ�m���֋����a>��d�F�3�F3������:���;�����I>�5ɚR�+�߇�1nX����o��pdхa�jf�ޘ]��ֳ�RѫQ�d��2NT�-�i��݁�R�`38�i���Jw#c�g���bS�>����f���'`\:ŻߘZD��|���f�������p|����������w�E���J�����z�ѽ.�cx����L��Z�ٱ��������6t{����s�f���������s����7����l�V�}�+��j[��8�	^�t��i
�aԵ��8�ècq�V�0���4��'b�}�;:�v; ��tzto:�t�g��闿29?��|�s���2�߈���ko}��G���u�>�_���D-6C�b���e��L�"G���  �Ar؄Ä�H�2-����:q�e���?��s2JK�;�i�(fE�u+8K������P��^@��S�j�v�1O*I񔥿*#)�J�"��C�z_*�	��ݜػ���vZV�;�(�dy"��y��*IOO휖so�8��QZd�%7��Y���Q�;��D<&�,�0�X�_EǙ�V���U�Tu�(T�}֠$5?��a:�2��j�C�2X�Z4��b���|�z���=�1�f'4MC����g���D�����������ǹŹiZ�z�g*�BK[f�2�-|� �-���{��,�Z`+Ӭse�Z���1����5�u-�IR����([��A.�/����0�x'E4� �ັ�8�E��6�Av���d9/_�y����L��8�e��hh�(j	�qc����v���N�[��ˁ��g�����Æ�UOё��w��)9�2'�K�e��Ǿ"��As���W��3MSr���0濂������K$'���W�r�h���K�%��_�yᢰ�������r6?��e�P0Θ�B�A 8�B����a�fRa��ʈ=p�P@i090�����WѴ����n�Eb��8��l�p��F�L�ҲGJJM�|HkKLk�M���j++[P�\pn[�����O#P�6��8��"r� D�5�G}�	�V_�Z�n���V_]ݦҲ[I���^Ӱ� ��tku�V�A����j�V����8c�6�[��*��� ���8M�#r�j���ҶGJ�L��=7���\k׉���N��W������v q=˼8��!2�j9�HJKp�,�u����$x�u��1H;n������'�ȷ�zx1!�E���$��L��q�h5�H������}-@��4
�b��h�(���>'�d���%^@JIe�dt���\�y���
(%.��m���Bd�욅��ΠXt8���^vСW�C��Ӵ��T��6��F��Bh?��$�el��\Q,�I9����E'Ɠq<���R�r\��p%㔢��B:�#@
mH�"�oa�������	�LC$d� �k�����O��,K�r���� ��-���\[[^	+�Ea�w��ޱR���rຈa'�)����8Ge�n����ZDQ�X��C7h`A����;�a.g�� 8w("SR"�m�.� WRH� �2�P2�E�ji���V���z�����~ �O6�@����)�̇C~@�>������0E��8��_f��)�R������v#4KKk��i�g�|����6ƍ����,׿
G�"+��Z�q�5�2�{��3{I��Op���̿ �7�>9L�'/'u�➡�k�x^@��2��ʹ��%���<��E�=������&�Ǧ�!,^F��P���D��g'�p��u���Q侨��,�'�5����|��,��r���|�'�9�-����w�'Ǎ"�����nQt��'z���A��S��O<1��M+r5�	_�k�-�a�R<�E\�a������	=E�5=D����8-��>pG]�EOW.5�R�N:��ZT�������=D��eYa���ҵ7w��@p�R:Sgtҕ h��ޟ,˴�̴,3K��2M��*�O)�L3���|�RϺQ�v �}Ȳ�����������}�Cl�{�n��AN���?F
,.�#�%���h���SE����QИєP�(/�Y8���*'ѻ.�� ��|'M��l�^��$��� �:t�Ռ7�Q���ua�V4�;f3��1ǔi�m��ד�&������G��bY��������iZ��,�Y�m����׎-MӚ�j�&��'?�������OĎ�����.@�on��8a��x���\C!?ODq��#M�X::A��f�Pj���f�R<�N���H[�(Lc���,�i%+?J0�k�ci�񼴔`j�ӊy���T��]`L+m<�eYK/�F+��Ԇ�k�9(	�	�)Lm�p<�<�(8BPj ���<����\�p���Z�B2�%w�� �0]��'gL
Wi�^�� �ej��ar
�k^�g���zM���q��ɨ�4Ih�ER׊��VG�R@&�E�O2�u��Ɨ���`J�N��H��ے&��e �0̚6%E4TbZ�x!H� �Q�g1�9�$�1M2$�=�۝��͊�A�fV�����Y̶P�?��Ih)}���TT�M������~�&���B�l���(4����N�狩�IT�Ή}�����E1/�� ��"1���ȧ���>��� ��+;�"��-��+�NG8�+��)�^߲����J��q��:Rhm�|��>羇.�u ��8�K}�ÞGI�+��4�b��ׇC��?C�c7��Pf��D�J�_�ܸ�"Ӱ�ʐ�q��{��3y�J�����/�U���<+>̭_Q;E+�4pc�夂�;���7# ?%��j��Tu���	�_��_2�_��])��y��P����C�dBr�M��ׄh�@����]ܟL�l6v�&~ʦ��?�6���v;�adێ9rd������q��Gv�5���6��a#�m��ڋ����_����g>�?L8�]� �d��"� 7բ�XeBLyRiUNK|߯�9X�\Uf%��l]���R ���K��Y߾-c���w��̛�[z��n�w���?�qv���g�]wݵ��.�b����u�{�ٳg���g�O>���>�?��ߟ��c��
��~������3���?��}ԗ`��|�AH�/��ʛx�'i�璋�'�_�(��)��Еz�3E6��^-�rQ퀹o�*q$�h5T��@z4���άZȝ���-��(E�%3b]!�"P�VY�ޤ�-{\�qL��	1�4R�����Wgp,ě7�y��T��/���j��u���n�
,K��ih@l�4e��g;
,�\ ������#ƗJZ	ǅ�ǕV �04�`[�/�f���(��&P������,�!��H�<|-g�31�m�з���J X��7��h|�A�я޵�À(�ԣ��ƘC�J��R`�p�Q&�����qL����8� �� �3�À:;�R �ql�`�3� 0 �@c\N��hh<�  hK��90$� !����,���:�ABiN�p��#>�:G��=4I�c�o���.q�5�������no��z�%$��h�x�΢�^��q�S���6�YUUwI�!9P��"�u��S��{�"�7kfPa����}���ј�"QD#0qL%�wWx����DD��qŢ��8B?
��4 �Q
y�}��8�)�ıND���Q�2Fک"�YR���1&�@���r@��*��DPN�&D�5��Y���lL�cEP4=�K� �En��.��ҹ ́���� �=T�/�1��L)�����~!+�NA�p|�"f��E	����Z���a@8D � H���(��u�bQX�t��^8�_L����T��D�5�O��Ȓb�ħѺ����vG!�A6Y~��Јk�&fǤ��8��.���$J�R�ߡ�{�=��g�H�+�h�-)@�d��L���b�$>Zfy��q@��A��9��G �"d� �5a�P�2��1���E�v�$`*�lI��y�o��X��"��������R'�Ǵ�H �"��!��
%�*�C���TM�(��G3*�yM1�e@W�Aӱ7����[x���iEqY&�Qu]GHP� S0���gSD�Ô�+,9�FN�`��P����)����E1�  �D�V^!�%��� �Z�o�26I9�q�_�9���1�)3FH�.�#aP�>O�Y��=;���D)�O2@mm�5"I�D.˚ZǞ��:�9��U5�A�H��>�F�Y1�� #Y��~݁��~e-��T�x0��	�+� �����<���3 �#��"=b���r����r��e��E�I꠬�����j�iQF���$���FQ�9�TDI��w��n�ph�U�jP`+��镐29"%"Kb�5�D1h�u3��� �,��0B�/'�[������#{�a>�`�4���aek�� r��v����#p�sR� �VD|G�^��Ӌ���3��{�����p��PoLEJs֏���G�i9���J��)��u���h��	��*���ݑ��ZO�3۬]KA�]����;�=5��)=�՛M�n�CH�Xo6_���r	j``����;�bӰ��`~^ڧ���Yq"T�9e'Nŉ_�
�2�-�n�ኋ�%��n]a&��jF�ݲj
��t]�M�A��>t�b��R&���"��ޭwD�n+����|����9�X}d36E��u�x�t�j�R�#\�Kբ������]-G�e���d�X�@��L'S.����V���V��5�n�Zn�6S���X*�dғ���U=�V2s��^��>�t��f�����P�h���Q*��͚��]Y$ۦ���+V�1r��ɢ��Rwjt�-2~��Gf �=���2ig�K���U���F额�3?5�^i�l��ѺJ�m-�b��M�N�O����޺*+����.����	hq��nM��ֻ�L��h^V�����3boW6m��z��|�U��|���?�Yυgŧb�x��Ǹ�z���J�����x��d�<:B$;�Nؾ����88��y�8�ٶ[�MdL�Hy�=8T��8�#��@	�b��A�iO��`����' �@�Ei@�^��uZ�iz=��ν>@�W5�5�H3�����ZJ���/��C�T�4�Xm��Vy$�9$�*���_Ƃ�Ɖ����O�9�.	��Y�Q4��?c	���Z�s��EQ0��"�I1B��X;3a.�}���1F�dP�P�=�@�ԡ�i�W���[�b���H��MY�2�wΙKI��H�"j��kY��u�H��X���c� ��<�-s�*�R�)R�&�y����� r�%��m���� T�u�k@�sVZ�DZ{��@E��"B�
�ؙ���d���l7��=��mW���i�f拖�������!�2�O��Y0O]˛v7����\ˢ��X��D�b��ņgՅ��1�{-p�Ԁ��D������ �̚_�����RsF6o�����B�k�V�Q\eD�(k���0�A�3���ܘ|��i:L. ����:�A܎;�Y���("��0Y�"T���<2�9EHF����rv�ՈJ�Po�W�ZA�@�� z{h�ŗ�r�z��f�7�� ��ĞK���z�i��h�T���o̢(
�y���ra�`a.�8???��s9�!"�4���Q��(&��Ya� � 1��DD�T��E�%��%�� ""!c��e������*�]���.�ZU�%�1�X��D�&��f�[v�����w�|ED+9� f�=!�zT�ՔV�5�y��(��(~�v�僜��P'�(�PU'��h�|��� :\���D�@��$�d06YVĢD/�yN��FC�Z
 ��ThmG�>��� ZD1� U6o�D!f�*��+M�r�v�]��}%�ms�D1�x@f3y�����G�rg9HH9����HQD���(�ž�M��:���',�������"�QDv��8�KJ;��[��:�����i�۴���i�'	쉦$�Q!T4��CB۪�j�����.�ܪ�d�2$�k����r���m������o�~pu����l6����Bq��8�����`���]��oc�[�P\~~���K���K���$���l<c���o���x��X��?6��:���mq�^�,7m��@&RT�6�{�6��$��B?���;�i�=RC�b����;�B�C�.ʿ�����^�,K,w�کg���4�I�;gMS�c�ѨN��&b"֩���O��w|k�ϋ��ΗeY��V�qm���×�Ae(�{�ʤ�!���ƒC���B$Y�5um쭁R�M�HsX��U�%�\�]e�c���w����*J���^���}����_x�C�<��w��}���|u�;:�G�p���J|=~"~�
���п��P��}ꕜ�o�����x3F#B9:q��+\͵z��8$./�<���"֋mup�$_�V�w̗;'v2|%ؿݬ� ���( r�7o����q�yB���zC�^��CW���t&Gf�� �NV�@���nN[�*�n+b��W��	�ݢ�v��K��s?o�<}���ټ����⦮8{g�|�������)Y-ڝAC�X�zXkT��ղ��[iI�)Y-v��l�j���X��+�*��n���A4��.&c��
��)�g_]f׶���AA���m��a]?�m��lK�?�7/̦M����8���f���~��V>�!Ǌ�i�Ȣ*��N2ݵ���ī�/���<<�ģ��e�!9��X�������fHA�m_�>&��.�w��h-���Ŋ��@k4�G<�Z��j	j�5��+}��܆�<��	rp@9��r���P���Q��:3���i��&̤.]�*�@a�5Q!�	�!Yw�v�>�Z�,�R��
�&�<R�_��ë'mۂ�vq��|8 @�j��b��fbX>���NOiq����s�K�L ����s��JA���حh��ɽ�����ڧ��QM;�b3�J)��|�A�2�a��X�$0O;�8�:����TPC�-\�(�d`q*E��f�Q�~����u� Aj����F�?�! xQ�{Gd1Vi�#�PD��	*p%�T�G��1�+���xg8R����-��@`������X��� ��da��?��ޓh��Vc��3*$N��u����ڭE �b��h���ЧH5��I��*�$\��)r�`��,O��?�?�����B�A݃�Y0@0���&� ' Jק�pN�RZ�ʺ\!+�^Ȋ���7�8� (�7�L�"��a�ofl'��������廀����1D\�����	x4�x���f �;w��W�9J�����Av~W�4kB��,h��H�$��#r<�j��x���e����n/ؾ*�"�>�&�G ��'����뎇@��9�8MS�\�����(������߇��gD�RQ�`���<���h����� 6�jJ�^�Q����p�JG�t��@���k� 2@M�4@\�'E��:O�}��ӷI��J	,�ZV,X!��"�M[����xk5��X�<�H1++���$�RT�At�P���TGF��ܣ̌H��W��W��$�*h��m�z�Nc�Q�6/l�M���$F�ϖ'S*Gx,v}��(��d`-���0K�WY�*�}�U05(�9�)Olm��C���@&q���c� M�J:��ǽ9�٪H��
Z���%1jE�5��yA�"���G���3G՘�8��6��n/�*r#}j#D+1�F o��{Fh ���)�������d爔g���P3���j�sD��o��~���5���	��� ����慻xw;q����d7m���ڦ-h5]�ڢ]���裏�_������������9����~�����]�������*��N�C/|?>?��;G��t������u~�����9\��]��s���;���o��¿��:���i*2Ǟ?�^��n�֒iʪ��P�ۦi3Y�כr��R��r�ޭ7[/�D	J�>s{0zk?���BBUA��W)�a�٭�!��i�|�UӃs,�d�]�z�h^��{w|O�;��Q��/���sS��f���/�{1�<{۴Y -�~B�j"U�?�y}�M�����)WU�h`�py��^tV8e����p�:�z
�~7{F�7��i AI���05��3�1�VLfQ��mm��pʊ���0��Y����p���ik�S��}�)�y� �����Cۧ�f0�0.2�6��ʈc��n֋��ͦ]lV�k��������:FP�7�;sy���3�j�� ����V��Y�@v\�j�v�?���xEr���""i)�&]/n�ƺ�~$�c������j�N E����h��Z3����6���kb�p[�QJ�Q_)Q���(
g��iQAe`���C�|�8罻bk��(L��� �P���(��ȋ?�kD��Ə�ۈ|�OQ/���q'�\����&�X����y�ΒnooT���G�SBey������p6]��>N�����I{Z�'�#Wu�_^>�����p{4T��uɇhT_L��(ԙ n��A|�ݯ�� ���a��Ж�t�]��!&
���[Imɞ +��  0��! ��9_ʷ�G�\Q8͗���n�71����c_M���!.�����t�v�M��w�2*9^XX�9�����ݸ`�*���x�3�y�-��R�k���}h���~P�	z׮]��>�?�����FM��W,
��)uQ�Y���W���e�QJ�/j4����C�Y6#ME��F)�(n�f�IL���_3�����z��[�v���7nd5�s//�x�M7U+��"���`�����'U5V���-&v\� RA0���o���8ř�������0�.
H4�Fe(:�Q�l4�[���i`�$I�`G%�(�	#]'�1��6��
Ü3Rj:�:�/e���	MJ����[ 3��zR�P�`&\�$I�x2Q�$\JOh�<a�fIE�T gt�	� Ԍjg�v�B@SL�%��
�*��z���*��x�����X��j@��<�*%
��J+g�h n���l[�U�� 
	Ju��+(��ki�b�$���W�)�0tJ	ǩ���ǅ0�!e����t�]�G�Ѹ�?��MP«���	Fcq���tf�<���F���0?�b� ��.��)�.l
`r[B�T�Z���v`y /6j��j0�)��Ҟ�oW�shB�y�Th�y��쭭�����(DoZB�N�����˗���tW����K��ضw�g`�ԩS���ɿ����ʕ+���y�#��S�/_���677{{���W~���	�8y��Ύ�]��{�<ߺ�omm]�wu}w�GB��t�(�^~q:���X����|[����������˛ͯn�on6�;�v�5[͵����k[[[�w�؝\��޶w����w�cL�;������wcG�$ӝ���,d�!�!f
�B�a+�����Z#���:���(�S��ϼ���|@)��4A=I���8������g����gL�83��cY���Lx��U˲Ʀ��+���mpCǱ�YUW̧[�j�rl�������ˠ��]��\�=4F�*�o�3��+���gYtBF`ȃ_:�ړCW��E�v-Ϣ�\�ܭ9PF��ȩ���Vc\Y���Cf�]�j)�A8D�	%����&&SA�U����8|�px8��sʝ�g]lS(�`�Ĳ���6;;{t����Ο?�C��(���S��8�<�+�p��	�\�L5���?8���RJ�N�w�q�Y�cQ���7��
L���{��om4��V#'U��L@�G�ш3V#���1�0 SVk`�Č5c�e�T��h�FG0Wo (9�#�K�z&���w��.�.6M���f�b�\�!?,��P`0��:l��.r�-�Xv��Î�[�8� B�R)���T���yX^$O��H;����hN��F4b����  �4�w]�$��k�`Iia��(����\'1�uQ�����E-À7m���M'q�ʅ�c�4�Cx)�&���x {7ޅm�y���{��P�Q�4�5��E���i�����w�,��p�k�U�����m��]"	H/��o]�����E�����u��ᓣ��h>g�N��ВL��$1'G�T�4���i�p;��$4���h}����-��Uc��S�O�?��t���4]Y��&M����l�v{Ks�G�9�v��0���9�t�[[�ޱ�[Ran�� ��$G�
�-�����%x��[�bc6�����%��h���p�ЇԂ�6H����V�u��#\Cu��>����a=�Aeʇ�cJ��hX�-��pZ��N�*��Jy��=v��E��Z�K�Q�v��`�%�.�w�e�
,���>6W����P���n
Y67��}2���9~�x��j�����]����%�Quīe�7�C���/ͺ���G��lX������d�e��W����z�s]�vM/d�_p�nv6�u������[�\^�g���e�!�g�#��7��K9�.��٣�?�\.�P۰�'��<���A�E^��8Ɣ�o�q��'�u�^;2�����F���T]����}��9)�Y�5.�oI�[���5��*��?˅�ES躚i���T]�<>h����Y􂨼�*'Da���d%�_��)�ж���t�Ib�q肥?�L�c��a��&�*V�;��O��+C������tA��"��:��U��qԴ��Eya
ʛږ�c����n��z�U5|��.\g>d�E��鎢��H��� �0�8�t����]�;\��6���t�ڌ�N��v��2��P�c�>���=��C3���^Ќ��h��ʌ�+�3k����p�GF��Ӓ�l�P9������7/.������a˚6��'͖`�1�[���t3���/����Г�tm�:�#�9�u��VM�`��'%!O��e�7��ɘ'�F7 �	�}���כ\��8��k
a����z�Iۺʛy( ���<K�q�����z�s��i��Ʊ�1k�&{�� �i�R����.ز�C������������0��[�'	�D�"?PHV�)=�q;m��c����v�Q7�&�����2�@�:����G���S�Є
�����[����<3&ò[��#6�t4.ǥd�3E�d��y%����%�˷[�jK^����z�/����|e�2(������m���*#Nڙ�F6e���'~��ߏ#�c�A?`<���M���=��MV*�%��s���a79K\�Y�E������n_X���	>�m���j��0rC=b\��0����a��FM6�W�
Q���U;�x�,H�},&��C*f�xD��
a��&���Y��襂� +�:
��Z�sx&�Դ<0�K�c=� ��qN[Bc�f�r"n��Z�Y��⵷0k�C���=��j�gZ4ҵ�(��ia��j����B2M�CE�����M�ĄEQ7IL�?H$�����@h� �B>a��bB�J�pk��(`��z%���	u\צ~ɍ�dRd)Ҫ'�&��hD��3���0yc$G���:��9	$��Ș4D@��u�`l�9��J�:�Pygt�e� t��w)�#0�?�ˢ�6dY)r�)N�̉⴮�g�l_0��rȳ�&�Y��eY�����*�X�i��5����7Dd�����u�n��X�B���h5o��`r`�ȹ(���oA�XC�M*l%.鮺�F�\�O$�L�iP� � #�Q�!��
�t2ID�a㒼8zʳTuC�NY]�MHAm�Wσ,_T�O�@+���˙đ����@W�(�Ϣ"7��|5u�F��.Z��QAҖJWPLHb�"�Zy���Y-��/ac�$��h�����3�RY��9�s���^��~��� ��U���Ӳ�5u]���������H����5ӀER��C��jRF�BU���j���	{x=�ܶ��c/�+�u�:kXu%�V�7�za�St���Fk���4��pG-�a�D��a3��s�4�4�߈zc0<~'�Z6�>7�@g����ܹ�����G4� �㦮��>��BkdV��4lE�L��*��f݅��z��W�q��!\����`�e��ϸ(����(
��wZ�����@96���l)�^OJ){�v�ex�C*
��ط���o(I��ܡ�ǹ�za2�d�}���a�9j����֖�	i�6�^��S\��m:ӂ��Y���>�>-�$�W����`퇠�h�Yw�g5F��(_��	|v�?U��)SkDӀ�Z�{ʶ�B�-������c�S�ץ��������;����D���pav��M��{���ab�i�:�f��u
�&t��%���գ��[^����W3m@I�jD���O{vZ�= f��X��Tx�B����B��'�xU|?\x����`�%IG��gq[�^?{���[���ߦ��i��Z�c1D�^ Cꡣ���^YON<-�����m*�\5 D$�5��ҁ$P�ʲ�.`$���ǌ��.��g��P�g��b�P��Ǒ^�+��1�����7ll�ၹ�;;��}�/7�8��Il6դ���TM#�AӅG�q�z�]�m˸V�o��C��U��������N Pt;'�����}��nL'�?��4q��k��k/�$�-Ҕȼ�3�<��������sl��qj�~�=�$�x�Z���Pg���#x��߹����6���i�8��R�f��l�;��)��lW��M����B��3�LVg9h��B�r !��O�(��=z����d�����s�}f���������X~@��{��R���ɭ[u/������s@�4ڳ���u�m�<�����w�E�}}�z!� ڥi�U��n�MR���Z}��Q�_��M+��RL,��nіܮ�
����Q*cC*ث�K7�ވ�eZ����X)qr�s�pJ�Q�0�`J��,����>���'.��� ��ؑN++!���z�ьV��E�,^0����Ck�A�Ӣ �`�y�*�͢ȉ��c�h�)D����س&���Fk����1�^��Y����DI�U�����Z��7T�N�M����A�)�@IJ[+aT��a���OCd4�<9��� �ٞ�c�鎈�kB*B?�����~�d��c���O��#�O�Jf0P[��n�Ӻ`i�h�SL�6ʖ쳋H�`;�R�@'�-�Zt�Pv'i�ն� ����b�Z9�а���-�l"Ɂ���˯]���i��T�m����0��@���-����IOS�fY�T'�wV������D����pK�8�P� MJUUu��[
��V�P�q�	[�����0��S]T����HKM[��i�B4��[U�R��ԗJK`�l��f\�n`cL��x>��}a�RZ��a�8<���l/�h`a�'γ�/��AQ�e͢�� �R���a�-MK��Z͏Ao���,��lT��,�F=�Z�<\�qP���σ(��{�2�L��#ә�)4�NuỶ�D�S������M%��.I���릳xl$���?>}��^��a%��L�@�/(
۶fW3�!,=�4-�0���#��l��B�?«�!��5t'��N{��B+��*�685�փ�?XU�j�0�٩%$2�\L�S0?XX�o򛚳e���DJ�7]�&��L�����/]�t��<��)ð�WVV�C��p�q��1g��8LӸ�dJ����l��[� �e����Pvd�|>\�^�����$B���V0LXf����ю�G_5��O<���-��U����ˌ-/��iZ�M��ʯ�x�"�)���F��:���#�D�%B������!�2Q ��@K��m�|�5��F�*%b�j��PW�]��hL�V��
�o�#\À�}��]u�����=���h���_�[XXp*xC΍�vM�]_����ta�5�����uo����F�;�0o���&,���\�R/���Ez9zS���X1,X�����Os??�2Ȁ/TH�ȋ8J�L�OwiCd�:"�qD�͋�gD!"B ��8?��y�F�33MS�
�Ӻm7,L�ܛlMB�,t�`ƱBt�i�V4]`G�l�c�^0�T60��X��>�jia��,�BZ
�uU8b�)�hz���.�5^�.X?�L�L��=W]�[q�	Ur�lR��3
��at��2�eKi|kmR�MF�>z���nb��ZXV�H+-	�??�8y$�Pݱ[O"~��9g|RW� ���$5�@Z ��`Y��>F��2�t�^w9#ѡ����	�D�V��VC¸[���1�蚭E	�v{�4zB���b�Ǟ��.z���n�>�} �0}#y��[x��Kv3���n�c��`�u��(����~�:�m�Ҥ߮r�L��b��W����*��q iߐ�_>^R����4��/q9�oI($��mT���#�����Z��Ÿ_���
}vJb���Q��O�Ga �J�>\l&��]L˶jK8�ɛ��Nǖ#���fޮ��JeX�j;��Rb�8��Qyd�[67	ҁȂ�aB��0�n��n=�B��4�v���A�0��vRՂ ڇ�g�������� �V��T\c�m
��@ڭ�`�.�����E[3W9�B���w����-)���/۬���n
��v�'��!]�T�ڙ�W��'������W��mc�W�ꃺ��3������������g:EZ����]�5;X������|8���O�Ԕ��c�ٴ� X���J�E��*���uU��T��(���w�\���KzLeZє�<��*�v�u�r �� f�`SG?�x  	ه�2�bz�&�(8K�ڈ��	1���IMDW����D��j�v�L���#� J��;�D���������Dpξ����D��>���JCQ�Xi�a:!�.jEP����0ȳr�$Y�ڣ�����x>�,&���"D���}'m	�@e� *�fbC�/a !;3%�f��Vt�>�/�hc�x����2�䚇�YNY�E6��f�ACY��;�ZBf��ސ�����s` v��	��@EsW��.m�D����$�,J��5��&��d+"ߦ�(��|[:q��9��eN,�0��d�c�t*��O��h�:�0� �f0�@�b��A�Z������f7�XهA��67k�Cປ_��MGQ�4��i������|nРl7�o���	��,_{j�7�5��O�O�@1,�|~7�~�������R����1��G+f�9���f��rC��ӟ�/���j�=M+1�1 �w~� = m#��(�]4W�m{-Clə曑M-:1{�R�J�cs�*��8L��� 2�tAQ���AS�nN`�ɔ��%�9gbF���>����f`�L�B�\UN��J����(u��T�gs��~:�FQ6�G{�gHHN�q�����g�(�@�L8���x4���aN���8���!�6I|�\"F��4#խ��$IB���J?LM$Fp�ut��tz�+��u��{��W(�Q6$2l�^Ȃ�(((I����۵r��[����w��d��	.A�A���E���f���ݍ�n�$T�K�g� iZ��X��Y��+��{n=��[������P�u��u�f����]�t#Syξ�-�����n���v��5}��(���4S�;���8����￶�T�I	ucY��MŐ�ú{���ꕗ<�Oo�W{{ GG�d��hm�)�@�u�S�~�����w"�(�"��4�����f(3㾇<��h݋��^^�D?�Ҷ$�A&���ͨj��IUī��Z�M˲�*�b�҄@7欄^p*b-�Q�
ͶW���t-A+%ZA-f����ej��EI#������"��k�,&��><�6?���hا>��IL��p��=y�3p�1��"���6x�s��s]("�P��u��>��������?�����l�/^����!K>���w!�o ����ܸ.��:\8���$Z��s�+�ݖ?��|]'�E��a�5e�	EAe2� ̱��Sr��LEk�o=���0��A`Yl�f�NڲB�,�$ԑ�ҕW���֏T���qU�2�
Vx��eeK��G��8��i��U����#��z���F:��D���kK���HV�zo�A�a0Gwy2����;��'���Y�]��K>*��BM�3�����$U��A35g�=���=��'�[fmXx��TU������-��g����(�4�pl� M�-�����T!�H���3��,�0�'�悘���5�7��Q��q���I���q���"�Z��J���?2 Yn�=zƵ��*����.�v4��p#[�ȥ���$��;��'��4M�ܙ������i�|�L`�УwL&^�]�������g]\;����oΖ�9�1��0f�;�y���3��m�>p���ț����<��n�T'!M���ں0Di����p���Vz�Сny���Ƴ�������6v�	�iI�&�%A�X!{[���j,���0�V8qϻ�Y3�04�04B����!��1:�.����!���Į��^�]Iv�I��&��FI�bfq�;�oP�j�Y[��x~�mgBB��A�Ա�t1�o�ة���_���n]]v�BxlA�A���6��pF���)���O�
���iE�ݣ��*I+1���AF`	A1�&`��4oO��^�1�}�E(�f���!��v{���<��%������UEql��탦&!���<^��hBg�y��:�$0L�����6ڶ6����+�П�e���PF�̒A���O�8+]�Y���%�77�7�~���(
qݑN����A@�AEd��i�bi�AT�4-<[���u	4���Μ���{����*��_����� M+Z�'� Q��ش��a@s�n4W�$qcσX�J{uE�E4�Az�i9��˵�F+8R3�����G�KKK�+��!�!���F�ѐ�?a���ٳgWki�>�\K�f��Z���w�RD��Kw�_�n��|#ċ�O�W#�>�a�@���@�
~u`���i����O��tV������*F~���=[~������/a�`n�L)%��8�T�����c2I��ҬY��0r�354����,��6��L��ss�\��//aJ����P�nB�yX
��`�,�W)�x�[��ϙfwto������e9cX�F.�]8V�0�)�����*� �,S��_��<��W��e��m��Я�P��`57��p؊�j��ҠZ�|�=A�֒�P�ɍo�l�:��@Lseڤ@0Q�0���z���Mek���z���������q���xN�a� ��SU3� ��|�1����75�P�ի�冡-k[�K��!>Bx�yB���+���R�!vB��CH]GH�7���!�S�EH|!�G�xB�?!d~!��g�)B�c9B��rU���!�#��!�A��C/Ѧ;m�����m�]�vҾ��ѱ@�[�-���s���t)��"�}G�fz�ҳ����~�>��ן~-�_U��5�æ1��B���w3���g2���M�]ϸf&tfB3�3yS;SY�Λ�s�]�f�v-�ۗ칊�jا�>-컌��8�J:��F�j��U����p�-L{��O1�5f�b��'7��zNY�)E�5�S��W��I�/��!6��nW����I,+����5�z��������i�rگ�^��/����[�0��ظ�3�9����qv9g�rζ�S�ܻ9��󚹸�K7��\ޝ����L�.p�C\����v�}��p�`n���zs�S�ڟ��q����LCw�s�*��������*x������"�B�wj������/^��Y|s��"�y�o�����`�;��燷�q~���j~��?�k�Ħ�}$/IY�l�lV!�}*[d�J٦�lw�l�Yv�$���}d���S��&��)iW.�{K�
�P'Kҹ�t~N�/]�n[J�yҽ�to�����C�]�>5��\���|K�4���R,÷�Q��h2�F���1%w��_$�K2�B��(S/���d�jٹUv�-{T����`٫(�VȾ������$�t�C���R���Y�(�џ�1O�qU2�L���̬�Y�2�U�<$s[��C��*�9@jZ��ir�`�w��K���Ͳh�,j�ş��޲�9Y�_VU˪����5�eM��}J6l+Jr��rf��u��}���*�,�s�K��+�ɕ���]���o*׮��.�[Kr{�4T���]�r7�{��{�4n*�W�����Jy�\y�(��#��#�IS�<�$�O��&y�\���gɳ��E�����`y���F^/��ʛ��y�A�'��3����Q�A�|�"��'��M��_�:�z�|}��ɷ�Rj��6�w��O�im/?O�_�Q���ۇ�ǅ�W��}���*e��)ۼ�l��mժl�*�`�|���	�1�wL^S�T��:��i3b�ǘ�2f�Ǭ�1[C�^�Oǜ-0wV��y�`��X`?����c��X�.��%�D,�K��2���t,?+l�J%�JI�: ���꟱X'/�ٌ��c��8�c��ء&v,�]�b�س����b�p�,Ɓ�qp4)�Âq�n�GLƑyq��ǖŉp�g\X�ŷq]C\��U�m�q{M�Yw��ݧqoܷ�ă=��m<�������xA<���s��|]��/��+e�j]��o|�۫��v�;�U�����e|�_D��������o'����(~��������5���b	  �iK � 鐇ߨۇN��P�3N�x8ݡuzDz��Y>v���y�<��q�
7��W_�b!j�,0P�n�Z�,8p)T�Bv՟�������)j��9���yt�q�
o���\�R�vm�7��+3�l�:s>�bo�����p[F��q_M�*[�x�ם�Ԉ���zr�?٫4���ޛ-��UQzy���'>��8y��F��7nE��}����Ԯ>�FL����:/�m��q+Ujkq�K\g�].*�_I^��],5���YVFl��T��
+�&{,��o+��;#d��+�O�����U3���C�)C�t�1Dx�̛��Ig�U����?�#Z�?A�?�7.��wӧ�J>���׿|�������������t�g�W�`Hx���
�{��|�J�Puq�5�+W2'��_��ŲdA�G�u��!   

/*!
 * Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 * Copyright 2024 Fonticons, Inc.
 */.fa{font-family:var(--fa-style-family,"Font Awesome 6 Free");font-weight:var(--fa-style,900)}.fa,.fa-brands,.fa-classic,.fa-regular,.fa-sharp,.fa-solid,.fab,.far,.fas{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:var(--fa-display,inline-block);font-style:normal;font-variant:normal;line-height:1;text-rendering:auto}.fa-classic,.fa-regular,.fa-solid,.far,.fas{font-family:Font Awesome\ 6 Free}.fa-brands,.fab{font-family:Font Awesome\ 6 Brands}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-2xs{font-size:.625em;line-height:.1em;vertical-align:.225em}.fa-xs{font-size:.75em;line-height:.08333em;vertical-align:.125em}.fa-sm{font-size:.875em;line-height:.07143em;vertical-align:.05357em}.fa-lg{font-size:1.25em;line-height:.05em;vertical-align:-.075em}.fa-xl{font-size:1.5em;line-height:.04167em;vertical-align:-.125em}.fa-2xl{font-size:2em;line-height:.03125em;vertical-align:-.1875em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:var(--fa-li-margin,2.5em);padding-left:0}.fa-ul>li{position:relative}.fa-li{left:calc(var(--fa-li-width, 2em)*-1);line-height:inherit;position:absolute;text-align:center;width:var(--fa-li-width,2em)}.fa-border{border:var(--fa-border-width,.08em) var(--fa-border-style,solid) var(--fa-border-color,#eee);border-radius:var(--fa-border-radius,.1em);padding:var(--fa-border-padding,.2em .25em .15em)}.fa-pull-left{float:left;margin-right:var(--fa-pull-margin,.3em)}.fa-pull-right{float:right;margin-left:var(--fa-pull-margin,.3em)}.fa-beat{-webkit-animation-delay:var(--fa-animation-delay,0s);animation-delay:var(--fa-animation-delay,0s);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-name:fa-beat;animation-name:fa-beat;-webkit-animation-timing-function:var(--fa-animation-timing,ease-in-out);animation-timing-function:var(--fa-animation-timing,ease-in-out)}.fa-bounce{-webkit-animation-delay:var(--fa-animation-delay,0s);animation-delay:var(--fa-animation-delay,0s);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-name:fa-bounce;animation-name:fa-bounce;-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.28,.84,.42,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.28,.84,.42,1))}.fa-fade{-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-name:fa-fade;animation-name:fa-fade;-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1))}.fa-beat-fade,.fa-fade{-webkit-animation-delay:var(--fa-animation-delay,0s);animation-delay:var(--fa-animation-delay,0s);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s)}.fa-beat-fade{-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-name:fa-beat-fade;animation-name:fa-beat-fade;-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1))}.fa-flip{-webkit-animation-delay:var(--fa-animation-delay,0s);animation-delay:var(--fa-animation-delay,0s);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-name:fa-flip;animation-name:fa-flip;-webkit-animation-timing-function:var(--fa-animation-timing,ease-in-out);animation-timing-function:var(--fa-animation-timing,ease-in-out)}.fa-shake{-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-name:fa-shake;animation-name:fa-shake;-webkit-animation-timing-function:var(--fa-animation-timing,linear);animation-timing-function:var(--fa-animation-timing,linear)}.fa-shake,.fa-spin{-webkit-animation-delay:var(--fa-animation-delay,0s);animation-delay:var(--fa-animation-delay,0s);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal)}.fa-spin{-webkit-animation-duration:var(--fa-animation-duration,2s);animation-duration:var(--fa-animation-duration,2s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-name:fa-spin;animation-name:fa-spin;-webkit-animation-timing-function:var(--fa-animation-timing,linear);animation-timing-function:var(--fa-animation-timing,linear)}.fa-spin-reverse{--fa-animation-direction:reverse}.fa-pulse,.fa-spin-pulse{-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-name:fa-spin;animation-name:fa-spin;-webkit-animation-timing-function:var(--fa-animation-timing,steps(8));animation-timing-function:var(--fa-animation-timing,steps(8))}@media (prefers-reduced-motion:reduce){.fa-beat,.fa-beat-fade,.fa-bounce,.fa-fade,.fa-flip,.fa-pulse,.fa-shake,.fa-spin,.fa-spin-pulse{-webkit-animation-delay:-1ms;animation-delay:-1ms;-webkit-animation-duration:1ms;animation-duration:1ms;-webkit-animation-iteration-count:1;animation-iteration-count:1;-webkit-transition-delay:0s;transition-delay:0s;-webkit-transition-duration:0s;transition-duration:0s}}@-webkit-keyframes fa-beat{0%,90%{-webkit-transform:scale(1);transform:scale(1)}45%{-webkit-transform:scale(var(--fa-beat-scale,1.25));transform:scale(var(--fa-beat-scale,1.25))}}@keyframes fa-beat{0%,90%{-webkit-transform:scale(1);transform:scale(1)}45%{-webkit-transform:scale(var(--fa-beat-scale,1.25));transform:scale(var(--fa-beat-scale,1.25))}}@-webkit-keyframes fa-bounce{0%{-webkit-transform:scale(1) translateY(0);transform:scale(1) translateY(0)}10%{-webkit-transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0);transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0)}30%{-webkit-transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em));transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em))}50%{-webkit-transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0);transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0)}57%{-webkit-transform:scale(1) translateY(var(--fa-bounce-rebound,-.125em));transform:scale(1) translateY(var(--fa-bounce-rebound,-.125em))}64%{-webkit-transform:scale(1) translateY(0);transform:scale(1) translateY(0)}to{-webkit-transform:scale(1) translateY(0);transform:scale(1) translateY(0)}}@keyframes fa-bounce{0%{-webkit-transform:scale(1) translateY(0);transform:scale(1) translateY(0)}10%{-webkit-transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0);transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0)}30%{-webkit-transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em));transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em))}50%{-webkit-transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0);transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0)}57%{-webkit-transform:scale(1) translateY(var(--fa-bounce-rebound,-.125em));transform:scale(1) translateY(var(--fa-bounce-rebound,-.125em))}64%{-webkit-transform:scale(1) translateY(0);transform:scale(1) translateY(0)}to{-webkit-transform:scale(1) translateY(0);transform:scale(1) translateY(0)}}@-webkit-keyframes fa-fade{50%{opacity:var(--fa-fade-opacity,.4)}}@keyframes fa-fade{50%{opacity:var(--fa-fade-opacity,.4)}}@-webkit-keyframes fa-beat-fade{0%,to{opacity:var(--fa-beat-fade-opacity,.4);-webkit-transform:scale(1);transform:scale(1)}50%{opacity:1;-webkit-transform:scale(var(--fa-beat-fade-scale,1.125));transform:scale(var(--fa-beat-fade-scale,1.125))}}@keyframes fa-beat-fade{0%,to{opacity:var(--fa-beat-fade-opacity,.4);-webkit-transform:scale(1);transform:scale(1)}50%{opacity:1;-webkit-transform:scale(var(--fa-beat-fade-scale,1.125));transform:scale(var(--fa-beat-fade-scale,1.125))}}@-webkit-keyframes fa-flip{50%{-webkit-transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg));transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg))}}@keyframes fa-flip{50%{-webkit-transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg));transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg))}}@-webkit-keyframes fa-shake{0%{-webkit-transform:rotate(-15deg);transform:rotate(-15deg)}4%{-webkit-transform:rotate(15deg);transform:rotate(15deg)}24%,8%{-webkit-transform:rotate(-18deg);transform:rotate(-18deg)}12%,28%{-webkit-transform:rotate(18deg);transform:rotate(18deg)}16%{-webkit-transform:rotate(-22deg);transform:rotate(-22deg)}20%{-webkit-transform:rotate(22deg);transform:rotate(22deg)}32%{-webkit-transform:rotate(-12deg);transform:rotate(-12deg)}36%{-webkit-transform:rotate(12deg);transform:rotate(12deg)}40%,to{-webkit-transform:rotate(0deg);transform:rotate(0deg)}}@keyframes fa-shake{0%{-webkit-transform:rotate(-15deg);transform:rotate(-15deg)}4%{-webkit-transform:rotate(15deg);transform:rotate(15deg)}24%,8%{-webkit-transform:rotate(-18deg);transform:rotate(-18deg)}12%,28%{-webkit-transform:rotate(18deg);transform:rotate(18deg)}16%{-webkit-transform:rotate(-22deg);transform:rotate(-22deg)}20%{-webkit-transform:rotate(22deg);transform:rotate(22deg)}32%{-webkit-transform:rotate(-12deg);transform:rotate(-12deg)}36%{-webkit-transform:rotate(12deg);transform:rotate(12deg)}40%,to{-webkit-transform:rotate(0deg);transform:rotate(0deg)}}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}.fa-rotate-90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.fa-flip-vertical{-webkit-transform:scaleY(-1);transform:scaleY(-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{-webkit-transform:scale(-1);transform:scale(-1)}.fa-rotate-by{-webkit-transform:rotate(var(--fa-rotate-angle,0));transform:rotate(var(--fa-rotate-angle,0))}.fa-stack{display:inline-block;height:2em;line-height:2em;position:relative;vertical-align:middle;width:2.5em}.fa-stack-1x,.fa-stack-2x{left:0;position:absolute;text-align:center;width:100%;z-index:var(--fa-stack-z-index,auto)}.fa-stack-1x{line-height:inherit}.fa-stack-2x{font-size:2em}.fa-inverse{color:var(--fa-inverse,#fff)}.fa-0:before{content:"\30"}.fa-1:before{content:"\31"}.fa-2:before{content:"\32"}.fa-3:before{content:"\33"}.fa-4:before{content:"\34"}.fa-5:before{content:"\35"}.fa-6:before{content:"\36"}.fa-7:before{content:"\37"}.fa-8:before{content:"\38"}.fa-9:before{content:"\39"}.fa-fill-drip:before{content:"\f576"}.fa-arrows-to-circle:before{content:"\e4bd"}.fa-chevron-circle-right:before,.fa-circle-chevron-right:before{content:"\f138"}.fa-at:before{content:"\40"}.fa-trash-alt:before,.fa-trash-can:before{content:"\f2ed"}.fa-text-height:before{content:"\f034"}.fa-user-times:before,.fa-user-xmark:before{content:"\f235"}.fa-stethoscope:before{content:"\f0f1"}.fa-comment-alt:before,.fa-message:before{content:"\f27a"}.fa-info:before{content:"\f129"}.fa-compress-alt:before,.fa-down-left-and-up-right-to-center:before{content:"\f422"}.fa-explosion:before{content:"\e4e9"}.fa-file-alt:before,.fa-file-lines:before,.fa-file-text:before{content:"\f15c"}.fa-wave-square:before{content:"\f83e"}.fa-ring:before{content:"\f70b"}.fa-building-un:before{content:"\e4d9"}.fa-dice-three:before{content:"\f527"}.fa-calendar-alt:before,.fa-calendar-days:before{content:"\f073"}.fa-anchor-circle-check:before{content:"\e4aa"}.fa-building-circle-arrow-right:before{content:"\e4d1"}.fa-volleyball-ball:before,.fa-volleyball:before{content:"\f45f"}.fa-arrows-up-to-line:before{content:"\e4c2"}.fa-sort-desc:before,.fa-sort-down:before{content:"\f0dd"}.fa-circle-minus:before,.fa-minus-circle:before{content:"\f056"}.fa-door-open:before{content:"\f52b"}.fa-right-from-bracket:before,.fa-sign-out-alt:before{content:"\f2f5"}.fa-atom:before{content:"\f5d2"}.fa-soap:before{content:"\e06e"}.fa-heart-music-camera-bolt:before,.fa-icons:before{content:"\f86d"}.fa-microphone-alt-slash:before,.fa-microphone-lines-slash:before{content:"\f539"}.fa-bridge-circle-check:before{content:"\e4c9"}.fa-pump-medical:before{content:"\e06a"}.fa-fingerprint:before{content:"\f577"}.fa-hand-point-right:before{content:"\f0a4"}.fa-magnifying-glass-location:before,.fa-search-location:before{content:"\f689"}.fa-forward-step:before,.fa-step-forward:before{content:"\f051"}.fa-face-smile-beam:before,.fa-smile-beam:before{content:"\f5b8"}.fa-flag-checkered:before{content:"\f11e"}.fa-football-ball:before,.fa-football:before{content:"\f44e"}.fa-school-circle-exclamation:before{content:"\e56c"}.fa-crop:before{content:"\f125"}.fa-angle-double-down:before,.fa-angles-down:before{content:"\f103"}.fa-users-rectangle:before{content:"\e594"}.fa-people-roof:before{content:"\e537"}.fa-people-line:before{content:"\e534"}.fa-beer-mug-empty:before,.fa-beer:before{content:"\f0fc"}.fa-diagram-predecessor:before{content:"\e477"}.fa-arrow-up-long:before,.fa-long-arrow-up:before{content:"\f176"}.fa-burn:before,.fa-fire-flame-simple:before{content:"\f46a"}.fa-male:before,.fa-person:before{content:"\f183"}.fa-laptop:before{content:"\f109"}.fa-file-csv:before{content:"\f6dd"}.fa-menorah:before{content:"\f676"}.fa-truck-plane:before{content:"\e58f"}.fa-record-vinyl:before{content:"\f8d9"}.fa-face-grin-stars:before,.fa-grin-stars:before{content:"\f587"}.fa-bong:before{content:"\f55c"}.fa-pastafarianism:before,.fa-spaghetti-monster-flying:before{content:"\f67b"}.fa-arrow-down-up-across-line:before{content:"\e4af"}.fa-spoon:before,.fa-utensil-spoon:before{content:"\f2e5"}.fa-jar-wheat:before{content:"\e517"}.fa-envelopes-bulk:before,.fa-mail-bulk:before{content:"\f674"}.fa-file-circle-exclamation:before{content:"\e4eb"}.fa-circle-h:before,.fa-hospital-symbol:before{content:"\f47e"}.fa-pager:before{content:"\f815"}.fa-address-book:before,.fa-contact-book:before{content:"\f2b9"}.fa-strikethrough:before{content:"\f0cc"}.fa-k:before{content:"\4b"}.fa-landmark-flag:before{content:"\e51c"}.fa-pencil-alt:before,.fa-pencil:before{content:"\f303"}.fa-backward:before{content:"\f04a"}.fa-caret-right:before{content:"\f0da"}.fa-comments:before{content:"\f086"}.fa-file-clipboard:before,.fa-paste:before{content:"\f0ea"}.fa-code-pull-request:before{content:"\e13c"}.fa-clipboard-list:before{content:"\f46d"}.fa-truck-loading:before,.fa-truck-ramp-box:before{content:"\f4de"}.fa-user-check:before{content:"\f4fc"}.fa-vial-virus:before{content:"\e597"}.fa-sheet-plastic:before{content:"\e571"}.fa-blog:before{content:"\f781"}.fa-user-ninja:before{content:"\f504"}.fa-person-arrow-up-from-line:before{content:"\e539"}.fa-scroll-torah:before,.fa-torah:before{content:"\f6a0"}.fa-broom-ball:before,.fa-quidditch-broom-ball:before,.fa-quidditch:before{content:"\f458"}.fa-toggle-off:before{content:"\f204"}.fa-archive:before,.fa-box-archive:before{content:"\f187"}.fa-person-drowning:before{content:"\e545"}.fa-arrow-down-9-1:before,.fa-sort-numeric-desc:before,.fa-sort-numeric-down-alt:before{content:"\f886"}.fa-face-grin-tongue-squint:before,.fa-grin-tongue-squint:before{content:"\f58a"}.fa-spray-can:before{content:"\f5bd"}.fa-truck-monster:before{content:"\f63b"}.fa-w:before{content:"\57"}.fa-earth-africa:before,.fa-globe-africa:before{content:"\f57c"}.fa-rainbow:before{content:"\f75b"}.fa-circle-notch:before{content:"\f1ce"}.fa-tablet-alt:before,.fa-tablet-screen-button:before{content:"\f3fa"}.fa-paw:before{content:"\f1b0"}.fa-cloud:before{content:"\f0c2"}.fa-trowel-bricks:before{content:"\e58a"}.fa-face-flushed:before,.fa-flushed:before{content:"\f579"}.fa-hospital-user:before{content:"\f80d"}.fa-tent-arrow-left-right:before{content:"\e57f"}.fa-gavel:before,.fa-legal:before{content:"\f0e3"}.fa-binoculars:before{content:"\f1e5"}.fa-microphone-slash:before{content:"\f131"}.fa-box-tissue:before{content:"\e05b"}.fa-motorcycle:before{content:"\f21c"}.fa-bell-concierge:before,.fa-concierge-bell:before{content:"\f562"}.fa-pen-ruler:before,.fa-pencil-ruler:before{content:"\f5ae"}.fa-people-arrows-left-right:before,.fa-people-arrows:before{content:"\e068"}.fa-mars-and-venus-burst:before{content:"\e523"}.fa-caret-square-right:before,.fa-square-caret-right:before{content:"\f152"}.fa-cut:before,.fa-scissors:before{content:"\f0c4"}.fa-sun-plant-wilt:before{content:"\e57a"}.fa-toilets-portable:before{content:"\e584"}.fa-hockey-puck:before{content:"\f453"}.fa-table:before{content:"\f0ce"}.fa-magnifying-glass-arrow-right:before{content:"\e521"}.fa-digital-tachograph:before,.fa-tachograph-digital:before{content:"\f566"}.fa-users-slash:before{content:"\e073"}.fa-clover:before{content:"\e139"}.fa-mail-reply:before,.fa-reply:before{content:"\f3e5"}.fa-star-and-crescent:before{content:"\f699"}.fa-house-fire:before{content:"\e50c"}.fa-minus-square:before,.fa-square-minus:before{content:"\f146"}.fa-helicopter:before{content:"\f533"}.fa-compass:before{content:"\f14e"}.fa-caret-square-down:before,.fa-square-caret-down:before{content:"\f150"}.fa-file-circle-question:before{content:"\e4ef"}.fa-laptop-code:before{content:"\f5fc"}.fa-swatchbook:before{content:"\f5c3"}.fa-prescription-bottle:before{content:"\f485"}.fa-bars:before,.fa-navicon:before{content:"\f0c9"}.fa-people-group:before{content:"\e533"}.fa-hourglass-3:before,.fa-hourglass-end:before{content:"\f253"}.fa-heart-broken:before,.fa-heart-crack:before{content:"\f7a9"}.fa-external-link-square-alt:before,.fa-square-up-right:before{content:"\f360"}.fa-face-kiss-beam:before,.fa-kiss-beam:before{content:"\f597"}.fa-film:before{content:"\f008"}.fa-ruler-horizontal:before{content:"\f547"}.fa-people-robbery:before{content:"\e536"}.fa-lightbulb:before{content:"\f0eb"}.fa-caret-left:before{content:"\f0d9"}.fa-circle-exclamation:before,.fa-exclamation-circle:before{content:"\f06a"}.fa-school-circle-xmark:before{content:"\e56d"}.fa-arrow-right-from-bracket:before,.fa-sign-out:before{content:"\f08b"}.fa-chevron-circle-down:before,.fa-circle-chevron-down:before{content:"\f13a"}.fa-unlock-alt:before,.fa-unlock-keyhole:before{content:"\f13e"}.fa-cloud-showers-heavy:before{content:"\f740"}.fa-headphones-alt:before,.fa-headphones-simple:before{content:"\f58f"}.fa-sitemap:before{content:"\f0e8"}.fa-circle-dollar-to-slot:before,.fa-donate:before{content:"\f4b9"}.fa-memory:before{content:"\f538"}.fa-road-spikes:before{content:"\e568"}.fa-fire-burner:before{content:"\e4f1"}.fa-flag:before{content:"\f024"}.fa-hanukiah:before{content:"\f6e6"}.fa-feather:before{content:"\f52d"}.fa-volume-down:before,.fa-volume-low:before{content:"\f027"}.fa-comment-slash:before{content:"\f4b3"}.fa-cloud-sun-rain:before{content:"\f743"}.fa-compress:before{content:"\f066"}.fa-wheat-alt:before,.fa-wheat-awn:before{content:"\e2cd"}.fa-ankh:before{content:"\f644"}.fa-hands-holding-child:before{content:"\e4fa"}.fa-asterisk:before{content:"\2a"}.fa-check-square:before,.fa-square-check:before{content:"\f14a"}.fa-peseta-sign:before{content:"\e221"}.fa-header:before,.fa-heading:before{content:"\f1dc"}.fa-ghost:before{content:"\f6e2"}.fa-list-squares:before,.fa-list:before{content:"\f03a"}.fa-phone-square-alt:before,.fa-square-phone-flip:before{content:"\f87b"}.fa-cart-plus:before{content:"\f217"}.fa-gamepad:before{content:"\f11b"}.fa-circle-dot:before,.fa-dot-circle:before{content:"\f192"}.fa-dizzy:before,.fa-face-dizzy:before{content:"\f567"}.fa-egg:before{content:"\f7fb"}.fa-house-medical-circle-xmark:before{content:"\e513"}.fa-campground:before{content:"\f6bb"}.fa-folder-plus:before{content:"\f65e"}.fa-futbol-ball:before,.fa-futbol:before,.fa-soccer-ball:before{content:"\f1e3"}.fa-paint-brush:before,.fa-paintbrush:before{content:"\f1fc"}.fa-lock:before{content:"\f023"}.fa-gas-pump:before{content:"\f52f"}.fa-hot-tub-person:before,.fa-hot-tub:before{content:"\f593"}.fa-map-location:before,.fa-map-marked:before{content:"\f59f"}.fa-house-flood-water:before{content:"\e50e"}.fa-tree:before{content:"\f1bb"}.fa-bridge-lock:before{content:"\e4cc"}.fa-sack-dollar:before{content:"\f81d"}.fa-edit:before,.fa-pen-to-square:before{content:"\f044"}.fa-car-side:before{content:"\f5e4"}.fa-share-alt:before,.fa-share-nodes:before{content:"\f1e0"}.fa-heart-circle-minus:before{content:"\e4ff"}.fa-hourglass-2:before,.fa-hourglass-half:before{content:"\f252"}.fa-microscope:before{content:"\f610"}.fa-sink:before{content:"\e06d"}.fa-bag-shopping:before,.fa-shopping-bag:before{content:"\f290"}.fa-arrow-down-z-a:before,.fa-sort-alpha-desc:before,.fa-sort-alpha-down-alt:before{content:"\f881"}.fa-mitten:before{content:"\f7b5"}.fa-person-rays:before{content:"\e54d"}.fa-users:before{content:"\f0c0"}.fa-eye-slash:before{content:"\f070"}.fa-flask-vial:before{content:"\e4f3"}.fa-hand-paper:before,.fa-hand:before{content:"\f256"}.fa-om:before{content:"\f679"}.fa-worm:before{content:"\e599"}.fa-house-circle-xmark:before{content:"\e50b"}.fa-plug:before{content:"\f1e6"}.fa-chevron-up:before{content:"\f077"}.fa-hand-spock:before{content:"\f259"}.fa-stopwatch:before{content:"\f2f2"}.fa-face-kiss:before,.fa-kiss:before{content:"\f596"}.fa-bridge-circle-xmark:before{content:"\e4cb"}.fa-face-grin-tongue:before,.fa-grin-tongue:before{content:"\f589"}.fa-chess-bishop:before{content:"\f43a"}.fa-face-grin-wink:before,.fa-grin-wink:before{content:"\f58c"}.fa-deaf:before,.fa-deafness:before,.fa-ear-deaf:before,.fa-hard-of-hearing:before{content:"\f2a4"}.fa-road-circle-check:before{content:"\e564"}.fa-dice-five:before{content:"\f523"}.fa-rss-square:before,.fa-square-rss:before{content:"\f143"}.fa-land-mine-on:before{content:"\e51b"}.fa-i-cursor:before{content:"\f246"}.fa-stamp:before{content:"\f5bf"}.fa-stairs:before{content:"\e289"}.fa-i:before{content:"\49"}.fa-hryvnia-sign:before,.fa-hryvnia:before{content:"\f6f2"}.fa-pills:before{content:"\f484"}.fa-face-grin-wide:before,.fa-grin-alt:before{content:"\f581"}.fa-tooth:before{content:"\f5c9"}.fa-v:before{content:"\56"}.fa-bangladeshi-taka-sign:before{content:"\e2e6"}.fa-bicycle:before{content:"\f206"}.fa-rod-asclepius:before,.fa-rod-snake:before,.fa-staff-aesculapius:before,.fa-staff-snake:before{content:"\e579"}.fa-head-side-cough-slash:before{content:"\e062"}.fa-ambulance:before,.fa-truck-medical:before{content:"\f0f9"}.fa-wheat-awn-circle-exclamation:before{content:"\e598"}.fa-snowman:before{content:"\f7d0"}.fa-mortar-pestle:before{content:"\f5a7"}.fa-road-barrier:before{content:"\e562"}.fa-school:before{content:"\f549"}.fa-igloo:before{content:"\f7ae"}.fa-joint:before{content:"\f595"}.fa-angle-right:before{content:"\f105"}.fa-horse:before{content:"\f6f0"}.fa-q:before{content:"\51"}.fa-g:before{content:"\47"}.fa-notes-medical:before{content:"\f481"}.fa-temperature-2:before,.fa-temperature-half:before,.fa-thermometer-2:before,.fa-thermometer-half:before{content:"\f2c9"}.fa-dong-sign:before{content:"\e169"}.fa-capsules:before{content:"\f46b"}.fa-poo-bolt:before,.fa-poo-storm:before{content:"\f75a"}.fa-face-frown-open:before,.fa-frown-open:before{content:"\f57a"}.fa-hand-point-up:before{content:"\f0a6"}.fa-money-bill:before{content:"\f0d6"}.fa-bookmark:before{content:"\f02e"}.fa-align-justify:before{content:"\f039"}.fa-umbrella-beach:before{content:"\f5ca"}.fa-helmet-un:before{content:"\e503"}.fa-bullseye:before{content:"\f140"}.fa-bacon:before{content:"\f7e5"}.fa-hand-point-down:before{content:"\f0a7"}.fa-arrow-up-from-bracket:before{content:"\e09a"}.fa-folder-blank:before,.fa-folder:before{content:"\f07b"}.fa-file-medical-alt:before,.fa-file-waveform:before{content:"\f478"}.fa-radiation:before{content:"\f7b9"}.fa-chart-simple:before{content:"\e473"}.fa-mars-stroke:before{content:"\f229"}.fa-vial:before{content:"\f492"}.fa-dashboard:before,.fa-gauge-med:before,.fa-gauge:before,.fa-tachometer-alt-average:before{content:"\f624"}.fa-magic-wand-sparkles:before,.fa-wand-magic-sparkles:before{content:"\e2ca"}.fa-e:before{content:"\45"}.fa-pen-alt:before,.fa-pen-clip:before{content:"\f305"}.fa-bridge-circle-exclamation:before{content:"\e4ca"}.fa-user:before{content:"\f007"}.fa-school-circle-check:before{content:"\e56b"}.fa-dumpster:before{content:"\f793"}.fa-shuttle-van:before,.fa-van-shuttle:before{content:"\f5b6"}.fa-building-user:before{content:"\e4da"}.fa-caret-square-left:before,.fa-square-caret-left:before{content:"\f191"}.fa-highlighter:before{content:"\f591"}.fa-key:before{content:"\f084"}.fa-bullhorn:before{content:"\f0a1"}.fa-globe:before{content:"\f0ac"}.fa-synagogue:before{content:"\f69b"}.fa-person-half-dress:before{content:"\e548"}.fa-road-bridge:before{content:"\e563"}.fa-location-arrow:before{content:"\f124"}.fa-c:before{content:"\43"}.fa-tablet-button:before{content:"\f10a"}.fa-building-lock:before{content:"\e4d6"}.fa-pizza-slice:before{content:"\f818"}.fa-money-bill-wave:before{content:"\f53a"}.fa-area-chart:before,.fa-chart-area:before{content:"\f1fe"}.fa-house-flag:before{content:"\e50d"}.fa-person-circle-minus:before{content:"\e540"}.fa-ban:before,.fa-cancel:before{content:"\f05e"}.fa-camera-rotate:before{content:"\e0d8"}.fa-air-freshener:before,.fa-spray-can-sparkles:before{content:"\f5d0"}.fa-star:before{content:"\f005"}.fa-repeat:before{content:"\f363"}.fa-cross:before{content:"\f654"}.fa-box:before{content:"\f466"}.fa-venus-mars:before{content:"\f228"}.fa-arrow-pointer:before,.fa-mouse-pointer:before{content:"\f245"}.fa-expand-arrows-alt:before,.fa-maximize:before{content:"\f31e"}.fa-charging-station:before{content:"\f5e7"}.fa-shapes:before,.fa-triangle-circle-square:before{content:"\f61f"}.fa-random:before,.fa-shuffle:before{content:"\f074"}.fa-person-running:before,.fa-running:before{content:"\f70c"}.fa-mobile-retro:before{content:"\e527"}.fa-grip-lines-vertical:before{content:"\f7a5"}.fa-spider:before{content:"\f717"}.fa-hands-bound:before{content:"\e4f9"}.fa-file-invoice-dollar:before{content:"\f571"}.fa-plane-circle-exclamation:before{content:"\e556"}.fa-x-ray:before{content:"\f497"}.fa-spell-check:before{content:"\f891"}.fa-slash:before{content:"\f715"}.fa-computer-mouse:before,.fa-mouse:before{content:"\f8cc"}.fa-arrow-right-to-bracket:before,.fa-sign-in:before{content:"\f090"}.fa-shop-slash:before,.fa-store-alt-slash:before{content:"\e070"}.fa-server:before{content:"\f233"}.fa-virus-covid-slash:before{content:"\e4a9"}.fa-shop-lock:before{content:"\e4a5"}.fa-hourglass-1:before,.fa-hourglass-start:before{content:"\f251"}.fa-blender-phone:before{content:"\f6b6"}.fa-building-wheat:before{content:"\e4db"}.fa-person-breastfeeding:before{content:"\e53a"}.fa-right-to-bracket:before,.fa-sign-in-alt:before{content:"\f2f6"}.fa-venus:before{content:"\f221"}.fa-passport:before{content:"\f5ab"}.fa-heart-pulse:before,.fa-heartbeat:before{content:"\f21e"}.fa-people-carry-box:before,.fa-people-carry:before{content:"\f4ce"}.fa-temperature-high:before{content:"\f769"}.fa-microchip:before{content:"\f2db"}.fa-crown:before{content:"\f521"}.fa-weight-hanging:before{content:"\f5cd"}.fa-xmarks-lines:before{content:"\e59a"}.fa-file-prescription:before{content:"\f572"}.fa-weight-scale:before,.fa-weight:before{content:"\f496"}.fa-user-friends:before,.fa-user-group:before{content:"\f500"}.fa-arrow-up-a-z:before,.fa-sort-alpha-up:before{content:"\f15e"}.fa-chess-knight:before{content:"\f441"}.fa-face-laugh-squint:before,.fa-laugh-squint:before{content:"\f59b"}.fa-wheelchair:before{content:"\f193"}.fa-arrow-circle-up:before,.fa-circle-arrow-up:before{content:"\f0aa"}.fa-toggle-on:before{content:"\f205"}.fa-person-walking:before,.fa-walking:before{content:"\f554"}.fa-l:before{content:"\4c"}.fa-fire:before{content:"\f06d"}.fa-bed-pulse:before,.fa-procedures:before{content:"\f487"}.fa-shuttle-space:before,.fa-space-shuttle:before{content:"\f197"}.fa-face-laugh:before,.fa-laugh:before{content:"\f599"}.fa-folder-open:before{content:"\f07c"}.fa-heart-circle-plus:before{content:"\e500"}.fa-code-fork:before{content:"\e13b"}.fa-city:before{content:"\f64f"}.fa-microphone-alt:before,.fa-microphone-lines:before{content:"\f3c9"}.fa-pepper-hot:before{content:"\f816"}.fa-unlock:before{content:"\f09c"}.fa-colon-sign:before{content:"\e140"}.fa-headset:before{content:"\f590"}.fa-store-slash:before{content:"\e071"}.fa-road-circle-xmark:before{content:"\e566"}.fa-user-minus:before{content:"\f503"}.fa-mars-stroke-up:before,.fa-mars-stroke-v:before{content:"\f22a"}.fa-champagne-glasses:before,.fa-glass-cheers:before{content:"\f79f"}.fa-clipboard:before{content:"\f328"}.fa-house-circle-exclamation:before{content:"\e50a"}.fa-file-arrow-up:before,.fa-file-upload:before{content:"\f574"}.fa-wifi-3:before,.fa-wifi-strong:before,.fa-wifi:before{content:"\f1eb"}.fa-bath:before,.fa-bathtub:before{content:"\f2cd"}.fa-underline:before{content:"\f0cd"}.fa-user-edit:before,.fa-user-pen:before{content:"\f4ff"}.fa-signature:before{content:"\f5b7"}.fa-stroopwafel:before{content:"\f551"}.fa-bold:before{content:"\f032"}.fa-anchor-lock:before{content:"\e4ad"}.fa-building-ngo:before{content:"\e4d7"}.fa-manat-sign:before{content:"\e1d5"}.fa-not-equal:before{content:"\f53e"}.fa-border-style:before,.fa-border-top-left:before{content:"\f853"}.fa-map-location-dot:before,.fa-map-marked-alt:before{content:"\f5a0"}.fa-jedi:before{content:"\f669"}.fa-poll:before,.fa-square-poll-vertical:before{content:"\f681"}.fa-mug-hot:before{content:"\f7b6"}.fa-battery-car:before,.fa-car-battery:before{content:"\f5df"}.fa-gift:before{content:"\f06b"}.fa-dice-two:before{content:"\f528"}.fa-chess-queen:before{content:"\f445"}.fa-glasses:before{content:"\f530"}.fa-chess-board:before{content:"\f43c"}.fa-building-circle-check:before{content:"\e4d2"}.fa-person-chalkboard:before{content:"\e53d"}.fa-mars-stroke-h:before,.fa-mars-stroke-right:before{content:"\f22b"}.fa-hand-back-fist:before,.fa-hand-rock:before{content:"\f255"}.fa-caret-square-up:before,.fa-square-caret-up:before{content:"\f151"}.fa-cloud-showers-water:before{content:"\e4e4"}.fa-bar-chart:before,.fa-chart-bar:before{content:"\f080"}.fa-hands-bubbles:before,.fa-hands-wash:before{content:"\e05e"}.fa-less-than-equal:before{content:"\f537"}.fa-train:before{content:"\f238"}.fa-eye-low-vision:before,.fa-low-vision:before{content:"\f2a8"}.fa-crow:before{content:"\f520"}.fa-sailboat:before{content:"\e445"}.fa-window-restore:before{content:"\f2d2"}.fa-plus-square:before,.fa-square-plus:before{content:"\f0fe"}.fa-torii-gate:before{content:"\f6a1"}.fa-frog:before{content:"\f52e"}.fa-bucket:before{content:"\e4cf"}.fa-image:before{content:"\f03e"}.fa-microphone:before{content:"\f130"}.fa-cow:before{content:"\f6c8"}.fa-caret-up:before{content:"\f0d8"}.fa-screwdriver:before{content:"\f54a"}.fa-folder-closed:before{content:"\e185"}.fa-house-tsunami:before{content:"\e515"}.fa-square-nfi:before{content:"\e576"}.fa-arrow-up-from-ground-water:before{content:"\e4b5"}.fa-glass-martini-alt:before,.fa-martini-glass:before{content:"\f57b"}.fa-rotate-back:before,.fa-rotate-backward:before,.fa-rotate-left:before,.fa-undo-alt:before{content:"\f2ea"}.fa-columns:before,.fa-table-columns:before{content:"\f0db"}.fa-lemon:before{content:"\f094"}.fa-head-side-mask:before{content:"\e063"}.fa-handshake:before{content:"\f2b5"}.fa-gem:before{content:"\f3a5"}.fa-dolly-box:before,.fa-dolly:before{content:"\f472"}.fa-smoking:before{content:"\f48d"}.fa-compress-arrows-alt:before,.fa-minimize:before{content:"\f78c"}.fa-monument:before{content:"\f5a6"}.fa-snowplow:before{content:"\f7d2"}.fa-angle-double-right:before,.fa-angles-right:before{content:"\f101"}.fa-cannabis:before{content:"\f55f"}.fa-circle-play:before,.fa-play-circle:before{content:"\f144"}.fa-tablets:before{content:"\f490"}.fa-ethernet:before{content:"\f796"}.fa-eur:before,.fa-euro-sign:before,.fa-euro:before{content:"\f153"}.fa-chair:before{content:"\f6c0"}.fa-check-circle:before,.fa-circle-check:before{content:"\f058"}.fa-circle-stop:before,.fa-stop-circle:before{content:"\f28d"}.fa-compass-drafting:before,.fa-drafting-compass:before{content:"\f568"}.fa-plate-wheat:before{content:"\e55a"}.fa-icicles:before{content:"\f7ad"}.fa-person-shelter:before{content:"\e54f"}.fa-neuter:before{content:"\f22c"}.fa-id-badge:before{content:"\f2c1"}.fa-marker:before{content:"\f5a1"}.fa-face-laugh-beam:before,.fa-laugh-beam:before{content:"\f59a"}.fa-helicopter-symbol:before{content:"\e502"}.fa-universal-access:before{content:"\f29a"}.fa-chevron-circle-up:before,.fa-circle-chevron-up:before{content:"\f139"}.fa-lari-sign:before{content:"\e1c8"}.fa-volcano:before{content:"\f770"}.fa-person-walking-dashed-line-arrow-right:before{content:"\e553"}.fa-gbp:before,.fa-pound-sign:before,.fa-sterling-sign:before{content:"\f154"}.fa-viruses:before{content:"\e076"}.fa-square-person-confined:before{content:"\e577"}.fa-user-tie:before{content:"\f508"}.fa-arrow-down-long:before,.fa-long-arrow-down:before{content:"\f175"}.fa-tent-arrow-down-to-line:before{content:"\e57e"}.fa-certificate:before{content:"\f0a3"}.fa-mail-reply-all:before,.fa-reply-all:before{content:"\f122"}.fa-suitcase:before{content:"\f0f2"}.fa-person-skating:before,.fa-skating:before{content:"\f7c5"}.fa-filter-circle-dollar:before,.fa-funnel-dollar:before{content:"\f662"}.fa-camera-retro:before{content:"\f083"}.fa-arrow-circle-down:before,.fa-circle-arrow-down:before{content:"\f0ab"}.fa-arrow-right-to-file:before,.fa-file-import:before{content:"\f56f"}.fa-external-link-square:before,.fa-square-arrow-up-right:before{content:"\f14c"}.fa-box-open:before{content:"\f49e"}.fa-scroll:before{content:"\f70e"}.fa-spa:before{content:"\f5bb"}.fa-location-pin-lock:before{content:"\e51f"}.fa-pause:before{content:"\f04c"}.fa-hill-avalanche:before{content:"\e507"}.fa-temperature-0:before,.fa-temperature-empty:before,.fa-thermometer-0:before,.fa-thermometer-empty:before{content:"\f2cb"}.fa-bomb:before{content:"\f1e2"}.fa-registered:before{content:"\f25d"}.fa-address-card:before,.fa-contact-card:before,.fa-vcard:before{content:"\f2bb"}.fa-balance-scale-right:before,.fa-scale-unbalanced-flip:before{content:"\f516"}.fa-subscript:before{content:"\f12c"}.fa-diamond-turn-right:before,.fa-directions:before{content:"\f5eb"}.fa-burst:before{content:"\e4dc"}.fa-house-laptop:before,.fa-laptop-house:before{content:"\e066"}.fa-face-tired:before,.fa-tired:before{content:"\f5c8"}.fa-money-bills:before{content:"\e1f3"}.fa-smog:before{content:"\f75f"}.fa-crutch:before{content:"\f7f7"}.fa-cloud-arrow-up:before,.fa-cloud-upload-alt:before,.fa-cloud-upload:before{content:"\f0ee"}.fa-palette:before{content:"\f53f"}.fa-arrows-turn-right:before{content:"\e4c0"}.fa-vest:before{content:"\e085"}.fa-ferry:before{content:"\e4ea"}.fa-arrows-down-to-people:before{content:"\e4b9"}.fa-seedling:before,.fa-sprout:before{content:"\f4d8"}.fa-arrows-alt-h:before,.fa-left-right:before{content:"\f337"}.fa-boxes-packing:before{content:"\e4c7"}.fa-arrow-circle-left:before,.fa-circle-arrow-left:before{content:"\f0a8"}.fa-group-arrows-rotate:before{content:"\e4f6"}.fa-bowl-food:before{content:"\e4c6"}.fa-candy-cane:before{content:"\f786"}.fa-arrow-down-wide-short:before,.fa-sort-amount-asc:before,.fa-sort-amount-down:before{content:"\f160"}.fa-cloud-bolt:before,.fa-thunderstorm:before{content:"\f76c"}.fa-remove-format:before,.fa-text-slash:before{content:"\f87d"}.fa-face-smile-wink:before,.fa-smile-wink:before{content:"\f4da"}.fa-file-word:before{content:"\f1c2"}.fa-file-powerpoint:before{content:"\f1c4"}.fa-arrows-h:before,.fa-arrows-left-right:before{content:"\f07e"}.fa-house-lock:before{content:"\e510"}.fa-cloud-arrow-down:before,.fa-cloud-download-alt:before,.fa-cloud-download:before{content:"\f0ed"}.fa-children:before{content:"\e4e1"}.fa-blackboard:before,.fa-chalkboard:before{content:"\f51b"}.fa-user-alt-slash:before,.fa-user-large-slash:before{content:"\f4fa"}.fa-envelope-open:before{content:"\f2b6"}.fa-handshake-alt-slash:before,.fa-handshake-simple-slash:before{content:"\e05f"}.fa-mattress-pillow:before{content:"\e525"}.fa-guarani-sign:before{content:"\e19a"}.fa-arrows-rotate:before,.fa-refresh:before,.fa-sync:before{content:"\f021"}.fa-fire-extinguisher:before{content:"\f134"}.fa-cruzeiro-sign:before{content:"\e152"}.fa-greater-than-equal:before{content:"\f532"}.fa-shield-alt:before,.fa-shield-halved:before{content:"\f3ed"}.fa-atlas:before,.fa-book-atlas:before{content:"\f558"}.fa-virus:before{content:"\e074"}.fa-envelope-circle-check:before{content:"\e4e8"}.fa-layer-group:before{content:"\f5fd"}.fa-arrows-to-dot:before{content:"\e4be"}.fa-archway:before{content:"\f557"}.fa-heart-circle-check:before{content:"\e4fd"}.fa-house-chimney-crack:before,.fa-house-damage:before{content:"\f6f1"}.fa-file-archive:before,.fa-file-zipper:before{content:"\f1c6"}.fa-square:before{content:"\f0c8"}.fa-glass-martini:before,.fa-martini-glass-empty:before{content:"\f000"}.fa-couch:before{content:"\f4b8"}.fa-cedi-sign:before{content:"\e0df"}.fa-italic:before{content:"\f033"}.fa-table-cells-column-lock:before{content:"\e678"}.fa-church:before{content:"\f51d"}.fa-comments-dollar:before{content:"\f653"}.fa-democrat:before{content:"\f747"}.fa-z:before{content:"\5a"}.fa-person-skiing:before,.fa-skiing:before{content:"\f7c9"}.fa-road-lock:before{content:"\e567"}.fa-a:before{content:"\41"}.fa-temperature-arrow-down:before,.fa-temperature-down:before{content:"\e03f"}.fa-feather-alt:before,.fa-feather-pointed:before{content:"\f56b"}.fa-p:before{content:"\50"}.fa-snowflake:before{content:"\f2dc"}.fa-newspaper:before{content:"\f1ea"}.fa-ad:before,.fa-rectangle-ad:before{content:"\f641"}.fa-arrow-circle-right:before,.fa-circle-arrow-right:before{content:"\f0a9"}.fa-filter-circle-xmark:before{content:"\e17b"}.fa-locust:before{content:"\e520"}.fa-sort:before,.fa-unsorted:before{content:"\f0dc"}.fa-list-1-2:before,.fa-list-numeric:before,.fa-list-ol:before{content:"\f0cb"}.fa-person-dress-burst:before{content:"\e544"}.fa-money-check-alt:before,.fa-money-check-dollar:before{content:"\f53d"}.fa-vector-square:before{content:"\f5cb"}.fa-bread-slice:before{content:"\f7ec"}.fa-language:before{content:"\f1ab"}.fa-face-kiss-wink-heart:before,.fa-kiss-wink-heart:before{content:"\f598"}.fa-filter:before{content:"\f0b0"}.fa-question:before{content:"\3f"}.fa-file-signature:before{content:"\f573"}.fa-arrows-alt:before,.fa-up-down-left-right:before{content:"\f0b2"}.fa-house-chimney-user:before{content:"\e065"}.fa-hand-holding-heart:before{content:"\f4be"}.fa-puzzle-piece:before{content:"\f12e"}.fa-money-check:before{content:"\f53c"}.fa-star-half-alt:before,.fa-star-half-stroke:before{content:"\f5c0"}.fa-code:before{content:"\f121"}.fa-glass-whiskey:before,.fa-whiskey-glass:before{content:"\f7a0"}.fa-building-circle-exclamation:before{content:"\e4d3"}.fa-magnifying-glass-chart:before{content:"\e522"}.fa-arrow-up-right-from-square:before,.fa-external-link:before{content:"\f08e"}.fa-cubes-stacked:before{content:"\e4e6"}.fa-krw:before,.fa-won-sign:before,.fa-won:before{content:"\f159"}.fa-virus-covid:before{content:"\e4a8"}.fa-austral-sign:before{content:"\e0a9"}.fa-f:before{content:"\46"}.fa-leaf:before{content:"\f06c"}.fa-road:before{content:"\f018"}.fa-cab:before,.fa-taxi:before{content:"\f1ba"}.fa-person-circle-plus:before{content:"\e541"}.fa-chart-pie:before,.fa-pie-chart:before{content:"\f200"}.fa-bolt-lightning:before{content:"\e0b7"}.fa-sack-xmark:before{content:"\e56a"}.fa-file-excel:before{content:"\f1c3"}.fa-file-contract:before{content:"\f56c"}.fa-fish-fins:before{content:"\e4f2"}.fa-building-flag:before{content:"\e4d5"}.fa-face-grin-beam:before,.fa-grin-beam:before{content:"\f582"}.fa-object-ungroup:before{content:"\f248"}.fa-poop:before{content:"\f619"}.fa-location-pin:before,.fa-map-marker:before{content:"\f041"}.fa-kaaba:before{content:"\f66b"}.fa-toilet-paper:before{content:"\f71e"}.fa-hard-hat:before,.fa-hat-hard:before,.fa-helmet-safety:before{content:"\f807"}.fa-eject:before{content:"\f052"}.fa-arrow-alt-circle-right:before,.fa-circle-right:before{content:"\f35a"}.fa-plane-circle-check:before{content:"\e555"}.fa-face-rolling-eyes:before,.fa-meh-rolling-eyes:before{content:"\f5a5"}.fa-object-group:before{content:"\f247"}.fa-chart-line:before,.fa-line-chart:before{content:"\f201"}.fa-mask-ventilator:before{content:"\e524"}.fa-arrow-right:before{content:"\f061"}.fa-map-signs:before,.fa-signs-post:before{content:"\f277"}.fa-cash-register:before{content:"\f788"}.fa-person-circle-question:before{content:"\e542"}.fa-h:before{content:"\48"}.fa-tarp:before{content:"\e57b"}.fa-screwdriver-wrench:before,.fa-tools:before{content:"\f7d9"}.fa-arrows-to-eye:before{content:"\e4bf"}.fa-plug-circle-bolt:before{content:"\e55b"}.fa-heart:before{content:"\f004"}.fa-mars-and-venus:before{content:"\f224"}.fa-home-user:before,.fa-house-user:before{content:"\e1b0"}.fa-dumpster-fire:before{content:"\f794"}.fa-house-crack:before{content:"\e3b1"}.fa-cocktail:before,.fa-martini-glass-citrus:before{content:"\f561"}.fa-face-surprise:before,.fa-surprise:before{content:"\f5c2"}.fa-bottle-water:before{content:"\e4c5"}.fa-circle-pause:before,.fa-pause-circle:before{content:"\f28b"}.fa-toilet-paper-slash:before{content:"\e072"}.fa-apple-alt:before,.fa-apple-whole:before{content:"\f5d1"}.fa-kitchen-set:before{content:"\e51a"}.fa-r:before{content:"\52"}.fa-temperature-1:before,.fa-temperature-quarter:before,.fa-thermometer-1:before,.fa-thermometer-quarter:before{content:"\f2ca"}.fa-cube:before{content:"\f1b2"}.fa-bitcoin-sign:before{content:"\e0b4"}.fa-shield-dog:before{content:"\e573"}.fa-solar-panel:before{content:"\f5ba"}.fa-lock-open:before{content:"\f3c1"}.fa-elevator:before{content:"\e16d"}.fa-money-bill-transfer:before{content:"\e528"}.fa-money-bill-trend-up:before{content:"\e529"}.fa-house-flood-water-circle-arrow-right:before{content:"\e50f"}.fa-poll-h:before,.fa-square-poll-horizontal:before{content:"\f682"}.fa-circle:before{content:"\f111"}.fa-backward-fast:before,.fa-fast-backward:before{content:"\f049"}.fa-recycle:before{content:"\f1b8"}.fa-user-astronaut:before{content:"\f4fb"}.fa-plane-slash:before{content:"\e069"}.fa-trademark:before{content:"\f25c"}.fa-basketball-ball:before,.fa-basketball:before{content:"\f434"}.fa-satellite-dish:before{content:"\f7c0"}.fa-arrow-alt-circle-up:before,.fa-circle-up:before{content:"\f35b"}.fa-mobile-alt:before,.fa-mobile-screen-button:before{content:"\f3cd"}.fa-volume-high:before,.fa-volume-up:before{content:"\f028"}.fa-users-rays:before{content:"\e593"}.fa-wallet:before{content:"\f555"}.fa-clipboard-check:before{content:"\f46c"}.fa-file-audio:before{content:"\f1c7"}.fa-burger:before,.fa-hamburger:before{content:"\f805"}.fa-wrench:before{content:"\f0ad"}.fa-bugs:before{content:"\e4d0"}.fa-rupee-sign:before,.fa-rupee:before{content:"\f156"}.fa-file-image:before{content:"\f1c5"}.fa-circle-question:before,.fa-question-circle:before{content:"\f059"}.fa-plane-departure:before{content:"\f5b0"}.fa-handshake-slash:before{content:"\e060"}.fa-book-bookmark:before{content:"\e0bb"}.fa-code-branch:before{content:"\f126"}.fa-hat-cowboy:before{content:"\f8c0"}.fa-bridge:before{content:"\e4c8"}.fa-phone-alt:before,.fa-phone-flip:before{content:"\f879"}.fa-truck-front:before{content:"\e2b7"}.fa-cat:before{content:"\f6be"}.fa-anchor-circle-exclamation:before{content:"\e4ab"}.fa-truck-field:before{content:"\e58d"}.fa-route:before{content:"\f4d7"}.fa-clipboard-question:before{content:"\e4e3"}.fa-panorama:before{content:"\e209"}.fa-comment-medical:before{content:"\f7f5"}.fa-teeth-open:before{content:"\f62f"}.fa-file-circle-minus:before{content:"\e4ed"}.fa-tags:before{content:"\f02c"}.fa-wine-glass:before{content:"\f4e3"}.fa-fast-forward:before,.fa-forward-fast:before{content:"\f050"}.fa-face-meh-blank:before,.fa-meh-blank:before{content:"\f5a4"}.fa-parking:before,.fa-square-parking:before{content:"\f540"}.fa-house-signal:before{content:"\e012"}.fa-bars-progress:before,.fa-tasks-alt:before{content:"\f828"}.fa-faucet-drip:before{content:"\e006"}.fa-cart-flatbed:before,.fa-dolly-flatbed:before{content:"\f474"}.fa-ban-smoking:before,.fa-smoking-ban:before{content:"\f54d"}.fa-terminal:before{content:"\f120"}.fa-mobile-button:before{content:"\f10b"}.fa-house-medical-flag:before{content:"\e514"}.fa-basket-shopping:before,.fa-shopping-basket:before{content:"\f291"}.fa-tape:before{content:"\f4db"}.fa-bus-alt:before,.fa-bus-simple:before{content:"\f55e"}.fa-eye:before{content:"\f06e"}.fa-face-sad-cry:before,.fa-sad-cry:before{content:"\f5b3"}.fa-audio-description:before{content:"\f29e"}.fa-person-military-to-person:before{content:"\e54c"}.fa-file-shield:before{content:"\e4f0"}.fa-user-slash:before{content:"\f506"}.fa-pen:before{content:"\f304"}.fa-tower-observation:before{content:"\e586"}.fa-file-code:before{content:"\f1c9"}.fa-signal-5:before,.fa-signal-perfect:before,.fa-signal:before{content:"\f012"}.fa-bus:before{content:"\f207"}.fa-heart-circle-xmark:before{content:"\e501"}.fa-home-lg:before,.fa-house-chimney:before{content:"\e3af"}.fa-window-maximize:before{content:"\f2d0"}.fa-face-frown:before,.fa-frown:before{content:"\f119"}.fa-prescription:before{content:"\f5b1"}.fa-shop:before,.fa-store-alt:before{content:"\f54f"}.fa-floppy-disk:before,.fa-save:before{content:"\f0c7"}.fa-vihara:before{content:"\f6a7"}.fa-balance-scale-left:before,.fa-scale-unbalanced:before{content:"\f515"}.fa-sort-asc:before,.fa-sort-up:before{content:"\f0de"}.fa-comment-dots:before,.fa-commenting:before{content:"\f4ad"}.fa-plant-wilt:before{content:"\e5aa"}.fa-diamond:before{content:"\f219"}.fa-face-grin-squint:before,.fa-grin-squint:before{content:"\f585"}.fa-hand-holding-dollar:before,.fa-hand-holding-usd:before{content:"\f4c0"}.fa-bacterium:before{content:"\e05a"}.fa-hand-pointer:before{content:"\f25a"}.fa-drum-steelpan:before{content:"\f56a"}.fa-hand-scissors:before{content:"\f257"}.fa-hands-praying:before,.fa-praying-hands:before{content:"\f684"}.fa-arrow-right-rotate:before,.fa-arrow-rotate-forward:before,.fa-arrow-rotate-right:before,.fa-redo:before{content:"\f01e"}.fa-biohazard:before{content:"\f780"}.fa-location-crosshairs:before,.fa-location:before{content:"\f601"}.fa-mars-double:before{content:"\f227"}.fa-child-dress:before{content:"\e59c"}.fa-users-between-lines:before{content:"\e591"}.fa-lungs-virus:before{content:"\e067"}.fa-face-grin-tears:before,.fa-grin-tears:before{content:"\f588"}.fa-phone:before{content:"\f095"}.fa-calendar-times:before,.fa-calendar-xmark:before{content:"\f273"}.fa-child-reaching:before{content:"\e59d"}.fa-head-side-virus:before{content:"\e064"}.fa-user-cog:before,.fa-user-gear:before{content:"\f4fe"}.fa-arrow-up-1-9:before,.fa-sort-numeric-up:before{content:"\f163"}.fa-door-closed:before{content:"\f52a"}.fa-shield-virus:before{content:"\e06c"}.fa-dice-six:before{content:"\f526"}.fa-mosquito-net:before{content:"\e52c"}.fa-bridge-water:before{content:"\e4ce"}.fa-person-booth:before{content:"\f756"}.fa-text-width:before{content:"\f035"}.fa-hat-wizard:before{content:"\f6e8"}.fa-pen-fancy:before{content:"\f5ac"}.fa-digging:before,.fa-person-digging:before{content:"\f85e"}.fa-trash:before{content:"\f1f8"}.fa-gauge-simple-med:before,.fa-gauge-simple:before,.fa-tachometer-average:before{content:"\f629"}.fa-book-medical:before{content:"\f7e6"}.fa-poo:before{content:"\f2fe"}.fa-quote-right-alt:before,.fa-quote-right:before{content:"\f10e"}.fa-shirt:before,.fa-t-shirt:before,.fa-tshirt:before{content:"\f553"}.fa-cubes:before{content:"\f1b3"}.fa-divide:before{content:"\f529"}.fa-tenge-sign:before,.fa-tenge:before{content:"\f7d7"}.fa-headphones:before{content:"\f025"}.fa-hands-holding:before{content:"\f4c2"}.fa-hands-clapping:before{content:"\e1a8"}.fa-republican:before{content:"\f75e"}.fa-arrow-left:before{content:"\f060"}.fa-person-circle-xmark:before{content:"\e543"}.fa-ruler:before{content:"\f545"}.fa-align-left:before{content:"\f036"}.fa-dice-d6:before{content:"\f6d1"}.fa-restroom:before{content:"\f7bd"}.fa-j:before{content:"\4a"}.fa-users-viewfinder:before{content:"\e595"}.fa-file-video:before{content:"\f1c8"}.fa-external-link-alt:before,.fa-up-right-from-square:before{content:"\f35d"}.fa-table-cells:before,.fa-th:before{content:"\f00a"}.fa-file-pdf:before{content:"\f1c1"}.fa-bible:before,.fa-book-bible:before{content:"\f647"}.fa-o:before{content:"\4f"}.fa-medkit:before,.fa-suitcase-medical:before{content:"\f0fa"}.fa-user-secret:before{content:"\f21b"}.fa-otter:before{content:"\f700"}.fa-female:before,.fa-person-dress:before{content:"\f182"}.fa-comment-dollar:before{content:"\f651"}.fa-briefcase-clock:before,.fa-business-time:before{content:"\f64a"}.fa-table-cells-large:before,.fa-th-large:before{content:"\f009"}.fa-book-tanakh:before,.fa-tanakh:before{content:"\f827"}.fa-phone-volume:before,.fa-volume-control-phone:before{content:"\f2a0"}.fa-hat-cowboy-side:before{content:"\f8c1"}.fa-clipboard-user:before{content:"\f7f3"}.fa-child:before{content:"\f1ae"}.fa-lira-sign:before{content:"\f195"}.fa-satellite:before{content:"\f7bf"}.fa-plane-lock:before{content:"\e558"}.fa-tag:before{content:"\f02b"}.fa-comment:before{content:"\f075"}.fa-birthday-cake:before,.fa-cake-candles:before,.fa-cake:before{content:"\f1fd"}.fa-envelope:before{content:"\f0e0"}.fa-angle-double-up:before,.fa-angles-up:before{content:"\f102"}.fa-paperclip:before{content:"\f0c6"}.fa-arrow-right-to-city:before{content:"\e4b3"}.fa-ribbon:before{content:"\f4d6"}.fa-lungs:before{content:"\f604"}.fa-arrow-up-9-1:before,.fa-sort-numeric-up-alt:before{content:"\f887"}.fa-litecoin-sign:before{content:"\e1d3"}.fa-border-none:before{content:"\f850"}.fa-circle-nodes:before{content:"\e4e2"}.fa-parachute-box:before{content:"\f4cd"}.fa-indent:before{content:"\f03c"}.fa-truck-field-un:before{content:"\e58e"}.fa-hourglass-empty:before,.fa-hourglass:before{content:"\f254"}.fa-mountain:before{content:"\f6fc"}.fa-user-doctor:before,.fa-user-md:before{content:"\f0f0"}.fa-circle-info:before,.fa-info-circle:before{content:"\f05a"}.fa-cloud-meatball:before{content:"\f73b"}.fa-camera-alt:before,.fa-camera:before{content:"\f030"}.fa-square-virus:before{content:"\e578"}.fa-meteor:before{content:"\f753"}.fa-car-on:before{content:"\e4dd"}.fa-sleigh:before{content:"\f7cc"}.fa-arrow-down-1-9:before,.fa-sort-numeric-asc:before,.fa-sort-numeric-down:before{content:"\f162"}.fa-hand-holding-droplet:before,.fa-hand-holding-water:before{content:"\f4c1"}.fa-water:before{content:"\f773"}.fa-calendar-check:before{content:"\f274"}.fa-braille:before{content:"\f2a1"}.fa-prescription-bottle-alt:before,.fa-prescription-bottle-medical:before{content:"\f486"}.fa-landmark:before{content:"\f66f"}.fa-truck:before{content:"\f0d1"}.fa-crosshairs:before{content:"\f05b"}.fa-person-cane:before{content:"\e53c"}.fa-tent:before{content:"\e57d"}.fa-vest-patches:before{content:"\e086"}.fa-check-double:before{content:"\f560"}.fa-arrow-down-a-z:before,.fa-sort-alpha-asc:before,.fa-sort-alpha-down:before{content:"\f15d"}.fa-money-bill-wheat:before{content:"\e52a"}.fa-cookie:before{content:"\f563"}.fa-arrow-left-rotate:before,.fa-arrow-rotate-back:before,.fa-arrow-rotate-backward:before,.fa-arrow-rotate-left:before,.fa-undo:before{content:"\f0e2"}.fa-hard-drive:before,.fa-hdd:before{content:"\f0a0"}.fa-face-grin-squint-tears:before,.fa-grin-squint-tears:before{content:"\f586"}.fa-dumbbell:before{content:"\f44b"}.fa-list-alt:before,.fa-rectangle-list:before{content:"\f022"}.fa-tarp-droplet:before{content:"\e57c"}.fa-house-medical-circle-check:before{content:"\e511"}.fa-person-skiing-nordic:before,.fa-skiing-nordic:before{content:"\f7ca"}.fa-calendar-plus:before{content:"\f271"}.fa-plane-arrival:before{content:"\f5af"}.fa-arrow-alt-circle-left:before,.fa-circle-left:before{content:"\f359"}.fa-subway:before,.fa-train-subway:before{content:"\f239"}.fa-chart-gantt:before{content:"\e0e4"}.fa-indian-rupee-sign:before,.fa-indian-rupee:before,.fa-inr:before{content:"\e1bc"}.fa-crop-alt:before,.fa-crop-simple:before{content:"\f565"}.fa-money-bill-1:before,.fa-money-bill-alt:before{content:"\f3d1"}.fa-left-long:before,.fa-long-arrow-alt-left:before{content:"\f30a"}.fa-dna:before{content:"\f471"}.fa-virus-slash:before{content:"\e075"}.fa-minus:before,.fa-subtract:before{content:"\f068"}.fa-chess:before{content:"\f439"}.fa-arrow-left-long:before,.fa-long-arrow-left:before{content:"\f177"}.fa-plug-circle-check:before{content:"\e55c"}.fa-street-view:before{content:"\f21d"}.fa-franc-sign:before{content:"\e18f"}.fa-volume-off:before{content:"\f026"}.fa-american-sign-language-interpreting:before,.fa-asl-interpreting:before,.fa-hands-american-sign-language-interpreting:before,.fa-hands-asl-interpreting:before{content:"\f2a3"}.fa-cog:before,.fa-gear:before{content:"\f013"}.fa-droplet-slash:before,.fa-tint-slash:before{content:"\f5c7"}.fa-mosque:before{content:"\f678"}.fa-mosquito:before{content:"\e52b"}.fa-star-of-david:before{content:"\f69a"}.fa-person-military-rifle:before{content:"\e54b"}.fa-cart-shopping:before,.fa-shopping-cart:before{content:"\f07a"}.fa-vials:before{content:"\f493"}.fa-plug-circle-plus:before{content:"\e55f"}.fa-place-of-worship:before{content:"\f67f"}.fa-grip-vertical:before{content:"\f58e"}.fa-arrow-turn-up:before,.fa-level-up:before{content:"\f148"}.fa-u:before{content:"\55"}.fa-square-root-alt:before,.fa-square-root-variable:before{content:"\f698"}.fa-clock-four:before,.fa-clock:before{content:"\f017"}.fa-backward-step:before,.fa-step-backward:before{content:"\f048"}.fa-pallet:before{content:"\f482"}.fa-faucet:before{content:"\e005"}.fa-baseball-bat-ball:before{content:"\f432"}.fa-s:before{content:"\53"}.fa-timeline:before{content:"\e29c"}.fa-keyboard:before{content:"\f11c"}.fa-caret-down:before{content:"\f0d7"}.fa-clinic-medical:before,.fa-house-chimney-medical:before{content:"\f7f2"}.fa-temperature-3:before,.fa-temperature-three-quarters:before,.fa-thermometer-3:before,.fa-thermometer-three-quarters:before{content:"\f2c8"}.fa-mobile-android-alt:before,.fa-mobile-screen:before{content:"\f3cf"}.fa-plane-up:before{content:"\e22d"}.fa-piggy-bank:before{content:"\f4d3"}.fa-battery-3:before,.fa-battery-half:before{content:"\f242"}.fa-mountain-city:before{content:"\e52e"}.fa-coins:before{content:"\f51e"}.fa-khanda:before{content:"\f66d"}.fa-sliders-h:before,.fa-sliders:before{content:"\f1de"}.fa-folder-tree:before{content:"\f802"}.fa-network-wired:before{content:"\f6ff"}.fa-map-pin:before{content:"\f276"}.fa-hamsa:before{content:"\f665"}.fa-cent-sign:before{content:"\e3f5"}.fa-flask:before{content:"\f0c3"}.fa-person-pregnant:before{content:"\e31e"}.fa-wand-sparkles:before{content:"\f72b"}.fa-ellipsis-v:before,.fa-ellipsis-vertical:before{content:"\f142"}.fa-ticket:before{content:"\f145"}.fa-power-off:before{content:"\f011"}.fa-long-arrow-alt-right:before,.fa-right-long:before{content:"\f30b"}.fa-flag-usa:before{content:"\f74d"}.fa-laptop-file:before{content:"\e51d"}.fa-teletype:before,.fa-tty:before{content:"\f1e4"}.fa-diagram-next:before{content:"\e476"}.fa-person-rifle:before{content:"\e54e"}.fa-house-medical-circle-exclamation:before{content:"\e512"}.fa-closed-captioning:before{content:"\f20a"}.fa-hiking:before,.fa-person-hiking:before{content:"\f6ec"}.fa-venus-double:before{content:"\f226"}.fa-images:before{content:"\f302"}.fa-calculator:before{content:"\f1ec"}.fa-people-pulling:before{content:"\e535"}.fa-n:before{content:"\4e"}.fa-cable-car:before,.fa-tram:before{content:"\f7da"}.fa-cloud-rain:before{content:"\f73d"}.fa-building-circle-xmark:before{content:"\e4d4"}.fa-ship:before{content:"\f21a"}.fa-arrows-down-to-line:before{content:"\e4b8"}.fa-download:before{content:"\f019"}.fa-face-grin:before,.fa-grin:before{content:"\f580"}.fa-backspace:before,.fa-delete-left:before{content:"\f55a"}.fa-eye-dropper-empty:before,.fa-eye-dropper:before,.fa-eyedropper:before{content:"\f1fb"}.fa-file-circle-check:before{content:"\e5a0"}.fa-forward:before{content:"\f04e"}.fa-mobile-android:before,.fa-mobile-phone:before,.fa-mobile:before{content:"\f3ce"}.fa-face-meh:before,.fa-meh:before{content:"\f11a"}.fa-align-center:before{content:"\f037"}.fa-book-dead:before,.fa-book-skull:before{content:"\f6b7"}.fa-drivers-license:before,.fa-id-card:before{content:"\f2c2"}.fa-dedent:before,.fa-outdent:before{content:"\f03b"}.fa-heart-circle-exclamation:before{content:"\e4fe"}.fa-home-alt:before,.fa-home-lg-alt:before,.fa-home:before,.fa-house:before{content:"\f015"}.fa-calendar-week:before{content:"\f784"}.fa-laptop-medical:before{content:"\f812"}.fa-b:before{content:"\42"}.fa-file-medical:before{content:"\f477"}.fa-dice-one:before{content:"\f525"}.fa-kiwi-bird:before{content:"\f535"}.fa-arrow-right-arrow-left:before,.fa-exchange:before{content:"\f0ec"}.fa-redo-alt:before,.fa-rotate-forward:before,.fa-rotate-right:before{content:"\f2f9"}.fa-cutlery:before,.fa-utensils:before{content:"\f2e7"}.fa-arrow-up-wide-short:before,.fa-sort-amount-up:before{content:"\f161"}.fa-mill-sign:before{content:"\e1ed"}.fa-bowl-rice:before{content:"\e2eb"}.fa-skull:before{content:"\f54c"}.fa-broadcast-tower:before,.fa-tower-broadcast:before{content:"\f519"}.fa-truck-pickup:before{content:"\f63c"}.fa-long-arrow-alt-up:before,.fa-up-long:before{content:"\f30c"}.fa-stop:before{content:"\f04d"}.fa-code-merge:before{content:"\f387"}.fa-upload:before{content:"\f093"}.fa-hurricane:before{content:"\f751"}.fa-mound:before{content:"\e52d"}.fa-toilet-portable:before{content:"\e583"}.fa-compact-disc:before{content:"\f51f"}.fa-file-arrow-down:before,.fa-file-download:before{content:"\f56d"}.fa-caravan:before{content:"\f8ff"}.fa-shield-cat:before{content:"\e572"}.fa-bolt:before,.fa-zap:before{content:"\f0e7"}.fa-glass-water:before{content:"\e4f4"}.fa-oil-well:before{content:"\e532"}.fa-vault:before{content:"\e2c5"}.fa-mars:before{content:"\f222"}.fa-toilet:before{content:"\f7d8"}.fa-plane-circle-xmark:before{content:"\e557"}.fa-cny:before,.fa-jpy:before,.fa-rmb:before,.fa-yen-sign:before,.fa-yen:before{content:"\f157"}.fa-rouble:before,.fa-rub:before,.fa-ruble-sign:before,.fa-ruble:before{content:"\f158"}.fa-sun:before{content:"\f185"}.fa-guitar:before{content:"\f7a6"}.fa-face-laugh-wink:before,.fa-laugh-wink:before{content:"\f59c"}.fa-horse-head:before{content:"\f7ab"}.fa-bore-hole:before{content:"\e4c3"}.fa-industry:before{content:"\f275"}.fa-arrow-alt-circle-down:before,.fa-circle-down:before{content:"\f358"}.fa-arrows-turn-to-dots:before{content:"\e4c1"}.fa-florin-sign:before{content:"\e184"}.fa-arrow-down-short-wide:before,.fa-sort-amount-desc:before,.fa-sort-amount-down-alt:before{content:"\f884"}.fa-less-than:before{content:"\3c"}.fa-angle-down:before{content:"\f107"}.fa-car-tunnel:before{content:"\e4de"}.fa-head-side-cough:before{content:"\e061"}.fa-grip-lines:before{content:"\f7a4"}.fa-thumbs-down:before{content:"\f165"}.fa-user-lock:before{content:"\f502"}.fa-arrow-right-long:before,.fa-long-arrow-right:before{content:"\f178"}.fa-anchor-circle-xmark:before{content:"\e4ac"}.fa-ellipsis-h:before,.fa-ellipsis:before{content:"\f141"}.fa-chess-pawn:before{content:"\f443"}.fa-first-aid:before,.fa-kit-medical:before{content:"\f479"}.fa-person-through-window:before{content:"\e5a9"}.fa-toolbox:before{content:"\f552"}.fa-hands-holding-circle:before{content:"\e4fb"}.fa-bug:before{content:"\f188"}.fa-credit-card-alt:before,.fa-credit-card:before{content:"\f09d"}.fa-automobile:before,.fa-car:before{content:"\f1b9"}.fa-hand-holding-hand:before{content:"\e4f7"}.fa-book-open-reader:before,.fa-book-reader:before{content:"\f5da"}.fa-mountain-sun:before{content:"\e52f"}.fa-arrows-left-right-to-line:before{content:"\e4ba"}.fa-dice-d20:before{content:"\f6cf"}.fa-truck-droplet:before{content:"\e58c"}.fa-file-circle-xmark:before{content:"\e5a1"}.fa-temperature-arrow-up:before,.fa-temperature-up:before{content:"\e040"}.fa-medal:before{content:"\f5a2"}.fa-bed:before{content:"\f236"}.fa-h-square:before,.fa-square-h:before{content:"\f0fd"}.fa-podcast:before{content:"\f2ce"}.fa-temperature-4:before,.fa-temperature-full:before,.fa-thermometer-4:before,.fa-thermometer-full:before{content:"\f2c7"}.fa-bell:before{content:"\f0f3"}.fa-superscript:before{content:"\f12b"}.fa-plug-circle-xmark:before{content:"\e560"}.fa-star-of-life:before{content:"\f621"}.fa-phone-slash:before{content:"\f3dd"}.fa-paint-roller:before{content:"\f5aa"}.fa-hands-helping:before,.fa-handshake-angle:before{content:"\f4c4"}.fa-location-dot:before,.fa-map-marker-alt:before{content:"\f3c5"}.fa-file:before{content:"\f15b"}.fa-greater-than:before{content:"\3e"}.fa-person-swimming:before,.fa-swimmer:before{content:"\f5c4"}.fa-arrow-down:before{content:"\f063"}.fa-droplet:before,.fa-tint:before{content:"\f043"}.fa-eraser:before{content:"\f12d"}.fa-earth-america:before,.fa-earth-americas:before,.fa-earth:before,.fa-globe-americas:before{content:"\f57d"}.fa-person-burst:before{content:"\e53b"}.fa-dove:before{content:"\f4ba"}.fa-battery-0:before,.fa-battery-empty:before{content:"\f244"}.fa-socks:before{content:"\f696"}.fa-inbox:before{content:"\f01c"}.fa-section:before{content:"\e447"}.fa-gauge-high:before,.fa-tachometer-alt-fast:before,.fa-tachometer-alt:before{content:"\f625"}.fa-envelope-open-text:before{content:"\f658"}.fa-hospital-alt:before,.fa-hospital-wide:before,.fa-hospital:before{content:"\f0f8"}.fa-wine-bottle:before{content:"\f72f"}.fa-chess-rook:before{content:"\f447"}.fa-bars-staggered:before,.fa-reorder:before,.fa-stream:before{content:"\f550"}.fa-dharmachakra:before{content:"\f655"}.fa-hotdog:before{content:"\f80f"}.fa-blind:before,.fa-person-walking-with-cane:before{content:"\f29d"}.fa-drum:before{content:"\f569"}.fa-ice-cream:before{content:"\f810"}.fa-heart-circle-bolt:before{content:"\e4fc"}.fa-fax:before{content:"\f1ac"}.fa-paragraph:before{content:"\f1dd"}.fa-check-to-slot:before,.fa-vote-yea:before{content:"\f772"}.fa-star-half:before{content:"\f089"}.fa-boxes-alt:before,.fa-boxes-stacked:before,.fa-boxes:before{content:"\f468"}.fa-chain:before,.fa-link:before{content:"\f0c1"}.fa-assistive-listening-systems:before,.fa-ear-listen:before{content:"\f2a2"}.fa-tree-city:before{content:"\e587"}.fa-play:before{content:"\f04b"}.fa-font:before{content:"\f031"}.fa-table-cells-row-lock:before{content:"\e67a"}.fa-rupiah-sign:before{content:"\e23d"}.fa-magnifying-glass:before,.fa-search:before{content:"\f002"}.fa-ping-pong-paddle-ball:before,.fa-table-tennis-paddle-ball:before,.fa-table-tennis:before{content:"\f45d"}.fa-diagnoses:before,.fa-person-dots-from-line:before{content:"\f470"}.fa-trash-can-arrow-up:before,.fa-trash-restore-alt:before{content:"\f82a"}.fa-naira-sign:before{content:"\e1f6"}.fa-cart-arrow-down:before{content:"\f218"}.fa-walkie-talkie:before{content:"\f8ef"}.fa-file-edit:before,.fa-file-pen:before{content:"\f31c"}.fa-receipt:before{content:"\f543"}.fa-pen-square:before,.fa-pencil-square:before,.fa-square-pen:before{content:"\f14b"}.fa-suitcase-rolling:before{content:"\f5c1"}.fa-person-circle-exclamation:before{content:"\e53f"}.fa-chevron-down:before{content:"\f078"}.fa-battery-5:before,.fa-battery-full:before,.fa-battery:before{content:"\f240"}.fa-skull-crossbones:before{content:"\f714"}.fa-code-compare:before{content:"\e13a"}.fa-list-dots:before,.fa-list-ul:before{content:"\f0ca"}.fa-school-lock:before{content:"\e56f"}.fa-tower-cell:before{content:"\e585"}.fa-down-long:before,.fa-long-arrow-alt-down:before{content:"\f309"}.fa-ranking-star:before{content:"\e561"}.fa-chess-king:before{content:"\f43f"}.fa-person-harassing:before{content:"\e549"}.fa-brazilian-real-sign:before{content:"\e46c"}.fa-landmark-alt:before,.fa-landmark-dome:before{content:"\f752"}.fa-arrow-up:before{content:"\f062"}.fa-television:before,.fa-tv-alt:before,.fa-tv:before{content:"\f26c"}.fa-shrimp:before{content:"\e448"}.fa-list-check:before,.fa-tasks:before{content:"\f0ae"}.fa-jug-detergent:before{content:"\e519"}.fa-circle-user:before,.fa-user-circle:before{content:"\f2bd"}.fa-user-shield:before{content:"\f505"}.fa-wind:before{content:"\f72e"}.fa-car-burst:before,.fa-car-crash:before{content:"\f5e1"}.fa-y:before{content:"\59"}.fa-person-snowboarding:before,.fa-snowboarding:before{content:"\f7ce"}.fa-shipping-fast:before,.fa-truck-fast:before{content:"\f48b"}.fa-fish:before{content:"\f578"}.fa-user-graduate:before{content:"\f501"}.fa-adjust:before,.fa-circle-half-stroke:before{content:"\f042"}.fa-clapperboard:before{content:"\e131"}.fa-circle-radiation:before,.fa-radiation-alt:before{content:"\f7ba"}.fa-baseball-ball:before,.fa-baseball:before{content:"\f433"}.fa-jet-fighter-up:before{content:"\e518"}.fa-diagram-project:before,.fa-project-diagram:before{content:"\f542"}.fa-copy:before{content:"\f0c5"}.fa-volume-mute:before,.fa-volume-times:before,.fa-volume-xmark:before{content:"\f6a9"}.fa-hand-sparkles:before{content:"\e05d"}.fa-grip-horizontal:before,.fa-grip:before{content:"\f58d"}.fa-share-from-square:before,.fa-share-square:before{content:"\f14d"}.fa-child-combatant:before,.fa-child-rifle:before{content:"\e4e0"}.fa-gun:before{content:"\e19b"}.fa-phone-square:before,.fa-square-phone:before{content:"\f098"}.fa-add:before,.fa-plus:before{content:"\2b"}.fa-expand:before{content:"\f065"}.fa-computer:before{content:"\e4e5"}.fa-close:before,.fa-multiply:before,.fa-remove:before,.fa-times:before,.fa-xmark:before{content:"\f00d"}.fa-arrows-up-down-left-right:before,.fa-arrows:before{content:"\f047"}.fa-chalkboard-teacher:before,.fa-chalkboard-user:before{content:"\f51c"}.fa-peso-sign:before{content:"\e222"}.fa-building-shield:before{content:"\e4d8"}.fa-baby:before{content:"\f77c"}.fa-users-line:before{content:"\e592"}.fa-quote-left-alt:before,.fa-quote-left:before{content:"\f10d"}.fa-tractor:before{content:"\f722"}.fa-trash-arrow-up:before,.fa-trash-restore:before{content:"\f829"}.fa-arrow-down-up-lock:before{content:"\e4b0"}.fa-lines-leaning:before{content:"\e51e"}.fa-ruler-combined:before{content:"\f546"}.fa-copyright:before{content:"\f1f9"}.fa-equals:before{content:"\3d"}.fa-blender:before{content:"\f517"}.fa-teeth:before{content:"\f62e"}.fa-ils:before,.fa-shekel-sign:before,.fa-shekel:before,.fa-sheqel-sign:before,.fa-sheqel:before{content:"\f20b"}.fa-map:before{content:"\f279"}.fa-rocket:before{content:"\f135"}.fa-photo-film:before,.fa-photo-video:before{content:"\f87c"}.fa-folder-minus:before{content:"\f65d"}.fa-store:before{content:"\f54e"}.fa-arrow-trend-up:before{content:"\e098"}.fa-plug-circle-minus:before{content:"\e55e"}.fa-sign-hanging:before,.fa-sign:before{content:"\f4d9"}.fa-bezier-curve:before{content:"\f55b"}.fa-bell-slash:before{content:"\f1f6"}.fa-tablet-android:before,.fa-tablet:before{content:"\f3fb"}.fa-school-flag:before{content:"\e56e"}.fa-fill:before{content:"\f575"}.fa-angle-up:before{content:"\f106"}.fa-drumstick-bite:before{content:"\f6d7"}.fa-holly-berry:before{content:"\f7aa"}.fa-chevron-left:before{content:"\f053"}.fa-bacteria:before{content:"\e059"}.fa-hand-lizard:before{content:"\f258"}.fa-notdef:before{content:"\e1fe"}.fa-disease:before{content:"\f7fa"}.fa-briefcase-medical:before{content:"\f469"}.fa-genderless:before{content:"\f22d"}.fa-chevron-right:before{content:"\f054"}.fa-retweet:before{content:"\f079"}.fa-car-alt:before,.fa-car-rear:before{content:"\f5de"}.fa-pump-soap:before{content:"\e06b"}.fa-video-slash:before{content:"\f4e2"}.fa-battery-2:before,.fa-battery-quarter:before{content:"\f243"}.fa-radio:before{content:"\f8d7"}.fa-baby-carriage:before,.fa-carriage-baby:before{content:"\f77d"}.fa-traffic-light:before{content:"\f637"}.fa-thermometer:before{content:"\f491"}.fa-vr-cardboard:before{content:"\f729"}.fa-hand-middle-finger:before{content:"\f806"}.fa-percent:before,.fa-percentage:before{content:"\25"}.fa-truck-moving:before{content:"\f4df"}.fa-glass-water-droplet:before{content:"\e4f5"}.fa-display:before{content:"\e163"}.fa-face-smile:before,.fa-smile:before{content:"\f118"}.fa-thumb-tack:before,.fa-thumbtack:before{content:"\f08d"}.fa-trophy:before{content:"\f091"}.fa-person-praying:before,.fa-pray:before{content:"\f683"}.fa-hammer:before{content:"\f6e3"}.fa-hand-peace:before{content:"\f25b"}.fa-rotate:before,.fa-sync-alt:before{content:"\f2f1"}.fa-spinner:before{content:"\f110"}.fa-robot:before{content:"\f544"}.fa-peace:before{content:"\f67c"}.fa-cogs:before,.fa-gears:before{content:"\f085"}.fa-warehouse:before{content:"\f494"}.fa-arrow-up-right-dots:before{content:"\e4b7"}.fa-splotch:before{content:"\f5bc"}.fa-face-grin-hearts:before,.fa-grin-hearts:before{content:"\f584"}.fa-dice-four:before{content:"\f524"}.fa-sim-card:before{content:"\f7c4"}.fa-transgender-alt:before,.fa-transgender:before{content:"\f225"}.fa-mercury:before{content:"\f223"}.fa-arrow-turn-down:before,.fa-level-down:before{content:"\f149"}.fa-person-falling-burst:before{content:"\e547"}.fa-award:before{content:"\f559"}.fa-ticket-alt:before,.fa-ticket-simple:before{content:"\f3ff"}.fa-building:before{content:"\f1ad"}.fa-angle-double-left:before,.fa-angles-left:before{content:"\f100"}.fa-qrcode:before{content:"\f029"}.fa-clock-rotate-left:before,.fa-history:before{content:"\f1da"}.fa-face-grin-beam-sweat:before,.fa-grin-beam-sweat:before{content:"\f583"}.fa-arrow-right-from-file:before,.fa-file-export:before{content:"\f56e"}.fa-shield-blank:before,.fa-shield:before{content:"\f132"}.fa-arrow-up-short-wide:before,.fa-sort-amount-up-alt:before{content:"\f885"}.fa-house-medical:before{content:"\e3b2"}.fa-golf-ball-tee:before,.fa-golf-ball:before{content:"\f450"}.fa-chevron-circle-left:before,.fa-circle-chevron-left:before{content:"\f137"}.fa-house-chimney-window:before{content:"\e00d"}.fa-pen-nib:before{content:"\f5ad"}.fa-tent-arrow-turn-left:before{content:"\e580"}.fa-tents:before{content:"\e582"}.fa-magic:before,.fa-wand-magic:before{content:"\f0d0"}.fa-dog:before{content:"\f6d3"}.fa-carrot:before{content:"\f787"}.fa-moon:before{content:"\f186"}.fa-wine-glass-alt:before,.fa-wine-glass-empty:before{content:"\f5ce"}.fa-cheese:before{content:"\f7ef"}.fa-yin-yang:before{content:"\f6ad"}.fa-music:before{content:"\f001"}.fa-code-commit:before{content:"\f386"}.fa-temperature-low:before{content:"\f76b"}.fa-biking:before,.fa-person-biking:before{content:"\f84a"}.fa-broom:before{content:"\f51a"}.fa-shield-heart:before{content:"\e574"}.fa-gopuram:before{content:"\f664"}.fa-earth-oceania:before,.fa-globe-oceania:before{content:"\e47b"}.fa-square-xmark:before,.fa-times-square:before,.fa-xmark-square:before{content:"\f2d3"}.fa-hashtag:before{content:"\23"}.fa-expand-alt:before,.fa-up-right-and-down-left-from-center:before{content:"\f424"}.fa-oil-can:before{content:"\f613"}.fa-t:before{content:"\54"}.fa-hippo:before{content:"\f6ed"}.fa-chart-column:before{content:"\e0e3"}.fa-infinity:before{content:"\f534"}.fa-vial-circle-check:before{content:"\e596"}.fa-person-arrow-down-to-line:before{content:"\e538"}.fa-voicemail:before{content:"\f897"}.fa-fan:before{content:"\f863"}.fa-person-walking-luggage:before{content:"\e554"}.fa-arrows-alt-v:before,.fa-up-down:before{content:"\f338"}.fa-cloud-moon-rain:before{content:"\f73c"}.fa-calendar:before{content:"\f133"}.fa-trailer:before{content:"\e041"}.fa-bahai:before,.fa-haykal:before{content:"\f666"}.fa-sd-card:before{content:"\f7c2"}.fa-dragon:before{content:"\f6d5"}.fa-shoe-prints:before{content:"\f54b"}.fa-circle-plus:before,.fa-plus-circle:before{content:"\f055"}.fa-face-grin-tongue-wink:before,.fa-grin-tongue-wink:before{content:"\f58b"}.fa-hand-holding:before{content:"\f4bd"}.fa-plug-circle-exclamation:before{content:"\e55d"}.fa-chain-broken:before,.fa-chain-slash:before,.fa-link-slash:before,.fa-unlink:before{content:"\f127"}.fa-clone:before{content:"\f24d"}.fa-person-walking-arrow-loop-left:before{content:"\e551"}.fa-arrow-up-z-a:before,.fa-sort-alpha-up-alt:before{content:"\f882"}.fa-fire-alt:before,.fa-fire-flame-curved:before{content:"\f7e4"}.fa-tornado:before{content:"\f76f"}.fa-file-circle-plus:before{content:"\e494"}.fa-book-quran:before,.fa-quran:before{content:"\f687"}.fa-anchor:before{content:"\f13d"}.fa-border-all:before{content:"\f84c"}.fa-angry:before,.fa-face-angry:before{content:"\f556"}.fa-cookie-bite:before{content:"\f564"}.fa-arrow-trend-down:before{content:"\e097"}.fa-feed:before,.fa-rss:before{content:"\f09e"}.fa-draw-polygon:before{content:"\f5ee"}.fa-balance-scale:before,.fa-scale-balanced:before{content:"\f24e"}.fa-gauge-simple-high:before,.fa-tachometer-fast:before,.fa-tachometer:before{content:"\f62a"}.fa-shower:before{content:"\f2cc"}.fa-desktop-alt:before,.fa-desktop:before{content:"\f390"}.fa-m:before{content:"\4d"}.fa-table-list:before,.fa-th-list:before{content:"\f00b"}.fa-comment-sms:before,.fa-sms:before{content:"\f7cd"}.fa-book:before{content:"\f02d"}.fa-user-plus:before{content:"\f234"}.fa-check:before{content:"\f00c"}.fa-battery-4:before,.fa-battery-three-quarters:before{content:"\f241"}.fa-house-circle-check:before{content:"\e509"}.fa-angle-left:before{content:"\f104"}.fa-diagram-successor:before{content:"\e47a"}.fa-truck-arrow-right:before{content:"\e58b"}.fa-arrows-split-up-and-left:before{content:"\e4bc"}.fa-fist-raised:before,.fa-hand-fist:before{content:"\f6de"}.fa-cloud-moon:before{content:"\f6c3"}.fa-briefcase:before{content:"\f0b1"}.fa-person-falling:before{content:"\e546"}.fa-image-portrait:before,.fa-portrait:before{content:"\f3e0"}.fa-user-tag:before{content:"\f507"}.fa-rug:before{content:"\e569"}.fa-earth-europe:before,.fa-globe-europe:before{content:"\f7a2"}.fa-cart-flatbed-suitcase:before,.fa-luggage-cart:before{content:"\f59d"}.fa-rectangle-times:before,.fa-rectangle-xmark:before,.fa-times-rectangle:before,.fa-window-close:before{content:"\f410"}.fa-baht-sign:before{content:"\e0ac"}.fa-book-open:before{content:"\f518"}.fa-book-journal-whills:before,.fa-journal-whills:before{content:"\f66a"}.fa-handcuffs:before{content:"\e4f8"}.fa-exclamation-triangle:before,.fa-triangle-exclamation:before,.fa-warning:before{content:"\f071"}.fa-database:before{content:"\f1c0"}.fa-mail-forward:before,.fa-share:before{content:"\f064"}.fa-bottle-droplet:before{content:"\e4c4"}.fa-mask-face:before{content:"\e1d7"}.fa-hill-rockslide:before{content:"\e508"}.fa-exchange-alt:before,.fa-right-left:before{content:"\f362"}.fa-paper-plane:before{content:"\f1d8"}.fa-road-circle-exclamation:before{content:"\e565"}.fa-dungeon:before{content:"\f6d9"}.fa-align-right:before{content:"\f038"}.fa-money-bill-1-wave:before,.fa-money-bill-wave-alt:before{content:"\f53b"}.fa-life-ring:before{content:"\f1cd"}.fa-hands:before,.fa-sign-language:before,.fa-signing:before{content:"\f2a7"}.fa-calendar-day:before{content:"\f783"}.fa-ladder-water:before,.fa-swimming-pool:before,.fa-water-ladder:before{content:"\f5c5"}.fa-arrows-up-down:before,.fa-arrows-v:before{content:"\f07d"}.fa-face-grimace:before,.fa-grimace:before{content:"\f57f"}.fa-wheelchair-alt:before,.fa-wheelchair-move:before{content:"\e2ce"}.fa-level-down-alt:before,.fa-turn-down:before{content:"\f3be"}.fa-person-walking-arrow-right:before{content:"\e552"}.fa-envelope-square:before,.fa-square-envelope:before{content:"\f199"}.fa-dice:before{content:"\f522"}.fa-bowling-ball:before{content:"\f436"}.fa-brain:before{content:"\f5dc"}.fa-band-aid:before,.fa-bandage:before{content:"\f462"}.fa-calendar-minus:before{content:"\f272"}.fa-circle-xmark:before,.fa-times-circle:before,.fa-xmark-circle:before{content:"\f057"}.fa-gifts:before{content:"\f79c"}.fa-hotel:before{content:"\f594"}.fa-earth-asia:before,.fa-globe-asia:before{content:"\f57e"}.fa-id-card-alt:before,.fa-id-card-clip:before{content:"\f47f"}.fa-magnifying-glass-plus:before,.fa-search-plus:before{content:"\f00e"}.fa-thumbs-up:before{content:"\f164"}.fa-user-clock:before{content:"\f4fd"}.fa-allergies:before,.fa-hand-dots:before{content:"\f461"}.fa-file-invoice:before{content:"\f570"}.fa-window-minimize:before{content:"\f2d1"}.fa-coffee:before,.fa-mug-saucer:before{content:"\f0f4"}.fa-brush:before{content:"\f55d"}.fa-mask:before{content:"\f6fa"}.fa-magnifying-glass-minus:before,.fa-search-minus:before{content:"\f010"}.fa-ruler-vertical:before{content:"\f548"}.fa-user-alt:before,.fa-user-large:before{content:"\f406"}.fa-train-tram:before{content:"\e5b4"}.fa-user-nurse:before{content:"\f82f"}.fa-syringe:before{content:"\f48e"}.fa-cloud-sun:before{content:"\f6c4"}.fa-stopwatch-20:before{content:"\e06f"}.fa-square-full:before{content:"\f45c"}.fa-magnet:before{content:"\f076"}.fa-jar:before{content:"\e516"}.fa-note-sticky:before,.fa-sticky-note:before{content:"\f249"}.fa-bug-slash:before{content:"\e490"}.fa-arrow-up-from-water-pump:before{content:"\e4b6"}.fa-bone:before{content:"\f5d7"}.fa-user-injured:before{content:"\f728"}.fa-face-sad-tear:before,.fa-sad-tear:before{content:"\f5b4"}.fa-plane:before{content:"\f072"}.fa-tent-arrows-down:before{content:"\e581"}.fa-exclamation:before{content:"\21"}.fa-arrows-spin:before{content:"\e4bb"}.fa-print:before{content:"\f02f"}.fa-try:before,.fa-turkish-lira-sign:before,.fa-turkish-lira:before{content:"\e2bb"}.fa-dollar-sign:before,.fa-dollar:before,.fa-usd:before{content:"\24"}.fa-x:before{content:"\58"}.fa-magnifying-glass-dollar:before,.fa-search-dollar:before{content:"\f688"}.fa-users-cog:before,.fa-users-gear:before{content:"\f509"}.fa-person-military-pointing:before{content:"\e54a"}.fa-bank:before,.fa-building-columns:before,.fa-institution:before,.fa-museum:before,.fa-university:before{content:"\f19c"}.fa-umbrella:before{content:"\f0e9"}.fa-trowel:before{content:"\e589"}.fa-d:before{content:"\44"}.fa-stapler:before{content:"\e5af"}.fa-masks-theater:before,.fa-theater-masks:before{content:"\f630"}.fa-kip-sign:before{content:"\e1c4"}.fa-hand-point-left:before{content:"\f0a5"}.fa-handshake-alt:before,.fa-handshake-simple:before{content:"\f4c6"}.fa-fighter-jet:before,.fa-jet-fighter:before{content:"\f0fb"}.fa-share-alt-square:before,.fa-square-share-nodes:before{content:"\f1e1"}.fa-barcode:before{content:"\f02a"}.fa-plus-minus:before{content:"\e43c"}.fa-video-camera:before,.fa-video:before{content:"\f03d"}.fa-graduation-cap:before,.fa-mortar-board:before{content:"\f19d"}.fa-hand-holding-medical:before{content:"\e05c"}.fa-person-circle-check:before{content:"\e53e"}.fa-level-up-alt:before,.fa-turn-up:before{content:"\f3bf"}.fa-sr-only,.fa-sr-only-focusable:not(:focus),.sr-only,.sr-only-focusable:not(:focus){clip:rect(0,0,0,0);border-width:0;height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}:host,:root{--fa-style-family-brands:"Font Awesome 6 Brands";--fa-font-brands:normal 400 1em/1 "Font Awesome 6 Brands"}@font-face{font-display:block;font-family:Font Awesome\ 6 Brands;font-style:normal;font-weight:400;src:url(../webfonts/fa-brands-400.woff2) format("woff2"),url(../webfonts/fa-brands-400.ttf) format("truetype")}.fa-brands,.fab{font-weight:400}.fa-monero:before{content:"\f3d0"}.fa-hooli:before{content:"\f427"}.fa-yelp:before{content:"\f1e9"}.fa-cc-visa:before{content:"\f1f0"}.fa-lastfm:before{content:"\f202"}.fa-shopware:before{content:"\f5b5"}.fa-creative-commons-nc:before{content:"\f4e8"}.fa-aws:before{content:"\f375"}.fa-redhat:before{content:"\f7bc"}.fa-yoast:before{content:"\f2b1"}.fa-cloudflare:before{content:"\e07d"}.fa-ups:before{content:"\f7e0"}.fa-pixiv:before{content:"\e640"}.fa-wpexplorer:before{content:"\f2de"}.fa-dyalog:before{content:"\f399"}.fa-bity:before{content:"\f37a"}.fa-stackpath:before{content:"\f842"}.fa-buysellads:before{content:"\f20d"}.fa-first-order:before{content:"\f2b0"}.fa-modx:before{content:"\f285"}.fa-guilded:before{content:"\e07e"}.fa-vnv:before{content:"\f40b"}.fa-js-square:before,.fa-square-js:before{content:"\f3b9"}.fa-microsoft:before{content:"\f3ca"}.fa-qq:before{content:"\f1d6"}.fa-orcid:before{content:"\f8d2"}.fa-java:before{content:"\f4e4"}.fa-invision:before{content:"\f7b0"}.fa-creative-commons-pd-alt:before{content:"\f4ed"}.fa-centercode:before{content:"\f380"}.fa-glide-g:before{content:"\f2a6"}.fa-drupal:before{content:"\f1a9"}.fa-jxl:before{content:"\e67b"}.fa-hire-a-helper:before{content:"\f3b0"}.fa-creative-commons-by:before{content:"\f4e7"}.fa-unity:before{content:"\e049"}.fa-whmcs:before{content:"\f40d"}.fa-rocketchat:before{content:"\f3e8"}.fa-vk:before{content:"\f189"}.fa-untappd:before{content:"\f405"}.fa-mailchimp:before{content:"\f59e"}.fa-css3-alt:before{content:"\f38b"}.fa-reddit-square:before,.fa-square-reddit:before{content:"\f1a2"}.fa-vimeo-v:before{content:"\f27d"}.fa-contao:before{content:"\f26d"}.fa-square-font-awesome:before{content:"\e5ad"}.fa-deskpro:before{content:"\f38f"}.fa-brave:before{content:"\e63c"}.fa-sistrix:before{content:"\f3ee"}.fa-instagram-square:before,.fa-square-instagram:before{content:"\e055"}.fa-battle-net:before{content:"\f835"}.fa-the-red-yeti:before{content:"\f69d"}.fa-hacker-news-square:before,.fa-square-hacker-news:before{content:"\f3af"}.fa-edge:before{content:"\f282"}.fa-threads:before{content:"\e618"}.fa-napster:before{content:"\f3d2"}.fa-snapchat-square:before,.fa-square-snapchat:before{content:"\f2ad"}.fa-google-plus-g:before{content:"\f0d5"}.fa-artstation:before{content:"\f77a"}.fa-markdown:before{content:"\f60f"}.fa-sourcetree:before{content:"\f7d3"}.fa-google-plus:before{content:"\f2b3"}.fa-diaspora:before{content:"\f791"}.fa-foursquare:before{content:"\f180"}.fa-stack-overflow:before{content:"\f16c"}.fa-github-alt:before{content:"\f113"}.fa-phoenix-squadron:before{content:"\f511"}.fa-pagelines:before{content:"\f18c"}.fa-algolia:before{content:"\f36c"}.fa-red-river:before{content:"\f3e3"}.fa-creative-commons-sa:before{content:"\f4ef"}.fa-safari:before{content:"\f267"}.fa-google:before{content:"\f1a0"}.fa-font-awesome-alt:before,.fa-square-font-awesome-stroke:before{content:"\f35c"}.fa-atlassian:before{content:"\f77b"}.fa-linkedin-in:before{content:"\f0e1"}.fa-digital-ocean:before{content:"\f391"}.fa-nimblr:before{content:"\f5a8"}.fa-chromecast:before{content:"\f838"}.fa-evernote:before{content:"\f839"}.fa-hacker-news:before{content:"\f1d4"}.fa-creative-commons-sampling:before{content:"\f4f0"}.fa-adversal:before{content:"\f36a"}.fa-creative-commons:before{content:"\f25e"}.fa-watchman-monitoring:before{content:"\e087"}.fa-fonticons:before{content:"\f280"}.fa-weixin:before{content:"\f1d7"}.fa-shirtsinbulk:before{content:"\f214"}.fa-codepen:before{content:"\f1cb"}.fa-git-alt:before{content:"\f841"}.fa-lyft:before{content:"\f3c3"}.fa-rev:before{content:"\f5b2"}.fa-windows:before{content:"\f17a"}.fa-wizards-of-the-coast:before{content:"\f730"}.fa-square-viadeo:before,.fa-viadeo-square:before{content:"\f2aa"}.fa-meetup:before{content:"\f2e0"}.fa-centos:before{content:"\f789"}.fa-adn:before{content:"\f170"}.fa-cloudsmith:before{content:"\f384"}.fa-opensuse:before{content:"\e62b"}.fa-pied-piper-alt:before{content:"\f1a8"}.fa-dribbble-square:before,.fa-square-dribbble:before{content:"\f397"}.fa-codiepie:before{content:"\f284"}.fa-node:before{content:"\f419"}.fa-mix:before{content:"\f3cb"}.fa-steam:before{content:"\f1b6"}.fa-cc-apple-pay:before{content:"\f416"}.fa-scribd:before{content:"\f28a"}.fa-debian:before{content:"\e60b"}.fa-openid:before{content:"\f19b"}.fa-instalod:before{content:"\e081"}.fa-expeditedssl:before{content:"\f23e"}.fa-sellcast:before{content:"\f2da"}.fa-square-twitter:before,.fa-twitter-square:before{content:"\f081"}.fa-r-project:before{content:"\f4f7"}.fa-delicious:before{content:"\f1a5"}.fa-freebsd:before{content:"\f3a4"}.fa-vuejs:before{content:"\f41f"}.fa-accusoft:before{content:"\f369"}.fa-ioxhost:before{content:"\f208"}.fa-fonticons-fi:before{content:"\f3a2"}.fa-app-store:before{content:"\f36f"}.fa-cc-mastercard:before{content:"\f1f1"}.fa-itunes-note:before{content:"\f3b5"}.fa-golang:before{content:"\e40f"}.fa-kickstarter:before,.fa-square-kickstarter:before{content:"\f3bb"}.fa-grav:before{content:"\f2d6"}.fa-weibo:before{content:"\f18a"}.fa-uncharted:before{content:"\e084"}.fa-firstdraft:before{content:"\f3a1"}.fa-square-youtube:before,.fa-youtube-square:before{content:"\f431"}.fa-wikipedia-w:before{content:"\f266"}.fa-rendact:before,.fa-wpressr:before{content:"\f3e4"}.fa-angellist:before{content:"\f209"}.fa-galactic-republic:before{content:"\f50c"}.fa-nfc-directional:before{content:"\e530"}.fa-skype:before{content:"\f17e"}.fa-joget:before{content:"\f3b7"}.fa-fedora:before{content:"\f798"}.fa-stripe-s:before{content:"\f42a"}.fa-meta:before{content:"\e49b"}.fa-laravel:before{content:"\f3bd"}.fa-hotjar:before{content:"\f3b1"}.fa-bluetooth-b:before{content:"\f294"}.fa-square-letterboxd:before{content:"\e62e"}.fa-sticker-mule:before{content:"\f3f7"}.fa-creative-commons-zero:before{content:"\f4f3"}.fa-hips:before{content:"\f452"}.fa-behance:before{content:"\f1b4"}.fa-reddit:before{content:"\f1a1"}.fa-discord:before{content:"\f392"}.fa-chrome:before{content:"\f268"}.fa-app-store-ios:before{content:"\f370"}.fa-cc-discover:before{content:"\f1f2"}.fa-wpbeginner:before{content:"\f297"}.fa-confluence:before{content:"\f78d"}.fa-shoelace:before{content:"\e60c"}.fa-mdb:before{content:"\f8ca"}.fa-dochub:before{content:"\f394"}.fa-accessible-icon:before{content:"\f368"}.fa-ebay:before{content:"\f4f4"}.fa-amazon:before{content:"\f270"}.fa-unsplash:before{content:"\e07c"}.fa-yarn:before{content:"\f7e3"}.fa-square-steam:before,.fa-steam-square:before{content:"\f1b7"}.fa-500px:before{content:"\f26e"}.fa-square-vimeo:before,.fa-vimeo-square:before{content:"\f194"}.fa-asymmetrik:before{content:"\f372"}.fa-font-awesome-flag:before,.fa-font-awesome-logo-full:before,.fa-font-awesome:before{content:"\f2b4"}.fa-gratipay:before{content:"\f184"}.fa-apple:before{content:"\f179"}.fa-hive:before{content:"\e07f"}.fa-gitkraken:before{content:"\f3a6"}.fa-keybase:before{content:"\f4f5"}.fa-apple-pay:before{content:"\f415"}.fa-padlet:before{content:"\e4a0"}.fa-amazon-pay:before{content:"\f42c"}.fa-github-square:before,.fa-square-github:before{content:"\f092"}.fa-stumbleupon:before{content:"\f1a4"}.fa-fedex:before{content:"\f797"}.fa-phoenix-framework:before{content:"\f3dc"}.fa-shopify:before{content:"\e057"}.fa-neos:before{content:"\f612"}.fa-square-threads:before{content:"\e619"}.fa-hackerrank:before{content:"\f5f7"}.fa-researchgate:before{content:"\f4f8"}.fa-swift:before{content:"\f8e1"}.fa-angular:before{content:"\f420"}.fa-speakap:before{content:"\f3f3"}.fa-angrycreative:before{content:"\f36e"}.fa-y-combinator:before{content:"\f23b"}.fa-empire:before{content:"\f1d1"}.fa-envira:before{content:"\f299"}.fa-google-scholar:before{content:"\e63b"}.fa-gitlab-square:before,.fa-square-gitlab:before{content:"\e5ae"}.fa-studiovinari:before{content:"\f3f8"}.fa-pied-piper:before{content:"\f2ae"}.fa-wordpress:before{content:"\f19a"}.fa-product-hunt:before{content:"\f288"}.fa-firefox:before{content:"\f269"}.fa-linode:before{content:"\f2b8"}.fa-goodreads:before{content:"\f3a8"}.fa-odnoklassniki-square:before,.fa-square-odnoklassniki:before{content:"\f264"}.fa-jsfiddle:before{content:"\f1cc"}.fa-sith:before{content:"\f512"}.fa-themeisle:before{content:"\f2b2"}.fa-page4:before{content:"\f3d7"}.fa-hashnode:before{content:"\e499"}.fa-react:before{content:"\f41b"}.fa-cc-paypal:before{content:"\f1f4"}.fa-squarespace:before{content:"\f5be"}.fa-cc-stripe:before{content:"\f1f5"}.fa-creative-commons-share:before{content:"\f4f2"}.fa-bitcoin:before{content:"\f379"}.fa-keycdn:before{content:"\f3ba"}.fa-opera:before{content:"\f26a"}.fa-itch-io:before{content:"\f83a"}.fa-umbraco:before{content:"\f8e8"}.fa-galactic-senate:before{content:"\f50d"}.fa-ubuntu:before{content:"\f7df"}.fa-draft2digital:before{content:"\f396"}.fa-stripe:before{content:"\f429"}.fa-houzz:before{content:"\f27c"}.fa-gg:before{content:"\f260"}.fa-dhl:before{content:"\f790"}.fa-pinterest-square:before,.fa-square-pinterest:before{content:"\f0d3"}.fa-xing:before{content:"\f168"}.fa-blackberry:before{content:"\f37b"}.fa-creative-commons-pd:before{content:"\f4ec"}.fa-playstation:before{content:"\f3df"}.fa-quinscape:before{content:"\f459"}.fa-less:before{content:"\f41d"}.fa-blogger-b:before{content:"\f37d"}.fa-opencart:before{content:"\f23d"}.fa-vine:before{content:"\f1ca"}.fa-signal-messenger:before{content:"\e663"}.fa-paypal:before{content:"\f1ed"}.fa-gitlab:before{content:"\f296"}.fa-typo3:before{content:"\f42b"}.fa-reddit-alien:before{content:"\f281"}.fa-yahoo:before{content:"\f19e"}.fa-dailymotion:before{content:"\e052"}.fa-affiliatetheme:before{content:"\f36b"}.fa-pied-piper-pp:before{content:"\f1a7"}.fa-bootstrap:before{content:"\f836"}.fa-odnoklassniki:before{content:"\f263"}.fa-nfc-symbol:before{content:"\e531"}.fa-mintbit:before{content:"\e62f"}.fa-ethereum:before{content:"\f42e"}.fa-speaker-deck:before{content:"\f83c"}.fa-creative-commons-nc-eu:before{content:"\f4e9"}.fa-patreon:before{content:"\f3d9"}.fa-avianex:before{content:"\f374"}.fa-ello:before{content:"\f5f1"}.fa-gofore:before{content:"\f3a7"}.fa-bimobject:before{content:"\f378"}.fa-brave-reverse:before{content:"\e63d"}.fa-facebook-f:before{content:"\f39e"}.fa-google-plus-square:before,.fa-square-google-plus:before{content:"\f0d4"}.fa-web-awesome:before{content:"\e682"}.fa-mandalorian:before{content:"\f50f"}.fa-first-order-alt:before{content:"\f50a"}.fa-osi:before{content:"\f41a"}.fa-google-wallet:before{content:"\f1ee"}.fa-d-and-d-beyond:before{content:"\f6ca"}.fa-periscope:before{content:"\f3da"}.fa-fulcrum:before{content:"\f50b"}.fa-cloudscale:before{content:"\f383"}.fa-forumbee:before{content:"\f211"}.fa-mizuni:before{content:"\f3cc"}.fa-schlix:before{content:"\f3ea"}.fa-square-xing:before,.fa-xing-square:before{content:"\f169"}.fa-bandcamp:before{content:"\f2d5"}.fa-wpforms:before{content:"\f298"}.fa-cloudversify:before{content:"\f385"}.fa-usps:before{content:"\f7e1"}.fa-megaport:before{content:"\f5a3"}.fa-magento:before{content:"\f3c4"}.fa-spotify:before{content:"\f1bc"}.fa-optin-monster:before{content:"\f23c"}.fa-fly:before{content:"\f417"}.fa-aviato:before{content:"\f421"}.fa-itunes:before{content:"\f3b4"}.fa-cuttlefish:before{content:"\f38c"}.fa-blogger:before{content:"\f37c"}.fa-flickr:before{content:"\f16e"}.fa-viber:before{content:"\f409"}.fa-soundcloud:before{content:"\f1be"}.fa-digg:before{content:"\f1a6"}.fa-tencent-weibo:before{content:"\f1d5"}.fa-letterboxd:before{content:"\e62d"}.fa-symfony:before{content:"\f83d"}.fa-maxcdn:before{content:"\f136"}.fa-etsy:before{content:"\f2d7"}.fa-facebook-messenger:before{content:"\f39f"}.fa-audible:before{content:"\f373"}.fa-think-peaks:before{content:"\f731"}.fa-bilibili:before{content:"\e3d9"}.fa-erlang:before{content:"\f39d"}.fa-x-twitter:before{content:"\e61b"}.fa-cotton-bureau:before{content:"\f89e"}.fa-dashcube:before{content:"\f210"}.fa-42-group:before,.fa-innosoft:before{content:"\e080"}.fa-stack-exchange:before{content:"\f18d"}.fa-elementor:before{content:"\f430"}.fa-pied-piper-square:before,.fa-square-pied-piper:before{content:"\e01e"}.fa-creative-commons-nd:before{content:"\f4eb"}.fa-palfed:before{content:"\f3d8"}.fa-superpowers:before{content:"\f2dd"}.fa-resolving:before{content:"\f3e7"}.fa-xbox:before{content:"\f412"}.fa-square-web-awesome-stroke:before{content:"\e684"}.fa-searchengin:before{content:"\f3eb"}.fa-tiktok:before{content:"\e07b"}.fa-facebook-square:before,.fa-square-facebook:before{content:"\f082"}.fa-renren:before{content:"\f18b"}.fa-linux:before{content:"\f17c"}.fa-glide:before{content:"\f2a5"}.fa-linkedin:before{content:"\f08c"}.fa-hubspot:before{content:"\f3b2"}.fa-deploydog:before{content:"\f38e"}.fa-twitch:before{content:"\f1e8"}.fa-ravelry:before{content:"\f2d9"}.fa-mixer:before{content:"\e056"}.fa-lastfm-square:before,.fa-square-lastfm:before{content:"\f203"}.fa-vimeo:before{content:"\f40a"}.fa-mendeley:before{content:"\f7b3"}.fa-uniregistry:before{content:"\f404"}.fa-figma:before{content:"\f799"}.fa-creative-commons-remix:before{content:"\f4ee"}.fa-cc-amazon-pay:before{content:"\f42d"}.fa-dropbox:before{content:"\f16b"}.fa-instagram:before{content:"\f16d"}.fa-cmplid:before{content:"\e360"}.fa-upwork:before{content:"\e641"}.fa-facebook:before{content:"\f09a"}.fa-gripfire:before{content:"\f3ac"}.fa-jedi-order:before{content:"\f50e"}.fa-uikit:before{content:"\f403"}.fa-fort-awesome-alt:before{content:"\f3a3"}.fa-phabricator:before{content:"\f3db"}.fa-ussunnah:before{content:"\f407"}.fa-earlybirds:before{content:"\f39a"}.fa-trade-federation:before{content:"\f513"}.fa-autoprefixer:before{content:"\f41c"}.fa-whatsapp:before{content:"\f232"}.fa-square-upwork:before{content:"\e67c"}.fa-slideshare:before{content:"\f1e7"}.fa-google-play:before{content:"\f3ab"}.fa-viadeo:before{content:"\f2a9"}.fa-line:before{content:"\f3c0"}.fa-google-drive:before{content:"\f3aa"}.fa-servicestack:before{content:"\f3ec"}.fa-simplybuilt:before{content:"\f215"}.fa-bitbucket:before{content:"\f171"}.fa-imdb:before{content:"\f2d8"}.fa-deezer:before{content:"\e077"}.fa-raspberry-pi:before{content:"\f7bb"}.fa-jira:before{content:"\f7b1"}.fa-docker:before{content:"\f395"}.fa-screenpal:before{content:"\e570"}.fa-bluetooth:before{content:"\f293"}.fa-gitter:before{content:"\f426"}.fa-d-and-d:before{content:"\f38d"}.fa-microblog:before{content:"\e01a"}.fa-cc-diners-club:before{content:"\f24c"}.fa-gg-circle:before{content:"\f261"}.fa-pied-piper-hat:before{content:"\f4e5"}.fa-kickstarter-k:before{content:"\f3bc"}.fa-yandex:before{content:"\f413"}.fa-readme:before{content:"\f4d5"}.fa-html5:before{content:"\f13b"}.fa-sellsy:before{content:"\f213"}.fa-square-web-awesome:before{content:"\e683"}.fa-sass:before{content:"\f41e"}.fa-wirsindhandwerk:before,.fa-wsh:before{content:"\e2d0"}.fa-buromobelexperte:before{content:"\f37f"}.fa-salesforce:before{content:"\f83b"}.fa-octopus-deploy:before{content:"\e082"}.fa-medapps:before{content:"\f3c6"}.fa-ns8:before{content:"\f3d5"}.fa-pinterest-p:before{content:"\f231"}.fa-apper:before{content:"\f371"}.fa-fort-awesome:before{content:"\f286"}.fa-waze:before{content:"\f83f"}.fa-bluesky:before{content:"\e671"}.fa-cc-jcb:before{content:"\f24b"}.fa-snapchat-ghost:before,.fa-snapchat:before{content:"\f2ab"}.fa-fantasy-flight-games:before{content:"\f6dc"}.fa-rust:before{content:"\e07a"}.fa-wix:before{content:"\f5cf"}.fa-behance-square:before,.fa-square-behance:before{content:"\f1b5"}.fa-supple:before{content:"\f3f9"}.fa-webflow:before{content:"\e65c"}.fa-rebel:before{content:"\f1d0"}.fa-css3:before{content:"\f13c"}.fa-staylinked:before{content:"\f3f5"}.fa-kaggle:before{content:"\f5fa"}.fa-space-awesome:before{content:"\e5ac"}.fa-deviantart:before{content:"\f1bd"}.fa-cpanel:before{content:"\f388"}.fa-goodreads-g:before{content:"\f3a9"}.fa-git-square:before,.fa-square-git:before{content:"\f1d2"}.fa-square-tumblr:before,.fa-tumblr-square:before{content:"\f174"}.fa-trello:before{content:"\f181"}.fa-creative-commons-nc-jp:before{content:"\f4ea"}.fa-get-pocket:before{content:"\f265"}.fa-perbyte:before{content:"\e083"}.fa-grunt:before{content:"\f3ad"}.fa-weebly:before{content:"\f5cc"}.fa-connectdevelop:before{content:"\f20e"}.fa-leanpub:before{content:"\f212"}.fa-black-tie:before{content:"\f27e"}.fa-themeco:before{content:"\f5c6"}.fa-python:before{content:"\f3e2"}.fa-android:before{content:"\f17b"}.fa-bots:before{content:"\e340"}.fa-free-code-camp:before{content:"\f2c5"}.fa-hornbill:before{content:"\f592"}.fa-js:before{content:"\f3b8"}.fa-ideal:before{content:"\e013"}.fa-git:before{content:"\f1d3"}.fa-dev:before{content:"\f6cc"}.fa-sketch:before{content:"\f7c6"}.fa-yandex-international:before{content:"\f414"}.fa-cc-amex:before{content:"\f1f3"}.fa-uber:before{content:"\f402"}.fa-github:before{content:"\f09b"}.fa-php:before{content:"\f457"}.fa-alipay:before{content:"\f642"}.fa-youtube:before{content:"\f167"}.fa-skyatlas:before{content:"\f216"}.fa-firefox-browser:before{content:"\e007"}.fa-replyd:before{content:"\f3e6"}.fa-suse:before{content:"\f7d6"}.fa-jenkins:before{content:"\f3b6"}.fa-twitter:before{content:"\f099"}.fa-rockrms:before{content:"\f3e9"}.fa-pinterest:before{content:"\f0d2"}.fa-buffer:before{content:"\f837"}.fa-npm:before{content:"\f3d4"}.fa-yammer:before{content:"\f840"}.fa-btc:before{content:"\f15a"}.fa-dribbble:before{content:"\f17d"}.fa-stumbleupon-circle:before{content:"\f1a3"}.fa-internet-explorer:before{content:"\f26b"}.fa-stubber:before{content:"\e5c7"}.fa-telegram-plane:before,.fa-telegram:before{content:"\f2c6"}.fa-old-republic:before{content:"\f510"}.fa-odysee:before{content:"\e5c6"}.fa-square-whatsapp:before,.fa-whatsapp-square:before{content:"\f40c"}.fa-node-js:before{content:"\f3d3"}.fa-edge-legacy:before{content:"\e078"}.fa-slack-hash:before,.fa-slack:before{content:"\f198"}.fa-medrt:before{content:"\f3c8"}.fa-usb:before{content:"\f287"}.fa-tumblr:before{content:"\f173"}.fa-vaadin:before{content:"\f408"}.fa-quora:before{content:"\f2c4"}.fa-square-x-twitter:before{content:"\e61a"}.fa-reacteurope:before{content:"\f75d"}.fa-medium-m:before,.fa-medium:before{content:"\f23a"}.fa-amilia:before{content:"\f36d"}.fa-mixcloud:before{content:"\f289"}.fa-flipboard:before{content:"\f44d"}.fa-viacoin:before{content:"\f237"}.fa-critical-role:before{content:"\f6c9"}.fa-sitrox:before{content:"\e44a"}.fa-discourse:before{content:"\f393"}.fa-joomla:before{content:"\f1aa"}.fa-mastodon:before{content:"\f4f6"}.fa-airbnb:before{content:"\f834"}.fa-wolf-pack-battalion:before{content:"\f514"}.fa-buy-n-large:before{content:"\f8a6"}.fa-gulp:before{content:"\f3ae"}.fa-creative-commons-sampling-plus:before{content:"\f4f1"}.fa-strava:before{content:"\f428"}.fa-ember:before{content:"\f423"}.fa-canadian-maple-leaf:before{content:"\f785"}.fa-teamspeak:before{content:"\f4f9"}.fa-pushed:before{content:"\f3e1"}.fa-wordpress-simple:before{content:"\f411"}.fa-nutritionix:before{content:"\f3d6"}.fa-wodu:before{content:"\e088"}.fa-google-pay:before{content:"\e079"}.fa-intercom:before{content:"\f7af"}.fa-zhihu:before{content:"\f63f"}.fa-korvue:before{content:"\f42f"}.fa-pix:before{content:"\e43a"}.fa-steam-symbol:before{content:"\f3f6"}:host,:root{--fa-font-regular:normal 400 1em/1 "Font Awesome 6 Free"}@font-face{font-display:block;font-family:Font Awesome\ 6 Free;font-style:normal;font-weight:400;src:url(../webfonts/fa-regular-400.woff2) format("woff2"),url(../webfonts/fa-regular-400.ttf) format("truetype")}.fa-regular,.far{font-weight:400}:host,:root{--fa-style-family-classic:"Font Awesome 6 Free";--fa-font-solid:normal 900 1em/1 "Font Awesome 6 Free"}@font-face{font-display:block;font-family:Font Awesome\ 6 Free;font-style:normal;font-weight:900;src:url(../webfonts/fa-solid-900.woff2) format("woff2"),url(../webfonts/fa-solid-900.ttf) format("truetype")}.fa-solid,.fas{font-weight:900}@font-face{font-display:block;font-family:Font Awesome\ 5 Brands;font-weight:400;src:url(../webfonts/fa-brands-400.woff2) format("woff2"),url(../webfonts/fa-brands-400.ttf) format("truetype")}@font-face{font-display:block;font-family:Font Awesome\ 5 Free;font-weight:900;src:url(../webfonts/fa-solid-900.woff2) format("woff2"),url(../webfonts/fa-solid-900.ttf) format("truetype")}@font-face{font-display:block;font-family:Font Awesome\ 5 Free;font-weight:400;src:url(../webfonts/fa-regular-400.woff2) format("woff2"),url(../webfonts/fa-regular-400.ttf) format("truetype")}@font-face{font-display:block;font-family:FontAwesome;src:url(../webfonts/fa-solid-900.woff2) format("woff2"),url(../webfonts/fa-solid-900.ttf) format("truetype")}@font-face{font-display:block;font-family:FontAwesome;src:url(../webfonts/fa-brands-400.woff2) format("woff2"),url(../webfonts/fa-brands-400.ttf) format("truetype")}@font-face{font-display:block;font-family:FontAwesome;src:url(../webfonts/fa-regular-400.woff2) format("woff2"),url(../webfonts/fa-regular-400.ttf) format("truetype");unicode-range:u+f003,u+f006,u+f014,u+f016-f017,u+f01a-f01b,u+f01d,u+f022,u+f03e,u+f044,u+f046,u+f05c-f05d,u+f06e,u+f070,u+f087-f088,u+f08a,u+f094,u+f096-f097,u+f09d,u+f0a0,u+f0a2,u+f0a4-f0a7,u+f0c5,u+f0c7,u+f0e5-f0e6,u+f0eb,u+f0f6-f0f8,u+f10c,u+f114-f115,u+f118-f11a,u+f11c-f11d,u+f133,u+f147,u+f14e,u+f150-f152,u+f185-f186,u+f18e,u+f190-f192,u+f196,u+f1c1-f1c9,u+f1d9,u+f1db,u+f1e3,u+f1ea,u+f1f7,u+f1f9,u+f20a,u+f247-f248,u+f24a,u+f24d,u+f255-f25b,u+f25d,u+f271-f274,u+f278,u+f27b,u+f28c,u+f28e,u+f29c,u+f2b5,u+f2b7,u+f2ba,u+f2bc,u+f2be,u+f2c0-f2c1,u+f2c3,u+f2d0,u+f2d2,u+f2d4,u+f2dc}@font-face{font-display:block;font-family:FontAwesome;src:url(../webfonts/fa-v4compatibility.woff2) format("woff2"),url(../webfonts/fa-v4compatibility.ttf) format("truetype");unicode-range:u+f041,u+f047,u+f065-f066,u+f07d-f07e,u+f080,u+f08b,u+f08e,u+f090,u+f09a,u+f0ac,u+f0ae,u+f0b2,u+f0d0,u+f0d6,u+f0e4,u+f0ec,u+f10a-f10b,u+f123,u+f13e,u+f148-f149,u+f14c,u+f156,u+f15e,u+f160-f161,u+f163,u+f175-f178,u+f195,u+f1f8,u+f219,u+f27a}

/**
 * Admonition-based toggles
 */

/* Visibility of the target */
.admonition.toggle .admonition-title ~ * {
    transition: opacity .3s, height .3s;
}

/* Toggle buttons inside admonitions so we see the title */
.admonition.toggle {
    position: relative;
}

/* Titles should cut off earlier to avoid overlapping w/ button */
.admonition.toggle .admonition-title {
    padding-right: 25%;
    cursor: pointer;
}

/* Hovering will cause a slight shift in color to make it feel interactive */
.admonition.toggle .admonition-title:hover {
    box-shadow: inset 0 0 0px 20px rgb(0 0 0 / 1%);
}

/* Hovering will cause a slight shift in color to make it feel interactive */
.admonition.toggle .admonition-title:active {
    box-shadow: inset 0 0 0px 20px rgb(0 0 0 / 3%);
}

/* Remove extra whitespace below the admonition title when hidden */
.admonition.toggle-hidden {
    padding-bottom: 0;
}

.admonition.toggle-hidden .admonition-title {
    margin-bottom: 0;
}

/* hides all the content of a page until de-toggled */
.admonition.toggle-hidden .admonition-title ~ * {
    height: 0;
    margin: 0;
    opacity: 0;
    visibility: hidden;
}

/* General button style and position*/
button.toggle-button {
    /**
     * Background and shape. By default there's no background
     * but users can style as they wish
     */  
    background: none;
    border: none;
    outline: none;

    /* Positioning just inside the admonition title */
    position: absolute;
    right: 0.5em;
    padding: 0px;
    border: none;
    outline: none;
}

/* Display the toggle hint on wide screens */
@media (min-width: 768px) {
    button.toggle-button.toggle-button-hidden:before {
        content: attr(data-toggle-hint);  /* This will be filled in by JS */
        font-size: .8em;
        align-self: center;
    }
}

/* Icon behavior */
.tb-icon {
    transition: transform .2s ease-out;
    height: 1.5em;
    width: 1.5em;
    stroke: currentColor;  /* So that we inherit the color of other text */
}

/* The icon should point right when closed, down when open. */
/* Open */
.admonition.toggle button .tb-icon {
    transform: rotate(90deg);
}

/* Closed */
.admonition.toggle button.toggle-button-hidden .tb-icon {
    transform: rotate(0deg);
}

/* With details toggles, we don't rotate the icon so it points right */
details.toggle-details .tb-icon {
    height: 1.4em;
    width: 1.4em;
    margin-top: 0.1em;  /* To center the button vertically */
}


/**
 * Details-based toggles.
 * In this case, we wrap elements with `.toggle` in a details block.
 */

/* Details blocks */
details.toggle-details {
    margin: 1em 0;
}


details.toggle-details summary {
    display: flex;
    align-items: center;
    cursor: pointer;
    list-style: none;
    border-radius: .2em;
    border-left: 3px solid #1976d2;
    background-color: rgb(204 204 204 / 10%);
    padding: 0.2em 0.7em 0.3em 0.5em; /* Less padding on left because the SVG has left margin */
    font-size: 0.9em;
}

details.toggle-details summary:hover {
    background-color: rgb(204 204 204 / 20%);
}

details.toggle-details summary:active {
    background: rgb(204 204 204 / 28%);
}

.toggle-details__summary-text {
    margin-left: 0.2em;
}

details.toggle-details[open] summary {
    margin-bottom: .5em;
}

details.toggle-details[open] summary .tb-icon {
    transform: rotate(90deg);
}

details.toggle-details[open] summary ~ * {
    animation: toggle-fade-in .3s ease-out;
}

@keyframes toggle-fade-in {
  from {opacity: 0%;}
  to {opacity: 100%;}
}

/* Print rules - we hide all toggle button elements at print */
@media print {
    /* Always hide the summary so the button doesn't show up */
    details.toggle-details summary {
        display: none;
    }
}

/* Provided by Sphinx's 'basic' theme, and included in the final set of assets */
@import "../basic.css";


/*! sphinx-book-theme CSS
 * BSD 3-Clause License
 * Copyright (c) 2020, EBP
 * All rights reserved.
 *
 * This follows the 7-1 pattern described here:
 * https://sass-guidelin.es/#architecture
 */html[data-theme=dark],html[data-theme=light]{--pst-font-size-base:none;--pst-color-secondary:#e89217}html[data-theme=light]{--sbt-color-announcement:#616161;--pst-color-primary:#176de8}html[data-theme=dark]{--pst-color-primary:#528fe4;--sbt-color-announcement:#616161;--pst-color-background:#121212}html{scroll-padding-top:4rem}.sbt-scroll-pixel-helper{height:0;left:0;position:absolute;top:0;width:0}.d-n,.onlyprint{display:none}@media print{.onlyprint{display:block!important}.noprint{display:none!important}}.bd-article-container h1,.bd-article-container h2,.bd-article-container h3,.bd-article-container h4,.bd-article-container h5,.bd-article-container p.caption{color:var(--pst-color-muted)}.bd-article-container h1,.bd-article-container h2{font-weight:500}a.brackets:before{color:inherit;font-family:inherit;margin-right:0}table{position:relative}@media print{.bd-main .bd-content{height:auto;margin-left:2rem}.bd-main .bd-content #jb-print-docs-body{margin-left:0}.bd-main .bd-content #jb-print-docs-body h1{font-size:3em;margin-bottom:0;text-align:center}.bd-main .bd-content .bd-article{padding-top:0}.bd-main .bd-content .bd-article h1:first-of-type{display:none}.bd-main .bd-content .container{min-width:0!important}.bd-main .bd-content h1{margin-bottom:1em;margin-top:1em}.bd-main .bd-content h1,.bd-main .bd-content h2,.bd-main .bd-content h3,.bd-main .bd-content h4{break-after:avoid;color:#000}.bd-main .bd-content table{break-inside:avoid}.bd-main .bd-content pre{word-wrap:break-word}.bd-main .bd-content a.headerlink{display:none}.bd-main .bd-content aside.margin,.bd-main .bd-content aside.sidebar,.bd-main .bd-content blockquote.epigraph{border:none}.bd-main .bd-content .footer{margin-top:1em}.bd-main .bd-content #jb-print-toc{margin-bottom:1.5rem;margin-left:0}.bd-main .bd-content #jb-print-toc .section-nav{border-left:0!important;list-style-type:disc!important;margin-left:3em!important}.bd-main .bd-content #jb-print-toc .section-nav a{text-decoration:none!important}.bd-main .bd-content #jb-print-toc .section-nav li{display:list-item!important}.bd-main .bd-content #jb-print-toc .section-nav .nav{display:none}.bd-main .bd-footer-content{display:none!important}}.bd-header-announcement{background-color:var(--sbt-color-announcement);color:#fff}.bd-main .bd-content{justify-content:left}.bd-main .bd-content .bd-article-container{min-width:0;overflow-x:unset;padding:0}@media(min-width:1200px){.bd-main .bd-content .bd-article-container{max-width:calc(100% - var(--pst-sidebar-secondary))}}.bd-main .bd-content .bd-article-container .bd-article{padding-left:2rem;padding-right:2rem}@media(max-width:768px){.bd-main .bd-content .bd-article-container .bd-article{padding-left:1rem;padding-right:1rem}}.bd-main .bd-content .bd-article-container details.above-input summary,.bd-main .bd-content .bd-article-container details.below-input summary{border-left:3px solid var(--pst-color-primary)}@media(min-width:768px){button.sidebar-toggle.primary-toggle{display:inline-block}}@media(max-width:768px){button.sidebar-toggle.primary-toggle{margin-bottom:0}}@media(min-width:1200px){button.sidebar-toggle.secondary-toggle{display:none}}@media(max-width:768px){button.sidebar-toggle.secondary-toggle{margin-bottom:0}}.bd-header-article{align-items:center;background-color:var(--pst-color-background);display:flex;font-size:.9em;padding:0 1rem;position:sticky;top:0;transition:left .2s;z-index:1020}@media(max-width:768px){.bd-header-article{height:3.5rem;padding:0 .5rem}}.scrolled .bd-header-article{box-shadow:0 6px 6px -6px var(--pst-color-shadow)}.bd-header-article .header-article__inner{padding:0}.bd-header-article .header-article-items{align-items:center;display:flex;height:3rem;width:100%}.bd-header-article .header-article-item{align-items:center;display:flex}.bd-header-article .article-header-buttons{display:flex}.bd-header-article .btn{align-items:center;border:none;color:var(--pst-color-text-muted);display:flex;font-size:1.3rem;padding-left:.5rem;padding-right:.5rem}.bd-header-article .btn svg{width:1.3rem}.bd-header-article .btn.show,.bd-header-article .btn:hover{border:none;color:var(--pst-color-text-base)}.bd-header-article .btn.show+.dropdown-menu,.bd-header-article .btn:hover+.dropdown-menu{display:block}.bd-header-article .btn:focus{box-shadow:none}.bd-header-article .btn.dropdown-toggle:after{display:none}.bd-header-article div.dropdown{align-items:center;display:flex}.bd-header-article .theme-switch-button{margin:0}.bd-header-article .theme-switch-button button,.bd-header-article .theme-switch-button i,.bd-header-article .theme-switch-button span{padding:0}.bd-header-article .theme-switch-button i,.bd-header-article .theme-switch-button span{transition:color .25s ease-out}.bd-header-article .theme-switch-button:active,.bd-header-article .theme-switch-button:hover{background-color:unset!important}.bd-header-article .theme-switch-button:active i,.bd-header-article .theme-switch-button:active span,.bd-header-article .theme-switch-button:hover i,.bd-header-article .theme-switch-button:hover span{color:var(--pst-color-text-base)}.bd-header-article .dropdown-menu{background-color:var(--pst-color-background);border-color:var(--pst-color-border);box-shadow:0 .2rem .5rem var(--pst-color-shadow),0 0 .0625rem var(--pst-color-shadow)!important;color:var(--pst-color-text-muted);top:2rem;transform:translateX(-75%)}.bd-header-article .dropdown-menu:hover{display:block}.bd-header-article .dropdown-menu .dropdown-item{align-items:center;display:inline-flex;font-size:1em;padding-left:.5em}.bd-header-article .dropdown-menu .dropdown-item:hover{background-color:initial;color:var(--pst-color-text-base);text-decoration:none}.bd-header-article .dropdown-menu .dropdown-item span img{height:1em}.bd-header-article .dropdown-menu .dropdown-item span.btn__icon-container{align-items:center;display:inline-flex;justify-content:center;width:1.7em}.bd-header{position:inherit}.bd-header button.sidebar-toggle{display:none}.bd-sidebar-primary{max-height:100vh;padding:1rem;top:0;transition:margin-left .25s ease 0s,opacity .25s ease 0s,visibility .25s ease 0s}@media(max-width:768px){.bd-sidebar-primary{z-index:1081}}.bd-sidebar-primary .sidebar-primary-items__start{border-top:none}@media(min-width:992px){.bd-sidebar-primary{flex-basis:20%}input#pst-primary-sidebar-checkbox:checked~.bd-container .bd-sidebar-primary{margin-left:-20%;opacity:0;visibility:hidden}}.bd-sidebar-secondary{top:0}@media(max-width:1200px){.bd-sidebar-secondary{z-index:1081}}.bd-sidebar-secondary .sidebar-secondary-items{display:flex;gap:.5rem;padding:0}.bd-sidebar-secondary .sidebar-secondary-items .sidebar-secondary-item{padding-bottom:0;padding-top:0}.bd-sidebar-secondary .onthispage{align-items:center;color:var(--pst-color-muted);display:flex;gap:.5rem;height:3rem;margin:0;min-height:3rem}@media(min-width:1200px){.bd-sidebar-secondary{background:var(--pst-color-background);height:fit-content;padding:0;transition:max-height .4s ease;z-index:2}.bd-sidebar-secondary .toc-item{border-left-color:var(--pst-color-surface);padding-top:0}.bd-sidebar-secondary .toc-item nav.page-toc{margin-bottom:0;transition:opacity .4s ease}.bd-sidebar-secondary.hide:not(:hover){max-height:3rem;overflow-y:hidden}.scrolled .bd-sidebar-secondary.hide:not(:hover){box-shadow:0 6px 6px -6px rgba(0,0,0,.3)}.bd-sidebar-secondary.hide:not(:hover) .onthispage:after{content:"";font-family:Font Awesome\ 5 Free;font-weight:900;opacity:1;padding-left:.5em;transition:opacity .3s ease}.bd-sidebar-secondary.hide:not(:hover) nav.page-toc{opacity:0}}footer{font-size:var(--sbt-font-size-small-1)}footer.bd-footer-content{border-top:1px solid #ccc;display:flex;flex-wrap:wrap;font-size:87.5%;padding:15px}footer.bd-footer-content .bd-footer-content__inner{padding-left:0}footer.bd-footer-content .bd-footer-content__inner p{margin-bottom:0}.bd-footer-article{padding:0 1rem}@media(max-width:768px){.bd-footer-article{padding:0 .5rem}}#pst-back-to-top{font-size:.8rem}@media(min-width:1200px){#pst-back-to-top{display:none!important}}.bd-sidebar-primary .navbar-icon-links{column-gap:.5rem}.bd-sidebar-primary .navbar-icon-links .nav-link i,.bd-sidebar-primary .navbar-icon-links .nav-link span{font-size:1.2rem}.bd-sidebar-primary .navbar-icon-links .nav-link img{font-size:.8rem}.navbar-brand{flex-direction:column;gap:.25rem;height:unset;justify-content:center;max-height:unset}.navbar-brand:hover{text-decoration:none}.navbar-brand .logo__title{font-size:1.25rem;text-align:center;white-space:normal}.navbar-brand .logo__image{height:unset}.bd-search-container{margin:2em}.bd-search-container #search-results h2:first-child{display:none}.search-button-field{display:none;font-size:.9rem;width:100%}.search-button-field .search-button__kbd-shortcut{margin-left:auto}@media(min-width:992px){.search-button{display:none!important}.search-button-field{display:flex}}div#searchbox{padding-left:2rem;padding-right:2rem}@media(max-width:768px){div#searchbox{padding-left:1rem;padding-right:1rem}}@media(min-width:768px){div#searchbox p.highlight-link{margin-left:0}div#searchbox p.highlight-link a{font-size:1rem}}img{max-width:100%}img.align-center{display:block;margin-left:auto;margin-right:auto}img.align-left{clear:left;float:left;margin-right:1em}img.align-right{clear:right;float:right;margin-left:1em}div.figure{margin-bottom:1em;text-align:center;width:100%}div.figure.align-left{text-align:left}div.figure.align-left p.caption{margin-left:0}div.figure.align-right{text-align:right}div.figure.align-right p.caption{margin-right:0}div.figure p.caption{margin:.5em 10%}div.figure.margin p.caption,div.figure.margin-caption p.caption{margin:.5em 0}div.figure.margin-caption p.caption{text-align:left}div.figure span.caption-number{font-weight:700}div.figure span{font-size:.9rem}label.margin-toggle{margin-bottom:0}label.margin-toggle.marginnote-label{display:none}label.margin-toggle sup{user-select:none}@media(max-width:992px){label.margin-toggle{color:#0071bc;cursor:pointer}label.margin-toggle.marginnote-label{display:inline}label.margin-toggle.marginnote-label:after{content:"⊕"}}input.margin-toggle{display:none}@media(max-width:992px){input.margin-toggle:checked+.marginnote,input.margin-toggle:checked+.sidenote{clear:both;display:block;float:left;left:1rem;margin:1rem 2.5%;position:relative;width:95%}}span.marginnote,span.sidenote{background-color:unset;border-left:none;float:right;font-size:.9em;margin-left:.5rem;position:relative;width:40%;z-index:2}span.marginnote sup,span.sidenote sup{user-select:none}@media(min-width:992px),print{span.marginnote,span.sidenote{clear:right;margin:0 -36% 0 0;width:33%}span.marginnote p.sidebar-title,span.sidenote p.sidebar-title{border-bottom:none;margin-bottom:-1rem;padding-left:0}span.marginnote p.sidebar-title~*,span.sidenote p.sidebar-title~*{padding-left:0;padding-right:0}}@media(max-width:992px){span.marginnote,span.sidenote{display:none}}aside.sidebar .note{margin:1rem;padding:0 0 1rem}aside.sidebar .admonition-title{margin:0 -1rem 0 0}aside.sidebar.margin .sidebar-title:empty{display:none}aside.sidebar.margin .admonition{margin:.5rem;padding-left:0;padding-right:0}aside.sidebar.margin .admonition .admonition-title{margin-left:0;margin-right:0}@media(min-width:992px){aside.sidebar.margin{border:none}aside.sidebar.margin .admonition{margin:1rem 0;padding:0 0 1rem}}.cell.tag_margin,.cell.tag_popout,.margin.docutils.container,aside.margin,div.margin,figure.margin{background-color:unset;float:right;font-size:.9em;margin-left:.5rem;position:relative;width:40%;z-index:2}@media(min-width:992px),print{.cell.tag_margin,.cell.tag_popout,.margin.docutils.container,aside.margin,div.margin,figure.margin{clear:right;margin:0 -36% 0 0;width:33%}.cell.tag_margin p.sidebar-title,.cell.tag_popout p.sidebar-title,.margin.docutils.container p.sidebar-title,aside.margin p.sidebar-title,div.margin p.sidebar-title,figure.margin p.sidebar-title{border-bottom:none;margin-bottom:-1rem;padding-left:0}.cell.tag_margin p.sidebar-title~*,.cell.tag_popout p.sidebar-title~*,.margin.docutils.container p.sidebar-title~*,aside.margin p.sidebar-title~*,div.margin p.sidebar-title~*,figure.margin p.sidebar-title~*{padding-left:0;padding-right:0}}.cell.tag_margin div.cell.tag_margin .cell_output,.cell.tag_popout div.cell.tag_margin .cell_output,.margin.docutils.container div.cell.tag_margin .cell_output,aside.margin div.cell.tag_margin .cell_output,div.margin div.cell.tag_margin .cell_output,figure.margin div.cell.tag_margin .cell_output{padding-left:0}div.figure.margin-caption figcaption,div.figure.margin-caption p.caption,figure.margin-caption figcaption{background-color:unset;float:right;font-size:.9em;margin-left:.5rem;position:relative;width:40%;z-index:2}@media(min-width:992px),print{div.figure.margin-caption figcaption,div.figure.margin-caption p.caption,figure.margin-caption figcaption{clear:right;margin:0 -36% 0 0;width:33%}div.figure.margin-caption figcaption p.sidebar-title,div.figure.margin-caption p.caption p.sidebar-title,figure.margin-caption figcaption p.sidebar-title{border-bottom:none;margin-bottom:-1rem;padding-left:0}div.figure.margin-caption figcaption p.sidebar-title~*,div.figure.margin-caption p.caption p.sidebar-title~*,figure.margin-caption figcaption p.sidebar-title~*{padding-left:0;padding-right:0}}.margin-caption figcaption{text-align:left}div.cell.tag_full-width,div.cell.tag_full_width,div.full-width,div.full_width{position:relative;z-index:2}@media(min-width:992px){div.cell.tag_full-width,div.cell.tag_full_width,div.full-width,div.full_width{max-width:136%;width:136%}}blockquote.epigraph,blockquote.highlights,blockquote.pull-quote{background-color:var(--pst-color-background);border-left:none;font-size:1.25em}blockquote div>p+p.attribution{color:#6c757d;font-size:.9em;font-style:normal;padding-right:2em;text-align:right}div[class*=highlight-],pre{clear:none}div.cell.tag_output_scroll div.cell_output,div.cell.tag_scroll-input div.cell_input,div.cell.tag_scroll-output div.cell_output{max-height:24em;overflow-y:auto}@media only print{div.utterances,hypothesis-sidebar{display:none}}.thebelab-cell{border:none!important;margin-right:.5em!important}.thebelab-cell .thebelab-input{padding-left:10px!important}.cell.docutils.container{padding-right:0!important}button.thebe-launch-button{font-size:1em;height:2.5em}
/*# sourceMappingURL=sphinx-book-theme.css.map*/

html{--pst-header-height:4rem;--pst-header-article-height:calc(var(--pst-header-height)*2/3);--pst-sidebar-secondary:17rem;--pst-font-size-base:1rem;--pst-font-size-h1:2.5rem;--pst-font-size-h2:2rem;--pst-font-size-h3:1.75rem;--pst-font-size-h4:1.5rem;--pst-font-size-h5:1.25rem;--pst-font-size-h6:1.1rem;--pst-font-size-milli:0.9rem;--pst-sidebar-font-size:0.9rem;--pst-sidebar-font-size-mobile:1.1rem;--pst-sidebar-header-font-size:1.2rem;--pst-sidebar-header-font-weight:600;--pst-admonition-font-weight-heading:600;--pst-font-weight-caption:300;--pst-font-weight-heading:400;--pst-font-family-base-system:-apple-system,"BlinkMacSystemFont","Segoe UI","Helvetica Neue","Arial",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";--pst-font-family-monospace-system:"SFMono-Regular","Menlo","Consolas","Monaco","Liberation Mono","Lucida Console",monospace;--pst-font-family-base:var(--pst-font-family-base-system);--pst-font-family-heading:var(--pst-font-family-base-system);--pst-font-family-monospace:var(--pst-font-family-monospace-system);--pst-font-size-icon:1.5rem;--pst-icon-check-circle:"";--pst-icon-info-circle:"";--pst-icon-exclamation-triangle:"";--pst-icon-exclamation-circle:"";--pst-icon-times-circle:"";--pst-icon-lightbulb:"";--pst-icon-download:"";--pst-icon-angle-left:"";--pst-icon-angle-right:"";--pst-icon-external-link:"";--pst-icon-search-minus:"";--pst-icon-github:"";--pst-icon-gitlab:"";--pst-icon-share:"";--pst-icon-bell:"";--pst-icon-pencil:"";--pst-breadcrumb-divider:"";--pst-icon-admonition-default:var(--pst-icon-bell);--pst-icon-admonition-note:var(--pst-icon-info-circle);--pst-icon-admonition-attention:var(--pst-icon-exclamation-circle);--pst-icon-admonition-caution:var(--pst-icon-exclamation-triangle);--pst-icon-admonition-warning:var(--pst-icon-exclamation-triangle);--pst-icon-admonition-danger:var(--pst-icon-exclamation-triangle);--pst-icon-admonition-error:var(--pst-icon-times-circle);--pst-icon-admonition-hint:var(--pst-icon-lightbulb);--pst-icon-admonition-tip:var(--pst-icon-lightbulb);--pst-icon-admonition-important:var(--pst-icon-exclamation-circle);--pst-icon-admonition-seealso:var(--pst-icon-share);--pst-icon-admonition-todo:var(--pst-icon-pencil);--pst-icon-versionmodified-default:var(--pst-icon-exclamation-circle);--pst-icon-versionmodified-added:var(--pst-icon-exclamation-circle);--pst-icon-versionmodified-changed:var(--pst-icon-exclamation-circle);--pst-icon-versionmodified-deprecated:var(--pst-icon-exclamation-circle);font-size:var(--pst-font-size-base);scroll-padding-top:calc(var(--pst-header-height) + 1rem)}body{background-color:var(--pst-color-background);color:var(--pst-color-text-base);display:flex;flex-direction:column;font-family:var(--pst-font-family-base);font-weight:400;line-height:1.65;min-height:100vh}body::-webkit-scrollbar-track{background-color:var(--pst-color-background)}p{font-size:1em;margin-bottom:1.15rem}p.rubric{border-bottom:1px solid var(--pst-color-border)}p.centered{text-align:center}a{word-wrap:break-word;color:var(--pst-color-link);text-decoration:underline;text-decoration-thickness:max(1px,.0625rem);text-underline-offset:.1578em}a:hover{color:var(--pst-color-link-hover);text-decoration-skip-ink:none;text-decoration-thickness:max(3px,.1875rem,.12em)}a:active,a:visited{color:var(--pst-color-link)}a:visited:hover{color:var(--pst-color-link-hover)}a.headerlink{color:var(--pst-color-secondary);font-size:.8em;margin-left:.2em;opacity:.7;padding:0 4px;text-decoration:none;transition:all .2s ease-out;user-select:none}a.headerlink:hover{opacity:1}a.github:before,a.gitlab:before{color:var(--pst-color-text-muted);font:var(--fa-font-brands);margin-right:.25rem}a.github:before{content:var(--pst-icon-github)}a.gitlab:before{content:var(--pst-icon-gitlab)}h1,h2,h3,h4,h5,h6{font-family:var(--pst-font-family-heading);font-weight:var(--pst-font-weight-heading);line-height:1.15;margin:2.75rem 0 1.05rem}h1{font-size:var(--pst-font-size-h1);margin-top:0}h1,h2{color:var(--pst-heading-color)}h2{font-size:var(--pst-font-size-h2)}h3{font-size:var(--pst-font-size-h3)}h3,h4{color:var(--pst-heading-color)}h4{font-size:var(--pst-font-size-h4)}h5{font-size:var(--pst-font-size-h5)}h5,h6{color:var(--pst-color-text-base)}h6{font-size:var(--pst-font-size-h6)}.text_small,small{font-size:var(--pst-font-size-milli)}hr{border:0;border-top:1px solid var(--pst-color-border)}code,kbd,pre,samp{font-family:var(--pst-font-family-monospace)}kbd{background-color:var(--pst-color-on-background);color:var(--pst-color-text-muted)}kbd:not(.compound){border:1px solid var(--pst-color-border);box-shadow:1px 1px 1px var(--pst-color-shadow);margin:0 .1rem;padding:.1rem .4rem}code{color:var(--pst-color-inline-code)}pre{background-color:var(--pst-color-surface);border:1px solid var(--pst-color-border);border-radius:.25rem;color:var(--pst-color-text-base);line-height:1.2em;margin:1.5em 0;padding:1rem}pre .linenos{opacity:.8;padding-right:10px}#pst-back-to-top{background-color:var(--pst-color-secondary);border:none;color:var(--pst-color-secondary-text);display:none;left:50vw;position:fixed;top:90vh;transform:translate(-50%);z-index:1080}#pst-back-to-top .fa-arrow-up{margin-inline-end:.5em}#pst-back-to-top:hover{background-color:var(--pst-violet-600);color:var(--pst-color-link-hover);color:var(--pst-color-secondary-text);text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(1px,.0625rem);text-decoration-thickness:max(3px,.1875rem,.12em);text-decoration-thickness:1px;text-underline-offset:.1578em}#pst-back-to-top:focus-visible{box-shadow:none;outline:var(--pst-color-accent) solid .1875rem;outline-color:var(--pst-color-secondary);outline-offset:.1875rem}:focus-visible{box-shadow:none;outline:var(--pst-color-accent) solid .1875rem}.skip-link{background-color:var(--pst-color-warning);border-bottom:1px solid var(--pst-color-border);left:0;padding:.5rem;position:fixed;right:0;text-align:center;top:0;transform:translateY(-100%);transition:transform .15s ease-in-out;z-index:1055}.skip-link:focus-within{transform:translateY(0)}.skip-link a{color:var(--pst-color-warning-text)!important}.skip-link a:focus-visible{outline-color:#14181e}.bd-container{display:flex;flex-grow:1;justify-content:center}.bd-container .bd-container__inner{display:flex}.bd-page-width{width:100%}@media(min-width:960px){.bd-page-width{max-width:88rem}}.pst-async-banner-revealer{height:0;overflow:hidden;transition:height .3s ease-in-out}@media(prefers-reduced-motion){.pst-async-banner-revealer{transition:none}}#bd-header-version-warning,.bd-header-announcement{align-items:center;display:flex;justify-content:center;min-height:3rem;padding:.5rem 12.5%;position:relative;text-align:center;width:100%}@media(max-width:959.98px){#bd-header-version-warning,.bd-header-announcement{padding:.5rem 2%}}#bd-header-version-warning p,.bd-header-announcement p{font-weight:700;margin:0}#bd-header-version-warning a,.bd-header-announcement a{color:var(--pst-color-inline-code-links)}#bd-header-version-warning .pst-button-link-to-stable-version,.bd-header-announcement .pst-button-link-to-stable-version{background-color:var(--pst-color-danger);border-color:var(--pst-color-danger);border-radius:.25rem;box-shadow:0 .2rem .5rem var(--pst-color-shadow),0 0 .0625rem var(--pst-color-shadow)!important;color:var(--pst-color-danger-text)}#bd-header-version-warning .pst-button-link-to-stable-version:hover,.bd-header-announcement .pst-button-link-to-stable-version:hover{background-color:var(--pst-color-danger-highlight);border-color:var(--pst-color-danger-highlight);color:var(--pst-color-danger-text)}#bd-header-version-warning .pst-button-link-to-stable-version:focus-visible,.bd-header-announcement .pst-button-link-to-stable-version:focus-visible{outline:.1875rem solid var(--pst-color-danger);outline-offset:.1875rem}.bd-header-announcement{background-color:var(--pst-color-secondary-bg)}#bd-header-version-warning{background-color:var(--pst-color-danger-bg)}.bd-main{display:flex;flex-direction:column;flex-grow:1;min-width:0}.bd-main .bd-content{display:flex;height:100%;justify-content:center}.bd-main .bd-content .bd-article-container{display:flex;flex-direction:column;justify-content:start;max-width:60em;overflow-x:auto;padding:1rem;width:100%}@media(min-width:1200px){.bd-main .bd-content .bd-article-container .bd-article{padding-left:2rem;padding-top:1.5rem}}.bd-footer{border-top:1px solid var(--pst-color-border);width:100%}.bd-footer .bd-footer__inner{display:flex;flex-grow:1;margin:auto;padding:1rem}.bd-footer .footer-items__center,.bd-footer .footer-items__end,.bd-footer .footer-items__start{display:flex;flex-direction:column;flex-grow:1;gap:.5rem;justify-content:center}.bd-footer .footer-items__center{text-align:center}.bd-footer .footer-items__end{text-align:end}.bd-footer .footer-item p{margin-bottom:0}.bd-footer-article{margin-top:auto}.bd-footer-article .footer-article-items{display:flex;flex-direction:column}.bd-footer-content .footer-content-items{display:flex;flex-direction:column;margin-top:auto}.bd-header{background-color:var(--pst-color-on-background)!important;box-shadow:0 .125rem .25rem 0 var(--pst-color-shadow);justify-content:center;max-width:100vw;padding:0;position:sticky;top:0;width:100%;z-index:1030}.bd-header .bd-header__inner{align-items:center;display:flex;height:fit-content;padding-left:1rem;padding-right:1rem}.bd-header :focus-visible{border-radius:.125rem}.bd-header .navbar-item{align-items:center;display:flex;height:var(--pst-header-height);max-height:var(--pst-header-height)}.bd-header .navbar-header-items{display:none;flex-shrink:1}@media(min-width:960px){.bd-header .navbar-header-items{display:inherit;flex-grow:1;padding:0 0 0 .5rem}}.bd-header .navbar-header-items__center,.bd-header .navbar-header-items__end,.bd-header .navbar-header-items__start{align-items:center;display:flex;flex-flow:wrap;row-gap:0}.bd-header .navbar-header-items__center,.bd-header .navbar-header-items__end{column-gap:1rem}.bd-header .navbar-header-items__start{flex-shrink:0;gap:.5rem;margin-right:auto}.bd-header .navbar-header-items__end{justify-content:end}.bd-header ul.navbar-nav{display:flex}@media(min-width:960px){.bd-header ul.navbar-nav{align-items:baseline}}.bd-header ul.navbar-nav>li.nav-item{margin-inline:2px}.bd-header ul.navbar-nav>li.nav-item>.nav-link{color:var(--pst-color-text-muted);padding-inline:6px;position:relative}.bd-header ul.navbar-nav>li.nav-item>.nav-link:before{background-color:transparent;content:"";display:block;inset:0;bottom:calc(max(3px, .1875rem, .12em)*-1);margin:max(3px,.1875rem,.12em) 0;position:absolute}.bd-header ul.navbar-nav>li.nav-item>.nav-link:hover{color:var(--pst-color-secondary);text-decoration:none}.bd-header ul.navbar-nav>li.nav-item>.nav-link:hover:before{border-bottom:max(3px,.1875rem,.12em) solid var(--pst-color-secondary)}.bd-header ul.navbar-nav>li.nav-item>.nav-link:focus-visible{box-shadow:none;outline:3px solid var(--pst-color-accent);outline-offset:3px}.bd-header ul.navbar-nav>li.nav-item.current>.nav-link{color:var(--pst-color-primary)}.bd-header ul.navbar-nav>li.nav-item.current>.nav-link:before{border-bottom:3px solid var(--pst-color-primary)}.bd-header ul.navbar-nav>li.nav-item.dropdown{margin-inline:4px}.bd-header ul.navbar-nav>li.nav-item.dropdown button{padding-inline:8px}.bd-header ul.navbar-nav>li.nav-item.dropdown>.dropdown-toggle{border-radius:.125rem;color:var(--pst-color-text-muted)}.bd-header ul.navbar-nav>li.nav-item.dropdown>.dropdown-toggle:focus-visible{box-shadow:0 0 0 .1875rem var(--pst-color-accent)}.bd-header ul.navbar-nav>li.nav-item.dropdown>.dropdown-toggle:hover{box-shadow:0 0 0 .1875rem var(--pst-color-link-hover);color:var(--pst-color-text-base);text-decoration:none}.bd-header ul.navbar-nav li a.nav-link.dropdown-item{color:var(--pst-color-text-muted);text-decoration:none}.bd-header ul.navbar-nav li a.nav-link.dropdown-item:hover{color:var(--pst-color-link-hover);text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(1px,.0625rem);text-decoration-thickness:max(3px,.1875rem,.12em);text-underline-offset:.1578em}.bd-header ul.navbar-nav .dropdown button{border:none;display:unset}.bd-header ul.navbar-nav .dropdown button:hover{color:var(--pst-color-link-hover);text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(1px,.0625rem);text-decoration-thickness:max(3px,.1875rem,.12em);text-underline-offset:.1578em}.bd-header ul.navbar-nav .dropdown .dropdown-menu{background-color:var(--pst-color-on-background);border:1px solid var(--pst-color-border);box-shadow:0 0 .3rem .1rem var(--pst-color-shadow);margin:.5rem 0;min-width:20rem;padding:.5rem 0;z-index:1070}.bd-header ul.navbar-nav .dropdown .dropdown-menu .dropdown-item{padding:.25rem 1.5rem}.bd-header ul.navbar-nav .dropdown .dropdown-menu .dropdown-item:focus:not(:hover,:active){background-color:inherit}.bd-header ul.navbar-nav .dropdown .dropdown-menu .dropdown-item:focus-visible{z-index:10}.bd-header ul.navbar-nav .dropdown .dropdown-menu:not(.show){display:none}.bd-header button.sidebar-toggle{background-color:inherit;color:var(--pst-color-muted);font-size:var(--pst-font-size-icon);margin-bottom:0;padding:.5rem}.bd-header button.primary-toggle{margin-right:1rem}@media(min-width:960px){.bd-header button.primary-toggle{display:none}}.bd-header button.secondary-toggle{margin-left:1rem}@media(min-width:1200px){.bd-header button.secondary-toggle{display:none}}@media(min-width:960px){.navbar-center-items .navbar-item{display:inline-block}}.nav-link{transition:none}.nav-link:hover{color:var(--pst-color-link-hover);text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(1px,.0625rem);text-decoration-thickness:max(3px,.1875rem,.12em);text-underline-offset:.1578em}.nav-link.nav-external:after{content:var(--pst-icon-external-link);font:var(--fa-font-solid);font-size:.75em;margin-left:.3em}.bd-navbar-elements li.nav-item i{font-size:.7rem;padding-left:2px;vertical-align:middle}.navbar-persistent--mobile{margin-left:auto}@media(min-width:960px){.navbar-persistent--mobile{display:none}}.navbar-persistent--container{display:none}@media(min-width:960px){.navbar-persistent--container{display:flex}}.header-article__inner{display:flex;padding:0 .5rem}.header-article__inner .header-article-item{height:var(--pst-header-article-height);min-height:var(--pst-header-article-height)}.header-article__inner .header-article-items__end,.header-article__inner .header-article-items__start{align-items:start;display:flex;gap:.5rem}.header-article__inner .header-article-items__end{margin-left:auto}.bd-sidebar-primary{background-color:var(--pst-color-background);border-right:1px solid var(--pst-color-border);display:flex;flex:0 0 auto;flex-direction:column;font-size:var(--pst-sidebar-font-size-mobile);gap:1rem;max-height:calc(100vh - var(--pst-header-height));overflow-y:auto;padding:2rem 1rem 1rem;position:sticky;top:var(--pst-header-height);width:25%}@media(min-width:960px){.bd-sidebar-primary{font-size:var(--pst-sidebar-font-size)}}.bd-sidebar-primary :focus-visible{border-radius:.125rem}.bd-sidebar-primary .nav-link{font-size:var(--pst-sidebar-font-size-mobile)}.bd-sidebar-primary.no-sidebar{border-right:0}@media(min-width:960px){.bd-sidebar-primary.hide-on-wide{display:none}}.bd-sidebar-primary h1,.bd-sidebar-primary h2,.bd-sidebar-primary h3,.bd-sidebar-primary h4{color:var(--pst-color-text-base)}.bd-sidebar-primary .sidebar-primary-items__end .sidebar-primary-item,.bd-sidebar-primary .sidebar-primary-items__start .sidebar-primary-item{padding:.5rem 0}.bd-sidebar-primary .sidebar-header-items{display:flex;flex-direction:column}.bd-sidebar-primary .sidebar-header-items .sidebar-header-items__title{color:var(--pst-color-text-base);font-size:var(--pst-sidebar-header-font-size);font-weight:var(--pst-sidebar-header-font-weight);margin-bottom:.5rem}.bd-sidebar-primary .sidebar-header-items .nav-item.dropdown button{display:none}.bd-sidebar-primary .sidebar-header-items .nav-item.dropdown .dropdown-menu{background-color:inherit;border:none;display:flex;flex-direction:column;font-size:inherit;margin:0;padding:0}.bd-sidebar-primary .sidebar-header-items .nav-item.dropdown .dropdown-menu .dropdown-item:focus,.bd-sidebar-primary .sidebar-header-items .nav-item.dropdown .dropdown-menu .dropdown-item:hover{background-color:unset}.bd-sidebar-primary .sidebar-header-items .bd-navbar-elements .nav-link:focus-visible{box-shadow:none;outline:var(--pst-color-accent) solid .1875rem;outline-offset:.1875rem}.bd-sidebar-primary .sidebar-header-items .sidebar-header-items__center{display:flex;flex-direction:column}.bd-sidebar-primary .sidebar-header-items .sidebar-header-items__end{align-items:center;display:flex;gap:1rem}@media(min-width:960px){.bd-sidebar-primary .sidebar-header-items{display:none}}.bd-sidebar-primary .sidebar-primary-items__start{border-top:1px solid var(--pst-color-border)}@media(min-width:960px){.bd-sidebar-primary .sidebar-primary-items__start{border-top:none}}.bd-sidebar-primary .sidebar-primary-items__end{margin-bottom:1em;margin-top:auto}.bd-sidebar-primary .list-caption{list-style:none;padding-left:0}.bd-sidebar-primary .list-caption li.toctree-l0.has-children>details>summary{align-items:baseline;display:flex;height:auto;justify-content:space-between;position:relative;width:auto}.bd-sidebar-primary .list-caption li.toctree-l0.has-children>details>summary .toctree-toggle{flex:0 0 auto}.bd-sidebar-primary .list-caption li.toctree-l0.has-children>details>summary .toctree-toggle .fa-chevron-down{font-size:1rem}.bd-sidebar-primary li.has-children{position:relative}.bd-sidebar-primary li.has-children .caption,.bd-sidebar-primary li.has-children>.reference{margin-right:calc(30px + .1875rem);padding-top:.25rem}.bd-sidebar-primary li.has-children>details>summary{list-style:none}.bd-sidebar-primary li.has-children>details>summary::-webkit-details-marker{display:none}.bd-sidebar-primary li.has-children>details>summary:focus-visible{outline:none}.bd-sidebar-primary li.has-children>details>summary:focus-visible>.toctree-toggle{outline:var(--pst-color-accent) solid .1875rem;outline-offset:-.1875rem}.bd-sidebar-primary li.has-children>details>summary .toctree-toggle{align-items:center;cursor:pointer;display:inline-flex;height:30px;justify-content:center;position:absolute;right:0;top:0;width:30px}.bd-sidebar-primary li.has-children>details>summary .toctree-toggle .fa-chevron-down{font-size:.75rem}.bd-sidebar-primary li.has-children>details[open]>summary .fa-chevron-down{transform:rotate(180deg)}nav.bd-links{margin-right:-1rem}@media(min-width:960px){nav.bd-links{display:block}}nav.bd-links ul{display:block;list-style:none}nav.bd-links ul ul{padding:0 0 0 1rem}nav.bd-links li>a{box-shadow:none;color:var(--pst-color-text-muted);display:block;margin-right:.1875rem;padding:.25rem .65rem;text-decoration:none}nav.bd-links li>a:hover{background-color:transparent;text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(3px,.1875rem,.12em)}nav.bd-links li>a:active,nav.bd-links li>a:hover{color:var(--pst-color-link-hover)}nav.bd-links li>a:focus-visible{box-shadow:0 0 0 .1875rem var(--pst-color-accent);outline:none;z-index:10}nav.bd-links li>a.reference.external:after{content:var(--pst-icon-external-link);font:var(--fa-font-solid);font-size:.75em;margin-left:.3em}nav.bd-links .current>a{background-color:transparent;box-shadow:inset max(3px,.1875rem,.12em) 0 0 var(--pst-color-primary);color:var(--pst-color-primary);font-weight:600}nav.bd-links .current>a:focus-visible{box-shadow:inset max(3px,.1875rem,.12em) 0 0 var(--pst-color-primary),0 0 0 .1875rem var(--pst-color-accent);outline:none}nav.bd-links p.bd-links__title{font-size:var(--pst-sidebar-header-font-size)}nav.bd-links p.bd-links__title,nav.bd-links p.caption{font-weight:var(--pst-sidebar-header-font-weight);margin-bottom:.5rem}nav.bd-links p.caption{color:var(--pst-color-text-base);font-size:var(--pst-sidebar-font-size-mobile);margin-top:1.25rem;position:relative}nav.bd-links p.caption:first-child{margin-top:0}@media(min-width:960px){nav.bd-links p.caption{font-size:var(--pst-sidebar-font-size)}}.bd-sidebar-secondary{background-color:var(--pst-color-background);display:flex;flex-direction:column;flex-shrink:0;font-size:var(--pst-sidebar-font-size-mobile);max-height:calc(100vh - var(--pst-header-height));order:2;overflow-y:auto;padding:2rem 1rem 1rem;position:sticky;top:var(--pst-header-height);width:var(--pst-sidebar-secondary)}@media(min-width:1200px){.bd-sidebar-secondary{font-size:var(--pst-sidebar-font-size)}}.sidebar-secondary-item{padding:.5rem}@media(min-width:1200px){.sidebar-secondary-item{border-left:1px solid var(--pst-color-border);padding-left:1rem}}.sidebar-secondary-item i{padding-right:.5rem}input.sidebar-toggle{display:none}label.overlay{background-color:#000;height:0;left:0;opacity:.5;position:fixed;top:0;transition:opacity .2s ease-out;width:0;z-index:1050}input#pst-primary-sidebar-checkbox:checked+label.overlay.overlay-primary,input#pst-secondary-sidebar-checkbox:checked+label.overlay.overlay-secondary{height:100vh;width:100vw}input#pst-primary-sidebar-checkbox:checked~.bd-container .bd-sidebar-primary{margin-left:0;visibility:visible}input#pst-secondary-sidebar-checkbox:checked~.bd-container .bd-sidebar-secondary{margin-right:0;visibility:visible}@media(min-width:960px){.sidebar-toggle.primary-toggle{display:none}input#pst-primary-sidebar-checkbox:checked+label.overlay.overlay-primary{height:0;width:0}.bd-sidebar-primary{margin-left:0;visibility:visible}}@media(max-width:959.98px){.bd-sidebar-primary{flex-grow:.75;height:100vh;left:0;margin-left:-75%;max-height:100vh;max-width:350px;position:fixed;top:0;transition:visibility .2s ease-out,margin .2s ease-out;visibility:hidden;width:75%;z-index:1055}}@media(max-width:1199.98px){.bd-sidebar-secondary{flex-grow:.75;height:100vh;margin-right:-75%;max-height:100vh;max-width:350px;position:fixed;right:0;top:0;transition:visibility .2s ease-out,margin .2s ease-out;visibility:hidden;width:75%;z-index:1055}}ul.bd-breadcrumbs{display:flex;flex-wrap:wrap;font-size:.8rem;list-style:none;padding-left:0}ul.bd-breadcrumbs li.breadcrumb-item{align-items:center;display:flex;font-weight:700}ul.bd-breadcrumbs li.breadcrumb-item a{color:var(--pst-color-text-muted);text-decoration:none}ul.bd-breadcrumbs li.breadcrumb-item a:hover{color:var(--pst-color-link-hover);text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(1px,.0625rem);text-decoration-thickness:max(3px,.1875rem,.12em);text-underline-offset:.1578em}ul.bd-breadcrumbs li.breadcrumb-item:not(.breadcrumb-home):before{color:var(--pst-color-text-muted);content:var(--pst-breadcrumb-divider);font:var(--fa-font-solid);font-size:.8rem;padding:0 .5rem}html .pst-navbar-icon{align-items:center;border:none;border-radius:0;box-sizing:border-box;color:var(--pst-color-text-muted);display:flex;font-size:1rem;height:2.15rem;justify-content:center;line-height:1.65;min-height:24px;min-width:24px;padding:.25rem 0;position:relative}html .pst-navbar-icon:before{background-color:transparent;content:"";display:block;inset:0;bottom:calc(max(3px, .1875rem, .12em)*-1);margin:max(3px,.1875rem,.12em) 0;position:absolute}html .pst-navbar-icon:hover{color:var(--pst-color-secondary);text-decoration:none}html .pst-navbar-icon:hover:before{border-bottom:max(3px,.1875rem,.12em) solid var(--pst-color-secondary)}html .pst-navbar-icon:focus-visible{box-shadow:none;outline:3px solid var(--pst-color-accent);outline-offset:3px}ul.navbar-icon-links{align-items:center;column-gap:1rem;display:flex;flex-flow:row wrap;justify-content:space-evenly;list-style:none;margin-bottom:0;padding-left:0}ul.navbar-icon-links i.fa-brands,ul.navbar-icon-links i.fa-regular,ul.navbar-icon-links i.fa-solid{font-size:var(--pst-font-size-icon);font-style:normal;vertical-align:middle}ul.navbar-icon-links i.fa-square-twitter:before{color:#55acee}ul.navbar-icon-links i.fa-square-gitlab:before{color:#548}ul.navbar-icon-links i.fa-bitbucket:before{color:#0052cc}ul.navbar-icon-links img.icon-link-image{border-radius:.2rem;height:1.5em}ul.navbar-icon-links .fa-pydata{stroke:var(--pst-color-background);stroke-linejoin:round;stroke-width:.35}.navbar-brand{align-items:center;display:flex;flex-shrink:0;gap:.5rem;height:var(--pst-header-height);margin:0;max-height:var(--pst-header-height);padding:.5rem 0;position:relative;width:auto}.navbar-brand p{color:var(--pst-color-text-base);margin-bottom:0}.navbar-brand img{height:100%;max-width:100%;width:auto}.navbar-brand:hover,.navbar-brand:visited:hover{color:var(--pst-color-link-hover);color:var(--pst-color-text-base);text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(1px,.0625rem);text-decoration-thickness:max(3px,.1875rem,.12em);text-underline-offset:.1578em}ul.navbar-nav ul{padding:0 0 0 1rem}ul.navbar-nav li{display:flex;flex-direction:column}ul.navbar-nav li a{align-items:center;color:var(--pst-color-text-muted);display:flex;height:100%;padding-bottom:.25rem;padding-top:.25rem;text-decoration:none}ul.navbar-nav li a:hover{color:var(--pst-color-link-hover);text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(1px,.0625rem);text-decoration-thickness:max(3px,.1875rem,.12em);text-underline-offset:.1578em}.page-toc .section-nav{border-bottom:none;padding-left:0}.page-toc .section-nav ul{padding-left:1rem}.page-toc .nav-link{font-size:var(--pst-sidebar-font-size-mobile)}@media(min-width:1200px){.page-toc .nav-link{font-size:var(--pst-sidebar-font-size)}}.page-toc .onthispage{color:var(--pst-color-text-base);font-weight:var(--pst-sidebar-header-font-weight);margin-bottom:.5rem}.prev-next-area{width:100%}.prev-next-area p{color:var(--pst-color-text-muted);line-height:1.3em;margin:0 .3em}.prev-next-area i{font-size:1.2em}.prev-next-area a{align-items:center;border:none;color:var(--pst-color-text-muted);display:flex;max-width:45%;overflow-x:hidden;padding:10px;text-decoration:none}.prev-next-area a p.prev-next-title{word-wrap:break-word;color:var(--pst-color-link);font-size:1.1em;font-weight:var(--pst-admonition-font-weight-heading);text-decoration:underline;text-decoration-thickness:max(1px,.0625rem);text-underline-offset:.1578em}.prev-next-area a p.prev-next-title:hover{color:var(--pst-color-link-hover);text-decoration-skip-ink:none;text-decoration-thickness:max(3px,.1875rem,.12em)}.prev-next-area a p.prev-next-title:active,.prev-next-area a p.prev-next-title:visited{color:var(--pst-color-link)}.prev-next-area a p.prev-next-title:visited:hover{color:var(--pst-color-link-hover)}.prev-next-area a:hover p.prev-next-title,.prev-next-area a:visited:hover p.prev-next-title{color:var(--pst-color-link-hover);text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(1px,.0625rem);text-decoration-thickness:max(3px,.1875rem,.12em);text-underline-offset:.1578em}.prev-next-area a .prev-next-info{flex-direction:column;margin:0 .5em}.prev-next-area a .prev-next-info .prev-next-subtitle{text-transform:capitalize}.prev-next-area a.left-prev{float:left}.prev-next-area a.right-next{float:right}.prev-next-area a.right-next div.prev-next-info{text-align:right}.bd-search{border:1px solid var(--pst-color-border);border-radius:.25rem;color:var(--pst-color-text-base);gap:.5rem;padding-left:.5rem;position:relative}.bd-search,.bd-search:active{background-color:var(--pst-color-background)}.bd-search:active{color:var(--pst-color-text-muted)}.bd-search .icon{color:var(--pst-color-border);left:25px;position:absolute}.bd-search .fa-solid.fa-magnifying-glass{color:var(--pst-color-text-muted);left:calc(1.25rem - .35em);position:absolute}.bd-search input::placeholder{color:var(--pst-color-text-muted)}.bd-search input::-webkit-search-cancel-button,.bd-search input::-webkit-search-decoration{appearance:none}.bd-search .search-button__kbd-shortcut{color:var(--pst-color-border);display:flex;position:absolute;right:.5rem}.form-control{background-color:var(--pst-color-background);color:var(--pst-color-text-base)}.form-control:focus,.form-control:focus-visible{background-color:var(--pst-color-background);border:none;color:var(--pst-color-text-muted)}.search-button i{font-size:1.3rem}.search-button__overlay,.search-button__search-container{display:none}.search-button__wrapper.show .search-button__search-container{display:flex;left:50%;margin-top:.5rem;max-width:800px;position:fixed;right:1rem;top:30%;transform:translate(-50%,-50%);width:90%;z-index:1055}.search-button__wrapper.show .search-button__overlay{background-color:#000;display:flex;height:100%;left:0;opacity:.5;position:fixed;top:0;width:100%;z-index:1050}.search-button__wrapper.show form.bd-search{flex-grow:1;padding-bottom:0;padding-top:0}.search-button__wrapper.show input,.search-button__wrapper.show svg{font-size:var(--pst-font-size-icon)}.search-button-field{align-items:center;background-color:var(--pst-color-surface);border:1px solid var(--pst-color-border);border-radius:1.5em;color:var(--pst-color-text-muted);display:inline-flex;padding:.5em}.search-button-field:hover{box-shadow:0 0 0 .1875rem var(--pst-color-link-hover)}.search-button-field:focus-visible{border-radius:1.5em}.search-button-field .search-button__default-text{font-size:var(--bs-nav-link-font-size);font-weight:var(--bs-nav-link-font-weight);margin-left:.5em;margin-right:.5em}.search-button-field .kbd-shortcut__modifier{font-size:.75em}.search-button-field>*{align-items:center}.search-button-field>:not(svg){display:none}@media(min-width:960px){.search-button-field>:not(svg){display:flex}}div#searchbox p.highlight-link{box-shadow:0 .2rem .5rem var(--pst-color-shadow),0 0 .0625rem var(--pst-color-shadow)!important;margin:1rem 0;width:fit-content}@media(min-width:1200px){div#searchbox p.highlight-link{margin-left:2rem}}div#searchbox p.highlight-link a{background-color:var(--pst-color-primary);border-radius:.25rem;color:var(--pst-color-primary-text);font-size:1.25rem;padding:.75rem;text-decoration:none;transition:box-shadow .25s ease-out}div#searchbox p.highlight-link a:hover{box-shadow:inset 0 0 50px 50px rgba(0,0,0,.25)}div#searchbox p.highlight-link a:before{color:unset;content:var(--pst-icon-search-minus);font:var(--fa-font-solid);margin-right:.5rem}.theme-switch-button .theme-switch{display:none}.theme-switch-button .theme-switch:active{color:var(--pst-color-link-hover);text-decoration:none}.theme-switch-button .theme-switch .fa-lg{aspect-ratio:1/1}html[data-mode=auto] .theme-switch-button .theme-switch[data-mode=auto],html[data-mode=dark] .theme-switch-button .theme-switch[data-mode=dark],html[data-mode=light] .theme-switch-button .theme-switch[data-mode=light]{display:inline}button.btn.version-switcher__button{border-color:var(--pst-color-border);color:var(--pst-color-text-base);margin-bottom:1em}@media(min-width:960px){button.btn.version-switcher__button{margin-bottom:unset}}button.btn.version-switcher__button:hover{border-color:transparent;box-shadow:0 0 0 .1875rem var(--pst-color-secondary)}button.btn.version-switcher__button:active{border-color:var(--pst-color-border);color:var(--pst-color-text-base)}button.btn.version-switcher__button:focus-visible{border-color:transparent}.version-switcher__menu{border-color:var(--pst-color-border);border-radius:var(--bs-dropdown-border-radius)}.version-switcher__menu a.list-group-item{background-color:var(--pst-color-on-background);color:var(--pst-color-text-base);padding:.75rem 1.25rem}.version-switcher__menu a.list-group-item:not(:last-child){border-bottom:1px solid var(--pst-color-border)}.version-switcher__menu a.list-group-item:hover{background-color:var(--pst-color-surface);color:var(--pst-color-link-hover);text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(1px,.0625rem);text-decoration-thickness:max(3px,.1875rem,.12em);text-underline-offset:.1578em}.version-switcher__menu a.list-group-item.active{box-shadow:inset max(3px,.1875rem,.12em) 0 0 var(--pst-color-primary);color:var(--pst-color-primary);font-weight:600;position:relative;z-index:1}.version-switcher__menu a.list-group-item.active:focus-visible{box-shadow:inset max(3px,.1875rem,.12em) 0 0 var(--pst-color-primary),0 0 0 .1875rem var(--pst-color-accent);outline:none}.version-switcher__menu a.list-group-item.active span:before{content:"";height:100%;left:0;position:absolute;top:0;width:100%;z-index:-1}.version-switcher__menu a.list-group-item:focus-visible{z-index:10}.version-switcher__menu,button.version-switcher__button{box-sizing:border-box;font-size:1.1em;min-height:24px;min-width:24px;z-index:1055}@media(min-width:960px){.version-switcher__menu,button.version-switcher__button{font-size:unset}}nav.page-toc{margin-bottom:1rem}.bd-toc .nav .nav{display:none}.bd-toc .nav .nav.visible,.bd-toc .nav>.active>ul,.toc-entry{display:block}.toc-entry a.nav-link,.toc-entry a>code{color:var(--pst-color-text-muted)}.toc-entry a.nav-link{display:block;margin-left:-1rem;padding:.125rem 0 .125rem 1rem;text-decoration:none}.toc-entry a.nav-link:hover{background-color:transparent;text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(3px,.1875rem,.12em)}.toc-entry a.nav-link:active,.toc-entry a.nav-link:hover{color:var(--pst-color-link-hover)}.toc-entry a.nav-link:focus-visible{box-shadow:0 0 0 .1875rem var(--pst-color-accent);outline:none;z-index:10}.toc-entry a.nav-link.active{background-color:transparent;box-shadow:inset max(3px,.1875rem,.12em) 0 0 var(--pst-color-primary);color:var(--pst-color-primary);font-weight:600}.toc-entry a.nav-link.active:focus-visible{box-shadow:inset max(3px,.1875rem,.12em) 0 0 var(--pst-color-primary),0 0 0 .1875rem var(--pst-color-accent);outline:none}.toc-entry a.nav-link.active:hover{color:var(--pst-color-link-hover)}.toc-entry a.nav-link:focus-visible{border-radius:.125rem}div.deprecated,div.versionadded,div.versionchanged{background-color:var(--pst-color-on-background);border-left:.2rem solid;border-color:var(--pst-color-info);border-radius:.25rem;box-shadow:0 .2rem .5rem var(--pst-color-shadow),0 0 .0625rem var(--pst-color-shadow)!important;break-inside:avoid;margin:1.5625em auto;overflow:hidden;padding:0 .6rem;page-break-inside:avoid;position:relative;vertical-align:middle}div.deprecated>p,div.versionadded>p,div.versionchanged>p{margin-bottom:.6rem;margin-top:.6rem}div.versionadded{background-color:var(--pst-color-success-bg);border-color:var(--pst-color-success)}div.versionchanged{background-color:var(--pst-color-warning-bg);border-color:var(--pst-color-warning)}div.deprecated{background-color:var(--pst-color-danger-bg);border-color:var(--pst-color-danger)}span.versionmodified{font-weight:600}span.versionmodified:before{color:var(--pst-color-info);content:var(--pst-icon-versionmodified-default);font:var(--fa-font-solid);margin-right:.6rem}span.versionmodified.added:before{color:var(--pst-color-success);content:var(--pst-icon-versionmodified-added)}span.versionmodified.changed:before{color:var(--pst-color-warning);content:var(--pst-icon-versionmodified-changed)}span.versionmodified.deprecated:before{color:var(--pst-color-danger);content:var(--pst-icon-versionmodified-deprecated)}.sidebar-indices-items{border-top:1px solid var(--pst-color-border);display:flex;flex-direction:column}@media(min-width:960px){.sidebar-indices-items{border-top:none}}.sidebar-indices-items .sidebar-indices-items__title{color:var(--pst-color-text-base);font-size:var(--pst-sidebar-header-font-size);font-weight:var(--pst-sidebar-header-font-weight);margin-bottom:.5rem}.sidebar-indices-items ul.indices-link{list-style:none;margin-right:-1rem;padding:0}.sidebar-indices-items ul.indices-link li>a{color:var(--pst-color-text-muted);display:block;padding:.25rem 0}.sidebar-indices-items ul.indices-link li>a:hover{background-color:transparent;color:var(--pst-color-primary);text-decoration:none}.bd-sidebar-primary div#rtd-footer-container{bottom:-1rem;margin:-1rem;position:sticky}.bd-sidebar-primary div#rtd-footer-container .rst-versions.rst-badge{font-family:var(--pst-font-family-base);font-size:.9em;max-width:unset;position:unset}.bd-sidebar-primary div#rtd-footer-container .rst-versions.rst-badge .rst-current-version{align-items:center;background-color:var(--pst-color-background);border-top:1px solid var(--pst-color-border);color:var(--pst-color-success);display:flex;gap:.2rem;height:2.5rem;transition:background-color .2s ease-out}.bd-sidebar-primary div#rtd-footer-container .rst-versions.rst-badge .fa.fa-book{color:var(--pst-color-text-muted);margin-right:auto}.bd-sidebar-primary div#rtd-footer-container .rst-versions.rst-badge .fa.fa-book:after{color:var(--pst-color-text-base);content:"Read The Docs";font-family:var(--pst-font-family-base);font-weight:var(--pst-admonition-font-weight-heading)}.bd-sidebar-primary div#rtd-footer-container .rst-versions.rst-badge .fa.fa-caret-down{color:var(--pst-color-text-muted)}.bd-sidebar-primary div#rtd-footer-container .rst-versions.rst-badge.shift-up .rst-current-version{border-bottom:1px solid var(--pst-color-border)}.bd-sidebar-primary div#rtd-footer-container .rst-other-versions{background-color:var(--pst-color-surface);color:var(--pst-color-text-base)}.bd-sidebar-primary div#rtd-footer-container .rst-other-versions dl dd a{color:var(--pst-color-text-muted)}.bd-sidebar-primary div#rtd-footer-container .rst-other-versions hr{background-color:var(--pst-color-border)}.bd-sidebar-primary div#rtd-footer-container .rst-other-versions small a{color:var(--pst-color-link)}.bd-sidebar-primary div#rtd-footer-container .rst-other-versions input{background-color:var(--pst-color-surface);border:1px solid var(--pst-color-border);padding-left:.5rem}.admonition,div.admonition{background-color:var(--pst-color-on-background);border-left:.2rem solid;border-color:var(--pst-color-info);border-radius:.25rem;box-shadow:0 .2rem .5rem var(--pst-color-shadow),0 0 .0625rem var(--pst-color-shadow)!important;break-inside:avoid;margin:1.5625em auto;overflow:hidden;padding:0 .6rem .8rem;page-break-inside:avoid}.admonition :last-child,div.admonition :last-child{margin-bottom:0}.admonition p.admonition-title~*,div.admonition p.admonition-title~*{margin-left:1.4rem;margin-right:1.4rem}.admonition>ol,.admonition>ul,div.admonition>ol,div.admonition>ul{margin-left:1em}.admonition>.admonition-title,div.admonition>.admonition-title{background-color:var(--pst-color-info-bg);font-weight:var(--pst-admonition-font-weight-heading);margin:0 -.6rem;padding:.4rem .6rem .4rem 2rem;position:relative;z-index:1}.admonition>.admonition-title:before,div.admonition>.admonition-title:before{content:"";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%;z-index:-1}.admonition>.admonition-title:after,div.admonition>.admonition-title:after{color:var(--pst-color-info);content:var(--pst-icon-admonition-default);font:var(--fa-font-solid);height:1rem;left:.5rem;line-height:inherit;opacity:1;position:absolute;width:1rem}.admonition>.admonition-title+*,div.admonition>.admonition-title+*{margin-top:.4em}.admonition.attention,div.admonition.attention{border-color:var(--pst-color-attention)}.admonition.attention>.admonition-title,div.admonition.attention>.admonition-title{background-color:var(--pst-color-attention-bg)}.admonition.attention>.admonition-title:after,div.admonition.attention>.admonition-title:after{color:var(--pst-color-attention);content:var(--pst-icon-admonition-attention)}.admonition.caution,div.admonition.caution{border-color:var(--pst-color-warning)}.admonition.caution>.admonition-title,div.admonition.caution>.admonition-title{background-color:var(--pst-color-warning-bg)}.admonition.caution>.admonition-title:after,div.admonition.caution>.admonition-title:after{color:var(--pst-color-warning);content:var(--pst-icon-admonition-caution)}.admonition.warning,div.admonition.warning{border-color:var(--pst-color-warning)}.admonition.warning>.admonition-title,div.admonition.warning>.admonition-title{background-color:var(--pst-color-warning-bg)}.admonition.warning>.admonition-title:after,div.admonition.warning>.admonition-title:after{color:var(--pst-color-warning);content:var(--pst-icon-admonition-warning)}.admonition.danger,div.admonition.danger{border-color:var(--pst-color-danger)}.admonition.danger>.admonition-title,div.admonition.danger>.admonition-title{background-color:var(--pst-color-danger-bg)}.admonition.danger>.admonition-title:after,div.admonition.danger>.admonition-title:after{color:var(--pst-color-danger);content:var(--pst-icon-admonition-danger)}.admonition.error,div.admonition.error{border-color:var(--pst-color-danger)}.admonition.error>.admonition-title,div.admonition.error>.admonition-title{background-color:var(--pst-color-danger-bg)}.admonition.error>.admonition-title:after,div.admonition.error>.admonition-title:after{color:var(--pst-color-danger);content:var(--pst-icon-admonition-error)}.admonition.hint,div.admonition.hint{border-color:var(--pst-color-success)}.admonition.hint>.admonition-title,div.admonition.hint>.admonition-title{background-color:var(--pst-color-success-bg)}.admonition.hint>.admonition-title:after,div.admonition.hint>.admonition-title:after{color:var(--pst-color-success);content:var(--pst-icon-admonition-hint)}.admonition.tip,div.admonition.tip{border-color:var(--pst-color-success)}.admonition.tip>.admonition-title,div.admonition.tip>.admonition-title{background-color:var(--pst-color-success-bg)}.admonition.tip>.admonition-title:after,div.admonition.tip>.admonition-title:after{color:var(--pst-color-success);content:var(--pst-icon-admonition-tip)}.admonition.important,div.admonition.important{border-color:var(--pst-color-attention)}.admonition.important>.admonition-title,div.admonition.important>.admonition-title{background-color:var(--pst-color-attention-bg)}.admonition.important>.admonition-title:after,div.admonition.important>.admonition-title:after{color:var(--pst-color-attention);content:var(--pst-icon-admonition-important)}.admonition.note,div.admonition.note{border-color:var(--pst-color-info)}.admonition.note>.admonition-title,div.admonition.note>.admonition-title{background-color:var(--pst-color-info-bg)}.admonition.note>.admonition-title:after,div.admonition.note>.admonition-title:after{color:var(--pst-color-info);content:var(--pst-icon-admonition-note)}.admonition.seealso,div.admonition.seealso{border-color:var(--pst-color-success)}.admonition.seealso>.admonition-title,div.admonition.seealso>.admonition-title{background-color:var(--pst-color-success-bg)}.admonition.seealso>.admonition-title:after,div.admonition.seealso>.admonition-title:after{color:var(--pst-color-success);content:var(--pst-icon-admonition-seealso)}.admonition.admonition-todo,div.admonition.admonition-todo{border-color:var(--pst-color-secondary)}.admonition.admonition-todo>.admonition-title,div.admonition.admonition-todo>.admonition-title{background-color:var(--pst-color-secondary-bg)}.admonition.admonition-todo>.admonition-title:after,div.admonition.admonition-todo>.admonition-title:after{color:var(--pst-color-secondary);content:var(--pst-icon-admonition-todo)}.admonition.sidebar,div.admonition.sidebar{border-width:0 0 0 .2rem;clear:both;float:right;margin-left:.5rem;margin-top:0;max-width:40%}.admonition.sidebar.attention,.admonition.sidebar.important,div.admonition.sidebar.attention,div.admonition.sidebar.important{border-color:var(--pst-color-attention)}.admonition.sidebar.caution,.admonition.sidebar.warning,div.admonition.sidebar.caution,div.admonition.sidebar.warning{border-color:var(--pst-color-warning)}.admonition.sidebar.danger,.admonition.sidebar.error,div.admonition.sidebar.danger,div.admonition.sidebar.error{border-color:var(--pst-color-danger)}.admonition.sidebar.hint,.admonition.sidebar.seealso,.admonition.sidebar.tip,div.admonition.sidebar.hint,div.admonition.sidebar.seealso,div.admonition.sidebar.tip{border-color:var(--pst-color-success)}.admonition.sidebar.note,.admonition.sidebar.todo,div.admonition.sidebar.note,div.admonition.sidebar.todo{border-color:var(--pst-color-info)}.admonition.sidebar p.admonition-title~*,div.admonition.sidebar p.admonition-title~*{margin-left:0;margin-right:0}aside.topic,div.topic,div.topic.contents,nav.contents{background-color:var(--pst-color-surface);border-color:var(--pst-color-border);border-radius:.25rem;box-shadow:0 .2rem .5rem var(--pst-color-shadow),0 0 .0625rem var(--pst-color-shadow)!important;display:flex;flex-direction:column;padding:1rem 1.25rem}aside.topic .topic-title,div.topic .topic-title,div.topic.contents .topic-title,nav.contents .topic-title{margin:0 0 .5rem}aside.topic p,div.topic p,div.topic.contents p,nav.contents p{color:var(--pst-color-on-surface)!important}aside.topic ul.simple,div.topic ul.simple,div.topic.contents ul.simple,nav.contents ul.simple{padding-left:1rem}aside.topic ul.simple ul,div.topic ul.simple ul,div.topic.contents ul.simple ul,nav.contents ul.simple ul{padding-left:2em}aside.sidebar{background-color:var(--pst-color-surface);border:1px solid var(--pst-color-border);border-radius:.25rem;margin-left:.5rem;padding:0}aside.sidebar>:last-child{padding-bottom:1rem}aside.sidebar p.sidebar-title{border-bottom:1px solid var(--pst-color-border);font-family:var(--pst-font-family-heading);font-weight:var(--pst-admonition-font-weight-heading);margin-bottom:0;padding-bottom:.5rem;padding-top:.5rem;position:relative}aside.sidebar>:not(.sidebar-title):first-child,aside.sidebar>p.sidebar-title+*{margin-top:1rem}aside.sidebar>*{padding-left:1rem;padding-right:1rem}p.rubric{display:flex;flex-direction:column}.seealso dd{margin-bottom:0;margin-top:0}table.field-list{border-collapse:separate;border-spacing:10px;margin-left:1px}table.field-list th.field-name{background-color:var(--pst-color-surface);padding:1px 8px 1px 5px;white-space:nowrap}table.field-list td.field-body p{font-style:italic}table.field-list td.field-body p>strong{font-style:normal}table.field-list td.field-body blockquote{border-left:none;margin:0 0 .3em;padding-left:30px}.table.autosummary td:first-child{white-space:nowrap}.sig{font-family:var(--pst-font-family-monospace)}.sig-inline.c-texpr,.sig-inline.cpp-texpr{font-family:unset}.sig.c .k,.sig.c .kt,.sig.c .m,.sig.c .s,.sig.c .sc,.sig.cpp .k,.sig.cpp .kt,.sig.cpp .m,.sig.cpp .s,.sig.cpp .sc{color:var(--pst-color-text-base)}.sig-name{color:var(--pst-color-inline-code)}.sig-param .default_value,.sig-param .o{color:var(--pst-color-text-muted);font-weight:400}dt:target,span.highlighted{background-color:var(--pst-color-target)}.viewcode-back{font-family:var(--pst-font-family-base)}.viewcode-block:target{background-color:var(--pst-color-target);border-bottom:1px solid var(--pst-color-border);border-top:1px solid var(--pst-color-border);position:relative}dl>dt>a:has(.viewcode-link){float:right}dl>dt>a:has(.viewcode-link) .viewcode-link{float:none}dl[class]:not(.option-list,.field-list,.footnote,.glossary,.simple){margin-bottom:3rem}dl[class]:not(.option-list,.field-list,.footnote,.glossary,.simple) dd{margin-left:2rem}dl[class]:not(.option-list,.field-list,.footnote,.glossary,.simple) dd>dl.simple>dt{display:flex}dl[class]:not(.option-list,.field-list,.footnote,.glossary,.simple) dl.field-list{display:grid;grid-template-columns:unset}dl[class]:not(.option-list,.field-list,.footnote,.glossary,.simple) dt.field-even,dl[class]:not(.option-list,.field-list,.footnote,.glossary,.simple) dt.field-odd{background-color:var(--pst-color-surface);margin-bottom:.1rem;margin-top:.2rem}div.highlight,div.literal-block-wrapper,div[class*=highlight-]{border-radius:.25rem;break-inside:avoid;display:flex;flex-direction:column;width:unset}div.literal-block-wrapper{border:1px solid var(--pst-color-border);border-radius:.25rem}div.literal-block-wrapper div.code-block-caption{border-bottom:1px solid var(--pst-color-border);font-size:1rem;font-weight:var(--pst-font-weight-caption);margin:0;padding:.5rem}div.literal-block-wrapper div.code-block-caption a.headerlink{font-size:inherit}div.literal-block-wrapper div[class*=highlight-]{border-radius:0;margin:0}div.literal-block-wrapper div[class*=highlight-] pre{border:none;box-shadow:none}code.literal{background-color:var(--pst-color-surface);border:1px solid var(--pst-color-border);border-radius:.25rem;padding:.1rem .25rem}a>code{color:var(--pst-color-inline-code-links)}html[data-theme=light] .highlight .nf{color:#0078a1!important}span.linenos{opacity:.8!important}figure>a,figure>a>img,figure>img,figure>video{display:block;margin-left:auto;margin-right:auto}figure a.headerlink{font-size:inherit;position:absolute}figure:hover a.headerlink{visibility:visible}figure figcaption{color:var(--pst-color-text-muted);font-family:var(--pst-font-family-heading);font-weight:var(--pst-font-weight-caption);margin-left:auto;margin-right:auto;margin-top:.3rem;text-align:center}figure figcaption>p:last-child{margin-bottom:0}figure figcaption p{display:inline-block;text-align:start}figure figcaption table.table{margin-left:auto;margin-right:auto;width:fit-content}dt.label>span.brackets:not(:only-child):before{content:"["}dt.label>span.brackets:not(:only-child):after{content:"]"}a.footnote-reference{font-size:small;vertical-align:super}aside.footnote{margin-bottom:.5rem}aside.footnote:last-child{margin-bottom:1rem}aside.footnote span.backrefs,aside.footnote span.label{font-weight:700}aside.footnote:target{background-color:var(--pst-color-target)}div.doctest>div.highlight span.gp,span.linenos,table.highlighttable td.linenos{user-select:none}dd{margin-bottom:10px;margin-left:30px;margin-top:3px}ol,ul{padding-inline-start:2rem}ol li>p:first-child,ul li>p:first-child{margin-bottom:.25rem;margin-top:.25rem}blockquote{background-color:var(--pst-color-surface);border-left:.25em solid var(--pst-color-blockquote-notch);border-radius:.25rem;color:var(--pst-color-text-muted);padding:1em;position:relative}blockquote p{color:var(--pst-color-text-base)}blockquote .line-block{margin:0}blockquote p:last-child{margin-bottom:0}blockquote:before{content:"";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%}blockquote a{color:var(--pst-color-inline-code-links)}blockquote:before{z-index:-1}span.guilabel{background-color:var(--pst-color-info-bg);border:1px solid var(--pst-color-info);border-radius:4px;font-size:80%;font-weight:700;margin:auto 2px;padding:2.4px 6px;position:relative}span.guilabel:before{content:"";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%;z-index:-1}a.reference.download:before{color:var(--pst-color-text-muted);content:var(--pst-icon-download);font:var(--fa-font-solid);font-size:.8em;padding:0 .25em}table{margin-left:auto;margin-right:auto}table.table-right{margin-right:0}table.table-left{margin-left:0}table caption{caption-side:top;color:var(--pst-color-text-muted);text-align:center}td.text-left,th.text-left{text-align:left}td.text-right,th.text-right{text-align:right}td.text-center,th.text-center{text-align:center}.table{--bs-table-bg:transparent;--bs-table-color:var( --pst-color-text-base );border:1px solid var(--pst-color-table-outer-border);color:var(--pst-color-table)}.table td~td,.table td~th,.table th~td,.table th~th{border-left:1px solid var(--pst-color-table-inner-border)}.table thead tr{background-color:var(--pst-color-table-heading-bg);border-bottom:2px solid var(--pst-color-primary)}.table tbody tr:nth-child(odd){background-color:var(--pst-color-table-row-zebra-low-bg)}.table tbody tr:nth-child(2n){background-color:var(--pst-color-table-row-zebra-high-bg)}.table tbody tr:hover{background-color:var(--pst-color-table-row-hover-bg)}.pst-scrollable-table-container{overflow-x:auto}.toctree-wrapper p.caption{font-size:1.5em;margin-bottom:0}.toctree-wrapper>ul{padding-left:0}.toctree-wrapper li[class^=toctree-l]{list-style:none;margin-bottom:.2em}.toctree-wrapper li[class^=toctree-l]>a{font-size:1.1em;list-style:none}.toctree-wrapper li[class^=toctree-l]>ul{list-style:none;padding-inline-start:1.5em}.toctree-wrapper .toctree-l1>a{font-size:1.3em}div.topic.contents ul.simple,nav.contents ul.simple{list-style:none;padding-left:0}div.math,span.math{align-items:center;display:flex;max-width:100%;overflow:hidden}span.math{display:inline-flex}div.math{flex-direction:row-reverse;gap:.5em}div.math span.eqno a.headerlink{font-size:1em;position:relative}div.math mjx-container{flex-grow:1;overflow:auto;padding-bottom:.2rem}div.math mjx-container mjx-assistive-mml{height:0}.ablog-sidebar-item h2,.ablog-sidebar-item h3{font-size:var(--pst-sidebar-header-font-size);margin-top:.5rem}.ablog-sidebar-item h2 a,.ablog-sidebar-item h3 a{color:var(--pst-color-text-base)}.ablog-sidebar-item ul{display:flex;flex-direction:column;gap:.5em;list-style:none;margin-bottom:0;overflow-y:hidden;padding-left:0}.ablog-sidebar-item ul.ablog-cloud{flex-flow:row wrap;gap:.5rem}.ablog-sidebar-item ul.ablog-cloud li{align-items:center;display:flex}.ablog__prev-next{display:flex;font-size:1.2em;padding:1rem 0}.ablog__prev-next>span{display:flex;max-width:45%}.ablog__prev-next>span a{align-items:center;display:flex;gap:1rem;line-height:1.5rem;margin-left:auto}.ablog__prev-next>span a i:before{color:var(--pst-color-text-base)}.ablog__prev-next span.ablog__prev i.fa-arrow-circle-left:before{content:var(--pst-icon-angle-left)}.ablog__prev-next span.ablog__spacer{display:none}.ablog__prev-next span.ablog__next{margin-left:auto;text-align:right}.ablog__prev-next span.ablog__next i.fa-arrow-circle-right:before{content:var(--pst-icon-angle-right)}.ablog__collection,.postlist{padding-left:0}.ablog__collection .ablog-post,.postlist .ablog-post{list-style:none}.ablog__collection .ablog-post .ablog-archive,.postlist .ablog-post .ablog-archive{display:flex;flex-flow:row wrap;font-size:.75rem;gap:1rem;list-style:none;padding-left:0}.ablog__collection .ablog-post .ablog-post-title,.postlist .ablog-post .ablog-post-title{font-size:1.25rem;margin-top:0}.ablog__collection .ablog-post .ablog-post-title a,.postlist .ablog-post .ablog-post-title a{font-weight:700}.ablog__collection .ablog-post .ablog-post-expand,.postlist .ablog-post .ablog-post-expand{margin-bottom:.5rem}.docutils.container{margin-left:unset;margin-right:unset;max-width:unset;padding-left:unset;padding-right:unset;width:unset}.btn{--bs-btn-focus-box-shadow:0 0 0 0.1875rem var(--pst-color-accent)}div.highlight button.copybtn{align-items:center;background-color:var(--pst-color-surface);border:none;display:flex;justify-content:center}div.highlight button.copybtn:not(.success){color:var(--pst-color-muted)}div.highlight button.copybtn:hover:not(.success){background-color:var(--pst-color-shadow);color:var(--pst-color-text)}div.highlight button.copybtn.o-tooltip--left:after{background-color:var(--pst-color-surface);color:var(--pst-color-text)}div.highlight button.copybtn:focus{opacity:1}div.highlight button.copybtn:focus-visible{outline:var(--pst-color-accent) solid .1875rem}div.highlight:has(button.copybtn){min-height:2em}#ethical-ad-placement .ethical-footer a,#ethical-ad-placement .ethical-footer a:active,#ethical-ad-placement .ethical-footer a:hover,#ethical-ad-placement .ethical-footer a:visited,#ethical-ad-placement .ethical-sidebar a,#ethical-ad-placement .ethical-sidebar a:active,#ethical-ad-placement .ethical-sidebar a:hover,#ethical-ad-placement .ethical-sidebar a:visited{color:var(--pst-color-text-base)}#ethical-ad-placement .ethical-footer,#ethical-ad-placement .ethical-sidebar{background-color:var(--pst-color-background);border:1px solid var(--pst-color-border);border-radius:5px;color:var(--pst-color-text-base);font-size:14px;line-height:20px}.bd-content div.jupyter_container{background-color:unset;border:none;box-shadow:none}.bd-content div.jupyter_container div.highlight,.bd-content div.jupyter_container div.output{border-radius:.25rem}.bd-content div.jupyter_container div.highlight{background-color:var(--pst-color-surface)}.bd-content div.jupyter_container .cell_input,.bd-content div.jupyter_container .cell_output{border-radius:.25rem}.bd-content div.jupyter_container .cell_input pre,.bd-content div.jupyter_container .cell_output pre{padding:1rem}html[data-theme=dark] div.graphviz>object.inheritance{color-scheme:normal;filter:brightness(.8) invert(.82) contrast(1.2)}.xr-wrap[hidden]{display:block!important}.jp-OutputArea-output.lm-Widget{overflow:auto}:root{--pst-teal-50:#f4fbfc;--pst-teal-100:#e9f6f8;--pst-teal-200:#d0ecf1;--pst-teal-300:#abdde6;--pst-teal-400:#3fb1c5;--pst-teal-500:#0a7d91;--pst-teal-600:#085d6c;--pst-teal-700:#064752;--pst-teal-800:#042c33;--pst-teal-900:#021b1f;--pst-violet-50:#f4eefb;--pst-violet-100:#e0c7ff;--pst-violet-200:#d5b4fd;--pst-violet-300:#b780ff;--pst-violet-400:#9c5ffd;--pst-violet-500:#8045e5;--pst-violet-600:#6432bd;--pst-violet-700:#4b258f;--pst-violet-800:#341a61;--pst-violet-900:#1e0e39;--pst-gray-50:#f9f9fa;--pst-gray-100:#f3f4f5;--pst-gray-200:#e5e7ea;--pst-gray-300:#d1d5da;--pst-gray-400:#9ca4af;--pst-gray-500:#677384;--pst-gray-600:#48566b;--pst-gray-700:#29313d;--pst-gray-800:#222832;--pst-gray-900:#14181e;--pst-pink-50:#fcf8fd;--pst-pink-100:#fcf0fa;--pst-pink-200:#f8dff5;--pst-pink-300:#f3c7ee;--pst-pink-400:#e47fd7;--pst-pink-500:#c132af;--pst-pink-600:#912583;--pst-pink-700:#6e1c64;--pst-pink-800:#46123f;--pst-pink-900:#2b0b27;--pst-foundation-white:#fff;--pst-foundation-black:#14181e}html:not([data-theme]){--pst-color-primary:#0a7d91;--pst-color-primary-bg:#d0ecf1;--pst-color-secondary:#8045e5;--pst-color-secondary-bg:#e0c7ff;--pst-color-accent:#c132af;--pst-color-accent-bg:#f8dff5;--pst-color-info:#276be9;--pst-color-info-bg:#dce7fc;--pst-color-warning:#f66a0a;--pst-color-warning-bg:#f8e3d0;--pst-color-success:#00843f;--pst-color-success-bg:#d6ece1;--pst-color-attention:var(--pst-color-warning);--pst-color-attention-bg:var(--pst-color-warning-bg);--pst-color-danger:#d72d47;--pst-color-danger-bg:#f9e1e4;--pst-color-text-base:#222832;--pst-color-text-muted:#48566b;--pst-color-heading-color:#fff;--pst-color-shadow:rgba(0,0,0,.1);--pst-color-border:#d1d5da;--pst-color-border-muted:rgba(23,23,26,.2);--pst-color-blockquote-notch:#677384;--pst-color-inline-code:#912583;--pst-color-inline-code-links:#085d6c;--pst-color-target:#f3cf95;--pst-color-table:#14181e;--pst-color-table-row-hover-bg:#b780ff;--pst-color-table-inner-border:#e5e7ea;--pst-color-background:#fff;--pst-color-on-background:#fff;--pst-color-surface:#f3f4f5;--pst-color-on-surface:#222832;--pst-color-link:var(--pst-color-primary);--pst-color-link-hover:var(--pst-color-secondary);--pst-color-table-outer-border:var(--pst-color-surface);--pst-color-table-heading-bg:var(--pst-color-surface);--pst-color-table-row-zebra-high-bg:var(--pst-color-on-background);--pst-color-table-row-zebra-low-bg:var(--pst-color-surface)}html:not([data-theme]) .only-dark,html:not([data-theme]) .only-dark~figcaption{display:none!important}html[data-theme=light]{--pst-color-primary-bg:#d0ecf1;--pst-color-secondary-bg:#e0c7ff;--pst-color-accent:#c132af;--pst-color-accent-bg:#f8dff5;--pst-color-info-bg:#dce7fc;--pst-color-warning-bg:#f8e3d0;--pst-color-success-bg:#d6ece1;--pst-color-attention:var(--pst-color-warning);--pst-color-attention-bg:var(--pst-color-warning-bg);--pst-color-danger-bg:#f9e1e4;--pst-color-text-base:#222832;--pst-color-text-muted:#48566b;--pst-color-heading-color:#fff;--pst-color-shadow:rgba(0,0,0,.1);--pst-color-border:#d1d5da;--pst-color-border-muted:rgba(23,23,26,.2);--pst-color-blockquote-notch:#677384;--pst-color-inline-code:#912583;--pst-color-inline-code-links:#085d6c;--pst-color-target:#f3cf95;--pst-color-table:#14181e;--pst-color-table-row-hover-bg:#b780ff;--pst-color-table-inner-border:#e5e7ea;--pst-color-background:#fff;--pst-color-on-background:#fff;--pst-color-surface:#f3f4f5;--pst-color-on-surface:#222832;--pst-color-link:var(--pst-color-primary);--pst-color-link-hover:var(--pst-color-secondary);--pst-color-table-outer-border:var(--pst-color-surface);--pst-color-table-heading-bg:var(--pst-color-surface);--pst-color-table-row-zebra-high-bg:var(--pst-color-on-background);--pst-color-table-row-zebra-low-bg:var(--pst-color-surface);color-scheme:light}html[data-theme=light] .only-dark,html[data-theme=light] .only-dark~figcaption{display:none!important}html[data-theme=dark]{--pst-color-primary-bg:#042c33;--pst-color-secondary-bg:#341a61;--pst-color-accent:#e47fd7;--pst-color-accent-bg:#46123f;--pst-color-info-bg:#06245d;--pst-color-warning-bg:#652a02;--pst-color-success-bg:#002f17;--pst-color-attention:var(--pst-color-warning);--pst-color-attention-bg:var(--pst-color-warning-bg);--pst-color-danger-bg:#4e111b;--pst-color-text-base:#ced6dd;--pst-color-text-muted:#9ca4af;--pst-color-heading-color:#14181e;--pst-color-shadow:rgba(0,0,0,.2);--pst-color-border:#48566b;--pst-color-border-muted:#29313d;--pst-color-blockquote-notch:#9ca4af;--pst-color-inline-code:#f3c7ee;--pst-color-inline-code-links:#3fb1c5;--pst-color-target:#675c04;--pst-color-table:#fff;--pst-color-table-row-hover-bg:#6432bd;--pst-color-table-inner-border:#364150;--pst-color-background:#14181e;--pst-color-on-background:#222832;--pst-color-surface:#29313d;--pst-color-on-surface:#f3f4f5;--pst-color-link:var(--pst-color-primary);--pst-color-link-hover:var(--pst-color-secondary);--pst-color-table-outer-border:var(--pst-color-surface);--pst-color-table-heading-bg:var(--pst-color-surface);--pst-color-table-row-zebra-high-bg:var(--pst-color-on-background);--pst-color-table-row-zebra-low-bg:var(--pst-color-surface);color-scheme:dark}html[data-theme=dark] .only-light,html[data-theme=dark] .only-light~figcaption{display:none!important}html[data-theme=dark] img:not(.only-dark,.dark-light){filter:brightness(.8) contrast(1.2)}html[data-theme=dark] .bd-content img:not(.only-dark,.dark-light){background-color:#fff;border-radius:.25rem}html[data-theme=dark] .MathJax_SVG *{fill:var(--pst-color-text-base)}.pst-color-primary{color:var(--pst-color-primary)}.pst-color-secondary{color:var(--pst-color-secondary)}.pst-color-accent{color:var(--pst-color-accent)}.pst-color-info{color:var(--pst-color-info)}.pst-color-warning{color:var(--pst-color-warning)}.pst-color-success{color:var(--pst-color-success)}.pst-color-attention{color:var(--pst-color-attention)}.pst-color-danger{color:var(--pst-color-danger)}.pst-color-text-base{color:var(--pst-color-text-base)}.pst-color-text-muted{color:var(--pst-color-text-muted)}.pst-color-heading-color{color:var(--pst-color-heading-color)}.pst-color-shadow{color:var(--pst-color-shadow)}.pst-color-border{color:var(--pst-color-border)}.pst-color-border-muted{color:var(--pst-color-border-muted)}.pst-color-blockquote-notch{color:var(--pst-color-blockquote-notch)}.pst-color-inline-code{color:var(--pst-color-inline-code)}.pst-color-inline-code-links{color:var(--pst-color-inline-code-links)}.pst-color-target{color:var(--pst-color-target)}.pst-color-table{color:var(--pst-color-table)}.pst-color-table-row-hover{color:var(--pst-color-table-row-hover)}.pst-color-table-inner-border{color:var(--pst-color-table-inner-border)}.pst-color-background{color:var(--pst-color-background)}.pst-color-on-background{color:var(--pst-color-on-background)}.pst-color-surface{color:var(--pst-color-surface)}.pst-color-on-surface{color:var(--pst-color-on-surface)}html[data-theme=light]{--pst-color-primary:#0a7d91;--pst-color-primary-text:#fff;--pst-color-primary-highlight:#053f49;--sd-color-primary:var(--pst-color-primary);--sd-color-primary-text:var(--pst-color-primary-text);--sd-color-primary-highlight:var(--pst-color-primary-highlight);--sd-color-primary-bg:#d0ecf1;--sd-color-primary-bg-text:#14181e;--pst-color-secondary:#8045e5;--pst-color-secondary-text:#fff;--pst-color-secondary-highlight:#591bc2;--sd-color-secondary:var(--pst-color-secondary);--sd-color-secondary-text:var(--pst-color-secondary-text);--sd-color-secondary-highlight:var(--pst-color-secondary-highlight);--sd-color-secondary-bg:#e0c7ff;--sd-color-secondary-bg-text:#14181e;--pst-color-success:#00843f;--pst-color-success-text:#fff;--pst-color-success-highlight:#00381a;--sd-color-success:var(--pst-color-success);--sd-color-success-text:var(--pst-color-success-text);--sd-color-success-highlight:var(--pst-color-success-highlight);--sd-color-success-bg:#d6ece1;--sd-color-success-bg-text:#14181e;--pst-color-info:#276be9;--pst-color-info-text:#fff;--pst-color-info-highlight:#124ab1;--sd-color-info:var(--pst-color-info);--sd-color-info-text:var(--pst-color-info-text);--sd-color-info-highlight:var(--pst-color-info-highlight);--sd-color-info-bg:#dce7fc;--sd-color-info-bg-text:#14181e;--pst-color-warning:#f66a0a;--pst-color-warning-text:#14181e;--pst-color-warning-highlight:#ad4a06;--sd-color-warning:var(--pst-color-warning);--sd-color-warning-text:var(--pst-color-warning-text);--sd-color-warning-highlight:var(--pst-color-warning-highlight);--sd-color-warning-bg:#f8e3d0;--sd-color-warning-bg-text:#14181e;--pst-color-danger:#d72d47;--pst-color-danger-text:#fff;--pst-color-danger-highlight:#9a1d30;--sd-color-danger:var(--pst-color-danger);--sd-color-danger-text:var(--pst-color-danger-text);--sd-color-danger-highlight:var(--pst-color-danger-highlight);--sd-color-danger-bg:#f9e1e4;--sd-color-danger-bg-text:#14181e;--pst-color-light:#f3f4f5;--pst-color-light-text:#14181e;--pst-color-light-highlight:#c9ced2;--sd-color-light:var(--pst-color-light);--sd-color-light-text:var(--pst-color-light-text);--sd-color-light-highlight:var(--pst-color-light-highlight);--sd-color-light-bg:#f7f7f8;--sd-color-light-bg-text:#14181e;--pst-color-muted:#29313d;--pst-color-muted-text:#fff;--pst-color-muted-highlight:#0a0c0f;--sd-color-muted:var(--pst-color-muted);--sd-color-muted-text:var(--pst-color-muted-text);--sd-color-muted-highlight:var(--pst-color-muted-highlight);--sd-color-muted-bg:#5a6c86;--sd-color-muted-bg-text:#fff;--pst-color-dark:#222832;--pst-color-dark-text:#fff;--pst-color-dark-highlight:#030404;--sd-color-dark:var(--pst-color-dark);--sd-color-dark-text:var(--pst-color-dark-text);--sd-color-dark-highlight:var(--pst-color-dark-highlight);--pst-color-black:#14181e;--pst-color-black-text:#fff;--pst-color-black-highlight:#000;--sd-color-black:var(--pst-color-black);--sd-color-black-text:var(--pst-color-black-text);--sd-color-black-highlight:var(--pst-color-black-highlight);--pst-color-white:#fff;--pst-color-white-text:#14181e;--pst-color-white-highlight:#d9d9d9;--sd-color-white:var(--pst-color-white);--sd-color-white-text:var(--pst-color-white-text);--sd-color-white-highlight:var(--pst-color-white-highlight)}html[data-theme=dark]{--pst-color-primary:#3fb1c5;--pst-color-primary-text:#14181e;--pst-color-primary-highlight:#2b7e8d;--sd-color-primary:var(--pst-color-primary);--sd-color-primary-text:var(--pst-color-primary-text);--sd-color-primary-highlight:var(--pst-color-primary-highlight);--sd-color-primary-bg:#042c33;--sd-color-primary-bg-text:#fff;--pst-color-secondary:#9c5ffd;--pst-color-secondary-text:#14181e;--pst-color-secondary-highlight:#6d13fc;--sd-color-secondary:var(--pst-color-secondary);--sd-color-secondary-text:var(--pst-color-secondary-text);--sd-color-secondary-highlight:var(--pst-color-secondary-highlight);--sd-color-secondary-bg:#341a61;--sd-color-secondary-bg-text:#fff;--pst-color-success:#5fb488;--pst-color-success-text:#14181e;--pst-color-success-highlight:#3f8762;--sd-color-success:var(--pst-color-success);--sd-color-success-text:var(--pst-color-success-text);--sd-color-success-highlight:var(--pst-color-success-highlight);--sd-color-success-bg:#002f17;--sd-color-success-bg-text:#fff;--pst-color-info:#79a3f2;--pst-color-info-text:#14181e;--pst-color-info-highlight:#3373eb;--sd-color-info:var(--pst-color-info);--sd-color-info-text:var(--pst-color-info-text);--sd-color-info-highlight:var(--pst-color-info-highlight);--sd-color-info-bg:#06245d;--sd-color-info-bg-text:#fff;--pst-color-warning:#ff9245;--pst-color-warning-text:#14181e;--pst-color-warning-highlight:#f86600;--sd-color-warning:var(--pst-color-warning);--sd-color-warning-text:var(--pst-color-warning-text);--sd-color-warning-highlight:var(--pst-color-warning-highlight);--sd-color-warning-bg:#652a02;--sd-color-warning-bg-text:#fff;--pst-color-danger:#e78894;--pst-color-danger-text:#14181e;--pst-color-danger-highlight:#da485b;--sd-color-danger:var(--pst-color-danger);--sd-color-danger-text:var(--pst-color-danger-text);--sd-color-danger-highlight:var(--pst-color-danger-highlight);--sd-color-danger-bg:#4e111b;--sd-color-danger-bg-text:#fff;--pst-color-light:#f3f4f5;--pst-color-light-text:#14181e;--pst-color-light-highlight:#c9ced2;--sd-color-light:var(--pst-color-light);--sd-color-light-text:var(--pst-color-light-text);--sd-color-light-highlight:var(--pst-color-light-highlight);--sd-color-light-bg:#a3abb2;--sd-color-light-bg-text:#14181e;--pst-color-muted:#f3f4f5;--pst-color-muted-text:#14181e;--pst-color-muted-highlight:#c9ced2;--sd-color-muted:var(--pst-color-muted);--sd-color-muted-text:var(--pst-color-muted-text);--sd-color-muted-highlight:var(--pst-color-muted-highlight);--sd-color-muted-bg:#1d222b;--sd-color-muted-bg-text:#fff;--pst-color-dark:#222832;--pst-color-dark-text:#fff;--pst-color-dark-highlight:#030404;--sd-color-dark:var(--pst-color-dark);--sd-color-dark-text:var(--pst-color-dark-text);--sd-color-dark-highlight:var(--pst-color-dark-highlight);--pst-color-black:#14181e;--pst-color-black-text:#fff;--pst-color-black-highlight:#000;--sd-color-black:var(--pst-color-black);--sd-color-black-text:var(--pst-color-black-text);--sd-color-black-highlight:var(--pst-color-black-highlight);--pst-color-white:#fff;--pst-color-white-text:#14181e;--pst-color-white-highlight:#d9d9d9;--sd-color-white:var(--pst-color-white);--sd-color-white-text:var(--pst-color-white-text);--sd-color-white-highlight:var(--pst-color-white-highlight)}html[data-theme=dark],html[data-theme=light]{--sd-color-card-border:var(--pst-color-border)}html[data-theme=light] .sd-shadow-lg,html[data-theme=light] .sd-shadow-md,html[data-theme=light] .sd-shadow-sm,html[data-theme=light] .sd-shadow-xs{box-shadow:0 .2rem .5rem var(--pst-color-shadow),0 0 .0625rem var(--pst-color-shadow)!important}.bd-content .sd-card{border:1px solid var(--pst-color-border)}.bd-content .sd-card .sd-card-header{background-color:var(--pst-color-panel-background);border-bottom:1px solid var(--pst-color-border)}.bd-content .sd-card .sd-card-footer{border-top:1px solid var(--pst-color-border)}.bd-content .sd-card .sd-card-body,.bd-content .sd-card .sd-card-footer{background-color:var(--pst-color-panel-background)}.bd-content .sd-card .sd-stretched-link:focus-visible{outline:none}.bd-content .sd-card .sd-stretched-link:focus-visible:after{border-radius:.25rem;outline:var(--pst-color-accent) solid .1875rem}.bd-content .sd-card.sd-card-hover:hover{border-color:var(--pst-color-link-hover)}.bd-content .sd-tab-set>input:checked+label{background-color:var(--pst-color-on-background);border-color:var(--pst-color-primary) var(--pst-color-primary) transparent;border-radius:.125rem .125rem 0 0;border-style:solid solid none;border-width:.125rem .125rem 0;color:var(--pst-color-primary);transform:translateY(.125rem)}.bd-content .sd-tab-set>input:focus-visible+label{background-color:var(--pst-color-accent-bg);border:.125rem solid var(--pst-color-accent);border-radius:.125rem;color:var(--pst-color-on-surface)}.bd-content .sd-tab-set>input:not(:checked,:focus-visible)+label:hover{border-color:transparent;color:var(--pst-color-secondary);text-decoration-line:underline;text-decoration-thickness:max(3px,.1875rem,.12em)}.bd-content .sd-tab-set>label{background-color:var(--pst-color-surface);border:.125rem solid transparent;border-radius:.125rem .125rem 0 0;color:var(--pst-color-on-surface);line-height:1.95;margin-inline-end:.25rem;padding:0 .75em}.bd-content .sd-tab-set .sd-tab-content,html[data-theme=dark] .bd-content .sd-tab-set>label{background-color:var(--pst-color-on-background)}.bd-content .sd-tab-set .sd-tab-content{border:.125rem solid var(--pst-color-primary);border-radius:.1875rem;box-shadow:unset;padding:.625rem}details.sd-dropdown{border:0!important;box-shadow:0 .2rem .5rem var(--pst-color-shadow),0 0 .0625rem var(--pst-color-shadow)!important}details.sd-dropdown summary.sd-card-header{--pst-sd-dropdown-color:var(--pst-gray-500);--pst-sd-dropdown-bg-color:var(--pst-color-surface);align-items:center;background-color:var(--pst-sd-dropdown-bg-color)!important;border:0!important;border-left:.2rem solid var(--pst-sd-dropdown-color)!important;display:flex;font-weight:600;padding-bottom:.5rem;padding-top:.5rem;position:relative}details.sd-dropdown summary.sd-card-header+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-card-border);border:0}details.sd-dropdown summary.sd-card-header.sd-bg-primary,details.sd-dropdown summary.sd-card-header.sd-bg-primary+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-primary);--pst-sd-dropdown-bg-color:var(--sd-color-primary-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-primary{color:var(--sd-color-primary-bg-text)!important}details.sd-dropdown summary.sd-card-header.sd-bg-secondary,details.sd-dropdown summary.sd-card-header.sd-bg-secondary+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-secondary);--pst-sd-dropdown-bg-color:var(--sd-color-secondary-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-secondary{color:var(--sd-color-secondary-bg-text)!important}details.sd-dropdown summary.sd-card-header.sd-bg-success,details.sd-dropdown summary.sd-card-header.sd-bg-success+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-success);--pst-sd-dropdown-bg-color:var(--sd-color-success-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-success{color:var(--sd-color-success-bg-text)!important}details.sd-dropdown summary.sd-card-header.sd-bg-info,details.sd-dropdown summary.sd-card-header.sd-bg-info+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-info);--pst-sd-dropdown-bg-color:var(--sd-color-info-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-info{color:var(--sd-color-info-bg-text)!important}details.sd-dropdown summary.sd-card-header.sd-bg-warning,details.sd-dropdown summary.sd-card-header.sd-bg-warning+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-warning);--pst-sd-dropdown-bg-color:var(--sd-color-warning-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-warning{color:var(--sd-color-warning-bg-text)!important}details.sd-dropdown summary.sd-card-header.sd-bg-danger,details.sd-dropdown summary.sd-card-header.sd-bg-danger+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-danger);--pst-sd-dropdown-bg-color:var(--sd-color-danger-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-danger{color:var(--sd-color-danger-bg-text)!important}details.sd-dropdown summary.sd-card-header.sd-bg-light,details.sd-dropdown summary.sd-card-header.sd-bg-light+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-light);--pst-sd-dropdown-bg-color:var(--sd-color-light-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-light{color:var(--sd-color-light-bg-text)!important}details.sd-dropdown summary.sd-card-header.sd-bg-muted,details.sd-dropdown summary.sd-card-header.sd-bg-muted+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-muted);--pst-sd-dropdown-bg-color:var(--sd-color-muted-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-muted{color:var(--sd-color-muted-bg-text)!important}details.sd-dropdown summary.sd-card-header.sd-bg-dark,details.sd-dropdown summary.sd-card-header.sd-bg-dark+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-dark);--pst-sd-dropdown-bg-color:var(--sd-color-dark-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-dark{color:var(--sd-color-dark-bg-text)!important}details.sd-dropdown summary.sd-card-header.sd-bg-black,details.sd-dropdown summary.sd-card-header.sd-bg-black+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-black);--pst-sd-dropdown-bg-color:var(--sd-color-black-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-black{color:var(--sd-color-black-bg-text)!important}details.sd-dropdown summary.sd-card-header.sd-bg-white,details.sd-dropdown summary.sd-card-header.sd-bg-white+div.sd-summary-content{--pst-sd-dropdown-color:var(--sd-color-white);--pst-sd-dropdown-bg-color:var(--sd-color-white-bg)}details.sd-dropdown summary.sd-card-header.sd-bg-text-white{color:var(--sd-color-white-bg-text)!important}details.sd-dropdown summary.sd-card-header:before{content:"";height:100%;left:0;pointer-events:none;position:absolute;top:0;width:100%;z-index:-1}details.sd-dropdown summary.sd-card-header+div.sd-summary-content{background-color:var(--pst-color-on-background);border-bottom-left-radius:calc(.25rem - 1px);border-left:.2rem solid var(--pst-sd-dropdown-color)!important}details.sd-dropdown summary.sd-card-header span.sd-summary-icon{align-items:center;color:var(--pst-sd-dropdown-color)!important;display:inline-flex}details.sd-dropdown summary.sd-card-header span.sd-summary-icon svg{opacity:1}details.sd-dropdown summary.sd-card-header .sd-summary-down,details.sd-dropdown summary.sd-card-header .sd-summary-up{top:.7rem}details.sd-dropdown summary.sd-card-header:focus-visible{outline:var(--pst-color-accent) solid .1875rem;outline-offset:-.1875rem}html .sd-btn{min-width:2.25rem;padding:.3125rem .75rem .4375rem}html .sd-btn:hover{color:var(--pst-color-link-hover);text-decoration:underline;text-decoration-skip-ink:none;text-decoration-thickness:max(1px,.0625rem);text-decoration-thickness:max(3px,.1875rem,.12em);text-decoration-thickness:1px;text-underline-offset:.1578em}html .sd-btn-outline-primary:focus-visible,html .sd-btn-primary:focus-visible{background-color:var(--sd-color-primary)!important;border-color:var(--sd-color-primary)!important;outline:var(--sd-color-primary) solid .1875rem;outline-offset:.1875rem}html .sd-btn-outline-secondary:focus-visible,html .sd-btn-secondary:focus-visible{background-color:var(--sd-color-secondary)!important;border-color:var(--sd-color-secondary)!important;outline:var(--sd-color-secondary) solid .1875rem;outline-offset:.1875rem}html .sd-btn-outline-success:focus-visible,html .sd-btn-success:focus-visible{background-color:var(--sd-color-success)!important;border-color:var(--sd-color-success)!important;outline:var(--sd-color-success) solid .1875rem;outline-offset:.1875rem}html .sd-btn-info:focus-visible,html .sd-btn-outline-info:focus-visible{background-color:var(--sd-color-info)!important;border-color:var(--sd-color-info)!important;outline:var(--sd-color-info) solid .1875rem;outline-offset:.1875rem}html .sd-btn-outline-warning:focus-visible,html .sd-btn-warning:focus-visible{background-color:var(--sd-color-warning)!important;border-color:var(--sd-color-warning)!important;outline:var(--sd-color-warning) solid .1875rem;outline-offset:.1875rem}html .sd-btn-danger:focus-visible,html .sd-btn-outline-danger:focus-visible{background-color:var(--sd-color-danger)!important;border-color:var(--sd-color-danger)!important;outline:var(--sd-color-danger) solid .1875rem;outline-offset:.1875rem}html .sd-btn-light:focus-visible,html .sd-btn-outline-light:focus-visible{background-color:var(--sd-color-light)!important;border-color:var(--sd-color-light)!important;outline:var(--sd-color-light) solid .1875rem;outline-offset:.1875rem}html .sd-btn-muted:focus-visible,html .sd-btn-outline-muted:focus-visible{background-color:var(--sd-color-muted)!important;border-color:var(--sd-color-muted)!important;outline:var(--sd-color-muted) solid .1875rem;outline-offset:.1875rem}html .sd-btn-dark:focus-visible,html .sd-btn-outline-dark:focus-visible{background-color:var(--sd-color-dark)!important;border-color:var(--sd-color-dark)!important;outline:var(--sd-color-dark) solid .1875rem;outline-offset:.1875rem}html .sd-btn-black:focus-visible,html .sd-btn-outline-black:focus-visible{background-color:var(--sd-color-black)!important;border-color:var(--sd-color-black)!important;outline:var(--sd-color-black) solid .1875rem;outline-offset:.1875rem}html .sd-btn-outline-white:focus-visible,html .sd-btn-white:focus-visible{background-color:var(--sd-color-white)!important;border-color:var(--sd-color-white)!important;outline:var(--sd-color-white) solid .1875rem;outline-offset:.1875rem}.bd-content .admonition button.toggle-button{color:inherit}.bd-content .admonition button.toggle-button.toggle-button-hidden .toggle-chevron-right{transform:rotate(90deg);transition:none}.bd-content .admonition button.toggle-button .toggle-chevron-right{transform:rotate(-90deg);transition:none}.bd-content .admonition:focus-within{overflow:visible}.bd-content .admonition:focus-within .admonition-title:focus-within:before{border:.1875rem solid var(--pst-color-accent);border-radius:.1875rem;content:"";height:100%;transform:translateX(-.2rem);width:calc(100% + .2rem)}.bd-content .admonition:focus-within:not(.toggle-hidden) .admonition-title:focus-within:before{border-bottom-left-radius:0;border-bottom-right-radius:0}.bd-content details.toggle-details summary{border-left:3px solid var(--pst-color-primary)}.bd-content details.toggle-details summary .toggle-chevron-right{transform:rotate(90deg);transition:none}.bd-content details.toggle-details[open] .toggle-chevron-right{transform:rotate(-90deg);transition:none}.bd-content details.toggle-details[open] :focus-visible{border-bottom-left-radius:0;border-bottom-right-radius:0}html .jp-RenderedHTMLCommon,html div.rendered_html{margin:.1875rem}html .jp-RenderedHTMLCommon table,html div.rendered_html table{table-layout:auto}.bd-content .nboutput .output_area .jp-RenderedHTMLCommon table.dataframe,.bd-content .nboutput .output_area.rendered_html table.dataframe{border:1px solid var(--pst-color-table-outer-border);color:var(--pst-color-table)}.bd-content .nboutput .output_area .jp-RenderedHTMLCommon table.dataframe td~td,.bd-content .nboutput .output_area .jp-RenderedHTMLCommon table.dataframe td~th,.bd-content .nboutput .output_area .jp-RenderedHTMLCommon table.dataframe th~td,.bd-content .nboutput .output_area .jp-RenderedHTMLCommon table.dataframe th~th,.bd-content .nboutput .output_area.rendered_html table.dataframe td~td,.bd-content .nboutput .output_area.rendered_html table.dataframe td~th,.bd-content .nboutput .output_area.rendered_html table.dataframe th~td,.bd-content .nboutput .output_area.rendered_html table.dataframe th~th{border-left:1px solid var(--pst-color-table-inner-border)}.bd-content .nboutput .output_area .jp-RenderedHTMLCommon table.dataframe thead tr,.bd-content .nboutput .output_area.rendered_html table.dataframe thead tr{background-color:var(--pst-color-table-heading-bg);border-bottom:2px solid var(--pst-color-primary)}.bd-content .nboutput .output_area .jp-RenderedHTMLCommon table.dataframe tbody tr:nth-child(odd),.bd-content .nboutput .output_area.rendered_html table.dataframe tbody tr:nth-child(odd){background-color:var(--pst-color-table-row-zebra-low-bg)}.bd-content .nboutput .output_area .jp-RenderedHTMLCommon table.dataframe tbody tr:nth-child(2n),.bd-content .nboutput .output_area.rendered_html table.dataframe tbody tr:nth-child(2n){background-color:var(--pst-color-table-row-zebra-high-bg)}.bd-content .nboutput .output_area .jp-RenderedHTMLCommon table.dataframe tbody tr:hover,.bd-content .nboutput .output_area.rendered_html table.dataframe tbody tr:hover{background-color:var(--pst-color-table-row-hover-bg)}html[data-theme=dark] .bd-content .nboutput .output_area .widget-subarea,html[data-theme=dark] .bd-content .nboutput .output_area.rendered_html:not(:has(table.dataframe)){background-color:var(--pst-color-text-base);border-radius:.25rem;color:var(--pst-color-on-background);padding:.5rem}html[data-theme=dark] .bd-content .nboutput .output_area.stderr{background-color:var(--pst-color-danger)}div.nblast.container{margin-bottom:1rem}div.cell_output .output{max-width:100%;overflow-x:auto}.bd-content div.cell_output table.dataframe{border:1px solid var(--pst-color-table-outer-border);color:var(--pst-color-table)}.bd-content div.cell_output table.dataframe td~td,.bd-content div.cell_output table.dataframe td~th,.bd-content div.cell_output table.dataframe th~td,.bd-content div.cell_output table.dataframe th~th{border-left:1px solid var(--pst-color-table-inner-border)}.bd-content div.cell_output table.dataframe thead tr{background-color:var(--pst-color-table-heading-bg);border-bottom:2px solid var(--pst-color-primary)}.bd-content div.cell_output table.dataframe tbody tr:nth-child(odd){background-color:var(--pst-color-table-row-zebra-low-bg)}.bd-content div.cell_output table.dataframe tbody tr:nth-child(2n){background-color:var(--pst-color-table-row-zebra-high-bg)}.bd-content div.cell_output table.dataframe tbody tr:hover{background-color:var(--pst-color-table-row-hover-bg)}html[data-theme=dark] .bd-content div.cell_output .text_html:not(:has(table.dataframe)),html[data-theme=dark] .bd-content div.cell_output .widget-subarea,html[data-theme=dark] .bd-content div.cell_output img{background-color:var(--pst-color-text-base);border-radius:.25rem;color:var(--pst-color-on-background);padding:.5rem}.bd-content div.cell_input{display:flex;flex-direction:column;justify-content:stretch}.bd-content div.cell_input,.bd-content div.output{border-radius:.25rem}.bd-content div.output table{table-layout:auto}html[data-theme=dark] .bd-content img.leaflet-tile.leaflet-tile-loaded{border-radius:0;padding:0}.bd-search-container div#search-results>h2{font-size:var(--pst-font-size-icon);margin-top:1rem}.bd-search-container div#search-results p.search-summary{color:var(--pst-color-text-muted)}.bd-search-container ul.search{list-style:none;margin:0}.bd-search-container ul.search li{background-image:none;border-top:1px solid var(--pst-color-text-muted);margin:1rem 0;padding:1rem 0}.bd-search-container ul.search li>a{font-size:1.2em}.bd-search-container ul.search li div.context,.bd-search-container ul.search li p.context{color:var(--pst-color-text-base);margin:.5em 0 0}.bd-search-container ul.search li div.context a:before,.bd-search-container ul.search li p.context a:before{color:var(--pst-color-text-muted);content:"#";padding-right:.2em}
/*# sourceMappingURL=pydata-sphinx-theme.css.map*/

/*!
 * Bootstrap  v5.3.3 (https://getbootstrap.com/)
 * Copyright 2011-2024 The Bootstrap Authors
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 */:root,[data-bs-theme=light]{--bs-blue:#0d6efd;--bs-indigo:#6610f2;--bs-purple:#6f42c1;--bs-pink:#d63384;--bs-red:#dc3545;--bs-orange:#fd7e14;--bs-yellow:#ffc107;--bs-green:#198754;--bs-teal:#20c997;--bs-cyan:#0dcaf0;--bs-black:#000;--bs-white:#fff;--bs-gray:#6c757d;--bs-gray-dark:#343a40;--bs-gray-100:#f8f9fa;--bs-gray-200:#e9ecef;--bs-gray-300:#dee2e6;--bs-gray-400:#ced4da;--bs-gray-500:#adb5bd;--bs-gray-600:#6c757d;--bs-gray-700:#495057;--bs-gray-800:#343a40;--bs-gray-900:#212529;--bs-primary:#0d6efd;--bs-secondary:#6c757d;--bs-success:#198754;--bs-info:#0dcaf0;--bs-warning:#ffc107;--bs-danger:#dc3545;--bs-light:#f8f9fa;--bs-dark:#212529;--bs-primary-rgb:13,110,253;--bs-secondary-rgb:108,117,125;--bs-success-rgb:25,135,84;--bs-info-rgb:13,202,240;--bs-warning-rgb:255,193,7;--bs-danger-rgb:220,53,69;--bs-light-rgb:248,249,250;--bs-dark-rgb:33,37,41;--bs-primary-text-emphasis:#052c65;--bs-secondary-text-emphasis:#2b2f32;--bs-success-text-emphasis:#0a3622;--bs-info-text-emphasis:#055160;--bs-warning-text-emphasis:#664d03;--bs-danger-text-emphasis:#58151c;--bs-light-text-emphasis:#495057;--bs-dark-text-emphasis:#495057;--bs-primary-bg-subtle:#cfe2ff;--bs-secondary-bg-subtle:#e2e3e5;--bs-success-bg-subtle:#d1e7dd;--bs-info-bg-subtle:#cff4fc;--bs-warning-bg-subtle:#fff3cd;--bs-danger-bg-subtle:#f8d7da;--bs-light-bg-subtle:#fcfcfd;--bs-dark-bg-subtle:#ced4da;--bs-primary-border-subtle:#9ec5fe;--bs-secondary-border-subtle:#c4c8cb;--bs-success-border-subtle:#a3cfbb;--bs-info-border-subtle:#9eeaf9;--bs-warning-border-subtle:#ffe69c;--bs-danger-border-subtle:#f1aeb5;--bs-light-border-subtle:#e9ecef;--bs-dark-border-subtle:#adb5bd;--bs-white-rgb:255,255,255;--bs-black-rgb:0,0,0;--bs-font-sans-serif:system-ui,-apple-system,"Segoe UI",Roboto,"Helvetica Neue","Noto Sans","Liberation Sans",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--bs-font-monospace:SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;--bs-gradient:linear-gradient(180deg,hsla(0,0%,100%,.15),hsla(0,0%,100%,0));--bs-body-font-family:var(--bs-font-sans-serif);--bs-body-font-size:1rem;--bs-body-font-weight:400;--bs-body-line-height:1.5;--bs-body-color:#212529;--bs-body-color-rgb:33,37,41;--bs-body-bg:#fff;--bs-body-bg-rgb:255,255,255;--bs-emphasis-color:#000;--bs-emphasis-color-rgb:0,0,0;--bs-secondary-color:rgba(33,37,41,.75);--bs-secondary-color-rgb:33,37,41;--bs-secondary-bg:#e9ecef;--bs-secondary-bg-rgb:233,236,239;--bs-tertiary-color:rgba(33,37,41,.5);--bs-tertiary-color-rgb:33,37,41;--bs-tertiary-bg:#f8f9fa;--bs-tertiary-bg-rgb:248,249,250;--bs-heading-color:inherit;--bs-link-color:#0d6efd;--bs-link-color-rgb:13,110,253;--bs-link-decoration:underline;--bs-link-hover-color:#0a58ca;--bs-link-hover-color-rgb:10,88,202;--bs-code-color:#d63384;--bs-highlight-color:#212529;--bs-highlight-bg:#fff3cd;--bs-border-width:1px;--bs-border-style:solid;--bs-border-color:#dee2e6;--bs-border-color-translucent:rgba(0,0,0,.175);--bs-border-radius:0.375rem;--bs-border-radius-sm:0.25rem;--bs-border-radius-lg:0.5rem;--bs-border-radius-xl:1rem;--bs-border-radius-xxl:2rem;--bs-border-radius-2xl:var(--bs-border-radius-xxl);--bs-border-radius-pill:50rem;--bs-box-shadow:0 0.5rem 1rem rgba(0,0,0,.15);--bs-box-shadow-sm:0 0.125rem 0.25rem rgba(0,0,0,.075);--bs-box-shadow-lg:0 1rem 3rem rgba(0,0,0,.175);--bs-box-shadow-inset:inset 0 1px 2px rgba(0,0,0,.075);--bs-focus-ring-width:0.1875rem;--bs-focus-ring-opacity:1;--bs-focus-ring-color:var(--pst-color-accent);--bs-form-valid-color:#198754;--bs-form-valid-border-color:#198754;--bs-form-invalid-color:#dc3545;--bs-form-invalid-border-color:#dc3545}[data-bs-theme=dark]{--bs-body-color:#dee2e6;--bs-body-color-rgb:222,226,230;--bs-body-bg:#212529;--bs-body-bg-rgb:33,37,41;--bs-emphasis-color:#fff;--bs-emphasis-color-rgb:255,255,255;--bs-secondary-color:rgba(222,226,230,.75);--bs-secondary-color-rgb:222,226,230;--bs-secondary-bg:#343a40;--bs-secondary-bg-rgb:52,58,64;--bs-tertiary-color:rgba(222,226,230,.5);--bs-tertiary-color-rgb:222,226,230;--bs-tertiary-bg:#2b3035;--bs-tertiary-bg-rgb:43,48,53;--bs-primary-text-emphasis:#6ea8fe;--bs-secondary-text-emphasis:#a7acb1;--bs-success-text-emphasis:#75b798;--bs-info-text-emphasis:#6edff6;--bs-warning-text-emphasis:#ffda6a;--bs-danger-text-emphasis:#ea868f;--bs-light-text-emphasis:#f8f9fa;--bs-dark-text-emphasis:#dee2e6;--bs-primary-bg-subtle:#031633;--bs-secondary-bg-subtle:#161719;--bs-success-bg-subtle:#051b11;--bs-info-bg-subtle:#032830;--bs-warning-bg-subtle:#332701;--bs-danger-bg-subtle:#2c0b0e;--bs-light-bg-subtle:#343a40;--bs-dark-bg-subtle:#1a1d20;--bs-primary-border-subtle:#084298;--bs-secondary-border-subtle:#41464b;--bs-success-border-subtle:#0f5132;--bs-info-border-subtle:#087990;--bs-warning-border-subtle:#997404;--bs-danger-border-subtle:#842029;--bs-light-border-subtle:#495057;--bs-dark-border-subtle:#343a40;--bs-heading-color:inherit;--bs-link-color:#6ea8fe;--bs-link-hover-color:#8bb9fe;--bs-link-color-rgb:110,168,254;--bs-link-hover-color-rgb:139,185,254;--bs-code-color:#e685b5;--bs-highlight-color:#dee2e6;--bs-highlight-bg:#664d03;--bs-border-color:#495057;--bs-border-color-translucent:hsla(0,0%,100%,.15);--bs-form-valid-color:#75b798;--bs-form-valid-border-color:#75b798;--bs-form-invalid-color:#ea868f;--bs-form-invalid-border-color:#ea868f;color-scheme:dark}*,:after,:before{box-sizing:border-box}@media(prefers-reduced-motion:no-preference){:root{scroll-behavior:smooth}}body{-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0);background-color:var(--bs-body-bg);color:var(--bs-body-color);font-family:var(--bs-body-font-family);font-size:var(--bs-body-font-size);font-weight:var(--bs-body-font-weight);line-height:var(--bs-body-line-height);margin:0;text-align:var(--bs-body-text-align)}hr{border:0;border-top:var(--bs-border-width) solid;color:inherit;margin:1rem 0;opacity:.25}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{color:var(--bs-heading-color);font-weight:500;line-height:1.2;margin-bottom:.5rem;margin-top:0}.h1,h1{font-size:calc(1.375rem + 1.5vw)}@media(min-width:1200px){.h1,h1{font-size:2.5rem}}.h2,h2{font-size:calc(1.325rem + .9vw)}@media(min-width:1200px){.h2,h2{font-size:2rem}}.h3,h3{font-size:calc(1.3rem + .6vw)}@media(min-width:1200px){.h3,h3{font-size:1.75rem}}.h4,h4{font-size:calc(1.275rem + .3vw)}@media(min-width:1200px){.h4,h4{font-size:1.5rem}}.h5,h5{font-size:1.25rem}.h6,h6{font-size:1rem}p{margin-bottom:1rem;margin-top:0}abbr[title]{cursor:help;text-decoration:underline dotted;text-decoration-skip-ink:none}address{font-style:normal;line-height:inherit;margin-bottom:1rem}ol,ul{padding-left:2rem}dl,ol,ul{margin-bottom:1rem;margin-top:0}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}.small,small{font-size:.875em}.mark,mark{background-color:var(--bs-highlight-bg);color:var(--bs-highlight-color);padding:.1875em}sub,sup{font-size:.75em;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:rgba(var(--bs-link-color-rgb),var(--bs-link-opacity,1));text-decoration:underline}a:hover{--bs-link-color-rgb:var(--bs-link-hover-color-rgb)}a:not([href]):not([class]),a:not([href]):not([class]):hover{color:inherit;text-decoration:none}code,kbd,pre,samp{font-family:var(--bs-font-monospace);font-size:1em}pre{display:block;font-size:.875em;margin-bottom:1rem;margin-top:0;overflow:auto}pre code{color:inherit;font-size:inherit;word-break:normal}code{word-wrap:break-word;color:var(--bs-code-color);font-size:.875em}a>code{color:inherit}kbd{background-color:var(--bs-body-color);border-radius:.25rem;color:var(--bs-body-bg);font-size:.875em;padding:.1875rem .375rem}kbd kbd{font-size:1em;padding:0}figure{margin:0 0 1rem}img,svg{vertical-align:middle}table{border-collapse:collapse;caption-side:bottom}caption{color:var(--bs-secondary-color);padding-bottom:.5rem;padding-top:.5rem;text-align:left}th{text-align:inherit;text-align:-webkit-match-parent}tbody,td,tfoot,th,thead,tr{border:0 solid;border-color:inherit}label{display:inline-block}button{border-radius:0}button:focus:not(:focus-visible){outline:0}button,input,optgroup,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit;margin:0}button,select{text-transform:none}[role=button]{cursor:pointer}select{word-wrap:normal}select:disabled{opacity:1}[list]:not([type=date]):not([type=datetime-local]):not([type=month]):not([type=week]):not([type=time])::-webkit-calendar-picker-indicator{display:none!important}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]:not(:disabled),[type=reset]:not(:disabled),[type=submit]:not(:disabled),button:not(:disabled){cursor:pointer}::-moz-focus-inner{border-style:none;padding:0}textarea{resize:vertical}fieldset{border:0;margin:0;min-width:0;padding:0}legend{float:left;font-size:calc(1.275rem + .3vw);line-height:inherit;margin-bottom:.5rem;padding:0;width:100%}@media(min-width:1200px){legend{font-size:1.5rem}}legend+*{clear:left}::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-fields-wrapper,::-webkit-datetime-edit-hour-field,::-webkit-datetime-edit-minute,::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-text,::-webkit-datetime-edit-year-field{padding:0}::-webkit-inner-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-color-swatch-wrapper{padding:0}::file-selector-button{-webkit-appearance:button;font:inherit}output{display:inline-block}iframe{border:0}summary{cursor:pointer;display:list-item}progress{vertical-align:baseline}[hidden]{display:none!important}.lead{font-size:1.25rem;font-weight:300}.display-1{font-size:calc(1.625rem + 4.5vw);font-weight:300;line-height:1.2}@media(min-width:1200px){.display-1{font-size:5rem}}.display-2{font-size:calc(1.575rem + 3.9vw);font-weight:300;line-height:1.2}@media(min-width:1200px){.display-2{font-size:4.5rem}}.display-3{font-size:calc(1.525rem + 3.3vw);font-weight:300;line-height:1.2}@media(min-width:1200px){.display-3{font-size:4rem}}.display-4{font-size:calc(1.475rem + 2.7vw);font-weight:300;line-height:1.2}@media(min-width:1200px){.display-4{font-size:3.5rem}}.display-5{font-size:calc(1.425rem + 2.1vw);font-weight:300;line-height:1.2}@media(min-width:1200px){.display-5{font-size:3rem}}.display-6{font-size:calc(1.375rem + 1.5vw);font-weight:300;line-height:1.2}@media(min-width:1200px){.display-6{font-size:2.5rem}}.list-inline,.list-unstyled{list-style:none;padding-left:0}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:.5rem}.initialism{font-size:.875em;text-transform:uppercase}.blockquote{font-size:1.25rem;margin-bottom:1rem}.blockquote>:last-child{margin-bottom:0}.blockquote-footer{color:#6c757d;font-size:.875em;margin-bottom:1rem;margin-top:-1rem}.blockquote-footer:before{content:"— "}.img-fluid,.img-thumbnail{height:auto;max-width:100%}.img-thumbnail{background-color:var(--bs-body-bg);border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);padding:.25rem}.figure{display:inline-block}.figure-img{line-height:1;margin-bottom:.5rem}.figure-caption{color:var(--bs-secondary-color);font-size:.875em}.container,.container-fluid,.container-lg,.container-md,.container-sm,.container-xl{--bs-gutter-x:1.5rem;--bs-gutter-y:0;margin-left:auto;margin-right:auto;padding-left:calc(var(--bs-gutter-x)*.5);padding-right:calc(var(--bs-gutter-x)*.5);width:100%}@media(min-width:540px){.container,.container-sm{max-width:540px}}@media(min-width:720px){.container,.container-md,.container-sm{max-width:720px}}@media(min-width:960px){.container,.container-lg,.container-md,.container-sm{max-width:960px}}@media(min-width:1200px){.container,.container-lg,.container-md,.container-sm,.container-xl{max-width:1400px}}:root{--bs-breakpoint-xs:0;--bs-breakpoint-sm:540px;--bs-breakpoint-md:720px;--bs-breakpoint-lg:960px;--bs-breakpoint-xl:1200px}.row{--bs-gutter-x:1.5rem;--bs-gutter-y:0;display:flex;flex-wrap:wrap;margin-left:calc(var(--bs-gutter-x)*-.5);margin-right:calc(var(--bs-gutter-x)*-.5);margin-top:calc(var(--bs-gutter-y)*-1)}.row>*{flex-shrink:0;margin-top:var(--bs-gutter-y);max-width:100%;padding-left:calc(var(--bs-gutter-x)*.5);padding-right:calc(var(--bs-gutter-x)*.5);width:100%}.col{flex:1 0 0%}.row-cols-auto>*{flex:0 0 auto;width:auto}.row-cols-1>*{flex:0 0 auto;width:100%}.row-cols-2>*{flex:0 0 auto;width:50%}.row-cols-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-4>*{flex:0 0 auto;width:25%}.row-cols-5>*{flex:0 0 auto;width:20%}.row-cols-6>*{flex:0 0 auto;width:16.66666667%}.col-auto{flex:0 0 auto;width:auto}.col-1{flex:0 0 auto;width:8.33333333%}.col-2{flex:0 0 auto;width:16.66666667%}.col-3{flex:0 0 auto;width:25%}.col-4{flex:0 0 auto;width:33.33333333%}.col-5{flex:0 0 auto;width:41.66666667%}.col-6{flex:0 0 auto;width:50%}.col-7{flex:0 0 auto;width:58.33333333%}.col-8{flex:0 0 auto;width:66.66666667%}.col-9{flex:0 0 auto;width:75%}.col-10{flex:0 0 auto;width:83.33333333%}.col-11{flex:0 0 auto;width:91.66666667%}.col-12{flex:0 0 auto;width:100%}.offset-1{margin-left:8.33333333%}.offset-2{margin-left:16.66666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.33333333%}.offset-5{margin-left:41.66666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.33333333%}.offset-8{margin-left:66.66666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.33333333%}.offset-11{margin-left:91.66666667%}.g-0,.gx-0{--bs-gutter-x:0}.g-0,.gy-0{--bs-gutter-y:0}.g-1,.gx-1{--bs-gutter-x:0.25rem}.g-1,.gy-1{--bs-gutter-y:0.25rem}.g-2,.gx-2{--bs-gutter-x:0.5rem}.g-2,.gy-2{--bs-gutter-y:0.5rem}.g-3,.gx-3{--bs-gutter-x:1rem}.g-3,.gy-3{--bs-gutter-y:1rem}.g-4,.gx-4{--bs-gutter-x:1.5rem}.g-4,.gy-4{--bs-gutter-y:1.5rem}.g-5,.gx-5{--bs-gutter-x:3rem}.g-5,.gy-5{--bs-gutter-y:3rem}@media(min-width:540px){.col-sm{flex:1 0 0%}.row-cols-sm-auto>*{flex:0 0 auto;width:auto}.row-cols-sm-1>*{flex:0 0 auto;width:100%}.row-cols-sm-2>*{flex:0 0 auto;width:50%}.row-cols-sm-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-sm-4>*{flex:0 0 auto;width:25%}.row-cols-sm-5>*{flex:0 0 auto;width:20%}.row-cols-sm-6>*{flex:0 0 auto;width:16.66666667%}.col-sm-auto{flex:0 0 auto;width:auto}.col-sm-1{flex:0 0 auto;width:8.33333333%}.col-sm-2{flex:0 0 auto;width:16.66666667%}.col-sm-3{flex:0 0 auto;width:25%}.col-sm-4{flex:0 0 auto;width:33.33333333%}.col-sm-5{flex:0 0 auto;width:41.66666667%}.col-sm-6{flex:0 0 auto;width:50%}.col-sm-7{flex:0 0 auto;width:58.33333333%}.col-sm-8{flex:0 0 auto;width:66.66666667%}.col-sm-9{flex:0 0 auto;width:75%}.col-sm-10{flex:0 0 auto;width:83.33333333%}.col-sm-11{flex:0 0 auto;width:91.66666667%}.col-sm-12{flex:0 0 auto;width:100%}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.33333333%}.offset-sm-2{margin-left:16.66666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.33333333%}.offset-sm-5{margin-left:41.66666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.33333333%}.offset-sm-8{margin-left:66.66666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.33333333%}.offset-sm-11{margin-left:91.66666667%}.g-sm-0,.gx-sm-0{--bs-gutter-x:0}.g-sm-0,.gy-sm-0{--bs-gutter-y:0}.g-sm-1,.gx-sm-1{--bs-gutter-x:0.25rem}.g-sm-1,.gy-sm-1{--bs-gutter-y:0.25rem}.g-sm-2,.gx-sm-2{--bs-gutter-x:0.5rem}.g-sm-2,.gy-sm-2{--bs-gutter-y:0.5rem}.g-sm-3,.gx-sm-3{--bs-gutter-x:1rem}.g-sm-3,.gy-sm-3{--bs-gutter-y:1rem}.g-sm-4,.gx-sm-4{--bs-gutter-x:1.5rem}.g-sm-4,.gy-sm-4{--bs-gutter-y:1.5rem}.g-sm-5,.gx-sm-5{--bs-gutter-x:3rem}.g-sm-5,.gy-sm-5{--bs-gutter-y:3rem}}@media(min-width:720px){.col-md{flex:1 0 0%}.row-cols-md-auto>*{flex:0 0 auto;width:auto}.row-cols-md-1>*{flex:0 0 auto;width:100%}.row-cols-md-2>*{flex:0 0 auto;width:50%}.row-cols-md-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-md-4>*{flex:0 0 auto;width:25%}.row-cols-md-5>*{flex:0 0 auto;width:20%}.row-cols-md-6>*{flex:0 0 auto;width:16.66666667%}.col-md-auto{flex:0 0 auto;width:auto}.col-md-1{flex:0 0 auto;width:8.33333333%}.col-md-2{flex:0 0 auto;width:16.66666667%}.col-md-3{flex:0 0 auto;width:25%}.col-md-4{flex:0 0 auto;width:33.33333333%}.col-md-5{flex:0 0 auto;width:41.66666667%}.col-md-6{flex:0 0 auto;width:50%}.col-md-7{flex:0 0 auto;width:58.33333333%}.col-md-8{flex:0 0 auto;width:66.66666667%}.col-md-9{flex:0 0 auto;width:75%}.col-md-10{flex:0 0 auto;width:83.33333333%}.col-md-11{flex:0 0 auto;width:91.66666667%}.col-md-12{flex:0 0 auto;width:100%}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.33333333%}.offset-md-2{margin-left:16.66666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.33333333%}.offset-md-5{margin-left:41.66666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.33333333%}.offset-md-8{margin-left:66.66666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.33333333%}.offset-md-11{margin-left:91.66666667%}.g-md-0,.gx-md-0{--bs-gutter-x:0}.g-md-0,.gy-md-0{--bs-gutter-y:0}.g-md-1,.gx-md-1{--bs-gutter-x:0.25rem}.g-md-1,.gy-md-1{--bs-gutter-y:0.25rem}.g-md-2,.gx-md-2{--bs-gutter-x:0.5rem}.g-md-2,.gy-md-2{--bs-gutter-y:0.5rem}.g-md-3,.gx-md-3{--bs-gutter-x:1rem}.g-md-3,.gy-md-3{--bs-gutter-y:1rem}.g-md-4,.gx-md-4{--bs-gutter-x:1.5rem}.g-md-4,.gy-md-4{--bs-gutter-y:1.5rem}.g-md-5,.gx-md-5{--bs-gutter-x:3rem}.g-md-5,.gy-md-5{--bs-gutter-y:3rem}}@media(min-width:960px){.col-lg{flex:1 0 0%}.row-cols-lg-auto>*{flex:0 0 auto;width:auto}.row-cols-lg-1>*{flex:0 0 auto;width:100%}.row-cols-lg-2>*{flex:0 0 auto;width:50%}.row-cols-lg-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-lg-4>*{flex:0 0 auto;width:25%}.row-cols-lg-5>*{flex:0 0 auto;width:20%}.row-cols-lg-6>*{flex:0 0 auto;width:16.66666667%}.col-lg-auto{flex:0 0 auto;width:auto}.col-lg-1{flex:0 0 auto;width:8.33333333%}.col-lg-2{flex:0 0 auto;width:16.66666667%}.col-lg-3{flex:0 0 auto;width:25%}.col-lg-4{flex:0 0 auto;width:33.33333333%}.col-lg-5{flex:0 0 auto;width:41.66666667%}.col-lg-6{flex:0 0 auto;width:50%}.col-lg-7{flex:0 0 auto;width:58.33333333%}.col-lg-8{flex:0 0 auto;width:66.66666667%}.col-lg-9{flex:0 0 auto;width:75%}.col-lg-10{flex:0 0 auto;width:83.33333333%}.col-lg-11{flex:0 0 auto;width:91.66666667%}.col-lg-12{flex:0 0 auto;width:100%}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.33333333%}.offset-lg-2{margin-left:16.66666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.33333333%}.offset-lg-5{margin-left:41.66666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.33333333%}.offset-lg-8{margin-left:66.66666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.33333333%}.offset-lg-11{margin-left:91.66666667%}.g-lg-0,.gx-lg-0{--bs-gutter-x:0}.g-lg-0,.gy-lg-0{--bs-gutter-y:0}.g-lg-1,.gx-lg-1{--bs-gutter-x:0.25rem}.g-lg-1,.gy-lg-1{--bs-gutter-y:0.25rem}.g-lg-2,.gx-lg-2{--bs-gutter-x:0.5rem}.g-lg-2,.gy-lg-2{--bs-gutter-y:0.5rem}.g-lg-3,.gx-lg-3{--bs-gutter-x:1rem}.g-lg-3,.gy-lg-3{--bs-gutter-y:1rem}.g-lg-4,.gx-lg-4{--bs-gutter-x:1.5rem}.g-lg-4,.gy-lg-4{--bs-gutter-y:1.5rem}.g-lg-5,.gx-lg-5{--bs-gutter-x:3rem}.g-lg-5,.gy-lg-5{--bs-gutter-y:3rem}}@media(min-width:1200px){.col-xl{flex:1 0 0%}.row-cols-xl-auto>*{flex:0 0 auto;width:auto}.row-cols-xl-1>*{flex:0 0 auto;width:100%}.row-cols-xl-2>*{flex:0 0 auto;width:50%}.row-cols-xl-3>*{flex:0 0 auto;width:33.33333333%}.row-cols-xl-4>*{flex:0 0 auto;width:25%}.row-cols-xl-5>*{flex:0 0 auto;width:20%}.row-cols-xl-6>*{flex:0 0 auto;width:16.66666667%}.col-xl-auto{flex:0 0 auto;width:auto}.col-xl-1{flex:0 0 auto;width:8.33333333%}.col-xl-2{flex:0 0 auto;width:16.66666667%}.col-xl-3{flex:0 0 auto;width:25%}.col-xl-4{flex:0 0 auto;width:33.33333333%}.col-xl-5{flex:0 0 auto;width:41.66666667%}.col-xl-6{flex:0 0 auto;width:50%}.col-xl-7{flex:0 0 auto;width:58.33333333%}.col-xl-8{flex:0 0 auto;width:66.66666667%}.col-xl-9{flex:0 0 auto;width:75%}.col-xl-10{flex:0 0 auto;width:83.33333333%}.col-xl-11{flex:0 0 auto;width:91.66666667%}.col-xl-12{flex:0 0 auto;width:100%}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.33333333%}.offset-xl-2{margin-left:16.66666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.33333333%}.offset-xl-5{margin-left:41.66666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.33333333%}.offset-xl-8{margin-left:66.66666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.33333333%}.offset-xl-11{margin-left:91.66666667%}.g-xl-0,.gx-xl-0{--bs-gutter-x:0}.g-xl-0,.gy-xl-0{--bs-gutter-y:0}.g-xl-1,.gx-xl-1{--bs-gutter-x:0.25rem}.g-xl-1,.gy-xl-1{--bs-gutter-y:0.25rem}.g-xl-2,.gx-xl-2{--bs-gutter-x:0.5rem}.g-xl-2,.gy-xl-2{--bs-gutter-y:0.5rem}.g-xl-3,.gx-xl-3{--bs-gutter-x:1rem}.g-xl-3,.gy-xl-3{--bs-gutter-y:1rem}.g-xl-4,.gx-xl-4{--bs-gutter-x:1.5rem}.g-xl-4,.gy-xl-4{--bs-gutter-y:1.5rem}.g-xl-5,.gx-xl-5{--bs-gutter-x:3rem}.g-xl-5,.gy-xl-5{--bs-gutter-y:3rem}}.table{--bs-table-color-type:initial;--bs-table-bg-type:initial;--bs-table-color-state:initial;--bs-table-bg-state:initial;--bs-table-color:var(--bs-emphasis-color);--bs-table-bg:var(--bs-body-bg);--bs-table-border-color:var(--bs-border-color);--bs-table-accent-bg:transparent;--bs-table-striped-color:var(--bs-emphasis-color);--bs-table-striped-bg:rgba(var(--bs-emphasis-color-rgb),0.05);--bs-table-active-color:var(--bs-emphasis-color);--bs-table-active-bg:rgba(var(--bs-emphasis-color-rgb),0.1);--bs-table-hover-color:var(--bs-emphasis-color);--bs-table-hover-bg:rgba(var(--bs-emphasis-color-rgb),0.075);border-color:var(--bs-table-border-color);margin-bottom:1rem;vertical-align:top;width:100%}.table>:not(caption)>*>*{background-color:var(--bs-table-bg);border-bottom-width:var(--bs-border-width);box-shadow:inset 0 0 0 9999px var(--bs-table-bg-state,var(--bs-table-bg-type,var(--bs-table-accent-bg)));color:var(--bs-table-color-state,var(--bs-table-color-type,var(--bs-table-color)));padding:.5rem}.table>tbody{vertical-align:inherit}.table>thead{vertical-align:bottom}.table-group-divider{border-top:calc(var(--bs-border-width)*2) solid}.caption-top{caption-side:top}.table-sm>:not(caption)>*>*{padding:.25rem}.table-bordered>:not(caption)>*{border-width:var(--bs-border-width) 0}.table-bordered>:not(caption)>*>*{border-width:0 var(--bs-border-width)}.table-borderless>:not(caption)>*>*{border-bottom-width:0}.table-borderless>:not(:first-child){border-top-width:0}.table-striped-columns>:not(caption)>tr>:nth-child(2n),.table-striped>tbody>tr:nth-of-type(odd)>*{--bs-table-color-type:var(--bs-table-striped-color);--bs-table-bg-type:var(--bs-table-striped-bg)}.table-active{--bs-table-color-state:var(--bs-table-active-color);--bs-table-bg-state:var(--bs-table-active-bg)}.table-hover>tbody>tr:hover>*{--bs-table-color-state:var(--bs-table-hover-color);--bs-table-bg-state:var(--bs-table-hover-bg)}.table-primary{--bs-table-color:#000;--bs-table-bg:#cfe2ff;--bs-table-border-color:#a6b5cc;--bs-table-striped-bg:#c5d7f2;--bs-table-striped-color:#000;--bs-table-active-bg:#bacbe6;--bs-table-active-color:#000;--bs-table-hover-bg:#bfd1ec;--bs-table-hover-color:#000}.table-primary,.table-secondary{border-color:var(--bs-table-border-color);color:var(--bs-table-color)}.table-secondary{--bs-table-color:#000;--bs-table-bg:#e2e3e5;--bs-table-border-color:#b5b6b7;--bs-table-striped-bg:#d7d8da;--bs-table-striped-color:#000;--bs-table-active-bg:#cbccce;--bs-table-active-color:#000;--bs-table-hover-bg:#d1d2d4;--bs-table-hover-color:#000}.table-success{--bs-table-color:#000;--bs-table-bg:#d1e7dd;--bs-table-border-color:#a7b9b1;--bs-table-striped-bg:#c7dbd2;--bs-table-striped-color:#000;--bs-table-active-bg:#bcd0c7;--bs-table-active-color:#000;--bs-table-hover-bg:#c1d6cc;--bs-table-hover-color:#000}.table-info,.table-success{border-color:var(--bs-table-border-color);color:var(--bs-table-color)}.table-info{--bs-table-color:#000;--bs-table-bg:#cff4fc;--bs-table-border-color:#a6c3ca;--bs-table-striped-bg:#c5e8ef;--bs-table-striped-color:#000;--bs-table-active-bg:#badce3;--bs-table-active-color:#000;--bs-table-hover-bg:#bfe2e9;--bs-table-hover-color:#000}.table-warning{--bs-table-color:#000;--bs-table-bg:#fff3cd;--bs-table-border-color:#ccc2a4;--bs-table-striped-bg:#f2e7c3;--bs-table-striped-color:#000;--bs-table-active-bg:#e6dbb9;--bs-table-active-color:#000;--bs-table-hover-bg:#ece1be;--bs-table-hover-color:#000}.table-danger,.table-warning{border-color:var(--bs-table-border-color);color:var(--bs-table-color)}.table-danger{--bs-table-color:#000;--bs-table-bg:#f8d7da;--bs-table-border-color:#c6acae;--bs-table-striped-bg:#eccccf;--bs-table-striped-color:#000;--bs-table-active-bg:#dfc2c4;--bs-table-active-color:#000;--bs-table-hover-bg:#e5c7ca;--bs-table-hover-color:#000}.table-light{--bs-table-color:#000;--bs-table-bg:#f8f9fa;--bs-table-border-color:#c6c7c8;--bs-table-striped-bg:#ecedee;--bs-table-striped-color:#000;--bs-table-active-bg:#dfe0e1;--bs-table-active-color:#000;--bs-table-hover-bg:#e5e6e7;--bs-table-hover-color:#000}.table-dark,.table-light{border-color:var(--bs-table-border-color);color:var(--bs-table-color)}.table-dark{--bs-table-color:#fff;--bs-table-bg:#212529;--bs-table-border-color:#4d5154;--bs-table-striped-bg:#2c3034;--bs-table-striped-color:#fff;--bs-table-active-bg:#373b3e;--bs-table-active-color:#fff;--bs-table-hover-bg:#323539;--bs-table-hover-color:#fff}.table-responsive{-webkit-overflow-scrolling:touch;overflow-x:auto}@media(max-width:539.98px){.table-responsive-sm{-webkit-overflow-scrolling:touch;overflow-x:auto}}@media(max-width:719.98px){.table-responsive-md{-webkit-overflow-scrolling:touch;overflow-x:auto}}@media(max-width:959.98px){.table-responsive-lg{-webkit-overflow-scrolling:touch;overflow-x:auto}}@media(max-width:1199.98px){.table-responsive-xl{-webkit-overflow-scrolling:touch;overflow-x:auto}}.form-label{margin-bottom:.5rem}.col-form-label{font-size:inherit;line-height:1.5;margin-bottom:0;padding-bottom:calc(.375rem + var(--bs-border-width));padding-top:calc(.375rem + var(--bs-border-width))}.col-form-label-lg{font-size:1.25rem;padding-bottom:calc(.5rem + var(--bs-border-width));padding-top:calc(.5rem + var(--bs-border-width))}.col-form-label-sm{font-size:.875rem;padding-bottom:calc(.25rem + var(--bs-border-width));padding-top:calc(.25rem + var(--bs-border-width))}.form-text{color:var(--bs-secondary-color);font-size:.875em;margin-top:.25rem}.form-control{appearance:none;background-clip:padding-box;background-color:var(--bs-body-bg);border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);color:var(--bs-body-color);display:block;font-size:1rem;font-weight:400;line-height:1.5;padding:.375rem .75rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;width:100%}@media(prefers-reduced-motion:reduce){.form-control{transition:none}}.form-control[type=file]{overflow:hidden}.form-control[type=file]:not(:disabled):not([readonly]){cursor:pointer}.form-control:focus{background-color:var(--bs-body-bg);border-color:#86b7fe;box-shadow:0 0 0 .1875rem var(--pst-color-accent);color:var(--bs-body-color);outline:0}.form-control::-webkit-date-and-time-value{height:1.5em;margin:0;min-width:85px}.form-control::-webkit-datetime-edit{display:block;padding:0}.form-control::placeholder{color:var(--bs-secondary-color);opacity:1}.form-control:disabled{background-color:var(--bs-secondary-bg);opacity:1}.form-control::file-selector-button{background-color:var(--bs-tertiary-bg);border:0 solid;border-color:inherit;border-inline-end-width:var(--bs-border-width);border-radius:0;color:var(--bs-body-color);margin:-.375rem -.75rem;margin-inline-end:.75rem;padding:.375rem .75rem;pointer-events:none;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media(prefers-reduced-motion:reduce){.form-control::file-selector-button{transition:none}}.form-control:hover:not(:disabled):not([readonly])::file-selector-button{background-color:var(--bs-secondary-bg)}.form-control-plaintext{background-color:transparent;border:solid transparent;border-width:var(--bs-border-width) 0;color:var(--bs-body-color);display:block;line-height:1.5;margin-bottom:0;padding:.375rem 0;width:100%}.form-control-plaintext:focus{outline:0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm{padding-left:0;padding-right:0}.form-control-sm{border-radius:var(--bs-border-radius-sm);font-size:.875rem;min-height:calc(1.5em + .5rem + var(--bs-border-width)*2);padding:.25rem .5rem}.form-control-sm::file-selector-button{margin:-.25rem -.5rem;margin-inline-end:.5rem;padding:.25rem .5rem}.form-control-lg{border-radius:var(--bs-border-radius-lg);font-size:1.25rem;min-height:calc(1.5em + 1rem + var(--bs-border-width)*2);padding:.5rem 1rem}.form-control-lg::file-selector-button{margin:-.5rem -1rem;margin-inline-end:1rem;padding:.5rem 1rem}textarea.form-control{min-height:calc(1.5em + .75rem + var(--bs-border-width)*2)}textarea.form-control-sm{min-height:calc(1.5em + .5rem + var(--bs-border-width)*2)}textarea.form-control-lg{min-height:calc(1.5em + 1rem + var(--bs-border-width)*2)}.form-control-color{height:calc(1.5em + .75rem + var(--bs-border-width)*2);padding:.375rem;width:3rem}.form-control-color:not(:disabled):not([readonly]){cursor:pointer}.form-control-color::-moz-color-swatch{border:0!important;border-radius:var(--bs-border-radius)}.form-control-color::-webkit-color-swatch{border:0!important;border-radius:var(--bs-border-radius)}.form-control-color.form-control-sm{height:calc(1.5em + .5rem + var(--bs-border-width)*2)}.form-control-color.form-control-lg{height:calc(1.5em + 1rem + var(--bs-border-width)*2)}.form-select{--bs-form-select-bg-img:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3E%3C/svg%3E");appearance:none;background-color:var(--bs-body-bg);background-image:var(--bs-form-select-bg-img),var(--bs-form-select-bg-icon,none);background-position:right .75rem center;background-repeat:no-repeat;background-size:16px 12px;border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);color:var(--bs-body-color);display:block;font-size:1rem;font-weight:400;line-height:1.5;padding:.375rem 2.25rem .375rem .75rem;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;width:100%}@media(prefers-reduced-motion:reduce){.form-select{transition:none}}.form-select:focus{border-color:#86b7fe;box-shadow:0 0 0 .1875rem var(--pst-color-accent);outline:0}.form-select[multiple],.form-select[size]:not([size="1"]){background-image:none;padding-right:.75rem}.form-select:disabled{background-color:var(--bs-secondary-bg)}.form-select:-moz-focusring{color:transparent;text-shadow:0 0 0 var(--bs-body-color)}.form-select-sm{border-radius:var(--bs-border-radius-sm);font-size:.875rem;padding-bottom:.25rem;padding-left:.5rem;padding-top:.25rem}.form-select-lg{border-radius:var(--bs-border-radius-lg);font-size:1.25rem;padding-bottom:.5rem;padding-left:1rem;padding-top:.5rem}[data-bs-theme=dark] .form-select{--bs-form-select-bg-img:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='none' stroke='%23dee2e6' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3E%3C/svg%3E")}.form-check{display:block;margin-bottom:.125rem;min-height:1.5rem;padding-left:1.5em}.form-check .form-check-input{float:left;margin-left:-1.5em}.form-check-reverse{padding-left:0;padding-right:1.5em;text-align:right}.form-check-reverse .form-check-input{float:right;margin-left:0;margin-right:-1.5em}.form-check-input{--bs-form-check-bg:var(--bs-body-bg);appearance:none;background-color:var(--bs-form-check-bg);background-image:var(--bs-form-check-bg-image);background-position:50%;background-repeat:no-repeat;background-size:contain;border:var(--bs-border-width) solid var(--bs-border-color);flex-shrink:0;height:1em;margin-top:.25em;print-color-adjust:exact;vertical-align:top;width:1em}.form-check-input[type=checkbox]{border-radius:.25em}.form-check-input[type=radio]{border-radius:50%}.form-check-input:active{filter:brightness(90%)}.form-check-input:focus{border-color:#86b7fe;box-shadow:0 0 0 .1875rem var(--pst-color-accent);outline:0}.form-check-input:checked{background-color:#0d6efd;border-color:#0d6efd}.form-check-input:checked[type=checkbox]{--bs-form-check-bg-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3E%3Cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/%3E%3C/svg%3E")}.form-check-input:checked[type=radio]{--bs-form-check-bg-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='2' fill='%23fff'/%3E%3C/svg%3E")}.form-check-input[type=checkbox]:indeterminate{--bs-form-check-bg-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3E%3Cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/%3E%3C/svg%3E");background-color:#0d6efd;border-color:#0d6efd}.form-check-input:disabled{filter:none;opacity:.5;pointer-events:none}.form-check-input:disabled~.form-check-label,.form-check-input[disabled]~.form-check-label{cursor:default;opacity:.5}.form-switch{padding-left:2.5em}.form-switch .form-check-input{--bs-form-switch-bg:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='rgba(0, 0, 0, 0.25)'/%3E%3C/svg%3E");background-image:var(--bs-form-switch-bg);background-position:0;border-radius:2em;margin-left:-2.5em;transition:background-position .15s ease-in-out;width:2em}@media(prefers-reduced-motion:reduce){.form-switch .form-check-input{transition:none}}.form-switch .form-check-input:focus{--bs-form-switch-bg:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='%2386b7fe'/%3E%3C/svg%3E")}.form-switch .form-check-input:checked{--bs-form-switch-bg:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='%23fff'/%3E%3C/svg%3E");background-position:100%}.form-switch.form-check-reverse{padding-left:0;padding-right:2.5em}.form-switch.form-check-reverse .form-check-input{margin-left:0;margin-right:-2.5em}.form-check-inline{display:inline-block;margin-right:1rem}.btn-check{clip:rect(0,0,0,0);pointer-events:none;position:absolute}.btn-check:disabled+.btn,.btn-check[disabled]+.btn{filter:none;opacity:.65;pointer-events:none}[data-bs-theme=dark] .form-switch .form-check-input:not(:checked):not(:focus){--bs-form-switch-bg:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='rgba(255, 255, 255, 0.25)'/%3E%3C/svg%3E")}.form-range{appearance:none;background-color:transparent;height:1.375rem;padding:0;width:100%}.form-range:focus{outline:0}.form-range:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .1875rem var(--pst-color-accent)}.form-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .1875rem var(--pst-color-accent)}.form-range::-moz-focus-outer{border:0}.form-range::-webkit-slider-thumb{appearance:none;background-color:#0d6efd;border:0;border-radius:1rem;height:1rem;margin-top:-.25rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;width:1rem}@media(prefers-reduced-motion:reduce){.form-range::-webkit-slider-thumb{transition:none}}.form-range::-webkit-slider-thumb:active{background-color:#b6d4fe}.form-range::-webkit-slider-runnable-track{background-color:var(--bs-secondary-bg);border-color:transparent;border-radius:1rem;color:transparent;cursor:pointer;height:.5rem;width:100%}.form-range::-moz-range-thumb{appearance:none;background-color:#0d6efd;border:0;border-radius:1rem;height:1rem;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;width:1rem}@media(prefers-reduced-motion:reduce){.form-range::-moz-range-thumb{transition:none}}.form-range::-moz-range-thumb:active{background-color:#b6d4fe}.form-range::-moz-range-track{background-color:var(--bs-secondary-bg);border-color:transparent;border-radius:1rem;color:transparent;cursor:pointer;height:.5rem;width:100%}.form-range:disabled{pointer-events:none}.form-range:disabled::-webkit-slider-thumb{background-color:var(--bs-secondary-color)}.form-range:disabled::-moz-range-thumb{background-color:var(--bs-secondary-color)}.form-floating{position:relative}.form-floating>.form-control,.form-floating>.form-control-plaintext,.form-floating>.form-select{height:calc(3.5rem + var(--bs-border-width)*2);line-height:1.25;min-height:calc(3.5rem + var(--bs-border-width)*2)}.form-floating>label{border:var(--bs-border-width) solid transparent;height:100%;left:0;overflow:hidden;padding:1rem .75rem;pointer-events:none;position:absolute;text-align:start;text-overflow:ellipsis;top:0;transform-origin:0 0;transition:opacity .1s ease-in-out,transform .1s ease-in-out;white-space:nowrap;z-index:2}@media(prefers-reduced-motion:reduce){.form-floating>label{transition:none}}.form-floating>.form-control,.form-floating>.form-control-plaintext{padding:1rem .75rem}.form-floating>.form-control-plaintext::placeholder,.form-floating>.form-control::placeholder{color:transparent}.form-floating>.form-control-plaintext:focus,.form-floating>.form-control-plaintext:not(:placeholder-shown),.form-floating>.form-control:focus,.form-floating>.form-control:not(:placeholder-shown){padding-bottom:.625rem;padding-top:1.625rem}.form-floating>.form-control-plaintext:-webkit-autofill,.form-floating>.form-control:-webkit-autofill{padding-bottom:.625rem;padding-top:1.625rem}.form-floating>.form-select{padding-bottom:.625rem;padding-top:1.625rem}.form-floating>.form-control-plaintext~label,.form-floating>.form-control:focus~label,.form-floating>.form-control:not(:placeholder-shown)~label,.form-floating>.form-select~label{color:rgba(var(--bs-body-color-rgb),.65);transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control-plaintext~label:after,.form-floating>.form-control:focus~label:after,.form-floating>.form-control:not(:placeholder-shown)~label:after,.form-floating>.form-select~label:after{background-color:var(--bs-body-bg);border-radius:var(--bs-border-radius);content:"";height:1.5em;inset:1rem .375rem;position:absolute;z-index:-1}.form-floating>.form-control:-webkit-autofill~label{color:rgba(var(--bs-body-color-rgb),.65);transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control-plaintext~label{border-width:var(--bs-border-width) 0}.form-floating>.form-control:disabled~label,.form-floating>:disabled~label{color:#6c757d}.form-floating>.form-control:disabled~label:after,.form-floating>:disabled~label:after{background-color:var(--bs-secondary-bg)}.input-group{align-items:stretch;display:flex;flex-wrap:wrap;position:relative;width:100%}.input-group>.form-control,.input-group>.form-floating,.input-group>.form-select{flex:1 1 auto;min-width:0;position:relative;width:1%}.input-group>.form-control:focus,.input-group>.form-floating:focus-within,.input-group>.form-select:focus{z-index:5}.input-group .btn{position:relative;z-index:2}.input-group .btn:focus{z-index:5}.input-group-text{align-items:center;background-color:var(--bs-tertiary-bg);border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);color:var(--bs-body-color);display:flex;font-size:1rem;font-weight:400;line-height:1.5;padding:.375rem .75rem;text-align:center;white-space:nowrap}.input-group-lg>.btn,.input-group-lg>.form-control,.input-group-lg>.form-select,.input-group-lg>.input-group-text{border-radius:var(--bs-border-radius-lg);font-size:1.25rem;padding:.5rem 1rem}.input-group-sm>.btn,.input-group-sm>.form-control,.input-group-sm>.form-select,.input-group-sm>.input-group-text{border-radius:var(--bs-border-radius-sm);font-size:.875rem;padding:.25rem .5rem}.input-group-lg>.form-select,.input-group-sm>.form-select{padding-right:3rem}.input-group.has-validation>.dropdown-toggle:nth-last-child(n+4),.input-group.has-validation>.form-floating:nth-last-child(n+3)>.form-control,.input-group.has-validation>.form-floating:nth-last-child(n+3)>.form-select,.input-group.has-validation>:nth-last-child(n+3):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating),.input-group:not(.has-validation)>.dropdown-toggle:nth-last-child(n+3),.input-group:not(.has-validation)>.form-floating:not(:last-child)>.form-control,.input-group:not(.has-validation)>.form-floating:not(:last-child)>.form-select,.input-group:not(.has-validation)>:not(:last-child):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating){border-bottom-right-radius:0;border-top-right-radius:0}.input-group>:not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback){border-bottom-left-radius:0;border-top-left-radius:0;margin-left:calc(var(--bs-border-width)*-1)}.input-group>.form-floating:not(:first-child)>.form-control,.input-group>.form-floating:not(:first-child)>.form-select{border-bottom-left-radius:0;border-top-left-radius:0}.valid-feedback{color:var(--bs-form-valid-color);display:none;font-size:.875em;margin-top:.25rem;width:100%}.valid-tooltip{background-color:var(--bs-success);border-radius:var(--bs-border-radius);color:#fff;display:none;font-size:.875rem;margin-top:.1rem;max-width:100%;padding:.25rem .5rem;position:absolute;top:100%;z-index:5}.is-valid~.valid-feedback,.is-valid~.valid-tooltip,.was-validated :valid~.valid-feedback,.was-validated :valid~.valid-tooltip{display:block}.form-control.is-valid,.was-validated .form-control:valid{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3E%3C/svg%3E");background-position:right calc(.375em + .1875rem) center;background-repeat:no-repeat;background-size:calc(.75em + .375rem) calc(.75em + .375rem);border-color:var(--bs-form-valid-border-color);padding-right:calc(1.5em + .75rem)}.form-control.is-valid:focus,.was-validated .form-control:valid:focus{border-color:var(--bs-form-valid-border-color);box-shadow:0 0 0 .1875rem rgba(var(--bs-success-rgb),1)}.was-validated textarea.form-control:valid,textarea.form-control.is-valid{background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem);padding-right:calc(1.5em + .75rem)}.form-select.is-valid,.was-validated .form-select:valid{border-color:var(--bs-form-valid-border-color)}.form-select.is-valid:not([multiple]):not([size]),.form-select.is-valid:not([multiple])[size="1"],.was-validated .form-select:valid:not([multiple]):not([size]),.was-validated .form-select:valid:not([multiple])[size="1"]{--bs-form-select-bg-icon:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3E%3C/svg%3E");background-position:right .75rem center,center right 2.25rem;background-size:16px 12px,calc(.75em + .375rem) calc(.75em + .375rem);padding-right:4.125rem}.form-select.is-valid:focus,.was-validated .form-select:valid:focus{border-color:var(--bs-form-valid-border-color);box-shadow:0 0 0 .1875rem rgba(var(--bs-success-rgb),1)}.form-control-color.is-valid,.was-validated .form-control-color:valid{width:calc(3.75rem + 1.5em)}.form-check-input.is-valid,.was-validated .form-check-input:valid{border-color:var(--bs-form-valid-border-color)}.form-check-input.is-valid:checked,.was-validated .form-check-input:valid:checked{background-color:var(--bs-form-valid-color)}.form-check-input.is-valid:focus,.was-validated .form-check-input:valid:focus{box-shadow:0 0 0 .1875rem rgba(var(--bs-success-rgb),1)}.form-check-input.is-valid~.form-check-label,.was-validated .form-check-input:valid~.form-check-label{color:var(--bs-form-valid-color)}.form-check-inline .form-check-input~.valid-feedback{margin-left:.5em}.input-group>.form-control:not(:focus).is-valid,.input-group>.form-floating:not(:focus-within).is-valid,.input-group>.form-select:not(:focus).is-valid,.was-validated .input-group>.form-control:not(:focus):valid,.was-validated .input-group>.form-floating:not(:focus-within):valid,.was-validated .input-group>.form-select:not(:focus):valid{z-index:3}.invalid-feedback{color:var(--bs-form-invalid-color);display:none;font-size:.875em;margin-top:.25rem;width:100%}.invalid-tooltip{background-color:var(--bs-danger);border-radius:var(--bs-border-radius);color:#fff;display:none;font-size:.875rem;margin-top:.1rem;max-width:100%;padding:.25rem .5rem;position:absolute;top:100%;z-index:5}.is-invalid~.invalid-feedback,.is-invalid~.invalid-tooltip,.was-validated :invalid~.invalid-feedback,.was-validated :invalid~.invalid-tooltip{display:block}.form-control.is-invalid,.was-validated .form-control:invalid{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545'%3E%3Ccircle cx='6' cy='6' r='4.5'/%3E%3Cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3E%3Ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3E%3C/svg%3E");background-position:right calc(.375em + .1875rem) center;background-repeat:no-repeat;background-size:calc(.75em + .375rem) calc(.75em + .375rem);border-color:var(--bs-form-invalid-border-color);padding-right:calc(1.5em + .75rem)}.form-control.is-invalid:focus,.was-validated .form-control:invalid:focus{border-color:var(--bs-form-invalid-border-color);box-shadow:0 0 0 .1875rem rgba(var(--bs-danger-rgb),1)}.was-validated textarea.form-control:invalid,textarea.form-control.is-invalid{background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem);padding-right:calc(1.5em + .75rem)}.form-select.is-invalid,.was-validated .form-select:invalid{border-color:var(--bs-form-invalid-border-color)}.form-select.is-invalid:not([multiple]):not([size]),.form-select.is-invalid:not([multiple])[size="1"],.was-validated .form-select:invalid:not([multiple]):not([size]),.was-validated .form-select:invalid:not([multiple])[size="1"]{--bs-form-select-bg-icon:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545'%3E%3Ccircle cx='6' cy='6' r='4.5'/%3E%3Cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3E%3Ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3E%3C/svg%3E");background-position:right .75rem center,center right 2.25rem;background-size:16px 12px,calc(.75em + .375rem) calc(.75em + .375rem);padding-right:4.125rem}.form-select.is-invalid:focus,.was-validated .form-select:invalid:focus{border-color:var(--bs-form-invalid-border-color);box-shadow:0 0 0 .1875rem rgba(var(--bs-danger-rgb),1)}.form-control-color.is-invalid,.was-validated .form-control-color:invalid{width:calc(3.75rem + 1.5em)}.form-check-input.is-invalid,.was-validated .form-check-input:invalid{border-color:var(--bs-form-invalid-border-color)}.form-check-input.is-invalid:checked,.was-validated .form-check-input:invalid:checked{background-color:var(--bs-form-invalid-color)}.form-check-input.is-invalid:focus,.was-validated .form-check-input:invalid:focus{box-shadow:0 0 0 .1875rem rgba(var(--bs-danger-rgb),1)}.form-check-input.is-invalid~.form-check-label,.was-validated .form-check-input:invalid~.form-check-label{color:var(--bs-form-invalid-color)}.form-check-inline .form-check-input~.invalid-feedback{margin-left:.5em}.input-group>.form-control:not(:focus).is-invalid,.input-group>.form-floating:not(:focus-within).is-invalid,.input-group>.form-select:not(:focus).is-invalid,.was-validated .input-group>.form-control:not(:focus):invalid,.was-validated .input-group>.form-floating:not(:focus-within):invalid,.was-validated .input-group>.form-select:not(:focus):invalid{z-index:4}.btn{--bs-btn-padding-x:0.75rem;--bs-btn-padding-y:0.375rem;--bs-btn-font-family: ;--bs-btn-font-size:1rem;--bs-btn-font-weight:400;--bs-btn-line-height:1.5;--bs-btn-color:var(--bs-body-color);--bs-btn-bg:transparent;--bs-btn-border-width:var(--bs-border-width);--bs-btn-border-color:transparent;--bs-btn-border-radius:var(--bs-border-radius);--bs-btn-hover-border-color:transparent;--bs-btn-box-shadow:inset 0 1px 0 hsla(0,0%,100%,.15),0 1px 1px rgba(0,0,0,.075);--bs-btn-disabled-opacity:0.65;--bs-btn-focus-box-shadow:0 0 0 0.1875rem rgba(var(--bs-btn-focus-shadow-rgb),.5);background-color:var(--bs-btn-bg);border:var(--bs-btn-border-width) solid var(--bs-btn-border-color);border-radius:var(--bs-btn-border-radius);color:var(--bs-btn-color);cursor:pointer;display:inline-block;font-family:var(--bs-btn-font-family);font-size:var(--bs-btn-font-size);font-weight:var(--bs-btn-font-weight);line-height:var(--bs-btn-line-height);padding:var(--bs-btn-padding-y) var(--bs-btn-padding-x);text-align:center;text-decoration:none;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;user-select:none;vertical-align:middle}@media(prefers-reduced-motion:reduce){.btn{transition:none}}.btn:hover{background-color:var(--bs-btn-hover-bg);border-color:var(--bs-btn-hover-border-color);color:var(--bs-btn-hover-color)}.btn-check+.btn:hover{background-color:var(--bs-btn-bg);border-color:var(--bs-btn-border-color);color:var(--bs-btn-color)}.btn:focus-visible{background-color:var(--bs-btn-hover-bg);border-color:var(--bs-btn-hover-border-color);box-shadow:var(--bs-btn-focus-box-shadow);color:var(--bs-btn-hover-color);outline:0}.btn-check:focus-visible+.btn{border-color:var(--bs-btn-hover-border-color);box-shadow:var(--bs-btn-focus-box-shadow);outline:0}.btn-check:checked+.btn,.btn.active,.btn.show,.btn:first-child:active,:not(.btn-check)+.btn:active{background-color:var(--bs-btn-active-bg);border-color:var(--bs-btn-active-border-color);color:var(--bs-btn-active-color)}.btn-check:checked+.btn:focus-visible,.btn.active:focus-visible,.btn.show:focus-visible,.btn:first-child:active:focus-visible,:not(.btn-check)+.btn:active:focus-visible{box-shadow:var(--bs-btn-focus-box-shadow)}.btn-check:checked:focus-visible+.btn{box-shadow:var(--bs-btn-focus-box-shadow)}.btn.disabled,.btn:disabled,fieldset:disabled .btn{background-color:var(--bs-btn-disabled-bg);border-color:var(--bs-btn-disabled-border-color);color:var(--bs-btn-disabled-color);opacity:var(--bs-btn-disabled-opacity);pointer-events:none}.btn-primary{--bs-btn-color:#fff;--bs-btn-bg:#0d6efd;--bs-btn-border-color:#0d6efd;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#0b5ed7;--bs-btn-hover-border-color:#0a58ca;--bs-btn-focus-shadow-rgb:49,132,253;--bs-btn-active-color:#fff;--bs-btn-active-bg:#0a58ca;--bs-btn-active-border-color:#0a53be;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#0d6efd;--bs-btn-disabled-border-color:#0d6efd}.btn-secondary{--bs-btn-color:#fff;--bs-btn-bg:#6c757d;--bs-btn-border-color:#6c757d;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#5c636a;--bs-btn-hover-border-color:#565e64;--bs-btn-focus-shadow-rgb:130,138,145;--bs-btn-active-color:#fff;--bs-btn-active-bg:#565e64;--bs-btn-active-border-color:#51585e;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#6c757d;--bs-btn-disabled-border-color:#6c757d}.btn-success{--bs-btn-color:#fff;--bs-btn-bg:#198754;--bs-btn-border-color:#198754;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#157347;--bs-btn-hover-border-color:#146c43;--bs-btn-focus-shadow-rgb:60,153,110;--bs-btn-active-color:#fff;--bs-btn-active-bg:#146c43;--bs-btn-active-border-color:#13653f;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#198754;--bs-btn-disabled-border-color:#198754}.btn-info{--bs-btn-color:#000;--bs-btn-bg:#0dcaf0;--bs-btn-border-color:#0dcaf0;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#31d2f2;--bs-btn-hover-border-color:#25cff2;--bs-btn-focus-shadow-rgb:11,172,204;--bs-btn-active-color:#000;--bs-btn-active-bg:#3dd5f3;--bs-btn-active-border-color:#25cff2;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#0dcaf0;--bs-btn-disabled-border-color:#0dcaf0}.btn-warning{--bs-btn-color:#000;--bs-btn-bg:#ffc107;--bs-btn-border-color:#ffc107;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#ffca2c;--bs-btn-hover-border-color:#ffc720;--bs-btn-focus-shadow-rgb:217,164,6;--bs-btn-active-color:#000;--bs-btn-active-bg:#ffcd39;--bs-btn-active-border-color:#ffc720;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#ffc107;--bs-btn-disabled-border-color:#ffc107}.btn-danger{--bs-btn-color:#fff;--bs-btn-bg:#dc3545;--bs-btn-border-color:#dc3545;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#bb2d3b;--bs-btn-hover-border-color:#b02a37;--bs-btn-focus-shadow-rgb:225,83,97;--bs-btn-active-color:#fff;--bs-btn-active-bg:#b02a37;--bs-btn-active-border-color:#a52834;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#dc3545;--bs-btn-disabled-border-color:#dc3545}.btn-light{--bs-btn-color:#000;--bs-btn-bg:#f8f9fa;--bs-btn-border-color:#f8f9fa;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#d3d4d5;--bs-btn-hover-border-color:#c6c7c8;--bs-btn-focus-shadow-rgb:211,212,213;--bs-btn-active-color:#000;--bs-btn-active-bg:#c6c7c8;--bs-btn-active-border-color:#babbbc;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#f8f9fa;--bs-btn-disabled-border-color:#f8f9fa}.btn-dark{--bs-btn-color:#fff;--bs-btn-bg:#212529;--bs-btn-border-color:#212529;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#424649;--bs-btn-hover-border-color:#373b3e;--bs-btn-focus-shadow-rgb:66,70,73;--bs-btn-active-color:#fff;--bs-btn-active-bg:#4d5154;--bs-btn-active-border-color:#373b3e;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#212529;--bs-btn-disabled-border-color:#212529}.btn-outline-primary{--bs-btn-color:#0d6efd;--bs-btn-border-color:#0d6efd;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#0d6efd;--bs-btn-hover-border-color:#0d6efd;--bs-btn-focus-shadow-rgb:13,110,253;--bs-btn-active-color:#fff;--bs-btn-active-bg:#0d6efd;--bs-btn-active-border-color:#0d6efd;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#0d6efd;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#0d6efd;--bs-gradient:none}.btn-outline-secondary{--bs-btn-color:#6c757d;--bs-btn-border-color:#6c757d;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#6c757d;--bs-btn-hover-border-color:#6c757d;--bs-btn-focus-shadow-rgb:108,117,125;--bs-btn-active-color:#fff;--bs-btn-active-bg:#6c757d;--bs-btn-active-border-color:#6c757d;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#6c757d;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#6c757d;--bs-gradient:none}.btn-outline-success{--bs-btn-color:#198754;--bs-btn-border-color:#198754;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#198754;--bs-btn-hover-border-color:#198754;--bs-btn-focus-shadow-rgb:25,135,84;--bs-btn-active-color:#fff;--bs-btn-active-bg:#198754;--bs-btn-active-border-color:#198754;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#198754;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#198754;--bs-gradient:none}.btn-outline-info{--bs-btn-color:#0dcaf0;--bs-btn-border-color:#0dcaf0;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#0dcaf0;--bs-btn-hover-border-color:#0dcaf0;--bs-btn-focus-shadow-rgb:13,202,240;--bs-btn-active-color:#000;--bs-btn-active-bg:#0dcaf0;--bs-btn-active-border-color:#0dcaf0;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#0dcaf0;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#0dcaf0;--bs-gradient:none}.btn-outline-warning{--bs-btn-color:#ffc107;--bs-btn-border-color:#ffc107;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#ffc107;--bs-btn-hover-border-color:#ffc107;--bs-btn-focus-shadow-rgb:255,193,7;--bs-btn-active-color:#000;--bs-btn-active-bg:#ffc107;--bs-btn-active-border-color:#ffc107;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#ffc107;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#ffc107;--bs-gradient:none}.btn-outline-danger{--bs-btn-color:#dc3545;--bs-btn-border-color:#dc3545;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#dc3545;--bs-btn-hover-border-color:#dc3545;--bs-btn-focus-shadow-rgb:220,53,69;--bs-btn-active-color:#fff;--bs-btn-active-bg:#dc3545;--bs-btn-active-border-color:#dc3545;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#dc3545;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#dc3545;--bs-gradient:none}.btn-outline-light{--bs-btn-color:#f8f9fa;--bs-btn-border-color:#f8f9fa;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#f8f9fa;--bs-btn-hover-border-color:#f8f9fa;--bs-btn-focus-shadow-rgb:248,249,250;--bs-btn-active-color:#000;--bs-btn-active-bg:#f8f9fa;--bs-btn-active-border-color:#f8f9fa;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#f8f9fa;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#f8f9fa;--bs-gradient:none}.btn-outline-dark{--bs-btn-color:#212529;--bs-btn-border-color:#212529;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#212529;--bs-btn-hover-border-color:#212529;--bs-btn-focus-shadow-rgb:33,37,41;--bs-btn-active-color:#fff;--bs-btn-active-bg:#212529;--bs-btn-active-border-color:#212529;--bs-btn-active-shadow:inset 0 3px 5px rgba(0,0,0,.125);--bs-btn-disabled-color:#212529;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#212529;--bs-gradient:none}.btn-link{--bs-btn-font-weight:400;--bs-btn-color:var(--bs-link-color);--bs-btn-bg:transparent;--bs-btn-border-color:transparent;--bs-btn-hover-color:var(--bs-link-hover-color);--bs-btn-hover-border-color:transparent;--bs-btn-active-color:var(--bs-link-hover-color);--bs-btn-active-border-color:transparent;--bs-btn-disabled-color:#6c757d;--bs-btn-disabled-border-color:transparent;--bs-btn-box-shadow:0 0 0 #000;--bs-btn-focus-shadow-rgb:49,132,253;text-decoration:underline}.btn-link:focus-visible{color:var(--bs-btn-color)}.btn-link:hover{color:var(--bs-btn-hover-color)}.btn-group-lg>.btn,.btn-lg{--bs-btn-padding-y:0.5rem;--bs-btn-padding-x:1rem;--bs-btn-font-size:1.25rem;--bs-btn-border-radius:var(--bs-border-radius-lg)}.btn-group-sm>.btn,.btn-sm{--bs-btn-padding-y:0.25rem;--bs-btn-padding-x:0.5rem;--bs-btn-font-size:0.875rem;--bs-btn-border-radius:var(--bs-border-radius-sm)}.fade{transition:opacity .15s linear}@media(prefers-reduced-motion:reduce){.fade{transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{height:0;overflow:hidden;transition:height .35s ease}@media(prefers-reduced-motion:reduce){.collapsing{transition:none}}.collapsing.collapse-horizontal{height:auto;transition:width .35s ease;width:0}@media(prefers-reduced-motion:reduce){.collapsing.collapse-horizontal{transition:none}}.dropdown,.dropdown-center,.dropend,.dropstart,.dropup,.dropup-center{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle:after{border-bottom:0;border-left:.3em solid transparent;border-right:.3em solid transparent;border-top:.3em solid;content:"";display:inline-block;margin-left:.255em;vertical-align:.255em}.dropdown-toggle:empty:after{margin-left:0}.dropdown-menu{--bs-dropdown-zindex:1000;--bs-dropdown-min-width:10rem;--bs-dropdown-padding-x:0;--bs-dropdown-padding-y:0.5rem;--bs-dropdown-spacer:0.125rem;--bs-dropdown-font-size:1rem;--bs-dropdown-color:var(--bs-body-color);--bs-dropdown-bg:var(--bs-body-bg);--bs-dropdown-border-color:var(--bs-border-color-translucent);--bs-dropdown-border-radius:var(--bs-border-radius);--bs-dropdown-border-width:var(--bs-border-width);--bs-dropdown-inner-border-radius:calc(var(--bs-border-radius) - var(--bs-border-width));--bs-dropdown-divider-bg:var(--bs-border-color-translucent);--bs-dropdown-divider-margin-y:0.5rem;--bs-dropdown-box-shadow:var(--bs-box-shadow);--bs-dropdown-link-color:var(--bs-body-color);--bs-dropdown-link-hover-color:var(--bs-body-color);--bs-dropdown-link-hover-bg:var(--pst-color-surface);--bs-dropdown-link-active-color:#fff;--bs-dropdown-link-active-bg:var(--pst-color-surface);--bs-dropdown-link-disabled-color:var(--bs-tertiary-color);--bs-dropdown-item-padding-x:1rem;--bs-dropdown-item-padding-y:0.25rem;--bs-dropdown-header-color:#6c757d;--bs-dropdown-header-padding-x:1rem;--bs-dropdown-header-padding-y:0.5rem;background-clip:padding-box;background-color:var(--bs-dropdown-bg);border:var(--bs-dropdown-border-width) solid var(--bs-dropdown-border-color);border-radius:var(--bs-dropdown-border-radius);color:var(--bs-dropdown-color);display:none;font-size:var(--bs-dropdown-font-size);list-style:none;margin:0;min-width:var(--bs-dropdown-min-width);padding:var(--bs-dropdown-padding-y) var(--bs-dropdown-padding-x);position:absolute;text-align:left;z-index:var(--bs-dropdown-zindex)}.dropdown-menu[data-bs-popper]{left:0;margin-top:var(--bs-dropdown-spacer);top:100%}.dropdown-menu-start{--bs-position:start}.dropdown-menu-start[data-bs-popper]{left:0;right:auto}.dropdown-menu-end{--bs-position:end}.dropdown-menu-end[data-bs-popper]{left:auto;right:0}@media(min-width:540px){.dropdown-menu-sm-start{--bs-position:start}.dropdown-menu-sm-start[data-bs-popper]{left:0;right:auto}.dropdown-menu-sm-end{--bs-position:end}.dropdown-menu-sm-end[data-bs-popper]{left:auto;right:0}}@media(min-width:720px){.dropdown-menu-md-start{--bs-position:start}.dropdown-menu-md-start[data-bs-popper]{left:0;right:auto}.dropdown-menu-md-end{--bs-position:end}.dropdown-menu-md-end[data-bs-popper]{left:auto;right:0}}@media(min-width:960px){.dropdown-menu-lg-start{--bs-position:start}.dropdown-menu-lg-start[data-bs-popper]{left:0;right:auto}.dropdown-menu-lg-end{--bs-position:end}.dropdown-menu-lg-end[data-bs-popper]{left:auto;right:0}}@media(min-width:1200px){.dropdown-menu-xl-start{--bs-position:start}.dropdown-menu-xl-start[data-bs-popper]{left:0;right:auto}.dropdown-menu-xl-end{--bs-position:end}.dropdown-menu-xl-end[data-bs-popper]{left:auto;right:0}}.dropup .dropdown-menu[data-bs-popper]{bottom:100%;margin-bottom:var(--bs-dropdown-spacer);margin-top:0;top:auto}.dropup .dropdown-toggle:after{border-bottom:.3em solid;border-left:.3em solid transparent;border-right:.3em solid transparent;border-top:0;content:"";display:inline-block;margin-left:.255em;vertical-align:.255em}.dropup .dropdown-toggle:empty:after{margin-left:0}.dropend .dropdown-menu[data-bs-popper]{left:100%;margin-left:var(--bs-dropdown-spacer);margin-top:0;right:auto;top:0}.dropend .dropdown-toggle:after{border-bottom:.3em solid transparent;border-left:.3em solid;border-right:0;border-top:.3em solid transparent;content:"";display:inline-block;margin-left:.255em;vertical-align:.255em}.dropend .dropdown-toggle:empty:after{margin-left:0}.dropend .dropdown-toggle:after{vertical-align:0}.dropstart .dropdown-menu[data-bs-popper]{left:auto;margin-right:var(--bs-dropdown-spacer);margin-top:0;right:100%;top:0}.dropstart .dropdown-toggle:after{content:"";display:inline-block;display:none;margin-left:.255em;vertical-align:.255em}.dropstart .dropdown-toggle:before{border-bottom:.3em solid transparent;border-right:.3em solid;border-top:.3em solid transparent;content:"";display:inline-block;margin-right:.255em;vertical-align:.255em}.dropstart .dropdown-toggle:empty:after{margin-left:0}.dropstart .dropdown-toggle:before{vertical-align:0}.dropdown-divider{border-top:1px solid var(--bs-dropdown-divider-bg);height:0;margin:var(--bs-dropdown-divider-margin-y) 0;opacity:1;overflow:hidden}.dropdown-item{background-color:transparent;border:0;border-radius:var(--bs-dropdown-item-border-radius,0);clear:both;color:var(--bs-dropdown-link-color);display:block;font-weight:400;padding:var(--bs-dropdown-item-padding-y) var(--bs-dropdown-item-padding-x);text-align:inherit;text-decoration:none;white-space:nowrap;width:100%}.dropdown-item:focus,.dropdown-item:hover{background-color:var(--bs-dropdown-link-hover-bg);color:var(--bs-dropdown-link-hover-color)}.dropdown-item.active,.dropdown-item:active{background-color:var(--bs-dropdown-link-active-bg);color:var(--bs-dropdown-link-active-color);text-decoration:none}.dropdown-item.disabled,.dropdown-item:disabled{background-color:transparent;color:var(--bs-dropdown-link-disabled-color);pointer-events:none}.dropdown-menu.show{display:block}.dropdown-header{color:var(--bs-dropdown-header-color);display:block;font-size:.875rem;margin-bottom:0;padding:var(--bs-dropdown-header-padding-y) var(--bs-dropdown-header-padding-x);white-space:nowrap}.dropdown-item-text{color:var(--bs-dropdown-link-color);display:block;padding:var(--bs-dropdown-item-padding-y) var(--bs-dropdown-item-padding-x)}.dropdown-menu-dark{--bs-dropdown-color:#dee2e6;--bs-dropdown-bg:#343a40;--bs-dropdown-border-color:var(--bs-border-color-translucent);--bs-dropdown-box-shadow: ;--bs-dropdown-link-color:#dee2e6;--bs-dropdown-link-hover-color:#fff;--bs-dropdown-divider-bg:var(--bs-border-color-translucent);--bs-dropdown-link-hover-bg:var(--pst-color-surface);--bs-dropdown-link-active-color:#fff;--bs-dropdown-link-active-bg:var(--pst-color-surface);--bs-dropdown-link-disabled-color:#adb5bd;--bs-dropdown-header-color:#adb5bd}.btn-group,.btn-group-vertical{display:inline-flex;position:relative;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{flex:1 1 auto;position:relative}.btn-group-vertical>.btn-check:checked+.btn,.btn-group-vertical>.btn-check:focus+.btn,.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn-check:checked+.btn,.btn-group>.btn-check:focus+.btn,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:1}.btn-toolbar{display:flex;flex-wrap:wrap;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group{border-radius:var(--bs-border-radius)}.btn-group>.btn-group:not(:first-child),.btn-group>:not(.btn-check:first-child)+.btn{margin-left:calc(var(--bs-border-width)*-1)}.btn-group>.btn-group:not(:last-child)>.btn,.btn-group>.btn.dropdown-toggle-split:first-child,.btn-group>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-top-right-radius:0}.btn-group>.btn-group:not(:first-child)>.btn,.btn-group>.btn:nth-child(n+3),.btn-group>:not(.btn-check)+.btn{border-bottom-left-radius:0;border-top-left-radius:0}.dropdown-toggle-split{padding-left:.5625rem;padding-right:.5625rem}.dropdown-toggle-split:after,.dropend .dropdown-toggle-split:after,.dropup .dropdown-toggle-split:after{margin-left:0}.dropstart .dropdown-toggle-split:before{margin-right:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-left:.375rem;padding-right:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-left:.75rem;padding-right:.75rem}.btn-group-vertical{align-items:flex-start;flex-direction:column;justify-content:center}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group{width:100%}.btn-group-vertical>.btn-group:not(:first-child),.btn-group-vertical>.btn:not(:first-child){margin-top:calc(var(--bs-border-width)*-1)}.btn-group-vertical>.btn-group:not(:last-child)>.btn,.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-left-radius:0;border-bottom-right-radius:0}.btn-group-vertical>.btn-group:not(:first-child)>.btn,.btn-group-vertical>.btn~.btn{border-top-left-radius:0;border-top-right-radius:0}.nav{--bs-nav-link-padding-x:1rem;--bs-nav-link-padding-y:0.5rem;--bs-nav-link-font-weight: ;--bs-nav-link-color:var(--bs-link-color);--bs-nav-link-hover-color:var(--bs-link-hover-color);--bs-nav-link-disabled-color:var(--bs-secondary-color);display:flex;flex-wrap:wrap;list-style:none;margin-bottom:0;padding-left:0}.nav-link{background:none;border:0;color:var(--bs-nav-link-color);display:block;font-size:var(--bs-nav-link-font-size);font-weight:var(--bs-nav-link-font-weight);padding:var(--bs-nav-link-padding-y) var(--bs-nav-link-padding-x);text-decoration:none;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out}@media(prefers-reduced-motion:reduce){.nav-link{transition:none}}.nav-link:focus,.nav-link:hover{color:var(--bs-nav-link-hover-color)}.nav-link:focus-visible{box-shadow:0 0 0 .1875rem var(--pst-color-accent);outline:0}.nav-link.disabled,.nav-link:disabled{color:var(--bs-nav-link-disabled-color);cursor:default;pointer-events:none}.nav-tabs{--bs-nav-tabs-border-width:var(--bs-border-width);--bs-nav-tabs-border-color:var(--bs-border-color);--bs-nav-tabs-border-radius:var(--bs-border-radius);--bs-nav-tabs-link-hover-border-color:var(--bs-secondary-bg) var(--bs-secondary-bg) var(--bs-border-color);--bs-nav-tabs-link-active-color:var(--bs-emphasis-color);--bs-nav-tabs-link-active-bg:var(--bs-body-bg);--bs-nav-tabs-link-active-border-color:var(--bs-border-color) var(--bs-border-color) var(--bs-body-bg);border-bottom:var(--bs-nav-tabs-border-width) solid var(--bs-nav-tabs-border-color)}.nav-tabs .nav-link{border:var(--bs-nav-tabs-border-width) solid transparent;border-top-left-radius:var(--bs-nav-tabs-border-radius);border-top-right-radius:var(--bs-nav-tabs-border-radius);margin-bottom:calc(var(--bs-nav-tabs-border-width)*-1)}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{border-color:var(--bs-nav-tabs-link-hover-border-color);isolation:isolate}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{background-color:var(--bs-nav-tabs-link-active-bg);border-color:var(--bs-nav-tabs-link-active-border-color);color:var(--bs-nav-tabs-link-active-color)}.nav-tabs .dropdown-menu{border-top-left-radius:0;border-top-right-radius:0;margin-top:calc(var(--bs-nav-tabs-border-width)*-1)}.nav-pills{--bs-nav-pills-border-radius:var(--bs-border-radius);--bs-nav-pills-link-active-color:#fff;--bs-nav-pills-link-active-bg:#0d6efd}.nav-pills .nav-link{border-radius:var(--bs-nav-pills-border-radius)}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{background-color:var(--bs-nav-pills-link-active-bg);color:var(--bs-nav-pills-link-active-color)}.nav-underline{--bs-nav-underline-gap:1rem;--bs-nav-underline-border-width:0.125rem;--bs-nav-underline-link-active-color:var(--bs-emphasis-color);gap:var(--bs-nav-underline-gap)}.nav-underline .nav-link{border-bottom:var(--bs-nav-underline-border-width) solid transparent;padding-left:0;padding-right:0}.nav-underline .nav-link:focus,.nav-underline .nav-link:hover{border-bottom-color:currentcolor}.nav-underline .nav-link.active,.nav-underline .show>.nav-link{border-bottom-color:currentcolor;color:var(--bs-nav-underline-link-active-color);font-weight:700}.nav-fill .nav-item,.nav-fill>.nav-link{flex:1 1 auto;text-align:center}.nav-justified .nav-item,.nav-justified>.nav-link{flex-basis:0;flex-grow:1;text-align:center}.nav-fill .nav-item .nav-link,.nav-justified .nav-item .nav-link{width:100%}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{--bs-navbar-padding-x:0;--bs-navbar-padding-y:0.5rem;--bs-navbar-color:rgba(var(--bs-emphasis-color-rgb),0.65);--bs-navbar-hover-color:rgba(var(--bs-emphasis-color-rgb),0.8);--bs-navbar-disabled-color:rgba(var(--bs-emphasis-color-rgb),0.3);--bs-navbar-active-color:rgba(var(--bs-emphasis-color-rgb),1);--bs-navbar-brand-padding-y:0.3125rem;--bs-navbar-brand-margin-end:1rem;--bs-navbar-brand-font-size:1.25rem;--bs-navbar-brand-color:rgba(var(--bs-emphasis-color-rgb),1);--bs-navbar-brand-hover-color:rgba(var(--bs-emphasis-color-rgb),1);--bs-navbar-nav-link-padding-x:0.5rem;--bs-navbar-toggler-padding-y:0.25rem;--bs-navbar-toggler-padding-x:0.75rem;--bs-navbar-toggler-font-size:1.25rem;--bs-navbar-toggler-icon-bg:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3E%3Cpath stroke='rgba(33, 37, 41, 0.75)' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E");--bs-navbar-toggler-border-color:rgba(var(--bs-emphasis-color-rgb),0.15);--bs-navbar-toggler-border-radius:var(--bs-border-radius);--bs-navbar-toggler-focus-width:0.1875rem;--bs-navbar-toggler-transition:box-shadow 0.15s ease-in-out;align-items:center;display:flex;flex-wrap:wrap;justify-content:space-between;padding:var(--bs-navbar-padding-y) var(--bs-navbar-padding-x);position:relative}.navbar>.container,.navbar>.container-fluid,.navbar>.container-lg,.navbar>.container-md,.navbar>.container-sm,.navbar>.container-xl{align-items:center;display:flex;flex-wrap:inherit;justify-content:space-between}.navbar-brand{color:var(--bs-navbar-brand-color);font-size:var(--bs-navbar-brand-font-size);margin-right:var(--bs-navbar-brand-margin-end);padding-bottom:var(--bs-navbar-brand-padding-y);padding-top:var(--bs-navbar-brand-padding-y);text-decoration:none;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{color:var(--bs-navbar-brand-hover-color)}.navbar-nav{--bs-nav-link-padding-x:0;--bs-nav-link-padding-y:0.5rem;--bs-nav-link-font-weight: ;--bs-nav-link-color:var(--bs-navbar-color);--bs-nav-link-hover-color:var(--bs-navbar-hover-color);--bs-nav-link-disabled-color:var(--bs-navbar-disabled-color);display:flex;flex-direction:column;list-style:none;margin-bottom:0;padding-left:0}.navbar-nav .nav-link.active,.navbar-nav .nav-link.show{color:var(--bs-navbar-active-color)}.navbar-nav .dropdown-menu{position:static}.navbar-text{color:var(--bs-navbar-color);padding-bottom:.5rem;padding-top:.5rem}.navbar-text a,.navbar-text a:focus,.navbar-text a:hover{color:var(--bs-navbar-active-color)}.navbar-collapse{align-items:center;flex-basis:100%;flex-grow:1}.navbar-toggler{background-color:transparent;border:var(--bs-border-width) solid var(--bs-navbar-toggler-border-color);border-radius:var(--bs-navbar-toggler-border-radius);color:var(--bs-navbar-color);font-size:var(--bs-navbar-toggler-font-size);line-height:1;padding:var(--bs-navbar-toggler-padding-y) var(--bs-navbar-toggler-padding-x);transition:var(--bs-navbar-toggler-transition)}@media(prefers-reduced-motion:reduce){.navbar-toggler{transition:none}}.navbar-toggler:hover{text-decoration:none}.navbar-toggler:focus{box-shadow:0 0 0 var(--bs-navbar-toggler-focus-width);outline:0;text-decoration:none}.navbar-toggler-icon{background-image:var(--bs-navbar-toggler-icon-bg);background-position:50%;background-repeat:no-repeat;background-size:100%;display:inline-block;height:1.5em;vertical-align:middle;width:1.5em}.navbar-nav-scroll{max-height:var(--bs-scroll-height,75vh);overflow-y:auto}@media(min-width:540px){.navbar-expand-sm{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-sm .navbar-nav{flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-left:var(--bs-navbar-nav-link-padding-x);padding-right:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-sm .navbar-nav-scroll{overflow:visible}.navbar-expand-sm .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}.navbar-expand-sm .offcanvas{background-color:transparent!important;border:0!important;flex-grow:1;height:auto!important;position:static;transform:none!important;transition:none;visibility:visible!important;width:auto!important;z-index:auto}.navbar-expand-sm .offcanvas .offcanvas-header{display:none}.navbar-expand-sm .offcanvas .offcanvas-body{display:flex;flex-grow:0;overflow-y:visible;padding:0}}@media(min-width:720px){.navbar-expand-md{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-md .navbar-nav{flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-left:var(--bs-navbar-nav-link-padding-x);padding-right:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-md .navbar-nav-scroll{overflow:visible}.navbar-expand-md .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}.navbar-expand-md .offcanvas{background-color:transparent!important;border:0!important;flex-grow:1;height:auto!important;position:static;transform:none!important;transition:none;visibility:visible!important;width:auto!important;z-index:auto}.navbar-expand-md .offcanvas .offcanvas-header{display:none}.navbar-expand-md .offcanvas .offcanvas-body{display:flex;flex-grow:0;overflow-y:visible;padding:0}}@media(min-width:960px){.navbar-expand-lg{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-lg .navbar-nav{flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-left:var(--bs-navbar-nav-link-padding-x);padding-right:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-lg .navbar-nav-scroll{overflow:visible}.navbar-expand-lg .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}.navbar-expand-lg .offcanvas{background-color:transparent!important;border:0!important;flex-grow:1;height:auto!important;position:static;transform:none!important;transition:none;visibility:visible!important;width:auto!important;z-index:auto}.navbar-expand-lg .offcanvas .offcanvas-header{display:none}.navbar-expand-lg .offcanvas .offcanvas-body{display:flex;flex-grow:0;overflow-y:visible;padding:0}}@media(min-width:1200px){.navbar-expand-xl{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-xl .navbar-nav{flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-left:var(--bs-navbar-nav-link-padding-x);padding-right:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-xl .navbar-nav-scroll{overflow:visible}.navbar-expand-xl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}.navbar-expand-xl .offcanvas{background-color:transparent!important;border:0!important;flex-grow:1;height:auto!important;position:static;transform:none!important;transition:none;visibility:visible!important;width:auto!important;z-index:auto}.navbar-expand-xl .offcanvas .offcanvas-header{display:none}.navbar-expand-xl .offcanvas .offcanvas-body{display:flex;flex-grow:0;overflow-y:visible;padding:0}}.navbar-expand{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand .navbar-nav{flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-left:var(--bs-navbar-nav-link-padding-x);padding-right:var(--bs-navbar-nav-link-padding-x)}.navbar-expand .navbar-nav-scroll{overflow:visible}.navbar-expand .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-expand .offcanvas{background-color:transparent!important;border:0!important;flex-grow:1;height:auto!important;position:static;transform:none!important;transition:none;visibility:visible!important;width:auto!important;z-index:auto}.navbar-expand .offcanvas .offcanvas-header{display:none}.navbar-expand .offcanvas .offcanvas-body{display:flex;flex-grow:0;overflow-y:visible;padding:0}.navbar-dark,.navbar[data-bs-theme=dark]{--bs-navbar-color:hsla(0,0%,100%,.55);--bs-navbar-hover-color:hsla(0,0%,100%,.75);--bs-navbar-disabled-color:hsla(0,0%,100%,.25);--bs-navbar-active-color:#fff;--bs-navbar-brand-color:#fff;--bs-navbar-brand-hover-color:#fff;--bs-navbar-toggler-border-color:hsla(0,0%,100%,.1)}.navbar-dark,.navbar[data-bs-theme=dark],[data-bs-theme=dark] .navbar-toggler-icon{--bs-navbar-toggler-icon-bg:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3E%3Cpath stroke='rgba(255, 255, 255, 0.55)' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E")}.card{--bs-card-spacer-y:1rem;--bs-card-spacer-x:1rem;--bs-card-title-spacer-y:0.5rem;--bs-card-title-color: ;--bs-card-subtitle-color: ;--bs-card-border-width:var(--bs-border-width);--bs-card-border-color:var(--bs-border-color-translucent);--bs-card-border-radius:var(--bs-border-radius);--bs-card-box-shadow: ;--bs-card-inner-border-radius:calc(var(--bs-border-radius) - var(--bs-border-width));--bs-card-cap-padding-y:0.5rem;--bs-card-cap-padding-x:1rem;--bs-card-cap-bg:rgba(var(--bs-body-color-rgb),0.03);--bs-card-cap-color: ;--bs-card-height: ;--bs-card-color: ;--bs-card-bg:var(--bs-body-bg);--bs-card-img-overlay-padding:1rem;--bs-card-group-margin:0.75rem;word-wrap:break-word;background-clip:border-box;background-color:var(--bs-card-bg);border:var(--bs-card-border-width) solid var(--bs-card-border-color);border-radius:var(--bs-card-border-radius);color:var(--bs-body-color);display:flex;flex-direction:column;height:var(--bs-card-height);min-width:0;position:relative}.card>hr{margin-left:0;margin-right:0}.card>.list-group{border-bottom:inherit;border-top:inherit}.card>.list-group:first-child{border-top-left-radius:var(--bs-card-inner-border-radius);border-top-right-radius:var(--bs-card-inner-border-radius);border-top-width:0}.card>.list-group:last-child{border-bottom-left-radius:var(--bs-card-inner-border-radius);border-bottom-right-radius:var(--bs-card-inner-border-radius);border-bottom-width:0}.card>.card-header+.list-group,.card>.list-group+.card-footer{border-top:0}.card-body{color:var(--bs-card-color);flex:1 1 auto;padding:var(--bs-card-spacer-y) var(--bs-card-spacer-x)}.card-title{color:var(--bs-card-title-color);margin-bottom:var(--bs-card-title-spacer-y)}.card-subtitle{color:var(--bs-card-subtitle-color);margin-top:calc(var(--bs-card-title-spacer-y)*-.5)}.card-subtitle,.card-text:last-child{margin-bottom:0}.card-link+.card-link{margin-left:var(--bs-card-spacer-x)}.card-header{background-color:var(--bs-card-cap-bg);border-bottom:var(--bs-card-border-width) solid var(--bs-card-border-color);color:var(--bs-card-cap-color);margin-bottom:0;padding:var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x)}.card-header:first-child{border-radius:var(--bs-card-inner-border-radius) var(--bs-card-inner-border-radius) 0 0}.card-footer{background-color:var(--bs-card-cap-bg);border-top:var(--bs-card-border-width) solid var(--bs-card-border-color);color:var(--bs-card-cap-color);padding:var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x)}.card-footer:last-child{border-radius:0 0 var(--bs-card-inner-border-radius) var(--bs-card-inner-border-radius)}.card-header-tabs{border-bottom:0;margin-bottom:calc(var(--bs-card-cap-padding-y)*-1);margin-left:calc(var(--bs-card-cap-padding-x)*-.5);margin-right:calc(var(--bs-card-cap-padding-x)*-.5)}.card-header-tabs .nav-link.active{background-color:var(--bs-card-bg);border-bottom-color:var(--bs-card-bg)}.card-header-pills{margin-left:calc(var(--bs-card-cap-padding-x)*-.5);margin-right:calc(var(--bs-card-cap-padding-x)*-.5)}.card-img-overlay{border-radius:var(--bs-card-inner-border-radius);bottom:0;left:0;padding:var(--bs-card-img-overlay-padding);position:absolute;right:0;top:0}.card-img,.card-img-bottom,.card-img-top{width:100%}.card-img,.card-img-top{border-top-left-radius:var(--bs-card-inner-border-radius);border-top-right-radius:var(--bs-card-inner-border-radius)}.card-img,.card-img-bottom{border-bottom-left-radius:var(--bs-card-inner-border-radius);border-bottom-right-radius:var(--bs-card-inner-border-radius)}.card-group>.card{margin-bottom:var(--bs-card-group-margin)}@media(min-width:540px){.card-group{display:flex;flex-flow:row wrap}.card-group>.card{flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{border-left:0;margin-left:0}.card-group>.card:not(:last-child){border-bottom-right-radius:0;border-top-right-radius:0}.card-group>.card:not(:last-child) .card-header,.card-group>.card:not(:last-child) .card-img-top{border-top-right-radius:0}.card-group>.card:not(:last-child) .card-footer,.card-group>.card:not(:last-child) .card-img-bottom{border-bottom-right-radius:0}.card-group>.card:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.card-group>.card:not(:first-child) .card-header,.card-group>.card:not(:first-child) .card-img-top{border-top-left-radius:0}.card-group>.card:not(:first-child) .card-footer,.card-group>.card:not(:first-child) .card-img-bottom{border-bottom-left-radius:0}}.accordion{--bs-accordion-color:var(--bs-body-color);--bs-accordion-bg:var(--bs-body-bg);--bs-accordion-transition:color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out,border-radius 0.15s ease;--bs-accordion-border-color:var(--bs-border-color);--bs-accordion-border-width:var(--bs-border-width);--bs-accordion-border-radius:var(--bs-border-radius);--bs-accordion-inner-border-radius:calc(var(--bs-border-radius) - var(--bs-border-width));--bs-accordion-btn-padding-x:1.25rem;--bs-accordion-btn-padding-y:1rem;--bs-accordion-btn-color:var(--bs-body-color);--bs-accordion-btn-bg:var(--bs-accordion-bg);--bs-accordion-btn-icon:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='none' stroke='%23212529' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='m2 5 6 6 6-6'/%3E%3C/svg%3E");--bs-accordion-btn-icon-width:1.25rem;--bs-accordion-btn-icon-transform:rotate(-180deg);--bs-accordion-btn-icon-transition:transform 0.2s ease-in-out;--bs-accordion-btn-active-icon:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='none' stroke='%23052c65' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='m2 5 6 6 6-6'/%3E%3C/svg%3E");--bs-accordion-btn-focus-box-shadow:0 0 0 0.1875rem var(--pst-color-accent);--bs-accordion-body-padding-x:1.25rem;--bs-accordion-body-padding-y:1rem;--bs-accordion-active-color:var(--bs-primary-text-emphasis);--bs-accordion-active-bg:var(--bs-primary-bg-subtle)}.accordion-button{align-items:center;background-color:var(--bs-accordion-btn-bg);border:0;border-radius:0;color:var(--bs-accordion-btn-color);display:flex;font-size:1rem;overflow-anchor:none;padding:var(--bs-accordion-btn-padding-y) var(--bs-accordion-btn-padding-x);position:relative;text-align:left;transition:var(--bs-accordion-transition);width:100%}@media(prefers-reduced-motion:reduce){.accordion-button{transition:none}}.accordion-button:not(.collapsed){background-color:var(--bs-accordion-active-bg);box-shadow:inset 0 calc(var(--bs-accordion-border-width)*-1) 0 var(--bs-accordion-border-color);color:var(--bs-accordion-active-color)}.accordion-button:not(.collapsed):after{background-image:var(--bs-accordion-btn-active-icon);transform:var(--bs-accordion-btn-icon-transform)}.accordion-button:after{background-image:var(--bs-accordion-btn-icon);background-repeat:no-repeat;background-size:var(--bs-accordion-btn-icon-width);content:"";flex-shrink:0;height:var(--bs-accordion-btn-icon-width);margin-left:auto;transition:var(--bs-accordion-btn-icon-transition);width:var(--bs-accordion-btn-icon-width)}@media(prefers-reduced-motion:reduce){.accordion-button:after{transition:none}}.accordion-button:hover{z-index:2}.accordion-button:focus{box-shadow:var(--bs-accordion-btn-focus-box-shadow);outline:0;z-index:3}.accordion-header{margin-bottom:0}.accordion-item{background-color:var(--bs-accordion-bg);border:var(--bs-accordion-border-width) solid var(--bs-accordion-border-color);color:var(--bs-accordion-color)}.accordion-item:first-of-type{border-top-left-radius:var(--bs-accordion-border-radius);border-top-right-radius:var(--bs-accordion-border-radius)}.accordion-item:first-of-type>.accordion-header .accordion-button{border-top-left-radius:var(--bs-accordion-inner-border-radius);border-top-right-radius:var(--bs-accordion-inner-border-radius)}.accordion-item:not(:first-of-type){border-top:0}.accordion-item:last-of-type{border-bottom-left-radius:var(--bs-accordion-border-radius);border-bottom-right-radius:var(--bs-accordion-border-radius)}.accordion-item:last-of-type>.accordion-header .accordion-button.collapsed{border-bottom-left-radius:var(--bs-accordion-inner-border-radius);border-bottom-right-radius:var(--bs-accordion-inner-border-radius)}.accordion-item:last-of-type>.accordion-collapse{border-bottom-left-radius:var(--bs-accordion-border-radius);border-bottom-right-radius:var(--bs-accordion-border-radius)}.accordion-body{padding:var(--bs-accordion-body-padding-y) var(--bs-accordion-body-padding-x)}.accordion-flush>.accordion-item{border-left:0;border-radius:0;border-right:0}.accordion-flush>.accordion-item:first-child{border-top:0}.accordion-flush>.accordion-item:last-child{border-bottom:0}.accordion-flush>.accordion-item>.accordion-collapse,.accordion-flush>.accordion-item>.accordion-header .accordion-button,.accordion-flush>.accordion-item>.accordion-header .accordion-button.collapsed{border-radius:0}[data-bs-theme=dark] .accordion-button:after{--bs-accordion-btn-icon:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%236ea8fe'%3E%3Cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3E%3C/svg%3E");--bs-accordion-btn-active-icon:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%236ea8fe'%3E%3Cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3E%3C/svg%3E")}.breadcrumb{--bs-breadcrumb-padding-x:0;--bs-breadcrumb-padding-y:0;--bs-breadcrumb-margin-bottom:1rem;--bs-breadcrumb-bg: ;--bs-breadcrumb-border-radius: ;--bs-breadcrumb-divider-color:var(--bs-secondary-color);--bs-breadcrumb-item-padding-x:0.5rem;--bs-breadcrumb-item-active-color:var(--bs-secondary-color);background-color:var(--bs-breadcrumb-bg);border-radius:var(--bs-breadcrumb-border-radius);display:flex;flex-wrap:wrap;font-size:var(--bs-breadcrumb-font-size);list-style:none;margin-bottom:var(--bs-breadcrumb-margin-bottom);padding:var(--bs-breadcrumb-padding-y) var(--bs-breadcrumb-padding-x)}.breadcrumb-item+.breadcrumb-item{padding-left:var(--bs-breadcrumb-item-padding-x)}.breadcrumb-item+.breadcrumb-item:before{color:var(--bs-breadcrumb-divider-color);content:var(--bs-breadcrumb-divider,"/");float:left;padding-right:var(--bs-breadcrumb-item-padding-x)}.breadcrumb-item.active{color:var(--bs-breadcrumb-item-active-color)}.pagination{--bs-pagination-padding-x:0.75rem;--bs-pagination-padding-y:0.375rem;--bs-pagination-font-size:1rem;--bs-pagination-color:var(--bs-link-color);--bs-pagination-bg:var(--bs-body-bg);--bs-pagination-border-width:var(--bs-border-width);--bs-pagination-border-color:var(--bs-border-color);--bs-pagination-border-radius:var(--bs-border-radius);--bs-pagination-hover-color:var(--bs-link-hover-color);--bs-pagination-hover-bg:var(--bs-tertiary-bg);--bs-pagination-hover-border-color:var(--bs-border-color);--bs-pagination-focus-color:var(--bs-link-hover-color);--bs-pagination-focus-bg:var(--bs-secondary-bg);--bs-pagination-focus-box-shadow:0 0 0 0.1875rem var(--pst-color-accent);--bs-pagination-active-color:#fff;--bs-pagination-active-bg:#0d6efd;--bs-pagination-active-border-color:#0d6efd;--bs-pagination-disabled-color:var(--bs-secondary-color);--bs-pagination-disabled-bg:var(--bs-secondary-bg);--bs-pagination-disabled-border-color:var(--bs-border-color);display:flex;list-style:none;padding-left:0}.page-link{background-color:var(--bs-pagination-bg);border:var(--bs-pagination-border-width) solid var(--bs-pagination-border-color);color:var(--bs-pagination-color);display:block;font-size:var(--bs-pagination-font-size);padding:var(--bs-pagination-padding-y) var(--bs-pagination-padding-x);position:relative;text-decoration:none;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media(prefers-reduced-motion:reduce){.page-link{transition:none}}.page-link:hover{background-color:var(--bs-pagination-hover-bg);border-color:var(--bs-pagination-hover-border-color);color:var(--bs-pagination-hover-color);z-index:2}.page-link:focus{background-color:var(--bs-pagination-focus-bg);box-shadow:var(--bs-pagination-focus-box-shadow);color:var(--bs-pagination-focus-color);outline:0;z-index:3}.active>.page-link,.page-link.active{background-color:var(--bs-pagination-active-bg);border-color:var(--bs-pagination-active-border-color);color:var(--bs-pagination-active-color);z-index:3}.disabled>.page-link,.page-link.disabled{background-color:var(--bs-pagination-disabled-bg);border-color:var(--bs-pagination-disabled-border-color);color:var(--bs-pagination-disabled-color);pointer-events:none}.page-item:not(:first-child) .page-link{margin-left:calc(var(--bs-border-width)*-1)}.page-item:first-child .page-link{border-bottom-left-radius:var(--bs-pagination-border-radius);border-top-left-radius:var(--bs-pagination-border-radius)}.page-item:last-child .page-link{border-bottom-right-radius:var(--bs-pagination-border-radius);border-top-right-radius:var(--bs-pagination-border-radius)}.pagination-lg{--bs-pagination-padding-x:1.5rem;--bs-pagination-padding-y:0.75rem;--bs-pagination-font-size:1.25rem;--bs-pagination-border-radius:var(--bs-border-radius-lg)}.pagination-sm{--bs-pagination-padding-x:0.5rem;--bs-pagination-padding-y:0.25rem;--bs-pagination-font-size:0.875rem;--bs-pagination-border-radius:var(--bs-border-radius-sm)}.badge{--bs-badge-padding-x:0.65em;--bs-badge-padding-y:0.35em;--bs-badge-font-size:0.75em;--bs-badge-font-weight:700;--bs-badge-color:#fff;--bs-badge-border-radius:var(--bs-border-radius);border-radius:var(--bs-badge-border-radius);color:var(--bs-badge-color);display:inline-block;font-size:var(--bs-badge-font-size);font-weight:var(--bs-badge-font-weight);line-height:1;padding:var(--bs-badge-padding-y) var(--bs-badge-padding-x);text-align:center;vertical-align:baseline;white-space:nowrap}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.alert{--bs-alert-bg:transparent;--bs-alert-padding-x:1rem;--bs-alert-padding-y:1rem;--bs-alert-margin-bottom:1rem;--bs-alert-color:inherit;--bs-alert-border-color:transparent;--bs-alert-border:var(--bs-border-width) solid var(--bs-alert-border-color);--bs-alert-border-radius:var(--bs-border-radius);--bs-alert-link-color:inherit;background-color:var(--bs-alert-bg);border:var(--bs-alert-border);border-radius:var(--bs-alert-border-radius);color:var(--bs-alert-color);margin-bottom:var(--bs-alert-margin-bottom);padding:var(--bs-alert-padding-y) var(--bs-alert-padding-x);position:relative}.alert-heading{color:inherit}.alert-link{color:var(--bs-alert-link-color);font-weight:700}.alert-dismissible{padding-right:3rem}.alert-dismissible .btn-close{padding:1.25rem 1rem;position:absolute;right:0;top:0;z-index:2}.alert-primary{--bs-alert-color:var(--bs-primary-text-emphasis);--bs-alert-bg:var(--bs-primary-bg-subtle);--bs-alert-border-color:var(--bs-primary-border-subtle);--bs-alert-link-color:var(--bs-primary-text-emphasis)}.alert-secondary{--bs-alert-color:var(--bs-secondary-text-emphasis);--bs-alert-bg:var(--bs-secondary-bg-subtle);--bs-alert-border-color:var(--bs-secondary-border-subtle);--bs-alert-link-color:var(--bs-secondary-text-emphasis)}.alert-success{--bs-alert-color:var(--bs-success-text-emphasis);--bs-alert-bg:var(--bs-success-bg-subtle);--bs-alert-border-color:var(--bs-success-border-subtle);--bs-alert-link-color:var(--bs-success-text-emphasis)}.alert-info{--bs-alert-color:var(--bs-info-text-emphasis);--bs-alert-bg:var(--bs-info-bg-subtle);--bs-alert-border-color:var(--bs-info-border-subtle);--bs-alert-link-color:var(--bs-info-text-emphasis)}.alert-warning{--bs-alert-color:var(--bs-warning-text-emphasis);--bs-alert-bg:var(--bs-warning-bg-subtle);--bs-alert-border-color:var(--bs-warning-border-subtle);--bs-alert-link-color:var(--bs-warning-text-emphasis)}.alert-danger{--bs-alert-color:var(--bs-danger-text-emphasis);--bs-alert-bg:var(--bs-danger-bg-subtle);--bs-alert-border-color:var(--bs-danger-border-subtle);--bs-alert-link-color:var(--bs-danger-text-emphasis)}.alert-light{--bs-alert-color:var(--bs-light-text-emphasis);--bs-alert-bg:var(--bs-light-bg-subtle);--bs-alert-border-color:var(--bs-light-border-subtle);--bs-alert-link-color:var(--bs-light-text-emphasis)}.alert-dark{--bs-alert-color:var(--bs-dark-text-emphasis);--bs-alert-bg:var(--bs-dark-bg-subtle);--bs-alert-border-color:var(--bs-dark-border-subtle);--bs-alert-link-color:var(--bs-dark-text-emphasis)}@keyframes progress-bar-stripes{0%{background-position-x:1rem}}.progress,.progress-stacked{--bs-progress-height:1rem;--bs-progress-font-size:0.75rem;--bs-progress-bg:var(--bs-secondary-bg);--bs-progress-border-radius:var(--bs-border-radius);--bs-progress-box-shadow:var(--bs-box-shadow-inset);--bs-progress-bar-color:#fff;--bs-progress-bar-bg:#0d6efd;--bs-progress-bar-transition:width 0.6s ease;background-color:var(--bs-progress-bg);border-radius:var(--bs-progress-border-radius);display:flex;font-size:var(--bs-progress-font-size);height:var(--bs-progress-height);overflow:hidden}.progress-bar{background-color:var(--bs-progress-bar-bg);color:var(--bs-progress-bar-color);display:flex;flex-direction:column;justify-content:center;overflow:hidden;text-align:center;transition:var(--bs-progress-bar-transition);white-space:nowrap}@media(prefers-reduced-motion:reduce){.progress-bar{transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent);background-size:var(--bs-progress-height) var(--bs-progress-height)}.progress-stacked>.progress{overflow:visible}.progress-stacked>.progress>.progress-bar{width:100%}.progress-bar-animated{animation:progress-bar-stripes 1s linear infinite}@media(prefers-reduced-motion:reduce){.progress-bar-animated{animation:none}}.list-group{--bs-list-group-color:var(--bs-body-color);--bs-list-group-bg:var(--bs-body-bg);--bs-list-group-border-color:var(--bs-border-color);--bs-list-group-border-width:var(--bs-border-width);--bs-list-group-border-radius:var(--bs-border-radius);--bs-list-group-item-padding-x:1rem;--bs-list-group-item-padding-y:0.5rem;--bs-list-group-action-color:var(--bs-secondary-color);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-tertiary-bg);--bs-list-group-action-active-color:var(--bs-body-color);--bs-list-group-action-active-bg:var(--bs-secondary-bg);--bs-list-group-disabled-color:var(--bs-secondary-color);--bs-list-group-disabled-bg:var(--bs-body-bg);--bs-list-group-active-color:#fff;--bs-list-group-active-bg:#0d6efd;--bs-list-group-active-border-color:#0d6efd;border-radius:var(--bs-list-group-border-radius);display:flex;flex-direction:column;margin-bottom:0;padding-left:0}.list-group-numbered{counter-reset:section;list-style-type:none}.list-group-numbered>.list-group-item:before{content:counters(section,".") ". ";counter-increment:section}.list-group-item-action{color:var(--bs-list-group-action-color);text-align:inherit;width:100%}.list-group-item-action:focus,.list-group-item-action:hover{background-color:var(--bs-list-group-action-hover-bg);color:var(--bs-list-group-action-hover-color);text-decoration:none;z-index:1}.list-group-item-action:active{background-color:var(--bs-list-group-action-active-bg);color:var(--bs-list-group-action-active-color)}.list-group-item{background-color:var(--bs-list-group-bg);border:var(--bs-list-group-border-width) solid var(--bs-list-group-border-color);color:var(--bs-list-group-color);display:block;padding:var(--bs-list-group-item-padding-y) var(--bs-list-group-item-padding-x);position:relative;text-decoration:none}.list-group-item:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.list-group-item:last-child{border-bottom-left-radius:inherit;border-bottom-right-radius:inherit}.list-group-item.disabled,.list-group-item:disabled{background-color:var(--bs-list-group-disabled-bg);color:var(--bs-list-group-disabled-color);pointer-events:none}.list-group-item.active{background-color:var(--bs-list-group-active-bg);border-color:var(--bs-list-group-active-border-color);color:var(--bs-list-group-active-color);z-index:2}.list-group-item+.list-group-item{border-top-width:0}.list-group-item+.list-group-item.active{border-top-width:var(--bs-list-group-border-width);margin-top:calc(var(--bs-list-group-border-width)*-1)}.list-group-horizontal{flex-direction:row}.list-group-horizontal>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal>.list-group-item:last-child:not(:first-child){border-bottom-left-radius:0;border-top-right-radius:var(--bs-list-group-border-radius)}.list-group-horizontal>.list-group-item.active{margin-top:0}.list-group-horizontal>.list-group-item+.list-group-item{border-left-width:0;border-top-width:var(--bs-list-group-border-width)}.list-group-horizontal>.list-group-item+.list-group-item.active{border-left-width:var(--bs-list-group-border-width);margin-left:calc(var(--bs-list-group-border-width)*-1)}@media(min-width:540px){.list-group-horizontal-sm{flex-direction:row}.list-group-horizontal-sm>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-sm>.list-group-item:last-child:not(:first-child){border-bottom-left-radius:0;border-top-right-radius:var(--bs-list-group-border-radius)}.list-group-horizontal-sm>.list-group-item.active{margin-top:0}.list-group-horizontal-sm>.list-group-item+.list-group-item{border-left-width:0;border-top-width:var(--bs-list-group-border-width)}.list-group-horizontal-sm>.list-group-item+.list-group-item.active{border-left-width:var(--bs-list-group-border-width);margin-left:calc(var(--bs-list-group-border-width)*-1)}}@media(min-width:720px){.list-group-horizontal-md{flex-direction:row}.list-group-horizontal-md>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-md>.list-group-item:last-child:not(:first-child){border-bottom-left-radius:0;border-top-right-radius:var(--bs-list-group-border-radius)}.list-group-horizontal-md>.list-group-item.active{margin-top:0}.list-group-horizontal-md>.list-group-item+.list-group-item{border-left-width:0;border-top-width:var(--bs-list-group-border-width)}.list-group-horizontal-md>.list-group-item+.list-group-item.active{border-left-width:var(--bs-list-group-border-width);margin-left:calc(var(--bs-list-group-border-width)*-1)}}@media(min-width:960px){.list-group-horizontal-lg{flex-direction:row}.list-group-horizontal-lg>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-lg>.list-group-item:last-child:not(:first-child){border-bottom-left-radius:0;border-top-right-radius:var(--bs-list-group-border-radius)}.list-group-horizontal-lg>.list-group-item.active{margin-top:0}.list-group-horizontal-lg>.list-group-item+.list-group-item{border-left-width:0;border-top-width:var(--bs-list-group-border-width)}.list-group-horizontal-lg>.list-group-item+.list-group-item.active{border-left-width:var(--bs-list-group-border-width);margin-left:calc(var(--bs-list-group-border-width)*-1)}}@media(min-width:1200px){.list-group-horizontal-xl{flex-direction:row}.list-group-horizontal-xl>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-xl>.list-group-item:last-child:not(:first-child){border-bottom-left-radius:0;border-top-right-radius:var(--bs-list-group-border-radius)}.list-group-horizontal-xl>.list-group-item.active{margin-top:0}.list-group-horizontal-xl>.list-group-item+.list-group-item{border-left-width:0;border-top-width:var(--bs-list-group-border-width)}.list-group-horizontal-xl>.list-group-item+.list-group-item.active{border-left-width:var(--bs-list-group-border-width);margin-left:calc(var(--bs-list-group-border-width)*-1)}}.list-group-flush{border-radius:0}.list-group-flush>.list-group-item{border-width:0 0 var(--bs-list-group-border-width)}.list-group-flush>.list-group-item:last-child{border-bottom-width:0}.list-group-item-primary{--bs-list-group-color:var(--bs-primary-text-emphasis);--bs-list-group-bg:var(--bs-primary-bg-subtle);--bs-list-group-border-color:var(--bs-primary-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-primary-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-primary-border-subtle);--bs-list-group-active-color:var(--bs-primary-bg-subtle);--bs-list-group-active-bg:var(--bs-primary-text-emphasis);--bs-list-group-active-border-color:var(--bs-primary-text-emphasis)}.list-group-item-secondary{--bs-list-group-color:var(--bs-secondary-text-emphasis);--bs-list-group-bg:var(--bs-secondary-bg-subtle);--bs-list-group-border-color:var(--bs-secondary-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-secondary-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-secondary-border-subtle);--bs-list-group-active-color:var(--bs-secondary-bg-subtle);--bs-list-group-active-bg:var(--bs-secondary-text-emphasis);--bs-list-group-active-border-color:var(--bs-secondary-text-emphasis)}.list-group-item-success{--bs-list-group-color:var(--bs-success-text-emphasis);--bs-list-group-bg:var(--bs-success-bg-subtle);--bs-list-group-border-color:var(--bs-success-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-success-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-success-border-subtle);--bs-list-group-active-color:var(--bs-success-bg-subtle);--bs-list-group-active-bg:var(--bs-success-text-emphasis);--bs-list-group-active-border-color:var(--bs-success-text-emphasis)}.list-group-item-info{--bs-list-group-color:var(--bs-info-text-emphasis);--bs-list-group-bg:var(--bs-info-bg-subtle);--bs-list-group-border-color:var(--bs-info-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-info-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-info-border-subtle);--bs-list-group-active-color:var(--bs-info-bg-subtle);--bs-list-group-active-bg:var(--bs-info-text-emphasis);--bs-list-group-active-border-color:var(--bs-info-text-emphasis)}.list-group-item-warning{--bs-list-group-color:var(--bs-warning-text-emphasis);--bs-list-group-bg:var(--bs-warning-bg-subtle);--bs-list-group-border-color:var(--bs-warning-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-warning-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-warning-border-subtle);--bs-list-group-active-color:var(--bs-warning-bg-subtle);--bs-list-group-active-bg:var(--bs-warning-text-emphasis);--bs-list-group-active-border-color:var(--bs-warning-text-emphasis)}.list-group-item-danger{--bs-list-group-color:var(--bs-danger-text-emphasis);--bs-list-group-bg:var(--bs-danger-bg-subtle);--bs-list-group-border-color:var(--bs-danger-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-danger-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-danger-border-subtle);--bs-list-group-active-color:var(--bs-danger-bg-subtle);--bs-list-group-active-bg:var(--bs-danger-text-emphasis);--bs-list-group-active-border-color:var(--bs-danger-text-emphasis)}.list-group-item-light{--bs-list-group-color:var(--bs-light-text-emphasis);--bs-list-group-bg:var(--bs-light-bg-subtle);--bs-list-group-border-color:var(--bs-light-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-light-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-light-border-subtle);--bs-list-group-active-color:var(--bs-light-bg-subtle);--bs-list-group-active-bg:var(--bs-light-text-emphasis);--bs-list-group-active-border-color:var(--bs-light-text-emphasis)}.list-group-item-dark{--bs-list-group-color:var(--bs-dark-text-emphasis);--bs-list-group-bg:var(--bs-dark-bg-subtle);--bs-list-group-border-color:var(--bs-dark-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-dark-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-dark-border-subtle);--bs-list-group-active-color:var(--bs-dark-bg-subtle);--bs-list-group-active-bg:var(--bs-dark-text-emphasis);--bs-list-group-active-border-color:var(--bs-dark-text-emphasis)}.btn-close{--bs-btn-close-color:#000;--bs-btn-close-bg:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath d='M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z'/%3E%3C/svg%3E");--bs-btn-close-opacity:0.5;--bs-btn-close-hover-opacity:0.75;--bs-btn-close-focus-shadow:0 0 0 0.1875rem var(--pst-color-accent);--bs-btn-close-focus-opacity:1;--bs-btn-close-disabled-opacity:0.25;--bs-btn-close-white-filter:invert(1) grayscale(100%) brightness(200%);background:transparent var(--bs-btn-close-bg) center/1em auto no-repeat;border:0;border-radius:.375rem;box-sizing:content-box;height:1em;opacity:var(--bs-btn-close-opacity);padding:.25em;width:1em}.btn-close,.btn-close:hover{color:var(--bs-btn-close-color)}.btn-close:hover{opacity:var(--bs-btn-close-hover-opacity);text-decoration:none}.btn-close:focus{box-shadow:var(--bs-btn-close-focus-shadow);opacity:var(--bs-btn-close-focus-opacity);outline:0}.btn-close.disabled,.btn-close:disabled{opacity:var(--bs-btn-close-disabled-opacity);pointer-events:none;user-select:none}.btn-close-white,[data-bs-theme=dark] .btn-close{filter:var(--bs-btn-close-white-filter)}.toast{--bs-toast-zindex:1090;--bs-toast-padding-x:0.75rem;--bs-toast-padding-y:0.5rem;--bs-toast-spacing:1.5rem;--bs-toast-max-width:350px;--bs-toast-font-size:0.875rem;--bs-toast-color: ;--bs-toast-bg:rgba(var(--bs-body-bg-rgb),0.85);--bs-toast-border-width:var(--bs-border-width);--bs-toast-border-color:var(--bs-border-color-translucent);--bs-toast-border-radius:var(--bs-border-radius);--bs-toast-box-shadow:var(--bs-box-shadow);--bs-toast-header-color:var(--bs-secondary-color);--bs-toast-header-bg:rgba(var(--bs-body-bg-rgb),0.85);--bs-toast-header-border-color:var(--bs-border-color-translucent);background-clip:padding-box;background-color:var(--bs-toast-bg);border:var(--bs-toast-border-width) solid var(--bs-toast-border-color);border-radius:var(--bs-toast-border-radius);box-shadow:var(--bs-toast-box-shadow);color:var(--bs-toast-color);font-size:var(--bs-toast-font-size);max-width:100%;pointer-events:auto;width:var(--bs-toast-max-width)}.toast.showing{opacity:0}.toast:not(.show){display:none}.toast-container{--bs-toast-zindex:1090;max-width:100%;pointer-events:none;position:absolute;width:max-content;z-index:var(--bs-toast-zindex)}.toast-container>:not(:last-child){margin-bottom:var(--bs-toast-spacing)}.toast-header{align-items:center;background-clip:padding-box;background-color:var(--bs-toast-header-bg);border-bottom:var(--bs-toast-border-width) solid var(--bs-toast-header-border-color);border-top-left-radius:calc(var(--bs-toast-border-radius) - var(--bs-toast-border-width));border-top-right-radius:calc(var(--bs-toast-border-radius) - var(--bs-toast-border-width));color:var(--bs-toast-header-color);display:flex;padding:var(--bs-toast-padding-y) var(--bs-toast-padding-x)}.toast-header .btn-close{margin-left:var(--bs-toast-padding-x);margin-right:calc(var(--bs-toast-padding-x)*-.5)}.toast-body{word-wrap:break-word;padding:var(--bs-toast-padding-x)}.modal{--bs-modal-zindex:1055;--bs-modal-width:500px;--bs-modal-padding:1rem;--bs-modal-margin:0.5rem;--bs-modal-color: ;--bs-modal-bg:var(--bs-body-bg);--bs-modal-border-color:var(--bs-border-color-translucent);--bs-modal-border-width:var(--bs-border-width);--bs-modal-border-radius:var(--bs-border-radius-lg);--bs-modal-box-shadow:var(--bs-box-shadow-sm);--bs-modal-inner-border-radius:calc(var(--bs-border-radius-lg) - var(--bs-border-width));--bs-modal-header-padding-x:1rem;--bs-modal-header-padding-y:1rem;--bs-modal-header-padding:1rem 1rem;--bs-modal-header-border-color:var(--bs-border-color);--bs-modal-header-border-width:var(--bs-border-width);--bs-modal-title-line-height:1.5;--bs-modal-footer-gap:0.5rem;--bs-modal-footer-bg: ;--bs-modal-footer-border-color:var(--bs-border-color);--bs-modal-footer-border-width:var(--bs-border-width);display:none;height:100%;left:0;outline:0;overflow-x:hidden;overflow-y:auto;position:fixed;top:0;width:100%;z-index:var(--bs-modal-zindex)}.modal-dialog{margin:var(--bs-modal-margin);pointer-events:none;position:relative;width:auto}.modal.fade .modal-dialog{transform:translateY(-50px);transition:transform .3s ease-out}@media(prefers-reduced-motion:reduce){.modal.fade .modal-dialog{transition:none}}.modal.show .modal-dialog{transform:none}.modal.modal-static .modal-dialog{transform:scale(1.02)}.modal-dialog-scrollable{height:calc(100% - var(--bs-modal-margin)*2)}.modal-dialog-scrollable .modal-content{max-height:100%;overflow:hidden}.modal-dialog-scrollable .modal-body{overflow-y:auto}.modal-dialog-centered{align-items:center;display:flex;min-height:calc(100% - var(--bs-modal-margin)*2)}.modal-content{background-clip:padding-box;background-color:var(--bs-modal-bg);border:var(--bs-modal-border-width) solid var(--bs-modal-border-color);border-radius:var(--bs-modal-border-radius);color:var(--bs-modal-color);display:flex;flex-direction:column;outline:0;pointer-events:auto;position:relative;width:100%}.modal-backdrop{--bs-backdrop-zindex:1050;--bs-backdrop-bg:#000;--bs-backdrop-opacity:0.5;background-color:var(--bs-backdrop-bg);height:100vh;left:0;position:fixed;top:0;width:100vw;z-index:var(--bs-backdrop-zindex)}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:var(--bs-backdrop-opacity)}.modal-header{align-items:center;border-bottom:var(--bs-modal-header-border-width) solid var(--bs-modal-header-border-color);border-top-left-radius:var(--bs-modal-inner-border-radius);border-top-right-radius:var(--bs-modal-inner-border-radius);display:flex;flex-shrink:0;padding:var(--bs-modal-header-padding)}.modal-header .btn-close{margin:calc(var(--bs-modal-header-padding-y)*-.5) calc(var(--bs-modal-header-padding-x)*-.5) calc(var(--bs-modal-header-padding-y)*-.5) auto;padding:calc(var(--bs-modal-header-padding-y)*.5) calc(var(--bs-modal-header-padding-x)*.5)}.modal-title{line-height:var(--bs-modal-title-line-height);margin-bottom:0}.modal-body{flex:1 1 auto;padding:var(--bs-modal-padding);position:relative}.modal-footer{align-items:center;background-color:var(--bs-modal-footer-bg);border-bottom-left-radius:var(--bs-modal-inner-border-radius);border-bottom-right-radius:var(--bs-modal-inner-border-radius);border-top:var(--bs-modal-footer-border-width) solid var(--bs-modal-footer-border-color);display:flex;flex-shrink:0;flex-wrap:wrap;justify-content:flex-end;padding:calc(var(--bs-modal-padding) - var(--bs-modal-footer-gap)*.5)}.modal-footer>*{margin:calc(var(--bs-modal-footer-gap)*.5)}@media(min-width:540px){.modal{--bs-modal-margin:1.75rem;--bs-modal-box-shadow:var(--bs-box-shadow)}.modal-dialog{margin-left:auto;margin-right:auto;max-width:var(--bs-modal-width)}.modal-sm{--bs-modal-width:300px}}@media(min-width:960px){.modal-lg,.modal-xl{--bs-modal-width:800px}}@media(min-width:1200px){.modal-xl{--bs-modal-width:1140px}}.modal-fullscreen{height:100%;margin:0;max-width:none;width:100vw}.modal-fullscreen .modal-content{border:0;border-radius:0;height:100%}.modal-fullscreen .modal-footer,.modal-fullscreen .modal-header{border-radius:0}.modal-fullscreen .modal-body{overflow-y:auto}@media(max-width:539.98px){.modal-fullscreen-sm-down{height:100%;margin:0;max-width:none;width:100vw}.modal-fullscreen-sm-down .modal-content{border:0;border-radius:0;height:100%}.modal-fullscreen-sm-down .modal-footer,.modal-fullscreen-sm-down .modal-header{border-radius:0}.modal-fullscreen-sm-down .modal-body{overflow-y:auto}}@media(max-width:719.98px){.modal-fullscreen-md-down{height:100%;margin:0;max-width:none;width:100vw}.modal-fullscreen-md-down .modal-content{border:0;border-radius:0;height:100%}.modal-fullscreen-md-down .modal-footer,.modal-fullscreen-md-down .modal-header{border-radius:0}.modal-fullscreen-md-down .modal-body{overflow-y:auto}}@media(max-width:959.98px){.modal-fullscreen-lg-down{height:100%;margin:0;max-width:none;width:100vw}.modal-fullscreen-lg-down .modal-content{border:0;border-radius:0;height:100%}.modal-fullscreen-lg-down .modal-footer,.modal-fullscreen-lg-down .modal-header{border-radius:0}.modal-fullscreen-lg-down .modal-body{overflow-y:auto}}@media(max-width:1199.98px){.modal-fullscreen-xl-down{height:100%;margin:0;max-width:none;width:100vw}.modal-fullscreen-xl-down .modal-content{border:0;border-radius:0;height:100%}.modal-fullscreen-xl-down .modal-footer,.modal-fullscreen-xl-down .modal-header{border-radius:0}.modal-fullscreen-xl-down .modal-body{overflow-y:auto}}.tooltip{--bs-tooltip-zindex:1080;--bs-tooltip-max-width:200px;--bs-tooltip-padding-x:0.5rem;--bs-tooltip-padding-y:0.25rem;--bs-tooltip-margin: ;--bs-tooltip-font-size:0.875rem;--bs-tooltip-color:var(--bs-body-bg);--bs-tooltip-bg:var(--bs-emphasis-color);--bs-tooltip-border-radius:var(--bs-border-radius);--bs-tooltip-opacity:0.9;--bs-tooltip-arrow-width:0.8rem;--bs-tooltip-arrow-height:0.4rem;word-wrap:break-word;display:block;font-family:var(--bs-font-sans-serif);font-size:var(--bs-tooltip-font-size);font-style:normal;font-weight:400;letter-spacing:normal;line-break:auto;line-height:1.5;margin:var(--bs-tooltip-margin);opacity:0;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;z-index:var(--bs-tooltip-zindex)}.tooltip.show{opacity:var(--bs-tooltip-opacity)}.tooltip .tooltip-arrow{display:block;height:var(--bs-tooltip-arrow-height);width:var(--bs-tooltip-arrow-width)}.tooltip .tooltip-arrow:before{border-color:transparent;border-style:solid;content:"";position:absolute}.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow,.bs-tooltip-top .tooltip-arrow{bottom:calc(var(--bs-tooltip-arrow-height)*-1)}.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow:before,.bs-tooltip-top .tooltip-arrow:before{border-top-color:var(--bs-tooltip-bg);border-width:var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width)*.5) 0;top:-1px}.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow,.bs-tooltip-end .tooltip-arrow{height:var(--bs-tooltip-arrow-width);left:calc(var(--bs-tooltip-arrow-height)*-1);width:var(--bs-tooltip-arrow-height)}.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow:before,.bs-tooltip-end .tooltip-arrow:before{border-right-color:var(--bs-tooltip-bg);border-width:calc(var(--bs-tooltip-arrow-width)*.5) var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width)*.5) 0;right:-1px}.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow,.bs-tooltip-bottom .tooltip-arrow{top:calc(var(--bs-tooltip-arrow-height)*-1)}.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow:before,.bs-tooltip-bottom .tooltip-arrow:before{border-bottom-color:var(--bs-tooltip-bg);border-width:0 calc(var(--bs-tooltip-arrow-width)*.5) var(--bs-tooltip-arrow-height);bottom:-1px}.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow,.bs-tooltip-start .tooltip-arrow{height:var(--bs-tooltip-arrow-width);right:calc(var(--bs-tooltip-arrow-height)*-1);width:var(--bs-tooltip-arrow-height)}.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow:before,.bs-tooltip-start .tooltip-arrow:before{border-left-color:var(--bs-tooltip-bg);border-width:calc(var(--bs-tooltip-arrow-width)*.5) 0 calc(var(--bs-tooltip-arrow-width)*.5) var(--bs-tooltip-arrow-height);left:-1px}.tooltip-inner{background-color:var(--bs-tooltip-bg);border-radius:var(--bs-tooltip-border-radius);color:var(--bs-tooltip-color);max-width:var(--bs-tooltip-max-width);padding:var(--bs-tooltip-padding-y) var(--bs-tooltip-padding-x);text-align:center}.popover{--bs-popover-zindex:1070;--bs-popover-max-width:276px;--bs-popover-font-size:0.875rem;--bs-popover-bg:var(--bs-body-bg);--bs-popover-border-width:var(--bs-border-width);--bs-popover-border-color:var(--bs-border-color-translucent);--bs-popover-border-radius:var(--bs-border-radius-lg);--bs-popover-inner-border-radius:calc(var(--bs-border-radius-lg) - var(--bs-border-width));--bs-popover-box-shadow:var(--bs-box-shadow);--bs-popover-header-padding-x:1rem;--bs-popover-header-padding-y:0.5rem;--bs-popover-header-font-size:1rem;--bs-popover-header-color:inherit;--bs-popover-header-bg:var(--bs-secondary-bg);--bs-popover-body-padding-x:1rem;--bs-popover-body-padding-y:1rem;--bs-popover-body-color:var(--bs-body-color);--bs-popover-arrow-width:1rem;--bs-popover-arrow-height:0.5rem;--bs-popover-arrow-border:var(--bs-popover-border-color);word-wrap:break-word;background-clip:padding-box;background-color:var(--bs-popover-bg);border:var(--bs-popover-border-width) solid var(--bs-popover-border-color);border-radius:var(--bs-popover-border-radius);display:block;font-family:var(--bs-font-sans-serif);font-size:var(--bs-popover-font-size);font-style:normal;font-weight:400;letter-spacing:normal;line-break:auto;line-height:1.5;max-width:var(--bs-popover-max-width);text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;z-index:var(--bs-popover-zindex)}.popover .popover-arrow{display:block;height:var(--bs-popover-arrow-height);width:var(--bs-popover-arrow-width)}.popover .popover-arrow:after,.popover .popover-arrow:before{border:0 solid transparent;content:"";display:block;position:absolute}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow,.bs-popover-top>.popover-arrow{bottom:calc((var(--bs-popover-arrow-height))*-1 - var(--bs-popover-border-width))}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow:after,.bs-popover-auto[data-popper-placement^=top]>.popover-arrow:before,.bs-popover-top>.popover-arrow:after,.bs-popover-top>.popover-arrow:before{border-width:var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width)*.5) 0}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow:before,.bs-popover-top>.popover-arrow:before{border-top-color:var(--bs-popover-arrow-border);bottom:0}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow:after,.bs-popover-top>.popover-arrow:after{border-top-color:var(--bs-popover-bg);bottom:var(--bs-popover-border-width)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow,.bs-popover-end>.popover-arrow{height:var(--bs-popover-arrow-width);left:calc((var(--bs-popover-arrow-height))*-1 - var(--bs-popover-border-width));width:var(--bs-popover-arrow-height)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow:after,.bs-popover-auto[data-popper-placement^=right]>.popover-arrow:before,.bs-popover-end>.popover-arrow:after,.bs-popover-end>.popover-arrow:before{border-width:calc(var(--bs-popover-arrow-width)*.5) var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width)*.5) 0}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow:before,.bs-popover-end>.popover-arrow:before{border-right-color:var(--bs-popover-arrow-border);left:0}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow:after,.bs-popover-end>.popover-arrow:after{border-right-color:var(--bs-popover-bg);left:var(--bs-popover-border-width)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow,.bs-popover-bottom>.popover-arrow{top:calc((var(--bs-popover-arrow-height))*-1 - var(--bs-popover-border-width))}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow:after,.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow:before,.bs-popover-bottom>.popover-arrow:after,.bs-popover-bottom>.popover-arrow:before{border-width:0 calc(var(--bs-popover-arrow-width)*.5) var(--bs-popover-arrow-height)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow:before,.bs-popover-bottom>.popover-arrow:before{border-bottom-color:var(--bs-popover-arrow-border);top:0}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow:after,.bs-popover-bottom>.popover-arrow:after{border-bottom-color:var(--bs-popover-bg);top:var(--bs-popover-border-width)}.bs-popover-auto[data-popper-placement^=bottom] .popover-header:before,.bs-popover-bottom .popover-header:before{border-bottom:var(--bs-popover-border-width) solid var(--bs-popover-header-bg);content:"";display:block;left:50%;margin-left:calc(var(--bs-popover-arrow-width)*-.5);position:absolute;top:0;width:var(--bs-popover-arrow-width)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow,.bs-popover-start>.popover-arrow{height:var(--bs-popover-arrow-width);right:calc((var(--bs-popover-arrow-height))*-1 - var(--bs-popover-border-width));width:var(--bs-popover-arrow-height)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow:after,.bs-popover-auto[data-popper-placement^=left]>.popover-arrow:before,.bs-popover-start>.popover-arrow:after,.bs-popover-start>.popover-arrow:before{border-width:calc(var(--bs-popover-arrow-width)*.5) 0 calc(var(--bs-popover-arrow-width)*.5) var(--bs-popover-arrow-height)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow:before,.bs-popover-start>.popover-arrow:before{border-left-color:var(--bs-popover-arrow-border);right:0}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow:after,.bs-popover-start>.popover-arrow:after{border-left-color:var(--bs-popover-bg);right:var(--bs-popover-border-width)}.popover-header{background-color:var(--bs-popover-header-bg);border-bottom:var(--bs-popover-border-width) solid var(--bs-popover-border-color);border-top-left-radius:var(--bs-popover-inner-border-radius);border-top-right-radius:var(--bs-popover-inner-border-radius);color:var(--bs-popover-header-color);font-size:var(--bs-popover-header-font-size);margin-bottom:0;padding:var(--bs-popover-header-padding-y) var(--bs-popover-header-padding-x)}.popover-header:empty{display:none}.popover-body{color:var(--bs-popover-body-color);padding:var(--bs-popover-body-padding-y) var(--bs-popover-body-padding-x)}.carousel{position:relative}.carousel.pointer-event{touch-action:pan-y}.carousel-inner{overflow:hidden;position:relative;width:100%}.carousel-inner:after{clear:both;content:"";display:block}.carousel-item{backface-visibility:hidden;display:none;float:left;margin-right:-100%;position:relative;transition:transform .6s ease-in-out;width:100%}@media(prefers-reduced-motion:reduce){.carousel-item{transition:none}}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block}.active.carousel-item-end,.carousel-item-next:not(.carousel-item-start){transform:translateX(100%)}.active.carousel-item-start,.carousel-item-prev:not(.carousel-item-end){transform:translateX(-100%)}.carousel-fade .carousel-item{opacity:0;transform:none;transition-property:opacity}.carousel-fade .carousel-item-next.carousel-item-start,.carousel-fade .carousel-item-prev.carousel-item-end,.carousel-fade .carousel-item.active{opacity:1;z-index:1}.carousel-fade .active.carousel-item-end,.carousel-fade .active.carousel-item-start{opacity:0;transition:opacity 0s .6s;z-index:0}@media(prefers-reduced-motion:reduce){.carousel-fade .active.carousel-item-end,.carousel-fade .active.carousel-item-start{transition:none}}.carousel-control-next,.carousel-control-prev{align-items:center;background:none;border:0;bottom:0;color:#fff;display:flex;justify-content:center;opacity:.5;padding:0;position:absolute;text-align:center;top:0;transition:opacity .15s ease;width:15%;z-index:1}@media(prefers-reduced-motion:reduce){.carousel-control-next,.carousel-control-prev{transition:none}}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;opacity:.9;outline:0;text-decoration:none}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{background-position:50%;background-repeat:no-repeat;background-size:100% 100%;display:inline-block;height:2rem;width:2rem}.carousel-control-prev-icon{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3E%3Cpath d='M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z'/%3E%3C/svg%3E")}.carousel-control-next-icon{background-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3E%3Cpath d='M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z'/%3E%3C/svg%3E")}.carousel-indicators{bottom:0;display:flex;justify-content:center;left:0;margin-bottom:1rem;margin-left:15%;margin-right:15%;padding:0;position:absolute;right:0;z-index:2}.carousel-indicators [data-bs-target]{background-clip:padding-box;background-color:#fff;border:0;border-bottom:10px solid transparent;border-top:10px solid transparent;box-sizing:content-box;cursor:pointer;flex:0 1 auto;height:3px;margin-left:3px;margin-right:3px;opacity:.5;padding:0;text-indent:-999px;transition:opacity .6s ease;width:30px}@media(prefers-reduced-motion:reduce){.carousel-indicators [data-bs-target]{transition:none}}.carousel-indicators .active{opacity:1}.carousel-caption{bottom:1.25rem;color:#fff;left:15%;padding-bottom:1.25rem;padding-top:1.25rem;position:absolute;right:15%;text-align:center}.carousel-dark .carousel-control-next-icon,.carousel-dark .carousel-control-prev-icon{filter:invert(1) grayscale(100)}.carousel-dark .carousel-indicators [data-bs-target]{background-color:#000}.carousel-dark .carousel-caption{color:#000}[data-bs-theme=dark] .carousel .carousel-control-next-icon,[data-bs-theme=dark] .carousel .carousel-control-prev-icon,[data-bs-theme=dark].carousel .carousel-control-next-icon,[data-bs-theme=dark].carousel .carousel-control-prev-icon{filter:invert(1) grayscale(100)}[data-bs-theme=dark] .carousel .carousel-indicators [data-bs-target],[data-bs-theme=dark].carousel .carousel-indicators [data-bs-target]{background-color:#000}[data-bs-theme=dark] .carousel .carousel-caption,[data-bs-theme=dark].carousel .carousel-caption{color:#000}.spinner-border,.spinner-grow{animation:var(--bs-spinner-animation-speed) linear infinite var(--bs-spinner-animation-name);border-radius:50%;display:inline-block;height:var(--bs-spinner-height);vertical-align:var(--bs-spinner-vertical-align);width:var(--bs-spinner-width)}@keyframes spinner-border{to{transform:rotate(1turn)}}.spinner-border{--bs-spinner-width:2rem;--bs-spinner-height:2rem;--bs-spinner-vertical-align:-0.125em;--bs-spinner-border-width:0.25em;--bs-spinner-animation-speed:0.75s;--bs-spinner-animation-name:spinner-border;border-right-color:currentcolor;border:var(--bs-spinner-border-width) solid;border-right:var(--bs-spinner-border-width) solid transparent}.spinner-border-sm{--bs-spinner-width:1rem;--bs-spinner-height:1rem;--bs-spinner-border-width:0.2em}@keyframes spinner-grow{0%{transform:scale(0)}50%{opacity:1;transform:none}}.spinner-grow{--bs-spinner-width:2rem;--bs-spinner-height:2rem;--bs-spinner-vertical-align:-0.125em;--bs-spinner-animation-speed:0.75s;--bs-spinner-animation-name:spinner-grow;background-color:currentcolor;opacity:0}.spinner-grow-sm{--bs-spinner-width:1rem;--bs-spinner-height:1rem}@media(prefers-reduced-motion:reduce){.spinner-border,.spinner-grow{--bs-spinner-animation-speed:1.5s}}.offcanvas,.offcanvas-lg,.offcanvas-md,.offcanvas-sm,.offcanvas-xl{--bs-offcanvas-zindex:1045;--bs-offcanvas-width:400px;--bs-offcanvas-height:30vh;--bs-offcanvas-padding-x:1rem;--bs-offcanvas-padding-y:1rem;--bs-offcanvas-color:var(--bs-body-color);--bs-offcanvas-bg:var(--bs-body-bg);--bs-offcanvas-border-width:var(--bs-border-width);--bs-offcanvas-border-color:var(--bs-border-color-translucent);--bs-offcanvas-box-shadow:var(--bs-box-shadow-sm);--bs-offcanvas-transition:transform 0.3s ease-in-out;--bs-offcanvas-title-line-height:1.5}@media(max-width:539.98px){.offcanvas-sm{background-clip:padding-box;background-color:var(--bs-offcanvas-bg);bottom:0;color:var(--bs-offcanvas-color);display:flex;flex-direction:column;max-width:100%;outline:0;position:fixed;transition:var(--bs-offcanvas-transition);visibility:hidden;z-index:var(--bs-offcanvas-zindex)}}@media(max-width:539.98px)and (prefers-reduced-motion:reduce){.offcanvas-sm{transition:none}}@media(max-width:539.98px){.offcanvas-sm.offcanvas-start{border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);left:0;top:0;transform:translateX(-100%);width:var(--bs-offcanvas-width)}.offcanvas-sm.offcanvas-end{border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);right:0;top:0;transform:translateX(100%);width:var(--bs-offcanvas-width)}.offcanvas-sm.offcanvas-top{border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);top:0;transform:translateY(-100%)}.offcanvas-sm.offcanvas-bottom,.offcanvas-sm.offcanvas-top{height:var(--bs-offcanvas-height);left:0;max-height:100%;right:0}.offcanvas-sm.offcanvas-bottom{border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-sm.show:not(.hiding),.offcanvas-sm.showing{transform:none}.offcanvas-sm.hiding,.offcanvas-sm.show,.offcanvas-sm.showing{visibility:visible}}@media(min-width:540px){.offcanvas-sm{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-sm .offcanvas-header{display:none}.offcanvas-sm .offcanvas-body{background-color:transparent!important;display:flex;flex-grow:0;overflow-y:visible;padding:0}}@media(max-width:719.98px){.offcanvas-md{background-clip:padding-box;background-color:var(--bs-offcanvas-bg);bottom:0;color:var(--bs-offcanvas-color);display:flex;flex-direction:column;max-width:100%;outline:0;position:fixed;transition:var(--bs-offcanvas-transition);visibility:hidden;z-index:var(--bs-offcanvas-zindex)}}@media(max-width:719.98px)and (prefers-reduced-motion:reduce){.offcanvas-md{transition:none}}@media(max-width:719.98px){.offcanvas-md.offcanvas-start{border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);left:0;top:0;transform:translateX(-100%);width:var(--bs-offcanvas-width)}.offcanvas-md.offcanvas-end{border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);right:0;top:0;transform:translateX(100%);width:var(--bs-offcanvas-width)}.offcanvas-md.offcanvas-top{border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);top:0;transform:translateY(-100%)}.offcanvas-md.offcanvas-bottom,.offcanvas-md.offcanvas-top{height:var(--bs-offcanvas-height);left:0;max-height:100%;right:0}.offcanvas-md.offcanvas-bottom{border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-md.show:not(.hiding),.offcanvas-md.showing{transform:none}.offcanvas-md.hiding,.offcanvas-md.show,.offcanvas-md.showing{visibility:visible}}@media(min-width:720px){.offcanvas-md{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-md .offcanvas-header{display:none}.offcanvas-md .offcanvas-body{background-color:transparent!important;display:flex;flex-grow:0;overflow-y:visible;padding:0}}@media(max-width:959.98px){.offcanvas-lg{background-clip:padding-box;background-color:var(--bs-offcanvas-bg);bottom:0;color:var(--bs-offcanvas-color);display:flex;flex-direction:column;max-width:100%;outline:0;position:fixed;transition:var(--bs-offcanvas-transition);visibility:hidden;z-index:var(--bs-offcanvas-zindex)}}@media(max-width:959.98px)and (prefers-reduced-motion:reduce){.offcanvas-lg{transition:none}}@media(max-width:959.98px){.offcanvas-lg.offcanvas-start{border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);left:0;top:0;transform:translateX(-100%);width:var(--bs-offcanvas-width)}.offcanvas-lg.offcanvas-end{border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);right:0;top:0;transform:translateX(100%);width:var(--bs-offcanvas-width)}.offcanvas-lg.offcanvas-top{border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);top:0;transform:translateY(-100%)}.offcanvas-lg.offcanvas-bottom,.offcanvas-lg.offcanvas-top{height:var(--bs-offcanvas-height);left:0;max-height:100%;right:0}.offcanvas-lg.offcanvas-bottom{border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-lg.show:not(.hiding),.offcanvas-lg.showing{transform:none}.offcanvas-lg.hiding,.offcanvas-lg.show,.offcanvas-lg.showing{visibility:visible}}@media(min-width:960px){.offcanvas-lg{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-lg .offcanvas-header{display:none}.offcanvas-lg .offcanvas-body{background-color:transparent!important;display:flex;flex-grow:0;overflow-y:visible;padding:0}}@media(max-width:1199.98px){.offcanvas-xl{background-clip:padding-box;background-color:var(--bs-offcanvas-bg);bottom:0;color:var(--bs-offcanvas-color);display:flex;flex-direction:column;max-width:100%;outline:0;position:fixed;transition:var(--bs-offcanvas-transition);visibility:hidden;z-index:var(--bs-offcanvas-zindex)}}@media(max-width:1199.98px)and (prefers-reduced-motion:reduce){.offcanvas-xl{transition:none}}@media(max-width:1199.98px){.offcanvas-xl.offcanvas-start{border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);left:0;top:0;transform:translateX(-100%);width:var(--bs-offcanvas-width)}.offcanvas-xl.offcanvas-end{border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);right:0;top:0;transform:translateX(100%);width:var(--bs-offcanvas-width)}.offcanvas-xl.offcanvas-top{border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);top:0;transform:translateY(-100%)}.offcanvas-xl.offcanvas-bottom,.offcanvas-xl.offcanvas-top{height:var(--bs-offcanvas-height);left:0;max-height:100%;right:0}.offcanvas-xl.offcanvas-bottom{border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-xl.show:not(.hiding),.offcanvas-xl.showing{transform:none}.offcanvas-xl.hiding,.offcanvas-xl.show,.offcanvas-xl.showing{visibility:visible}}@media(min-width:1200px){.offcanvas-xl{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-xl .offcanvas-header{display:none}.offcanvas-xl .offcanvas-body{background-color:transparent!important;display:flex;flex-grow:0;overflow-y:visible;padding:0}}.offcanvas{background-clip:padding-box;background-color:var(--bs-offcanvas-bg);bottom:0;color:var(--bs-offcanvas-color);display:flex;flex-direction:column;max-width:100%;outline:0;position:fixed;transition:var(--bs-offcanvas-transition);visibility:hidden;z-index:var(--bs-offcanvas-zindex)}@media(prefers-reduced-motion:reduce){.offcanvas{transition:none}}.offcanvas.offcanvas-start{border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);left:0;top:0;transform:translateX(-100%);width:var(--bs-offcanvas-width)}.offcanvas.offcanvas-end{border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);right:0;top:0;transform:translateX(100%);width:var(--bs-offcanvas-width)}.offcanvas.offcanvas-top{border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);top:0;transform:translateY(-100%)}.offcanvas.offcanvas-bottom,.offcanvas.offcanvas-top{height:var(--bs-offcanvas-height);left:0;max-height:100%;right:0}.offcanvas.offcanvas-bottom{border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas.show:not(.hiding),.offcanvas.showing{transform:none}.offcanvas.hiding,.offcanvas.show,.offcanvas.showing{visibility:visible}.offcanvas-backdrop{background-color:#000;height:100vh;left:0;position:fixed;top:0;width:100vw;z-index:1040}.offcanvas-backdrop.fade{opacity:0}.offcanvas-backdrop.show{opacity:.5}.offcanvas-header{align-items:center;display:flex;padding:var(--bs-offcanvas-padding-y) var(--bs-offcanvas-padding-x)}.offcanvas-header .btn-close{margin:calc(var(--bs-offcanvas-padding-y)*-.5) calc(var(--bs-offcanvas-padding-x)*-.5) calc(var(--bs-offcanvas-padding-y)*-.5) auto;padding:calc(var(--bs-offcanvas-padding-y)*.5) calc(var(--bs-offcanvas-padding-x)*.5)}.offcanvas-title{line-height:var(--bs-offcanvas-title-line-height);margin-bottom:0}.offcanvas-body{flex-grow:1;overflow-y:auto;padding:var(--bs-offcanvas-padding-y) var(--bs-offcanvas-padding-x)}.placeholder{background-color:currentcolor;cursor:wait;display:inline-block;min-height:1em;opacity:.5;vertical-align:middle}.placeholder.btn:before{content:"";display:inline-block}.placeholder-xs{min-height:.6em}.placeholder-sm{min-height:.8em}.placeholder-lg{min-height:1.2em}.placeholder-glow .placeholder{animation:placeholder-glow 2s ease-in-out infinite}@keyframes placeholder-glow{50%{opacity:.2}}.placeholder-wave{animation:placeholder-wave 2s linear infinite;mask-image:linear-gradient(130deg,#000 55%,rgba(0,0,0,.8) 75%,#000 95%);mask-size:200% 100%}@keyframes placeholder-wave{to{mask-position:-200% 0}}.clearfix:after{clear:both;content:"";display:block}.text-bg-primary{background-color:RGBA(var(--bs-primary-rgb),var(--bs-bg-opacity,1))!important;color:#fff!important}.text-bg-secondary{background-color:RGBA(var(--bs-secondary-rgb),var(--bs-bg-opacity,1))!important;color:#fff!important}.text-bg-success{background-color:RGBA(var(--bs-success-rgb),var(--bs-bg-opacity,1))!important;color:#fff!important}.text-bg-info{background-color:RGBA(var(--bs-info-rgb),var(--bs-bg-opacity,1))!important;color:#000!important}.text-bg-warning{background-color:RGBA(var(--bs-warning-rgb),var(--bs-bg-opacity,1))!important;color:#000!important}.text-bg-danger{background-color:RGBA(var(--bs-danger-rgb),var(--bs-bg-opacity,1))!important;color:#fff!important}.text-bg-light{background-color:RGBA(var(--bs-light-rgb),var(--bs-bg-opacity,1))!important;color:#000!important}.text-bg-dark{background-color:RGBA(var(--bs-dark-rgb),var(--bs-bg-opacity,1))!important;color:#fff!important}.link-primary{color:RGBA(var(--bs-primary-rgb),var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(var(--bs-primary-rgb),var(--bs-link-underline-opacity,1))!important}.link-primary:focus,.link-primary:hover{color:RGBA(10,88,202,var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(10,88,202,var(--bs-link-underline-opacity,1))!important}.link-secondary{color:RGBA(var(--bs-secondary-rgb),var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(var(--bs-secondary-rgb),var(--bs-link-underline-opacity,1))!important}.link-secondary:focus,.link-secondary:hover{color:RGBA(86,94,100,var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(86,94,100,var(--bs-link-underline-opacity,1))!important}.link-success{color:RGBA(var(--bs-success-rgb),var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(var(--bs-success-rgb),var(--bs-link-underline-opacity,1))!important}.link-success:focus,.link-success:hover{color:RGBA(20,108,67,var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(20,108,67,var(--bs-link-underline-opacity,1))!important}.link-info{color:RGBA(var(--bs-info-rgb),var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(var(--bs-info-rgb),var(--bs-link-underline-opacity,1))!important}.link-info:focus,.link-info:hover{color:RGBA(61,213,243,var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(61,213,243,var(--bs-link-underline-opacity,1))!important}.link-warning{color:RGBA(var(--bs-warning-rgb),var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(var(--bs-warning-rgb),var(--bs-link-underline-opacity,1))!important}.link-warning:focus,.link-warning:hover{color:RGBA(255,205,57,var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(255,205,57,var(--bs-link-underline-opacity,1))!important}.link-danger{color:RGBA(var(--bs-danger-rgb),var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(var(--bs-danger-rgb),var(--bs-link-underline-opacity,1))!important}.link-danger:focus,.link-danger:hover{color:RGBA(176,42,55,var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(176,42,55,var(--bs-link-underline-opacity,1))!important}.link-light{color:RGBA(var(--bs-light-rgb),var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(var(--bs-light-rgb),var(--bs-link-underline-opacity,1))!important}.link-light:focus,.link-light:hover{color:RGBA(249,250,251,var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(249,250,251,var(--bs-link-underline-opacity,1))!important}.link-dark{color:RGBA(var(--bs-dark-rgb),var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(var(--bs-dark-rgb),var(--bs-link-underline-opacity,1))!important}.link-dark:focus,.link-dark:hover{color:RGBA(26,30,33,var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(26,30,33,var(--bs-link-underline-opacity,1))!important}.link-body-emphasis{color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-opacity,1))!important;text-decoration-color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-underline-opacity,1))!important}.link-body-emphasis:focus,.link-body-emphasis:hover{color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-opacity,.75))!important;text-decoration-color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-underline-opacity,.75))!important}.focus-ring:focus{box-shadow:var(--bs-focus-ring-x,0) var(--bs-focus-ring-y,0) var(--bs-focus-ring-blur,0) var(--bs-focus-ring-width) var(--bs-focus-ring-color);outline:0}.icon-link{align-items:center;backface-visibility:hidden;display:inline-flex;gap:.375rem;text-decoration-color:rgba(var(--bs-link-color-rgb),var(--bs-link-opacity,.5));text-underline-offset:.25em}.icon-link>.bi{fill:currentcolor;flex-shrink:0;height:1em;transition:transform .2s ease-in-out;width:1em}@media(prefers-reduced-motion:reduce){.icon-link>.bi{transition:none}}.icon-link-hover:focus-visible>.bi,.icon-link-hover:hover>.bi{transform:var(--bs-icon-link-transform,translate3d(.25em,0,0))}.ratio{position:relative;width:100%}.ratio:before{content:"";display:block;padding-top:var(--bs-aspect-ratio)}.ratio>*{height:100%;left:0;position:absolute;top:0;width:100%}.ratio-1x1{--bs-aspect-ratio:100%}.ratio-4x3{--bs-aspect-ratio:75%}.ratio-16x9{--bs-aspect-ratio:56.25%}.ratio-21x9{--bs-aspect-ratio:42.8571428571%}.fixed-top{top:0}.fixed-bottom,.fixed-top{left:0;position:fixed;right:0;z-index:1030}.fixed-bottom{bottom:0}.sticky-top{top:0}.sticky-bottom,.sticky-top{position:sticky;z-index:1020}.sticky-bottom{bottom:0}@media(min-width:540px){.sticky-sm-top{position:sticky;top:0;z-index:1020}.sticky-sm-bottom{bottom:0;position:sticky;z-index:1020}}@media(min-width:720px){.sticky-md-top{position:sticky;top:0;z-index:1020}.sticky-md-bottom{bottom:0;position:sticky;z-index:1020}}@media(min-width:960px){.sticky-lg-top{position:sticky;top:0;z-index:1020}.sticky-lg-bottom{bottom:0;position:sticky;z-index:1020}}@media(min-width:1200px){.sticky-xl-top{position:sticky;top:0;z-index:1020}.sticky-xl-bottom{bottom:0;position:sticky;z-index:1020}}.hstack{align-items:center;flex-direction:row}.hstack,.vstack{align-self:stretch;display:flex}.vstack{flex:1 1 auto;flex-direction:column}.visually-hidden,.visually-hidden-focusable:not(:focus):not(:focus-within){clip:rect(0,0,0,0)!important;border:0!important;height:1px!important;margin:-1px!important;overflow:hidden!important;padding:0!important;white-space:nowrap!important;width:1px!important}.visually-hidden-focusable:not(:focus):not(:focus-within):not(caption),.visually-hidden:not(caption){position:absolute!important}.stretched-link:after{bottom:0;content:"";left:0;position:absolute;right:0;top:0;z-index:1}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.vr{align-self:stretch;background-color:currentcolor;display:inline-block;min-height:1em;opacity:.25;width:var(--bs-border-width)}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.float-start{float:left!important}.float-end{float:right!important}.float-none{float:none!important}.object-fit-contain{object-fit:contain!important}.object-fit-cover{object-fit:cover!important}.object-fit-fill{object-fit:fill!important}.object-fit-scale{object-fit:scale-down!important}.object-fit-none{object-fit:none!important}.opacity-0{opacity:0!important}.opacity-25{opacity:.25!important}.opacity-50{opacity:.5!important}.opacity-75{opacity:.75!important}.opacity-100{opacity:1!important}.overflow-auto{overflow:auto!important}.overflow-hidden{overflow:hidden!important}.overflow-visible{overflow:visible!important}.overflow-scroll{overflow:scroll!important}.overflow-x-auto{overflow-x:auto!important}.overflow-x-hidden{overflow-x:hidden!important}.overflow-x-visible{overflow-x:visible!important}.overflow-x-scroll{overflow-x:scroll!important}.overflow-y-auto{overflow-y:auto!important}.overflow-y-hidden{overflow-y:hidden!important}.overflow-y-visible{overflow-y:visible!important}.overflow-y-scroll{overflow-y:scroll!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-grid{display:grid!important}.d-inline-grid{display:inline-grid!important}.d-table{display:table!important}.d-table-row{display:table-row!important}.d-table-cell{display:table-cell!important}.d-flex{display:flex!important}.d-inline-flex{display:inline-flex!important}.d-none{display:none!important}.shadow{box-shadow:var(--bs-box-shadow)!important}.shadow-sm{box-shadow:var(--bs-box-shadow-sm)!important}.shadow-lg{box-shadow:var(--bs-box-shadow-lg)!important}.shadow-none{box-shadow:none!important}.focus-ring-primary{--bs-focus-ring-color:rgba(var(--bs-primary-rgb),var(--bs-focus-ring-opacity))}.focus-ring-secondary{--bs-focus-ring-color:rgba(var(--bs-secondary-rgb),var(--bs-focus-ring-opacity))}.focus-ring-success{--bs-focus-ring-color:rgba(var(--bs-success-rgb),var(--bs-focus-ring-opacity))}.focus-ring-info{--bs-focus-ring-color:rgba(var(--bs-info-rgb),var(--bs-focus-ring-opacity))}.focus-ring-warning{--bs-focus-ring-color:rgba(var(--bs-warning-rgb),var(--bs-focus-ring-opacity))}.focus-ring-danger{--bs-focus-ring-color:rgba(var(--bs-danger-rgb),var(--bs-focus-ring-opacity))}.focus-ring-light{--bs-focus-ring-color:rgba(var(--bs-light-rgb),var(--bs-focus-ring-opacity))}.focus-ring-dark{--bs-focus-ring-color:rgba(var(--bs-dark-rgb),var(--bs-focus-ring-opacity))}.position-static{position:static!important}.position-relative{position:relative!important}.position-absolute{position:absolute!important}.position-fixed{position:fixed!important}.position-sticky{position:sticky!important}.top-0{top:0!important}.top-50{top:50%!important}.top-100{top:100%!important}.bottom-0{bottom:0!important}.bottom-50{bottom:50%!important}.bottom-100{bottom:100%!important}.start-0{left:0!important}.start-50{left:50%!important}.start-100{left:100%!important}.end-0{right:0!important}.end-50{right:50%!important}.end-100{right:100%!important}.translate-middle{transform:translate(-50%,-50%)!important}.translate-middle-x{transform:translateX(-50%)!important}.translate-middle-y{transform:translateY(-50%)!important}.border{border:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-0{border:0!important}.border-top{border-top:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-top-0{border-top:0!important}.border-end{border-right:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-end-0{border-right:0!important}.border-bottom{border-bottom:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-bottom-0{border-bottom:0!important}.border-start{border-left:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-start-0{border-left:0!important}.border-primary{--bs-border-opacity:1;border-color:rgba(var(--bs-primary-rgb),var(--bs-border-opacity))!important}.border-secondary{--bs-border-opacity:1;border-color:rgba(var(--bs-secondary-rgb),var(--bs-border-opacity))!important}.border-success{--bs-border-opacity:1;border-color:rgba(var(--bs-success-rgb),var(--bs-border-opacity))!important}.border-info{--bs-border-opacity:1;border-color:rgba(var(--bs-info-rgb),var(--bs-border-opacity))!important}.border-warning{--bs-border-opacity:1;border-color:rgba(var(--bs-warning-rgb),var(--bs-border-opacity))!important}.border-danger{--bs-border-opacity:1;border-color:rgba(var(--bs-danger-rgb),var(--bs-border-opacity))!important}.border-light{--bs-border-opacity:1;border-color:rgba(var(--bs-light-rgb),var(--bs-border-opacity))!important}.border-dark{--bs-border-opacity:1;border-color:rgba(var(--bs-dark-rgb),var(--bs-border-opacity))!important}.border-black{--bs-border-opacity:1;border-color:rgba(var(--bs-black-rgb),var(--bs-border-opacity))!important}.border-white{--bs-border-opacity:1;border-color:rgba(var(--bs-white-rgb),var(--bs-border-opacity))!important}.border-primary-subtle{border-color:var(--bs-primary-border-subtle)!important}.border-secondary-subtle{border-color:var(--bs-secondary-border-subtle)!important}.border-success-subtle{border-color:var(--bs-success-border-subtle)!important}.border-info-subtle{border-color:var(--bs-info-border-subtle)!important}.border-warning-subtle{border-color:var(--bs-warning-border-subtle)!important}.border-danger-subtle{border-color:var(--bs-danger-border-subtle)!important}.border-light-subtle{border-color:var(--bs-light-border-subtle)!important}.border-dark-subtle{border-color:var(--bs-dark-border-subtle)!important}.border-1{border-width:1px!important}.border-2{border-width:2px!important}.border-3{border-width:3px!important}.border-4{border-width:4px!important}.border-5{border-width:5px!important}.border-opacity-10{--bs-border-opacity:0.1}.border-opacity-25{--bs-border-opacity:0.25}.border-opacity-50{--bs-border-opacity:0.5}.border-opacity-75{--bs-border-opacity:0.75}.border-opacity-100{--bs-border-opacity:1}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.w-auto{width:auto!important}.mw-100{max-width:100%!important}.vw-100{width:100vw!important}.min-vw-100{min-width:100vw!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.h-auto{height:auto!important}.mh-100{max-height:100%!important}.vh-100{height:100vh!important}.min-vh-100{min-height:100vh!important}.flex-fill{flex:1 1 auto!important}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-grow-0{flex-grow:0!important}.flex-grow-1{flex-grow:1!important}.flex-shrink-0{flex-shrink:0!important}.flex-shrink-1{flex-shrink:1!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.justify-content-evenly{justify-content:space-evenly!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{align-self:stretch!important}.order-first{order:-1!important}.order-0{order:0!important}.order-1{order:1!important}.order-2{order:2!important}.order-3{order:3!important}.order-4{order:4!important}.order-5{order:5!important}.order-last{order:6!important}.m-0{margin:0!important}.m-1{margin:.25rem!important}.m-2{margin:.5rem!important}.m-3{margin:1rem!important}.m-4{margin:1.5rem!important}.m-5{margin:3rem!important}.m-auto{margin:auto!important}.mx-0{margin-left:0!important;margin-right:0!important}.mx-1{margin-left:.25rem!important;margin-right:.25rem!important}.mx-2{margin-left:.5rem!important;margin-right:.5rem!important}.mx-3{margin-left:1rem!important;margin-right:1rem!important}.mx-4{margin-left:1.5rem!important;margin-right:1.5rem!important}.mx-5{margin-left:3rem!important;margin-right:3rem!important}.mx-auto{margin-left:auto!important;margin-right:auto!important}.my-0{margin-bottom:0!important;margin-top:0!important}.my-1{margin-bottom:.25rem!important;margin-top:.25rem!important}.my-2{margin-bottom:.5rem!important;margin-top:.5rem!important}.my-3{margin-bottom:1rem!important;margin-top:1rem!important}.my-4{margin-bottom:1.5rem!important;margin-top:1.5rem!important}.my-5{margin-bottom:3rem!important;margin-top:3rem!important}.my-auto{margin-bottom:auto!important;margin-top:auto!important}.mt-0{margin-top:0!important}.mt-1{margin-top:.25rem!important}.mt-2{margin-top:.5rem!important}.mt-3{margin-top:1rem!important}.mt-4{margin-top:1.5rem!important}.mt-5{margin-top:3rem!important}.mt-auto{margin-top:auto!important}.me-0{margin-right:0!important}.me-1{margin-right:.25rem!important}.me-2{margin-right:.5rem!important}.me-3{margin-right:1rem!important}.me-4{margin-right:1.5rem!important}.me-5{margin-right:3rem!important}.me-auto{margin-right:auto!important}.mb-0{margin-bottom:0!important}.mb-1{margin-bottom:.25rem!important}.mb-2{margin-bottom:.5rem!important}.mb-3{margin-bottom:1rem!important}.mb-4{margin-bottom:1.5rem!important}.mb-5{margin-bottom:3rem!important}.mb-auto{margin-bottom:auto!important}.ms-0{margin-left:0!important}.ms-1{margin-left:.25rem!important}.ms-2{margin-left:.5rem!important}.ms-3{margin-left:1rem!important}.ms-4{margin-left:1.5rem!important}.ms-5{margin-left:3rem!important}.ms-auto{margin-left:auto!important}.p-0{padding:0!important}.p-1{padding:.25rem!important}.p-2{padding:.5rem!important}.p-3{padding:1rem!important}.p-4{padding:1.5rem!important}.p-5{padding:3rem!important}.px-0{padding-left:0!important;padding-right:0!important}.px-1{padding-left:.25rem!important;padding-right:.25rem!important}.px-2{padding-left:.5rem!important;padding-right:.5rem!important}.px-3{padding-left:1rem!important;padding-right:1rem!important}.px-4{padding-left:1.5rem!important;padding-right:1.5rem!important}.px-5{padding-left:3rem!important;padding-right:3rem!important}.py-0{padding-bottom:0!important;padding-top:0!important}.py-1{padding-bottom:.25rem!important;padding-top:.25rem!important}.py-2{padding-bottom:.5rem!important;padding-top:.5rem!important}.py-3{padding-bottom:1rem!important;padding-top:1rem!important}.py-4{padding-bottom:1.5rem!important;padding-top:1.5rem!important}.py-5{padding-bottom:3rem!important;padding-top:3rem!important}.pt-0{padding-top:0!important}.pt-1{padding-top:.25rem!important}.pt-2{padding-top:.5rem!important}.pt-3{padding-top:1rem!important}.pt-4{padding-top:1.5rem!important}.pt-5{padding-top:3rem!important}.pe-0{padding-right:0!important}.pe-1{padding-right:.25rem!important}.pe-2{padding-right:.5rem!important}.pe-3{padding-right:1rem!important}.pe-4{padding-right:1.5rem!important}.pe-5{padding-right:3rem!important}.pb-0{padding-bottom:0!important}.pb-1{padding-bottom:.25rem!important}.pb-2{padding-bottom:.5rem!important}.pb-3{padding-bottom:1rem!important}.pb-4{padding-bottom:1.5rem!important}.pb-5{padding-bottom:3rem!important}.ps-0{padding-left:0!important}.ps-1{padding-left:.25rem!important}.ps-2{padding-left:.5rem!important}.ps-3{padding-left:1rem!important}.ps-4{padding-left:1.5rem!important}.ps-5{padding-left:3rem!important}.gap-0{gap:0!important}.gap-1{gap:.25rem!important}.gap-2{gap:.5rem!important}.gap-3{gap:1rem!important}.gap-4{gap:1.5rem!important}.gap-5{gap:3rem!important}.row-gap-0{row-gap:0!important}.row-gap-1{row-gap:.25rem!important}.row-gap-2{row-gap:.5rem!important}.row-gap-3{row-gap:1rem!important}.row-gap-4{row-gap:1.5rem!important}.row-gap-5{row-gap:3rem!important}.column-gap-0{column-gap:0!important}.column-gap-1{column-gap:.25rem!important}.column-gap-2{column-gap:.5rem!important}.column-gap-3{column-gap:1rem!important}.column-gap-4{column-gap:1.5rem!important}.column-gap-5{column-gap:3rem!important}.font-monospace{font-family:var(--bs-font-monospace)!important}.fs-1{font-size:calc(1.375rem + 1.5vw)!important}.fs-2{font-size:calc(1.325rem + .9vw)!important}.fs-3{font-size:calc(1.3rem + .6vw)!important}.fs-4{font-size:calc(1.275rem + .3vw)!important}.fs-5{font-size:1.25rem!important}.fs-6{font-size:1rem!important}.fst-italic{font-style:italic!important}.fst-normal{font-style:normal!important}.fw-lighter{font-weight:lighter!important}.fw-light{font-weight:300!important}.fw-normal{font-weight:400!important}.fw-medium{font-weight:500!important}.fw-semibold{font-weight:600!important}.fw-bold{font-weight:700!important}.fw-bolder{font-weight:bolder!important}.lh-1{line-height:1!important}.lh-sm{line-height:1.25!important}.lh-base{line-height:1.5!important}.lh-lg{line-height:2!important}.text-start{text-align:left!important}.text-end{text-align:right!important}.text-center{text-align:center!important}.text-decoration-none{text-decoration:none!important}.text-decoration-underline{text-decoration:underline!important}.text-decoration-line-through{text-decoration:line-through!important}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.text-wrap{white-space:normal!important}.text-nowrap{white-space:nowrap!important}.text-break{word-wrap:break-word!important;word-break:break-word!important}.text-primary{--bs-text-opacity:1;color:rgba(var(--bs-primary-rgb),var(--bs-text-opacity))!important}.text-secondary{--bs-text-opacity:1;color:rgba(var(--bs-secondary-rgb),var(--bs-text-opacity))!important}.text-success{--bs-text-opacity:1;color:rgba(var(--bs-success-rgb),var(--bs-text-opacity))!important}.text-info{--bs-text-opacity:1;color:rgba(var(--bs-info-rgb),var(--bs-text-opacity))!important}.text-warning{--bs-text-opacity:1;color:rgba(var(--bs-warning-rgb),var(--bs-text-opacity))!important}.text-danger{--bs-text-opacity:1;color:rgba(var(--bs-danger-rgb),var(--bs-text-opacity))!important}.text-light{--bs-text-opacity:1;color:rgba(var(--bs-light-rgb),var(--bs-text-opacity))!important}.text-dark{--bs-text-opacity:1;color:rgba(var(--bs-dark-rgb),var(--bs-text-opacity))!important}.text-black{--bs-text-opacity:1;color:rgba(var(--bs-black-rgb),var(--bs-text-opacity))!important}.text-white{--bs-text-opacity:1;color:rgba(var(--bs-white-rgb),var(--bs-text-opacity))!important}.text-body{--bs-text-opacity:1;color:rgba(var(--bs-body-color-rgb),var(--bs-text-opacity))!important}.text-muted{--bs-text-opacity:1;color:var(--bs-secondary-color)!important}.text-black-50{--bs-text-opacity:1;color:rgba(0,0,0,.5)!important}.text-white-50{--bs-text-opacity:1;color:hsla(0,0%,100%,.5)!important}.text-body-secondary{--bs-text-opacity:1;color:var(--bs-secondary-color)!important}.text-body-tertiary{--bs-text-opacity:1;color:var(--bs-tertiary-color)!important}.text-body-emphasis{--bs-text-opacity:1;color:var(--bs-emphasis-color)!important}.text-reset{--bs-text-opacity:1;color:inherit!important}.text-opacity-25{--bs-text-opacity:0.25}.text-opacity-50{--bs-text-opacity:0.5}.text-opacity-75{--bs-text-opacity:0.75}.text-opacity-100{--bs-text-opacity:1}.text-primary-emphasis{color:var(--bs-primary-text-emphasis)!important}.text-secondary-emphasis{color:var(--bs-secondary-text-emphasis)!important}.text-success-emphasis{color:var(--bs-success-text-emphasis)!important}.text-info-emphasis{color:var(--bs-info-text-emphasis)!important}.text-warning-emphasis{color:var(--bs-warning-text-emphasis)!important}.text-danger-emphasis{color:var(--bs-danger-text-emphasis)!important}.text-light-emphasis{color:var(--bs-light-text-emphasis)!important}.text-dark-emphasis{color:var(--bs-dark-text-emphasis)!important}.link-opacity-10,.link-opacity-10-hover:hover{--bs-link-opacity:0.1}.link-opacity-25,.link-opacity-25-hover:hover{--bs-link-opacity:0.25}.link-opacity-50,.link-opacity-50-hover:hover{--bs-link-opacity:0.5}.link-opacity-75,.link-opacity-75-hover:hover{--bs-link-opacity:0.75}.link-opacity-100,.link-opacity-100-hover:hover{--bs-link-opacity:1}.link-offset-1,.link-offset-1-hover:hover{text-underline-offset:.125em!important}.link-offset-2,.link-offset-2-hover:hover{text-underline-offset:.25em!important}.link-offset-3,.link-offset-3-hover:hover{text-underline-offset:.375em!important}.link-underline-primary{--bs-link-underline-opacity:1;text-decoration-color:rgba(var(--bs-primary-rgb),var(--bs-link-underline-opacity))!important}.link-underline-secondary{--bs-link-underline-opacity:1;text-decoration-color:rgba(var(--bs-secondary-rgb),var(--bs-link-underline-opacity))!important}.link-underline-success{--bs-link-underline-opacity:1;text-decoration-color:rgba(var(--bs-success-rgb),var(--bs-link-underline-opacity))!important}.link-underline-info{--bs-link-underline-opacity:1;text-decoration-color:rgba(var(--bs-info-rgb),var(--bs-link-underline-opacity))!important}.link-underline-warning{--bs-link-underline-opacity:1;text-decoration-color:rgba(var(--bs-warning-rgb),var(--bs-link-underline-opacity))!important}.link-underline-danger{--bs-link-underline-opacity:1;text-decoration-color:rgba(var(--bs-danger-rgb),var(--bs-link-underline-opacity))!important}.link-underline-light{--bs-link-underline-opacity:1;text-decoration-color:rgba(var(--bs-light-rgb),var(--bs-link-underline-opacity))!important}.link-underline-dark{--bs-link-underline-opacity:1;text-decoration-color:rgba(var(--bs-dark-rgb),var(--bs-link-underline-opacity))!important}.link-underline{--bs-link-underline-opacity:1;text-decoration-color:rgba(var(--bs-link-color-rgb),var(--bs-link-underline-opacity,1))!important}.link-underline-opacity-0,.link-underline-opacity-0-hover:hover{--bs-link-underline-opacity:0}.link-underline-opacity-10,.link-underline-opacity-10-hover:hover{--bs-link-underline-opacity:0.1}.link-underline-opacity-25,.link-underline-opacity-25-hover:hover{--bs-link-underline-opacity:0.25}.link-underline-opacity-50,.link-underline-opacity-50-hover:hover{--bs-link-underline-opacity:0.5}.link-underline-opacity-75,.link-underline-opacity-75-hover:hover{--bs-link-underline-opacity:0.75}.link-underline-opacity-100,.link-underline-opacity-100-hover:hover{--bs-link-underline-opacity:1}.bg-primary{--bs-bg-opacity:1;background-color:rgba(var(--bs-primary-rgb),var(--bs-bg-opacity))!important}.bg-secondary{--bs-bg-opacity:1;background-color:rgba(var(--bs-secondary-rgb),var(--bs-bg-opacity))!important}.bg-success{--bs-bg-opacity:1;background-color:rgba(var(--bs-success-rgb),var(--bs-bg-opacity))!important}.bg-info{--bs-bg-opacity:1;background-color:rgba(var(--bs-info-rgb),var(--bs-bg-opacity))!important}.bg-warning{--bs-bg-opacity:1;background-color:rgba(var(--bs-warning-rgb),var(--bs-bg-opacity))!important}.bg-danger{--bs-bg-opacity:1;background-color:rgba(var(--bs-danger-rgb),var(--bs-bg-opacity))!important}.bg-light{--bs-bg-opacity:1;background-color:rgba(var(--bs-light-rgb),var(--bs-bg-opacity))!important}.bg-dark{--bs-bg-opacity:1;background-color:rgba(var(--bs-dark-rgb),var(--bs-bg-opacity))!important}.bg-black{--bs-bg-opacity:1;background-color:rgba(var(--bs-black-rgb),var(--bs-bg-opacity))!important}.bg-white{--bs-bg-opacity:1;background-color:rgba(var(--bs-white-rgb),var(--bs-bg-opacity))!important}.bg-body{--bs-bg-opacity:1;background-color:rgba(var(--bs-body-bg-rgb),var(--bs-bg-opacity))!important}.bg-transparent{--bs-bg-opacity:1;background-color:transparent!important}.bg-body-secondary{--bs-bg-opacity:1;background-color:rgba(var(--bs-secondary-bg-rgb),var(--bs-bg-opacity))!important}.bg-body-tertiary{--bs-bg-opacity:1;background-color:rgba(var(--bs-tertiary-bg-rgb),var(--bs-bg-opacity))!important}.bg-opacity-10{--bs-bg-opacity:0.1}.bg-opacity-25{--bs-bg-opacity:0.25}.bg-opacity-50{--bs-bg-opacity:0.5}.bg-opacity-75{--bs-bg-opacity:0.75}.bg-opacity-100{--bs-bg-opacity:1}.bg-primary-subtle{background-color:var(--bs-primary-bg-subtle)!important}.bg-secondary-subtle{background-color:var(--bs-secondary-bg-subtle)!important}.bg-success-subtle{background-color:var(--bs-success-bg-subtle)!important}.bg-info-subtle{background-color:var(--bs-info-bg-subtle)!important}.bg-warning-subtle{background-color:var(--bs-warning-bg-subtle)!important}.bg-danger-subtle{background-color:var(--bs-danger-bg-subtle)!important}.bg-light-subtle{background-color:var(--bs-light-bg-subtle)!important}.bg-dark-subtle{background-color:var(--bs-dark-bg-subtle)!important}.bg-gradient{background-image:var(--bs-gradient)!important}.user-select-all{user-select:all!important}.user-select-auto{user-select:auto!important}.user-select-none{user-select:none!important}.pe-none{pointer-events:none!important}.pe-auto{pointer-events:auto!important}.rounded{border-radius:var(--bs-border-radius)!important}.rounded-0{border-radius:0!important}.rounded-1{border-radius:var(--bs-border-radius-sm)!important}.rounded-2{border-radius:var(--bs-border-radius)!important}.rounded-3{border-radius:var(--bs-border-radius-lg)!important}.rounded-4{border-radius:var(--bs-border-radius-xl)!important}.rounded-5{border-radius:var(--bs-border-radius-xxl)!important}.rounded-circle{border-radius:50%!important}.rounded-pill{border-radius:var(--bs-border-radius-pill)!important}.rounded-top{border-top-left-radius:var(--bs-border-radius)!important;border-top-right-radius:var(--bs-border-radius)!important}.rounded-top-0{border-top-left-radius:0!important;border-top-right-radius:0!important}.rounded-top-1{border-top-left-radius:var(--bs-border-radius-sm)!important;border-top-right-radius:var(--bs-border-radius-sm)!important}.rounded-top-2{border-top-left-radius:var(--bs-border-radius)!important;border-top-right-radius:var(--bs-border-radius)!important}.rounded-top-3{border-top-left-radius:var(--bs-border-radius-lg)!important;border-top-right-radius:var(--bs-border-radius-lg)!important}.rounded-top-4{border-top-left-radius:var(--bs-border-radius-xl)!important;border-top-right-radius:var(--bs-border-radius-xl)!important}.rounded-top-5{border-top-left-radius:var(--bs-border-radius-xxl)!important;border-top-right-radius:var(--bs-border-radius-xxl)!important}.rounded-top-circle{border-top-left-radius:50%!important;border-top-right-radius:50%!important}.rounded-top-pill{border-top-left-radius:var(--bs-border-radius-pill)!important;border-top-right-radius:var(--bs-border-radius-pill)!important}.rounded-end{border-bottom-right-radius:var(--bs-border-radius)!important;border-top-right-radius:var(--bs-border-radius)!important}.rounded-end-0{border-bottom-right-radius:0!important;border-top-right-radius:0!important}.rounded-end-1{border-bottom-right-radius:var(--bs-border-radius-sm)!important;border-top-right-radius:var(--bs-border-radius-sm)!important}.rounded-end-2{border-bottom-right-radius:var(--bs-border-radius)!important;border-top-right-radius:var(--bs-border-radius)!important}.rounded-end-3{border-bottom-right-radius:var(--bs-border-radius-lg)!important;border-top-right-radius:var(--bs-border-radius-lg)!important}.rounded-end-4{border-bottom-right-radius:var(--bs-border-radius-xl)!important;border-top-right-radius:var(--bs-border-radius-xl)!important}.rounded-end-5{border-bottom-right-radius:var(--bs-border-radius-xxl)!important;border-top-right-radius:var(--bs-border-radius-xxl)!important}.rounded-end-circle{border-bottom-right-radius:50%!important;border-top-right-radius:50%!important}.rounded-end-pill{border-bottom-right-radius:var(--bs-border-radius-pill)!important;border-top-right-radius:var(--bs-border-radius-pill)!important}.rounded-bottom{border-bottom-left-radius:var(--bs-border-radius)!important;border-bottom-right-radius:var(--bs-border-radius)!important}.rounded-bottom-0{border-bottom-left-radius:0!important;border-bottom-right-radius:0!important}.rounded-bottom-1{border-bottom-left-radius:var(--bs-border-radius-sm)!important;border-bottom-right-radius:var(--bs-border-radius-sm)!important}.rounded-bottom-2{border-bottom-left-radius:var(--bs-border-radius)!important;border-bottom-right-radius:var(--bs-border-radius)!important}.rounded-bottom-3{border-bottom-left-radius:var(--bs-border-radius-lg)!important;border-bottom-right-radius:var(--bs-border-radius-lg)!important}.rounded-bottom-4{border-bottom-left-radius:var(--bs-border-radius-xl)!important;border-bottom-right-radius:var(--bs-border-radius-xl)!important}.rounded-bottom-5{border-bottom-left-radius:var(--bs-border-radius-xxl)!important;border-bottom-right-radius:var(--bs-border-radius-xxl)!important}.rounded-bottom-circle{border-bottom-left-radius:50%!important;border-bottom-right-radius:50%!important}.rounded-bottom-pill{border-bottom-left-radius:var(--bs-border-radius-pill)!important;border-bottom-right-radius:var(--bs-border-radius-pill)!important}.rounded-start{border-bottom-left-radius:var(--bs-border-radius)!important;border-top-left-radius:var(--bs-border-radius)!important}.rounded-start-0{border-bottom-left-radius:0!important;border-top-left-radius:0!important}.rounded-start-1{border-bottom-left-radius:var(--bs-border-radius-sm)!important;border-top-left-radius:var(--bs-border-radius-sm)!important}.rounded-start-2{border-bottom-left-radius:var(--bs-border-radius)!important;border-top-left-radius:var(--bs-border-radius)!important}.rounded-start-3{border-bottom-left-radius:var(--bs-border-radius-lg)!important;border-top-left-radius:var(--bs-border-radius-lg)!important}.rounded-start-4{border-bottom-left-radius:var(--bs-border-radius-xl)!important;border-top-left-radius:var(--bs-border-radius-xl)!important}.rounded-start-5{border-bottom-left-radius:var(--bs-border-radius-xxl)!important;border-top-left-radius:var(--bs-border-radius-xxl)!important}.rounded-start-circle{border-bottom-left-radius:50%!important;border-top-left-radius:50%!important}.rounded-start-pill{border-bottom-left-radius:var(--bs-border-radius-pill)!important;border-top-left-radius:var(--bs-border-radius-pill)!important}.visible{visibility:visible!important}.invisible{visibility:hidden!important}.z-n1{z-index:-1!important}.z-0{z-index:0!important}.z-1{z-index:1!important}.z-2{z-index:2!important}.z-3{z-index:3!important}@media(min-width:540px){.float-sm-start{float:left!important}.float-sm-end{float:right!important}.float-sm-none{float:none!important}.object-fit-sm-contain{object-fit:contain!important}.object-fit-sm-cover{object-fit:cover!important}.object-fit-sm-fill{object-fit:fill!important}.object-fit-sm-scale{object-fit:scale-down!important}.object-fit-sm-none{object-fit:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-grid{display:grid!important}.d-sm-inline-grid{display:inline-grid!important}.d-sm-table{display:table!important}.d-sm-table-row{display:table-row!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:flex!important}.d-sm-inline-flex{display:inline-flex!important}.d-sm-none{display:none!important}.flex-sm-fill{flex:1 1 auto!important}.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-grow-0{flex-grow:0!important}.flex-sm-grow-1{flex-grow:1!important}.flex-sm-shrink-0{flex-shrink:0!important}.flex-sm-shrink-1{flex-shrink:1!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.justify-content-sm-evenly{justify-content:space-evenly!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{align-self:stretch!important}.order-sm-first{order:-1!important}.order-sm-0{order:0!important}.order-sm-1{order:1!important}.order-sm-2{order:2!important}.order-sm-3{order:3!important}.order-sm-4{order:4!important}.order-sm-5{order:5!important}.order-sm-last{order:6!important}.m-sm-0{margin:0!important}.m-sm-1{margin:.25rem!important}.m-sm-2{margin:.5rem!important}.m-sm-3{margin:1rem!important}.m-sm-4{margin:1.5rem!important}.m-sm-5{margin:3rem!important}.m-sm-auto{margin:auto!important}.mx-sm-0{margin-left:0!important;margin-right:0!important}.mx-sm-1{margin-left:.25rem!important;margin-right:.25rem!important}.mx-sm-2{margin-left:.5rem!important;margin-right:.5rem!important}.mx-sm-3{margin-left:1rem!important;margin-right:1rem!important}.mx-sm-4{margin-left:1.5rem!important;margin-right:1.5rem!important}.mx-sm-5{margin-left:3rem!important;margin-right:3rem!important}.mx-sm-auto{margin-left:auto!important;margin-right:auto!important}.my-sm-0{margin-bottom:0!important;margin-top:0!important}.my-sm-1{margin-bottom:.25rem!important;margin-top:.25rem!important}.my-sm-2{margin-bottom:.5rem!important;margin-top:.5rem!important}.my-sm-3{margin-bottom:1rem!important;margin-top:1rem!important}.my-sm-4{margin-bottom:1.5rem!important;margin-top:1.5rem!important}.my-sm-5{margin-bottom:3rem!important;margin-top:3rem!important}.my-sm-auto{margin-bottom:auto!important;margin-top:auto!important}.mt-sm-0{margin-top:0!important}.mt-sm-1{margin-top:.25rem!important}.mt-sm-2{margin-top:.5rem!important}.mt-sm-3{margin-top:1rem!important}.mt-sm-4{margin-top:1.5rem!important}.mt-sm-5{margin-top:3rem!important}.mt-sm-auto{margin-top:auto!important}.me-sm-0{margin-right:0!important}.me-sm-1{margin-right:.25rem!important}.me-sm-2{margin-right:.5rem!important}.me-sm-3{margin-right:1rem!important}.me-sm-4{margin-right:1.5rem!important}.me-sm-5{margin-right:3rem!important}.me-sm-auto{margin-right:auto!important}.mb-sm-0{margin-bottom:0!important}.mb-sm-1{margin-bottom:.25rem!important}.mb-sm-2{margin-bottom:.5rem!important}.mb-sm-3{margin-bottom:1rem!important}.mb-sm-4{margin-bottom:1.5rem!important}.mb-sm-5{margin-bottom:3rem!important}.mb-sm-auto{margin-bottom:auto!important}.ms-sm-0{margin-left:0!important}.ms-sm-1{margin-left:.25rem!important}.ms-sm-2{margin-left:.5rem!important}.ms-sm-3{margin-left:1rem!important}.ms-sm-4{margin-left:1.5rem!important}.ms-sm-5{margin-left:3rem!important}.ms-sm-auto{margin-left:auto!important}.p-sm-0{padding:0!important}.p-sm-1{padding:.25rem!important}.p-sm-2{padding:.5rem!important}.p-sm-3{padding:1rem!important}.p-sm-4{padding:1.5rem!important}.p-sm-5{padding:3rem!important}.px-sm-0{padding-left:0!important;padding-right:0!important}.px-sm-1{padding-left:.25rem!important;padding-right:.25rem!important}.px-sm-2{padding-left:.5rem!important;padding-right:.5rem!important}.px-sm-3{padding-left:1rem!important;padding-right:1rem!important}.px-sm-4{padding-left:1.5rem!important;padding-right:1.5rem!important}.px-sm-5{padding-left:3rem!important;padding-right:3rem!important}.py-sm-0{padding-bottom:0!important;padding-top:0!important}.py-sm-1{padding-bottom:.25rem!important;padding-top:.25rem!important}.py-sm-2{padding-bottom:.5rem!important;padding-top:.5rem!important}.py-sm-3{padding-bottom:1rem!important;padding-top:1rem!important}.py-sm-4{padding-bottom:1.5rem!important;padding-top:1.5rem!important}.py-sm-5{padding-bottom:3rem!important;padding-top:3rem!important}.pt-sm-0{padding-top:0!important}.pt-sm-1{padding-top:.25rem!important}.pt-sm-2{padding-top:.5rem!important}.pt-sm-3{padding-top:1rem!important}.pt-sm-4{padding-top:1.5rem!important}.pt-sm-5{padding-top:3rem!important}.pe-sm-0{padding-right:0!important}.pe-sm-1{padding-right:.25rem!important}.pe-sm-2{padding-right:.5rem!important}.pe-sm-3{padding-right:1rem!important}.pe-sm-4{padding-right:1.5rem!important}.pe-sm-5{padding-right:3rem!important}.pb-sm-0{padding-bottom:0!important}.pb-sm-1{padding-bottom:.25rem!important}.pb-sm-2{padding-bottom:.5rem!important}.pb-sm-3{padding-bottom:1rem!important}.pb-sm-4{padding-bottom:1.5rem!important}.pb-sm-5{padding-bottom:3rem!important}.ps-sm-0{padding-left:0!important}.ps-sm-1{padding-left:.25rem!important}.ps-sm-2{padding-left:.5rem!important}.ps-sm-3{padding-left:1rem!important}.ps-sm-4{padding-left:1.5rem!important}.ps-sm-5{padding-left:3rem!important}.gap-sm-0{gap:0!important}.gap-sm-1{gap:.25rem!important}.gap-sm-2{gap:.5rem!important}.gap-sm-3{gap:1rem!important}.gap-sm-4{gap:1.5rem!important}.gap-sm-5{gap:3rem!important}.row-gap-sm-0{row-gap:0!important}.row-gap-sm-1{row-gap:.25rem!important}.row-gap-sm-2{row-gap:.5rem!important}.row-gap-sm-3{row-gap:1rem!important}.row-gap-sm-4{row-gap:1.5rem!important}.row-gap-sm-5{row-gap:3rem!important}.column-gap-sm-0{column-gap:0!important}.column-gap-sm-1{column-gap:.25rem!important}.column-gap-sm-2{column-gap:.5rem!important}.column-gap-sm-3{column-gap:1rem!important}.column-gap-sm-4{column-gap:1.5rem!important}.column-gap-sm-5{column-gap:3rem!important}.text-sm-start{text-align:left!important}.text-sm-end{text-align:right!important}.text-sm-center{text-align:center!important}}@media(min-width:720px){.float-md-start{float:left!important}.float-md-end{float:right!important}.float-md-none{float:none!important}.object-fit-md-contain{object-fit:contain!important}.object-fit-md-cover{object-fit:cover!important}.object-fit-md-fill{object-fit:fill!important}.object-fit-md-scale{object-fit:scale-down!important}.object-fit-md-none{object-fit:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-grid{display:grid!important}.d-md-inline-grid{display:inline-grid!important}.d-md-table{display:table!important}.d-md-table-row{display:table-row!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:flex!important}.d-md-inline-flex{display:inline-flex!important}.d-md-none{display:none!important}.flex-md-fill{flex:1 1 auto!important}.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-grow-0{flex-grow:0!important}.flex-md-grow-1{flex-grow:1!important}.flex-md-shrink-0{flex-shrink:0!important}.flex-md-shrink-1{flex-shrink:1!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.justify-content-md-evenly{justify-content:space-evenly!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{align-self:stretch!important}.order-md-first{order:-1!important}.order-md-0{order:0!important}.order-md-1{order:1!important}.order-md-2{order:2!important}.order-md-3{order:3!important}.order-md-4{order:4!important}.order-md-5{order:5!important}.order-md-last{order:6!important}.m-md-0{margin:0!important}.m-md-1{margin:.25rem!important}.m-md-2{margin:.5rem!important}.m-md-3{margin:1rem!important}.m-md-4{margin:1.5rem!important}.m-md-5{margin:3rem!important}.m-md-auto{margin:auto!important}.mx-md-0{margin-left:0!important;margin-right:0!important}.mx-md-1{margin-left:.25rem!important;margin-right:.25rem!important}.mx-md-2{margin-left:.5rem!important;margin-right:.5rem!important}.mx-md-3{margin-left:1rem!important;margin-right:1rem!important}.mx-md-4{margin-left:1.5rem!important;margin-right:1.5rem!important}.mx-md-5{margin-left:3rem!important;margin-right:3rem!important}.mx-md-auto{margin-left:auto!important;margin-right:auto!important}.my-md-0{margin-bottom:0!important;margin-top:0!important}.my-md-1{margin-bottom:.25rem!important;margin-top:.25rem!important}.my-md-2{margin-bottom:.5rem!important;margin-top:.5rem!important}.my-md-3{margin-bottom:1rem!important;margin-top:1rem!important}.my-md-4{margin-bottom:1.5rem!important;margin-top:1.5rem!important}.my-md-5{margin-bottom:3rem!important;margin-top:3rem!important}.my-md-auto{margin-bottom:auto!important;margin-top:auto!important}.mt-md-0{margin-top:0!important}.mt-md-1{margin-top:.25rem!important}.mt-md-2{margin-top:.5rem!important}.mt-md-3{margin-top:1rem!important}.mt-md-4{margin-top:1.5rem!important}.mt-md-5{margin-top:3rem!important}.mt-md-auto{margin-top:auto!important}.me-md-0{margin-right:0!important}.me-md-1{margin-right:.25rem!important}.me-md-2{margin-right:.5rem!important}.me-md-3{margin-right:1rem!important}.me-md-4{margin-right:1.5rem!important}.me-md-5{margin-right:3rem!important}.me-md-auto{margin-right:auto!important}.mb-md-0{margin-bottom:0!important}.mb-md-1{margin-bottom:.25rem!important}.mb-md-2{margin-bottom:.5rem!important}.mb-md-3{margin-bottom:1rem!important}.mb-md-4{margin-bottom:1.5rem!important}.mb-md-5{margin-bottom:3rem!important}.mb-md-auto{margin-bottom:auto!important}.ms-md-0{margin-left:0!important}.ms-md-1{margin-left:.25rem!important}.ms-md-2{margin-left:.5rem!important}.ms-md-3{margin-left:1rem!important}.ms-md-4{margin-left:1.5rem!important}.ms-md-5{margin-left:3rem!important}.ms-md-auto{margin-left:auto!important}.p-md-0{padding:0!important}.p-md-1{padding:.25rem!important}.p-md-2{padding:.5rem!important}.p-md-3{padding:1rem!important}.p-md-4{padding:1.5rem!important}.p-md-5{padding:3rem!important}.px-md-0{padding-left:0!important;padding-right:0!important}.px-md-1{padding-left:.25rem!important;padding-right:.25rem!important}.px-md-2{padding-left:.5rem!important;padding-right:.5rem!important}.px-md-3{padding-left:1rem!important;padding-right:1rem!important}.px-md-4{padding-left:1.5rem!important;padding-right:1.5rem!important}.px-md-5{padding-left:3rem!important;padding-right:3rem!important}.py-md-0{padding-bottom:0!important;padding-top:0!important}.py-md-1{padding-bottom:.25rem!important;padding-top:.25rem!important}.py-md-2{padding-bottom:.5rem!important;padding-top:.5rem!important}.py-md-3{padding-bottom:1rem!important;padding-top:1rem!important}.py-md-4{padding-bottom:1.5rem!important;padding-top:1.5rem!important}.py-md-5{padding-bottom:3rem!important;padding-top:3rem!important}.pt-md-0{padding-top:0!important}.pt-md-1{padding-top:.25rem!important}.pt-md-2{padding-top:.5rem!important}.pt-md-3{padding-top:1rem!important}.pt-md-4{padding-top:1.5rem!important}.pt-md-5{padding-top:3rem!important}.pe-md-0{padding-right:0!important}.pe-md-1{padding-right:.25rem!important}.pe-md-2{padding-right:.5rem!important}.pe-md-3{padding-right:1rem!important}.pe-md-4{padding-right:1.5rem!important}.pe-md-5{padding-right:3rem!important}.pb-md-0{padding-bottom:0!important}.pb-md-1{padding-bottom:.25rem!important}.pb-md-2{padding-bottom:.5rem!important}.pb-md-3{padding-bottom:1rem!important}.pb-md-4{padding-bottom:1.5rem!important}.pb-md-5{padding-bottom:3rem!important}.ps-md-0{padding-left:0!important}.ps-md-1{padding-left:.25rem!important}.ps-md-2{padding-left:.5rem!important}.ps-md-3{padding-left:1rem!important}.ps-md-4{padding-left:1.5rem!important}.ps-md-5{padding-left:3rem!important}.gap-md-0{gap:0!important}.gap-md-1{gap:.25rem!important}.gap-md-2{gap:.5rem!important}.gap-md-3{gap:1rem!important}.gap-md-4{gap:1.5rem!important}.gap-md-5{gap:3rem!important}.row-gap-md-0{row-gap:0!important}.row-gap-md-1{row-gap:.25rem!important}.row-gap-md-2{row-gap:.5rem!important}.row-gap-md-3{row-gap:1rem!important}.row-gap-md-4{row-gap:1.5rem!important}.row-gap-md-5{row-gap:3rem!important}.column-gap-md-0{column-gap:0!important}.column-gap-md-1{column-gap:.25rem!important}.column-gap-md-2{column-gap:.5rem!important}.column-gap-md-3{column-gap:1rem!important}.column-gap-md-4{column-gap:1.5rem!important}.column-gap-md-5{column-gap:3rem!important}.text-md-start{text-align:left!important}.text-md-end{text-align:right!important}.text-md-center{text-align:center!important}}@media(min-width:960px){.float-lg-start{float:left!important}.float-lg-end{float:right!important}.float-lg-none{float:none!important}.object-fit-lg-contain{object-fit:contain!important}.object-fit-lg-cover{object-fit:cover!important}.object-fit-lg-fill{object-fit:fill!important}.object-fit-lg-scale{object-fit:scale-down!important}.object-fit-lg-none{object-fit:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-grid{display:grid!important}.d-lg-inline-grid{display:inline-grid!important}.d-lg-table{display:table!important}.d-lg-table-row{display:table-row!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:flex!important}.d-lg-inline-flex{display:inline-flex!important}.d-lg-none{display:none!important}.flex-lg-fill{flex:1 1 auto!important}.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-grow-0{flex-grow:0!important}.flex-lg-grow-1{flex-grow:1!important}.flex-lg-shrink-0{flex-shrink:0!important}.flex-lg-shrink-1{flex-shrink:1!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.justify-content-lg-evenly{justify-content:space-evenly!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{align-self:stretch!important}.order-lg-first{order:-1!important}.order-lg-0{order:0!important}.order-lg-1{order:1!important}.order-lg-2{order:2!important}.order-lg-3{order:3!important}.order-lg-4{order:4!important}.order-lg-5{order:5!important}.order-lg-last{order:6!important}.m-lg-0{margin:0!important}.m-lg-1{margin:.25rem!important}.m-lg-2{margin:.5rem!important}.m-lg-3{margin:1rem!important}.m-lg-4{margin:1.5rem!important}.m-lg-5{margin:3rem!important}.m-lg-auto{margin:auto!important}.mx-lg-0{margin-left:0!important;margin-right:0!important}.mx-lg-1{margin-left:.25rem!important;margin-right:.25rem!important}.mx-lg-2{margin-left:.5rem!important;margin-right:.5rem!important}.mx-lg-3{margin-left:1rem!important;margin-right:1rem!important}.mx-lg-4{margin-left:1.5rem!important;margin-right:1.5rem!important}.mx-lg-5{margin-left:3rem!important;margin-right:3rem!important}.mx-lg-auto{margin-left:auto!important;margin-right:auto!important}.my-lg-0{margin-bottom:0!important;margin-top:0!important}.my-lg-1{margin-bottom:.25rem!important;margin-top:.25rem!important}.my-lg-2{margin-bottom:.5rem!important;margin-top:.5rem!important}.my-lg-3{margin-bottom:1rem!important;margin-top:1rem!important}.my-lg-4{margin-bottom:1.5rem!important;margin-top:1.5rem!important}.my-lg-5{margin-bottom:3rem!important;margin-top:3rem!important}.my-lg-auto{margin-bottom:auto!important;margin-top:auto!important}.mt-lg-0{margin-top:0!important}.mt-lg-1{margin-top:.25rem!important}.mt-lg-2{margin-top:.5rem!important}.mt-lg-3{margin-top:1rem!important}.mt-lg-4{margin-top:1.5rem!important}.mt-lg-5{margin-top:3rem!important}.mt-lg-auto{margin-top:auto!important}.me-lg-0{margin-right:0!important}.me-lg-1{margin-right:.25rem!important}.me-lg-2{margin-right:.5rem!important}.me-lg-3{margin-right:1rem!important}.me-lg-4{margin-right:1.5rem!important}.me-lg-5{margin-right:3rem!important}.me-lg-auto{margin-right:auto!important}.mb-lg-0{margin-bottom:0!important}.mb-lg-1{margin-bottom:.25rem!important}.mb-lg-2{margin-bottom:.5rem!important}.mb-lg-3{margin-bottom:1rem!important}.mb-lg-4{margin-bottom:1.5rem!important}.mb-lg-5{margin-bottom:3rem!important}.mb-lg-auto{margin-bottom:auto!important}.ms-lg-0{margin-left:0!important}.ms-lg-1{margin-left:.25rem!important}.ms-lg-2{margin-left:.5rem!important}.ms-lg-3{margin-left:1rem!important}.ms-lg-4{margin-left:1.5rem!important}.ms-lg-5{margin-left:3rem!important}.ms-lg-auto{margin-left:auto!important}.p-lg-0{padding:0!important}.p-lg-1{padding:.25rem!important}.p-lg-2{padding:.5rem!important}.p-lg-3{padding:1rem!important}.p-lg-4{padding:1.5rem!important}.p-lg-5{padding:3rem!important}.px-lg-0{padding-left:0!important;padding-right:0!important}.px-lg-1{padding-left:.25rem!important;padding-right:.25rem!important}.px-lg-2{padding-left:.5rem!important;padding-right:.5rem!important}.px-lg-3{padding-left:1rem!important;padding-right:1rem!important}.px-lg-4{padding-left:1.5rem!important;padding-right:1.5rem!important}.px-lg-5{padding-left:3rem!important;padding-right:3rem!important}.py-lg-0{padding-bottom:0!important;padding-top:0!important}.py-lg-1{padding-bottom:.25rem!important;padding-top:.25rem!important}.py-lg-2{padding-bottom:.5rem!important;padding-top:.5rem!important}.py-lg-3{padding-bottom:1rem!important;padding-top:1rem!important}.py-lg-4{padding-bottom:1.5rem!important;padding-top:1.5rem!important}.py-lg-5{padding-bottom:3rem!important;padding-top:3rem!important}.pt-lg-0{padding-top:0!important}.pt-lg-1{padding-top:.25rem!important}.pt-lg-2{padding-top:.5rem!important}.pt-lg-3{padding-top:1rem!important}.pt-lg-4{padding-top:1.5rem!important}.pt-lg-5{padding-top:3rem!important}.pe-lg-0{padding-right:0!important}.pe-lg-1{padding-right:.25rem!important}.pe-lg-2{padding-right:.5rem!important}.pe-lg-3{padding-right:1rem!important}.pe-lg-4{padding-right:1.5rem!important}.pe-lg-5{padding-right:3rem!important}.pb-lg-0{padding-bottom:0!important}.pb-lg-1{padding-bottom:.25rem!important}.pb-lg-2{padding-bottom:.5rem!important}.pb-lg-3{padding-bottom:1rem!important}.pb-lg-4{padding-bottom:1.5rem!important}.pb-lg-5{padding-bottom:3rem!important}.ps-lg-0{padding-left:0!important}.ps-lg-1{padding-left:.25rem!important}.ps-lg-2{padding-left:.5rem!important}.ps-lg-3{padding-left:1rem!important}.ps-lg-4{padding-left:1.5rem!important}.ps-lg-5{padding-left:3rem!important}.gap-lg-0{gap:0!important}.gap-lg-1{gap:.25rem!important}.gap-lg-2{gap:.5rem!important}.gap-lg-3{gap:1rem!important}.gap-lg-4{gap:1.5rem!important}.gap-lg-5{gap:3rem!important}.row-gap-lg-0{row-gap:0!important}.row-gap-lg-1{row-gap:.25rem!important}.row-gap-lg-2{row-gap:.5rem!important}.row-gap-lg-3{row-gap:1rem!important}.row-gap-lg-4{row-gap:1.5rem!important}.row-gap-lg-5{row-gap:3rem!important}.column-gap-lg-0{column-gap:0!important}.column-gap-lg-1{column-gap:.25rem!important}.column-gap-lg-2{column-gap:.5rem!important}.column-gap-lg-3{column-gap:1rem!important}.column-gap-lg-4{column-gap:1.5rem!important}.column-gap-lg-5{column-gap:3rem!important}.text-lg-start{text-align:left!important}.text-lg-end{text-align:right!important}.text-lg-center{text-align:center!important}}@media(min-width:1200px){.float-xl-start{float:left!important}.float-xl-end{float:right!important}.float-xl-none{float:none!important}.object-fit-xl-contain{object-fit:contain!important}.object-fit-xl-cover{object-fit:cover!important}.object-fit-xl-fill{object-fit:fill!important}.object-fit-xl-scale{object-fit:scale-down!important}.object-fit-xl-none{object-fit:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-grid{display:grid!important}.d-xl-inline-grid{display:inline-grid!important}.d-xl-table{display:table!important}.d-xl-table-row{display:table-row!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:flex!important}.d-xl-inline-flex{display:inline-flex!important}.d-xl-none{display:none!important}.flex-xl-fill{flex:1 1 auto!important}.flex-xl-row{flex-direction:row!important}.flex-xl-column{flex-direction:column!important}.flex-xl-row-reverse{flex-direction:row-reverse!important}.flex-xl-column-reverse{flex-direction:column-reverse!important}.flex-xl-grow-0{flex-grow:0!important}.flex-xl-grow-1{flex-grow:1!important}.flex-xl-shrink-0{flex-shrink:0!important}.flex-xl-shrink-1{flex-shrink:1!important}.flex-xl-wrap{flex-wrap:wrap!important}.flex-xl-nowrap{flex-wrap:nowrap!important}.flex-xl-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xl-start{justify-content:flex-start!important}.justify-content-xl-end{justify-content:flex-end!important}.justify-content-xl-center{justify-content:center!important}.justify-content-xl-between{justify-content:space-between!important}.justify-content-xl-around{justify-content:space-around!important}.justify-content-xl-evenly{justify-content:space-evenly!important}.align-items-xl-start{align-items:flex-start!important}.align-items-xl-end{align-items:flex-end!important}.align-items-xl-center{align-items:center!important}.align-items-xl-baseline{align-items:baseline!important}.align-items-xl-stretch{align-items:stretch!important}.align-content-xl-start{align-content:flex-start!important}.align-content-xl-end{align-content:flex-end!important}.align-content-xl-center{align-content:center!important}.align-content-xl-between{align-content:space-between!important}.align-content-xl-around{align-content:space-around!important}.align-content-xl-stretch{align-content:stretch!important}.align-self-xl-auto{align-self:auto!important}.align-self-xl-start{align-self:flex-start!important}.align-self-xl-end{align-self:flex-end!important}.align-self-xl-center{align-self:center!important}.align-self-xl-baseline{align-self:baseline!important}.align-self-xl-stretch{align-self:stretch!important}.order-xl-first{order:-1!important}.order-xl-0{order:0!important}.order-xl-1{order:1!important}.order-xl-2{order:2!important}.order-xl-3{order:3!important}.order-xl-4{order:4!important}.order-xl-5{order:5!important}.order-xl-last{order:6!important}.m-xl-0{margin:0!important}.m-xl-1{margin:.25rem!important}.m-xl-2{margin:.5rem!important}.m-xl-3{margin:1rem!important}.m-xl-4{margin:1.5rem!important}.m-xl-5{margin:3rem!important}.m-xl-auto{margin:auto!important}.mx-xl-0{margin-left:0!important;margin-right:0!important}.mx-xl-1{margin-left:.25rem!important;margin-right:.25rem!important}.mx-xl-2{margin-left:.5rem!important;margin-right:.5rem!important}.mx-xl-3{margin-left:1rem!important;margin-right:1rem!important}.mx-xl-4{margin-left:1.5rem!important;margin-right:1.5rem!important}.mx-xl-5{margin-left:3rem!important;margin-right:3rem!important}.mx-xl-auto{margin-left:auto!important;margin-right:auto!important}.my-xl-0{margin-bottom:0!important;margin-top:0!important}.my-xl-1{margin-bottom:.25rem!important;margin-top:.25rem!important}.my-xl-2{margin-bottom:.5rem!important;margin-top:.5rem!important}.my-xl-3{margin-bottom:1rem!important;margin-top:1rem!important}.my-xl-4{margin-bottom:1.5rem!important;margin-top:1.5rem!important}.my-xl-5{margin-bottom:3rem!important;margin-top:3rem!important}.my-xl-auto{margin-bottom:auto!important;margin-top:auto!important}.mt-xl-0{margin-top:0!important}.mt-xl-1{margin-top:.25rem!important}.mt-xl-2{margin-top:.5rem!important}.mt-xl-3{margin-top:1rem!important}.mt-xl-4{margin-top:1.5rem!important}.mt-xl-5{margin-top:3rem!important}.mt-xl-auto{margin-top:auto!important}.me-xl-0{margin-right:0!important}.me-xl-1{margin-right:.25rem!important}.me-xl-2{margin-right:.5rem!important}.me-xl-3{margin-right:1rem!important}.me-xl-4{margin-right:1.5rem!important}.me-xl-5{margin-right:3rem!important}.me-xl-auto{margin-right:auto!important}.mb-xl-0{margin-bottom:0!important}.mb-xl-1{margin-bottom:.25rem!important}.mb-xl-2{margin-bottom:.5rem!important}.mb-xl-3{margin-bottom:1rem!important}.mb-xl-4{margin-bottom:1.5rem!important}.mb-xl-5{margin-bottom:3rem!important}.mb-xl-auto{margin-bottom:auto!important}.ms-xl-0{margin-left:0!important}.ms-xl-1{margin-left:.25rem!important}.ms-xl-2{margin-left:.5rem!important}.ms-xl-3{margin-left:1rem!important}.ms-xl-4{margin-left:1.5rem!important}.ms-xl-5{margin-left:3rem!important}.ms-xl-auto{margin-left:auto!important}.p-xl-0{padding:0!important}.p-xl-1{padding:.25rem!important}.p-xl-2{padding:.5rem!important}.p-xl-3{padding:1rem!important}.p-xl-4{padding:1.5rem!important}.p-xl-5{padding:3rem!important}.px-xl-0{padding-left:0!important;padding-right:0!important}.px-xl-1{padding-left:.25rem!important;padding-right:.25rem!important}.px-xl-2{padding-left:.5rem!important;padding-right:.5rem!important}.px-xl-3{padding-left:1rem!important;padding-right:1rem!important}.px-xl-4{padding-left:1.5rem!important;padding-right:1.5rem!important}.px-xl-5{padding-left:3rem!important;padding-right:3rem!important}.py-xl-0{padding-bottom:0!important;padding-top:0!important}.py-xl-1{padding-bottom:.25rem!important;padding-top:.25rem!important}.py-xl-2{padding-bottom:.5rem!important;padding-top:.5rem!important}.py-xl-3{padding-bottom:1rem!important;padding-top:1rem!important}.py-xl-4{padding-bottom:1.5rem!important;padding-top:1.5rem!important}.py-xl-5{padding-bottom:3rem!important;padding-top:3rem!important}.pt-xl-0{padding-top:0!important}.pt-xl-1{padding-top:.25rem!important}.pt-xl-2{padding-top:.5rem!important}.pt-xl-3{padding-top:1rem!important}.pt-xl-4{padding-top:1.5rem!important}.pt-xl-5{padding-top:3rem!important}.pe-xl-0{padding-right:0!important}.pe-xl-1{padding-right:.25rem!important}.pe-xl-2{padding-right:.5rem!important}.pe-xl-3{padding-right:1rem!important}.pe-xl-4{padding-right:1.5rem!important}.pe-xl-5{padding-right:3rem!important}.pb-xl-0{padding-bottom:0!important}.pb-xl-1{padding-bottom:.25rem!important}.pb-xl-2{padding-bottom:.5rem!important}.pb-xl-3{padding-bottom:1rem!important}.pb-xl-4{padding-bottom:1.5rem!important}.pb-xl-5{padding-bottom:3rem!important}.ps-xl-0{padding-left:0!important}.ps-xl-1{padding-left:.25rem!important}.ps-xl-2{padding-left:.5rem!important}.ps-xl-3{padding-left:1rem!important}.ps-xl-4{padding-left:1.5rem!important}.ps-xl-5{padding-left:3rem!important}.gap-xl-0{gap:0!important}.gap-xl-1{gap:.25rem!important}.gap-xl-2{gap:.5rem!important}.gap-xl-3{gap:1rem!important}.gap-xl-4{gap:1.5rem!important}.gap-xl-5{gap:3rem!important}.row-gap-xl-0{row-gap:0!important}.row-gap-xl-1{row-gap:.25rem!important}.row-gap-xl-2{row-gap:.5rem!important}.row-gap-xl-3{row-gap:1rem!important}.row-gap-xl-4{row-gap:1.5rem!important}.row-gap-xl-5{row-gap:3rem!important}.column-gap-xl-0{column-gap:0!important}.column-gap-xl-1{column-gap:.25rem!important}.column-gap-xl-2{column-gap:.5rem!important}.column-gap-xl-3{column-gap:1rem!important}.column-gap-xl-4{column-gap:1.5rem!important}.column-gap-xl-5{column-gap:3rem!important}.text-xl-start{text-align:left!important}.text-xl-end{text-align:right!important}.text-xl-center{text-align:center!important}.fs-1{font-size:2.5rem!important}.fs-2{font-size:2rem!important}.fs-3{font-size:1.75rem!important}.fs-4{font-size:1.5rem!important}}@media print{.d-print-inline{display:inline!important}.d-print-inline-block{display:inline-block!important}.d-print-block{display:block!important}.d-print-grid{display:grid!important}.d-print-inline-grid{display:inline-grid!important}.d-print-table{display:table!important}.d-print-table-row{display:table-row!important}.d-print-table-cell{display:table-cell!important}.d-print-flex{display:flex!important}.d-print-inline-flex{display:inline-flex!important}.d-print-none{display:none!important}}
/*# sourceMappingURL=bootstrap.css.map*/

/* Thebelab Buttons */
.thebelab-button {
  z-index: 999;
  display: inline-block;
  padding: 0.35em 1.2em;
  margin: 0px 1px;
  border-radius: 0.12em;
  box-sizing: border-box;
  text-decoration: none;
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  text-align: center;
  transition: all 0.2s;
  background-color: #dddddd;
  border: 0.05em solid white;
  color: #000000;
}

.thebelab-button:hover {
  border: 0.05em solid black;
  background-color: #fcfcfc;
}

.thebe-launch-button {
  height: 2.2em;
  font-size: 0.8em;
  border: 1px black solid;
}

/* Thebelab Cell */
.thebelab-cell pre {
  background: none;
}

.thebelab-cell .thebelab-input {
  padding-left: 1em;
  margin-bottom: 0.5em;
  margin-top: 0.5em;
}

.thebelab-cell .jp-OutputArea {
  margin-top: 0.5em;
  margin-left: 1em;
}

button.thebelab-button.thebelab-run-button {
  margin-left: 1.5em;
  margin-bottom: 0.5em;
}

/* Loading button */
button.thebe-launch-button div.spinner {
  float: left;
  margin-right: 1em;
}

/* Remove the spinner when thebelab is ready */
.thebe-launch-button.thebe-status-ready .spinner {
  display: none;
}

.thebe-launch-button span.status {
  font-family: monospace;
  font-weight: bold;
}

.thebe-launch-button.thebe-status-ready span.status {
  color: green;
}

.spinner {
  height: 2em;
  text-align: center;
  font-size: 0.7em;
}

.spinner > div {
  background-color: #f37726;
  height: 100%;
  width: 6px;
  display: inline-block;

  -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;
  animation: sk-stretchdelay 1.2s infinite ease-in-out;
}

.spinner .rect2 {
  -webkit-animation-delay: -1.1s;
  animation-delay: -1.1s;
}

.spinner .rect3 {
  -webkit-animation-delay: -1s;
  animation-delay: -1s;
}

.spinner .rect4 {
  -webkit-animation-delay: -0.9s;
  animation-delay: -0.9s;
}

.spinner .rect5 {
  -webkit-animation-delay: -0.8s;
  animation-delay: -0.8s;
}

@-webkit-keyframes sk-stretchdelay {
  0%,
  40%,
  100% {
    -webkit-transform: scaleY(0.4);
  }
  20% {
    -webkit-transform: scaleY(1);
  }
}

@keyframes sk-stretchdelay {
  0%,
  40%,
  100% {
    transform: scaleY(0.4);
    -webkit-transform: scaleY(0.4);
  }
  20% {
    transform: scaleY(1);
    -webkit-transform: scaleY(1);
  }
}


.sd-bg-primary{background-color:var(--sd-color-primary) !important}.sd-bg-text-primary{color:var(--sd-color-primary-text) !important}button.sd-bg-primary:focus,button.sd-bg-primary:hover{background-color:var(--sd-color-primary-highlight) !important}a.sd-bg-primary:focus,a.sd-bg-primary:hover{background-color:var(--sd-color-primary-highlight) !important}.sd-bg-secondary{background-color:var(--sd-color-secondary) !important}.sd-bg-text-secondary{color:var(--sd-color-secondary-text) !important}button.sd-bg-secondary:focus,button.sd-bg-secondary:hover{background-color:var(--sd-color-secondary-highlight) !important}a.sd-bg-secondary:focus,a.sd-bg-secondary:hover{background-color:var(--sd-color-secondary-highlight) !important}.sd-bg-success{background-color:var(--sd-color-success) !important}.sd-bg-text-success{color:var(--sd-color-success-text) !important}button.sd-bg-success:focus,button.sd-bg-success:hover{background-color:var(--sd-color-success-highlight) !important}a.sd-bg-success:focus,a.sd-bg-success:hover{background-color:var(--sd-color-success-highlight) !important}.sd-bg-info{background-color:var(--sd-color-info) !important}.sd-bg-text-info{color:var(--sd-color-info-text) !important}button.sd-bg-info:focus,button.sd-bg-info:hover{background-color:var(--sd-color-info-highlight) !important}a.sd-bg-info:focus,a.sd-bg-info:hover{background-color:var(--sd-color-info-highlight) !important}.sd-bg-warning{background-color:var(--sd-color-warning) !important}.sd-bg-text-warning{color:var(--sd-color-warning-text) !important}button.sd-bg-warning:focus,button.sd-bg-warning:hover{background-color:var(--sd-color-warning-highlight) !important}a.sd-bg-warning:focus,a.sd-bg-warning:hover{background-color:var(--sd-color-warning-highlight) !important}.sd-bg-danger{background-color:var(--sd-color-danger) !important}.sd-bg-text-danger{color:var(--sd-color-danger-text) !important}button.sd-bg-danger:focus,button.sd-bg-danger:hover{background-color:var(--sd-color-danger-highlight) !important}a.sd-bg-danger:focus,a.sd-bg-danger:hover{background-color:var(--sd-color-danger-highlight) !important}.sd-bg-light{background-color:var(--sd-color-light) !important}.sd-bg-text-light{color:var(--sd-color-light-text) !important}button.sd-bg-light:focus,button.sd-bg-light:hover{background-color:var(--sd-color-light-highlight) !important}a.sd-bg-light:focus,a.sd-bg-light:hover{background-color:var(--sd-color-light-highlight) !important}.sd-bg-muted{background-color:var(--sd-color-muted) !important}.sd-bg-text-muted{color:var(--sd-color-muted-text) !important}button.sd-bg-muted:focus,button.sd-bg-muted:hover{background-color:var(--sd-color-muted-highlight) !important}a.sd-bg-muted:focus,a.sd-bg-muted:hover{background-color:var(--sd-color-muted-highlight) !important}.sd-bg-dark{background-color:var(--sd-color-dark) !important}.sd-bg-text-dark{color:var(--sd-color-dark-text) !important}button.sd-bg-dark:focus,button.sd-bg-dark:hover{background-color:var(--sd-color-dark-highlight) !important}a.sd-bg-dark:focus,a.sd-bg-dark:hover{background-color:var(--sd-color-dark-highlight) !important}.sd-bg-black{background-color:var(--sd-color-black) !important}.sd-bg-text-black{color:var(--sd-color-black-text) !important}button.sd-bg-black:focus,button.sd-bg-black:hover{background-color:var(--sd-color-black-highlight) !important}a.sd-bg-black:focus,a.sd-bg-black:hover{background-color:var(--sd-color-black-highlight) !important}.sd-bg-white{background-color:var(--sd-color-white) !important}.sd-bg-text-white{color:var(--sd-color-white-text) !important}button.sd-bg-white:focus,button.sd-bg-white:hover{background-color:var(--sd-color-white-highlight) !important}a.sd-bg-white:focus,a.sd-bg-white:hover{background-color:var(--sd-color-white-highlight) !important}.sd-text-primary,.sd-text-primary>p{color:var(--sd-color-primary) !important}a.sd-text-primary:focus,a.sd-text-primary:hover{color:var(--sd-color-primary-highlight) !important}.sd-text-secondary,.sd-text-secondary>p{color:var(--sd-color-secondary) !important}a.sd-text-secondary:focus,a.sd-text-secondary:hover{color:var(--sd-color-secondary-highlight) !important}.sd-text-success,.sd-text-success>p{color:var(--sd-color-success) !important}a.sd-text-success:focus,a.sd-text-success:hover{color:var(--sd-color-success-highlight) !important}.sd-text-info,.sd-text-info>p{color:var(--sd-color-info) !important}a.sd-text-info:focus,a.sd-text-info:hover{color:var(--sd-color-info-highlight) !important}.sd-text-warning,.sd-text-warning>p{color:var(--sd-color-warning) !important}a.sd-text-warning:focus,a.sd-text-warning:hover{color:var(--sd-color-warning-highlight) !important}.sd-text-danger,.sd-text-danger>p{color:var(--sd-color-danger) !important}a.sd-text-danger:focus,a.sd-text-danger:hover{color:var(--sd-color-danger-highlight) !important}.sd-text-light,.sd-text-light>p{color:var(--sd-color-light) !important}a.sd-text-light:focus,a.sd-text-light:hover{color:var(--sd-color-light-highlight) !important}.sd-text-muted,.sd-text-muted>p{color:var(--sd-color-muted) !important}a.sd-text-muted:focus,a.sd-text-muted:hover{color:var(--sd-color-muted-highlight) !important}.sd-text-dark,.sd-text-dark>p{color:var(--sd-color-dark) !important}a.sd-text-dark:focus,a.sd-text-dark:hover{color:var(--sd-color-dark-highlight) !important}.sd-text-black,.sd-text-black>p{color:var(--sd-color-black) !important}a.sd-text-black:focus,a.sd-text-black:hover{color:var(--sd-color-black-highlight) !important}.sd-text-white,.sd-text-white>p{color:var(--sd-color-white) !important}a.sd-text-white:focus,a.sd-text-white:hover{color:var(--sd-color-white-highlight) !important}.sd-outline-primary{border-color:var(--sd-color-primary) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-primary:focus,a.sd-outline-primary:hover{border-color:var(--sd-color-primary-highlight) !important}.sd-outline-secondary{border-color:var(--sd-color-secondary) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-secondary:focus,a.sd-outline-secondary:hover{border-color:var(--sd-color-secondary-highlight) !important}.sd-outline-success{border-color:var(--sd-color-success) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-success:focus,a.sd-outline-success:hover{border-color:var(--sd-color-success-highlight) !important}.sd-outline-info{border-color:var(--sd-color-info) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-info:focus,a.sd-outline-info:hover{border-color:var(--sd-color-info-highlight) !important}.sd-outline-warning{border-color:var(--sd-color-warning) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-warning:focus,a.sd-outline-warning:hover{border-color:var(--sd-color-warning-highlight) !important}.sd-outline-danger{border-color:var(--sd-color-danger) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-danger:focus,a.sd-outline-danger:hover{border-color:var(--sd-color-danger-highlight) !important}.sd-outline-light{border-color:var(--sd-color-light) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-light:focus,a.sd-outline-light:hover{border-color:var(--sd-color-light-highlight) !important}.sd-outline-muted{border-color:var(--sd-color-muted) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-muted:focus,a.sd-outline-muted:hover{border-color:var(--sd-color-muted-highlight) !important}.sd-outline-dark{border-color:var(--sd-color-dark) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-dark:focus,a.sd-outline-dark:hover{border-color:var(--sd-color-dark-highlight) !important}.sd-outline-black{border-color:var(--sd-color-black) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-black:focus,a.sd-outline-black:hover{border-color:var(--sd-color-black-highlight) !important}.sd-outline-white{border-color:var(--sd-color-white) !important;border-style:solid !important;border-width:1px !important}a.sd-outline-white:focus,a.sd-outline-white:hover{border-color:var(--sd-color-white-highlight) !important}.sd-bg-transparent{background-color:transparent !important}.sd-outline-transparent{border-color:transparent !important}.sd-text-transparent{color:transparent !important}.sd-p-0{padding:0 !important}.sd-pt-0,.sd-py-0{padding-top:0 !important}.sd-pr-0,.sd-px-0{padding-right:0 !important}.sd-pb-0,.sd-py-0{padding-bottom:0 !important}.sd-pl-0,.sd-px-0{padding-left:0 !important}.sd-p-1{padding:.25rem !important}.sd-pt-1,.sd-py-1{padding-top:.25rem !important}.sd-pr-1,.sd-px-1{padding-right:.25rem !important}.sd-pb-1,.sd-py-1{padding-bottom:.25rem !important}.sd-pl-1,.sd-px-1{padding-left:.25rem !important}.sd-p-2{padding:.5rem !important}.sd-pt-2,.sd-py-2{padding-top:.5rem !important}.sd-pr-2,.sd-px-2{padding-right:.5rem !important}.sd-pb-2,.sd-py-2{padding-bottom:.5rem !important}.sd-pl-2,.sd-px-2{padding-left:.5rem !important}.sd-p-3{padding:1rem !important}.sd-pt-3,.sd-py-3{padding-top:1rem !important}.sd-pr-3,.sd-px-3{padding-right:1rem !important}.sd-pb-3,.sd-py-3{padding-bottom:1rem !important}.sd-pl-3,.sd-px-3{padding-left:1rem !important}.sd-p-4{padding:1.5rem !important}.sd-pt-4,.sd-py-4{padding-top:1.5rem !important}.sd-pr-4,.sd-px-4{padding-right:1.5rem !important}.sd-pb-4,.sd-py-4{padding-bottom:1.5rem !important}.sd-pl-4,.sd-px-4{padding-left:1.5rem !important}.sd-p-5{padding:3rem !important}.sd-pt-5,.sd-py-5{padding-top:3rem !important}.sd-pr-5,.sd-px-5{padding-right:3rem !important}.sd-pb-5,.sd-py-5{padding-bottom:3rem !important}.sd-pl-5,.sd-px-5{padding-left:3rem !important}.sd-m-auto{margin:auto !important}.sd-mt-auto,.sd-my-auto{margin-top:auto !important}.sd-mr-auto,.sd-mx-auto{margin-right:auto !important}.sd-mb-auto,.sd-my-auto{margin-bottom:auto !important}.sd-ml-auto,.sd-mx-auto{margin-left:auto !important}.sd-m-0{margin:0 !important}.sd-mt-0,.sd-my-0{margin-top:0 !important}.sd-mr-0,.sd-mx-0{margin-right:0 !important}.sd-mb-0,.sd-my-0{margin-bottom:0 !important}.sd-ml-0,.sd-mx-0{margin-left:0 !important}.sd-m-1{margin:.25rem !important}.sd-mt-1,.sd-my-1{margin-top:.25rem !important}.sd-mr-1,.sd-mx-1{margin-right:.25rem !important}.sd-mb-1,.sd-my-1{margin-bottom:.25rem !important}.sd-ml-1,.sd-mx-1{margin-left:.25rem !important}.sd-m-2{margin:.5rem !important}.sd-mt-2,.sd-my-2{margin-top:.5rem !important}.sd-mr-2,.sd-mx-2{margin-right:.5rem !important}.sd-mb-2,.sd-my-2{margin-bottom:.5rem !important}.sd-ml-2,.sd-mx-2{margin-left:.5rem !important}.sd-m-3{margin:1rem !important}.sd-mt-3,.sd-my-3{margin-top:1rem !important}.sd-mr-3,.sd-mx-3{margin-right:1rem !important}.sd-mb-3,.sd-my-3{margin-bottom:1rem !important}.sd-ml-3,.sd-mx-3{margin-left:1rem !important}.sd-m-4{margin:1.5rem !important}.sd-mt-4,.sd-my-4{margin-top:1.5rem !important}.sd-mr-4,.sd-mx-4{margin-right:1.5rem !important}.sd-mb-4,.sd-my-4{margin-bottom:1.5rem !important}.sd-ml-4,.sd-mx-4{margin-left:1.5rem !important}.sd-m-5{margin:3rem !important}.sd-mt-5,.sd-my-5{margin-top:3rem !important}.sd-mr-5,.sd-mx-5{margin-right:3rem !important}.sd-mb-5,.sd-my-5{margin-bottom:3rem !important}.sd-ml-5,.sd-mx-5{margin-left:3rem !important}.sd-w-25{width:25% !important}.sd-w-50{width:50% !important}.sd-w-75{width:75% !important}.sd-w-100{width:100% !important}.sd-w-auto{width:auto !important}.sd-h-25{height:25% !important}.sd-h-50{height:50% !important}.sd-h-75{height:75% !important}.sd-h-100{height:100% !important}.sd-h-auto{height:auto !important}.sd-d-none{display:none !important}.sd-d-inline{display:inline !important}.sd-d-inline-block{display:inline-block !important}.sd-d-block{display:block !important}.sd-d-grid{display:grid !important}.sd-d-flex-row{display:-ms-flexbox !important;display:flex !important;flex-direction:row !important}.sd-d-flex-column{display:-ms-flexbox !important;display:flex !important;flex-direction:column !important}.sd-d-inline-flex{display:-ms-inline-flexbox !important;display:inline-flex !important}@media(min-width: 576px){.sd-d-sm-none{display:none !important}.sd-d-sm-inline{display:inline !important}.sd-d-sm-inline-block{display:inline-block !important}.sd-d-sm-block{display:block !important}.sd-d-sm-grid{display:grid !important}.sd-d-sm-flex{display:-ms-flexbox !important;display:flex !important}.sd-d-sm-inline-flex{display:-ms-inline-flexbox !important;display:inline-flex !important}}@media(min-width: 768px){.sd-d-md-none{display:none !important}.sd-d-md-inline{display:inline !important}.sd-d-md-inline-block{display:inline-block !important}.sd-d-md-block{display:block !important}.sd-d-md-grid{display:grid !important}.sd-d-md-flex{display:-ms-flexbox !important;display:flex !important}.sd-d-md-inline-flex{display:-ms-inline-flexbox !important;display:inline-flex !important}}@media(min-width: 992px){.sd-d-lg-none{display:none !important}.sd-d-lg-inline{display:inline !important}.sd-d-lg-inline-block{display:inline-block !important}.sd-d-lg-block{display:block !important}.sd-d-lg-grid{display:grid !important}.sd-d-lg-flex{display:-ms-flexbox !important;display:flex !important}.sd-d-lg-inline-flex{display:-ms-inline-flexbox !important;display:inline-flex !important}}@media(min-width: 1200px){.sd-d-xl-none{display:none !important}.sd-d-xl-inline{display:inline !important}.sd-d-xl-inline-block{display:inline-block !important}.sd-d-xl-block{display:block !important}.sd-d-xl-grid{display:grid !important}.sd-d-xl-flex{display:-ms-flexbox !important;display:flex !important}.sd-d-xl-inline-flex{display:-ms-inline-flexbox !important;display:inline-flex !important}}.sd-align-major-start{justify-content:flex-start !important}.sd-align-major-end{justify-content:flex-end !important}.sd-align-major-center{justify-content:center !important}.sd-align-major-justify{justify-content:space-between !important}.sd-align-major-spaced{justify-content:space-evenly !important}.sd-align-minor-start{align-items:flex-start !important}.sd-align-minor-end{align-items:flex-end !important}.sd-align-minor-center{align-items:center !important}.sd-align-minor-stretch{align-items:stretch !important}.sd-text-justify{text-align:justify !important}.sd-text-left{text-align:left !important}.sd-text-right{text-align:right !important}.sd-text-center{text-align:center !important}.sd-font-weight-light{font-weight:300 !important}.sd-font-weight-lighter{font-weight:lighter !important}.sd-font-weight-normal{font-weight:400 !important}.sd-font-weight-bold{font-weight:700 !important}.sd-font-weight-bolder{font-weight:bolder !important}.sd-font-italic{font-style:italic !important}.sd-text-decoration-none{text-decoration:none !important}.sd-text-lowercase{text-transform:lowercase !important}.sd-text-uppercase{text-transform:uppercase !important}.sd-text-capitalize{text-transform:capitalize !important}.sd-text-wrap{white-space:normal !important}.sd-text-nowrap{white-space:nowrap !important}.sd-text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.sd-fs-1,.sd-fs-1>p{font-size:calc(1.375rem + 1.5vw) !important;line-height:unset !important}.sd-fs-2,.sd-fs-2>p{font-size:calc(1.325rem + 0.9vw) !important;line-height:unset !important}.sd-fs-3,.sd-fs-3>p{font-size:calc(1.3rem + 0.6vw) !important;line-height:unset !important}.sd-fs-4,.sd-fs-4>p{font-size:calc(1.275rem + 0.3vw) !important;line-height:unset !important}.sd-fs-5,.sd-fs-5>p{font-size:1.25rem !important;line-height:unset !important}.sd-fs-6,.sd-fs-6>p{font-size:1rem !important;line-height:unset !important}.sd-border-0{border:0 solid !important}.sd-border-top-0{border-top:0 solid !important}.sd-border-bottom-0{border-bottom:0 solid !important}.sd-border-right-0{border-right:0 solid !important}.sd-border-left-0{border-left:0 solid !important}.sd-border-1{border:1px solid !important}.sd-border-top-1{border-top:1px solid !important}.sd-border-bottom-1{border-bottom:1px solid !important}.sd-border-right-1{border-right:1px solid !important}.sd-border-left-1{border-left:1px solid !important}.sd-border-2{border:2px solid !important}.sd-border-top-2{border-top:2px solid !important}.sd-border-bottom-2{border-bottom:2px solid !important}.sd-border-right-2{border-right:2px solid !important}.sd-border-left-2{border-left:2px solid !important}.sd-border-3{border:3px solid !important}.sd-border-top-3{border-top:3px solid !important}.sd-border-bottom-3{border-bottom:3px solid !important}.sd-border-right-3{border-right:3px solid !important}.sd-border-left-3{border-left:3px solid !important}.sd-border-4{border:4px solid !important}.sd-border-top-4{border-top:4px solid !important}.sd-border-bottom-4{border-bottom:4px solid !important}.sd-border-right-4{border-right:4px solid !important}.sd-border-left-4{border-left:4px solid !important}.sd-border-5{border:5px solid !important}.sd-border-top-5{border-top:5px solid !important}.sd-border-bottom-5{border-bottom:5px solid !important}.sd-border-right-5{border-right:5px solid !important}.sd-border-left-5{border-left:5px solid !important}.sd-rounded-0{border-radius:0 !important}.sd-rounded-1{border-radius:.2rem !important}.sd-rounded-2{border-radius:.3rem !important}.sd-rounded-3{border-radius:.5rem !important}.sd-rounded-pill{border-radius:50rem !important}.sd-rounded-circle{border-radius:50% !important}.shadow-none{box-shadow:none !important}.sd-shadow-sm{box-shadow:0 .125rem .25rem var(--sd-color-shadow) !important}.sd-shadow-md{box-shadow:0 .5rem 1rem var(--sd-color-shadow) !important}.sd-shadow-lg{box-shadow:0 1rem 3rem var(--sd-color-shadow) !important}@keyframes sd-slide-from-left{0%{transform:translateX(-100%)}100%{transform:translateX(0)}}@keyframes sd-slide-from-right{0%{transform:translateX(200%)}100%{transform:translateX(0)}}@keyframes sd-grow100{0%{transform:scale(0);opacity:.5}100%{transform:scale(1);opacity:1}}@keyframes sd-grow50{0%{transform:scale(0.5);opacity:.5}100%{transform:scale(1);opacity:1}}@keyframes sd-grow50-rot20{0%{transform:scale(0.5) rotateZ(-20deg);opacity:.5}75%{transform:scale(1) rotateZ(5deg);opacity:1}95%{transform:scale(1) rotateZ(-1deg);opacity:1}100%{transform:scale(1) rotateZ(0);opacity:1}}.sd-animate-slide-from-left{animation:1s ease-out 0s 1 normal none running sd-slide-from-left}.sd-animate-slide-from-right{animation:1s ease-out 0s 1 normal none running sd-slide-from-right}.sd-animate-grow100{animation:1s ease-out 0s 1 normal none running sd-grow100}.sd-animate-grow50{animation:1s ease-out 0s 1 normal none running sd-grow50}.sd-animate-grow50-rot20{animation:1s ease-out 0s 1 normal none running sd-grow50-rot20}.sd-badge{display:inline-block;padding:.35em .65em;font-size:.75em;font-weight:700;line-height:1;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25rem}.sd-badge:empty{display:none}a.sd-badge{text-decoration:none}.sd-btn .sd-badge{position:relative;top:-1px}.sd-btn{background-color:transparent;border:1px solid transparent;border-radius:.25rem;cursor:pointer;display:inline-block;font-weight:400;font-size:1rem;line-height:1.5;padding:.375rem .75rem;text-align:center;text-decoration:none;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;vertical-align:middle;user-select:none;-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none}.sd-btn:hover{text-decoration:none}@media(prefers-reduced-motion: reduce){.sd-btn{transition:none}}.sd-btn-primary,.sd-btn-outline-primary:hover,.sd-btn-outline-primary:focus{color:var(--sd-color-primary-text) !important;background-color:var(--sd-color-primary) !important;border-color:var(--sd-color-primary) !important;border-width:1px !important;border-style:solid !important}.sd-btn-primary:hover,.sd-btn-primary:focus{color:var(--sd-color-primary-text) !important;background-color:var(--sd-color-primary-highlight) !important;border-color:var(--sd-color-primary-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-primary{color:var(--sd-color-primary) !important;border-color:var(--sd-color-primary) !important;border-width:1px !important;border-style:solid !important}.sd-btn-secondary,.sd-btn-outline-secondary:hover,.sd-btn-outline-secondary:focus{color:var(--sd-color-secondary-text) !important;background-color:var(--sd-color-secondary) !important;border-color:var(--sd-color-secondary) !important;border-width:1px !important;border-style:solid !important}.sd-btn-secondary:hover,.sd-btn-secondary:focus{color:var(--sd-color-secondary-text) !important;background-color:var(--sd-color-secondary-highlight) !important;border-color:var(--sd-color-secondary-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-secondary{color:var(--sd-color-secondary) !important;border-color:var(--sd-color-secondary) !important;border-width:1px !important;border-style:solid !important}.sd-btn-success,.sd-btn-outline-success:hover,.sd-btn-outline-success:focus{color:var(--sd-color-success-text) !important;background-color:var(--sd-color-success) !important;border-color:var(--sd-color-success) !important;border-width:1px !important;border-style:solid !important}.sd-btn-success:hover,.sd-btn-success:focus{color:var(--sd-color-success-text) !important;background-color:var(--sd-color-success-highlight) !important;border-color:var(--sd-color-success-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-success{color:var(--sd-color-success) !important;border-color:var(--sd-color-success) !important;border-width:1px !important;border-style:solid !important}.sd-btn-info,.sd-btn-outline-info:hover,.sd-btn-outline-info:focus{color:var(--sd-color-info-text) !important;background-color:var(--sd-color-info) !important;border-color:var(--sd-color-info) !important;border-width:1px !important;border-style:solid !important}.sd-btn-info:hover,.sd-btn-info:focus{color:var(--sd-color-info-text) !important;background-color:var(--sd-color-info-highlight) !important;border-color:var(--sd-color-info-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-info{color:var(--sd-color-info) !important;border-color:var(--sd-color-info) !important;border-width:1px !important;border-style:solid !important}.sd-btn-warning,.sd-btn-outline-warning:hover,.sd-btn-outline-warning:focus{color:var(--sd-color-warning-text) !important;background-color:var(--sd-color-warning) !important;border-color:var(--sd-color-warning) !important;border-width:1px !important;border-style:solid !important}.sd-btn-warning:hover,.sd-btn-warning:focus{color:var(--sd-color-warning-text) !important;background-color:var(--sd-color-warning-highlight) !important;border-color:var(--sd-color-warning-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-warning{color:var(--sd-color-warning) !important;border-color:var(--sd-color-warning) !important;border-width:1px !important;border-style:solid !important}.sd-btn-danger,.sd-btn-outline-danger:hover,.sd-btn-outline-danger:focus{color:var(--sd-color-danger-text) !important;background-color:var(--sd-color-danger) !important;border-color:var(--sd-color-danger) !important;border-width:1px !important;border-style:solid !important}.sd-btn-danger:hover,.sd-btn-danger:focus{color:var(--sd-color-danger-text) !important;background-color:var(--sd-color-danger-highlight) !important;border-color:var(--sd-color-danger-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-danger{color:var(--sd-color-danger) !important;border-color:var(--sd-color-danger) !important;border-width:1px !important;border-style:solid !important}.sd-btn-light,.sd-btn-outline-light:hover,.sd-btn-outline-light:focus{color:var(--sd-color-light-text) !important;background-color:var(--sd-color-light) !important;border-color:var(--sd-color-light) !important;border-width:1px !important;border-style:solid !important}.sd-btn-light:hover,.sd-btn-light:focus{color:var(--sd-color-light-text) !important;background-color:var(--sd-color-light-highlight) !important;border-color:var(--sd-color-light-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-light{color:var(--sd-color-light) !important;border-color:var(--sd-color-light) !important;border-width:1px !important;border-style:solid !important}.sd-btn-muted,.sd-btn-outline-muted:hover,.sd-btn-outline-muted:focus{color:var(--sd-color-muted-text) !important;background-color:var(--sd-color-muted) !important;border-color:var(--sd-color-muted) !important;border-width:1px !important;border-style:solid !important}.sd-btn-muted:hover,.sd-btn-muted:focus{color:var(--sd-color-muted-text) !important;background-color:var(--sd-color-muted-highlight) !important;border-color:var(--sd-color-muted-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-muted{color:var(--sd-color-muted) !important;border-color:var(--sd-color-muted) !important;border-width:1px !important;border-style:solid !important}.sd-btn-dark,.sd-btn-outline-dark:hover,.sd-btn-outline-dark:focus{color:var(--sd-color-dark-text) !important;background-color:var(--sd-color-dark) !important;border-color:var(--sd-color-dark) !important;border-width:1px !important;border-style:solid !important}.sd-btn-dark:hover,.sd-btn-dark:focus{color:var(--sd-color-dark-text) !important;background-color:var(--sd-color-dark-highlight) !important;border-color:var(--sd-color-dark-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-dark{color:var(--sd-color-dark) !important;border-color:var(--sd-color-dark) !important;border-width:1px !important;border-style:solid !important}.sd-btn-black,.sd-btn-outline-black:hover,.sd-btn-outline-black:focus{color:var(--sd-color-black-text) !important;background-color:var(--sd-color-black) !important;border-color:var(--sd-color-black) !important;border-width:1px !important;border-style:solid !important}.sd-btn-black:hover,.sd-btn-black:focus{color:var(--sd-color-black-text) !important;background-color:var(--sd-color-black-highlight) !important;border-color:var(--sd-color-black-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-black{color:var(--sd-color-black) !important;border-color:var(--sd-color-black) !important;border-width:1px !important;border-style:solid !important}.sd-btn-white,.sd-btn-outline-white:hover,.sd-btn-outline-white:focus{color:var(--sd-color-white-text) !important;background-color:var(--sd-color-white) !important;border-color:var(--sd-color-white) !important;border-width:1px !important;border-style:solid !important}.sd-btn-white:hover,.sd-btn-white:focus{color:var(--sd-color-white-text) !important;background-color:var(--sd-color-white-highlight) !important;border-color:var(--sd-color-white-highlight) !important;border-width:1px !important;border-style:solid !important}.sd-btn-outline-white{color:var(--sd-color-white) !important;border-color:var(--sd-color-white) !important;border-width:1px !important;border-style:solid !important}.sd-stretched-link::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;content:""}.sd-hide-link-text{font-size:0}.sd-octicon,.sd-material-icon{display:inline-block;fill:currentColor;vertical-align:middle}.sd-avatar-xs{border-radius:50%;object-fit:cover;object-position:center;width:1rem;height:1rem}.sd-avatar-sm{border-radius:50%;object-fit:cover;object-position:center;width:3rem;height:3rem}.sd-avatar-md{border-radius:50%;object-fit:cover;object-position:center;width:5rem;height:5rem}.sd-avatar-lg{border-radius:50%;object-fit:cover;object-position:center;width:7rem;height:7rem}.sd-avatar-xl{border-radius:50%;object-fit:cover;object-position:center;width:10rem;height:10rem}.sd-avatar-inherit{border-radius:50%;object-fit:cover;object-position:center;width:inherit;height:inherit}.sd-avatar-initial{border-radius:50%;object-fit:cover;object-position:center;width:initial;height:initial}.sd-card{background-clip:border-box;background-color:var(--sd-color-card-background);border:1px solid var(--sd-color-card-border);border-radius:.25rem;color:var(--sd-color-card-text);display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;min-width:0;position:relative;word-wrap:break-word}.sd-card>hr{margin-left:0;margin-right:0}.sd-card-hover:hover{border-color:var(--sd-color-card-border-hover);transform:scale(1.01)}.sd-card-body{-ms-flex:1 1 auto;flex:1 1 auto;padding:1rem 1rem}.sd-card-title{margin-bottom:.5rem}.sd-card-subtitle{margin-top:-0.25rem;margin-bottom:0}.sd-card-text:last-child{margin-bottom:0}.sd-card-link:hover{text-decoration:none}.sd-card-link+.card-link{margin-left:1rem}.sd-card-header{padding:.5rem 1rem;margin-bottom:0;background-color:var(--sd-color-card-header);border-bottom:1px solid var(--sd-color-card-border)}.sd-card-header:first-child{border-radius:calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0}.sd-card-footer{padding:.5rem 1rem;background-color:var(--sd-color-card-footer);border-top:1px solid var(--sd-color-card-border)}.sd-card-footer:last-child{border-radius:0 0 calc(0.25rem - 1px) calc(0.25rem - 1px)}.sd-card-header-tabs{margin-right:-0.5rem;margin-bottom:-0.5rem;margin-left:-0.5rem;border-bottom:0}.sd-card-header-pills{margin-right:-0.5rem;margin-left:-0.5rem}.sd-card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:1rem;border-radius:calc(0.25rem - 1px)}.sd-card-img,.sd-card-img-bottom,.sd-card-img-top{width:100%}.sd-card-img,.sd-card-img-top{border-top-left-radius:calc(0.25rem - 1px);border-top-right-radius:calc(0.25rem - 1px)}.sd-card-img,.sd-card-img-bottom{border-bottom-left-radius:calc(0.25rem - 1px);border-bottom-right-radius:calc(0.25rem - 1px)}.sd-cards-carousel{width:100%;display:flex;flex-wrap:nowrap;-ms-flex-direction:row;flex-direction:row;overflow-x:hidden;scroll-snap-type:x mandatory}.sd-cards-carousel.sd-show-scrollbar{overflow-x:auto}.sd-cards-carousel:hover,.sd-cards-carousel:focus{overflow-x:auto}.sd-cards-carousel>.sd-card{flex-shrink:0;scroll-snap-align:start}.sd-cards-carousel>.sd-card:not(:last-child){margin-right:3px}.sd-card-cols-1>.sd-card{width:90%}.sd-card-cols-2>.sd-card{width:45%}.sd-card-cols-3>.sd-card{width:30%}.sd-card-cols-4>.sd-card{width:22.5%}.sd-card-cols-5>.sd-card{width:18%}.sd-card-cols-6>.sd-card{width:15%}.sd-card-cols-7>.sd-card{width:12.8571428571%}.sd-card-cols-8>.sd-card{width:11.25%}.sd-card-cols-9>.sd-card{width:10%}.sd-card-cols-10>.sd-card{width:9%}.sd-card-cols-11>.sd-card{width:8.1818181818%}.sd-card-cols-12>.sd-card{width:7.5%}.sd-container,.sd-container-fluid,.sd-container-lg,.sd-container-md,.sd-container-sm,.sd-container-xl{margin-left:auto;margin-right:auto;padding-left:var(--sd-gutter-x, 0.75rem);padding-right:var(--sd-gutter-x, 0.75rem);width:100%}@media(min-width: 576px){.sd-container-sm,.sd-container{max-width:540px}}@media(min-width: 768px){.sd-container-md,.sd-container-sm,.sd-container{max-width:720px}}@media(min-width: 992px){.sd-container-lg,.sd-container-md,.sd-container-sm,.sd-container{max-width:960px}}@media(min-width: 1200px){.sd-container-xl,.sd-container-lg,.sd-container-md,.sd-container-sm,.sd-container{max-width:1140px}}.sd-row{--sd-gutter-x: 1.5rem;--sd-gutter-y: 0;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-top:calc(var(--sd-gutter-y) * -1);margin-right:calc(var(--sd-gutter-x) * -0.5);margin-left:calc(var(--sd-gutter-x) * -0.5)}.sd-row>*{box-sizing:border-box;flex-shrink:0;width:100%;max-width:100%;padding-right:calc(var(--sd-gutter-x) * 0.5);padding-left:calc(var(--sd-gutter-x) * 0.5);margin-top:var(--sd-gutter-y)}.sd-col{flex:1 0 0%;-ms-flex:1 0 0%}.sd-row-cols-auto>*{flex:0 0 auto;width:auto}.sd-row-cols-1>*{flex:0 0 auto;-ms-flex:0 0 auto;width:100%}.sd-row-cols-2>*{flex:0 0 auto;-ms-flex:0 0 auto;width:50%}.sd-row-cols-3>*{flex:0 0 auto;-ms-flex:0 0 auto;width:33.3333333333%}.sd-row-cols-4>*{flex:0 0 auto;-ms-flex:0 0 auto;width:25%}.sd-row-cols-5>*{flex:0 0 auto;-ms-flex:0 0 auto;width:20%}.sd-row-cols-6>*{flex:0 0 auto;-ms-flex:0 0 auto;width:16.6666666667%}.sd-row-cols-7>*{flex:0 0 auto;-ms-flex:0 0 auto;width:14.2857142857%}.sd-row-cols-8>*{flex:0 0 auto;-ms-flex:0 0 auto;width:12.5%}.sd-row-cols-9>*{flex:0 0 auto;-ms-flex:0 0 auto;width:11.1111111111%}.sd-row-cols-10>*{flex:0 0 auto;-ms-flex:0 0 auto;width:10%}.sd-row-cols-11>*{flex:0 0 auto;-ms-flex:0 0 auto;width:9.0909090909%}.sd-row-cols-12>*{flex:0 0 auto;-ms-flex:0 0 auto;width:8.3333333333%}@media(min-width: 576px){.sd-col-sm{flex:1 0 0%;-ms-flex:1 0 0%}.sd-row-cols-sm-auto{flex:1 0 auto;-ms-flex:1 0 auto;width:100%}.sd-row-cols-sm-1>*{flex:0 0 auto;-ms-flex:0 0 auto;width:100%}.sd-row-cols-sm-2>*{flex:0 0 auto;-ms-flex:0 0 auto;width:50%}.sd-row-cols-sm-3>*{flex:0 0 auto;-ms-flex:0 0 auto;width:33.3333333333%}.sd-row-cols-sm-4>*{flex:0 0 auto;-ms-flex:0 0 auto;width:25%}.sd-row-cols-sm-5>*{flex:0 0 auto;-ms-flex:0 0 auto;width:20%}.sd-row-cols-sm-6>*{flex:0 0 auto;-ms-flex:0 0 auto;width:16.6666666667%}.sd-row-cols-sm-7>*{flex:0 0 auto;-ms-flex:0 0 auto;width:14.2857142857%}.sd-row-cols-sm-8>*{flex:0 0 auto;-ms-flex:0 0 auto;width:12.5%}.sd-row-cols-sm-9>*{flex:0 0 auto;-ms-flex:0 0 auto;width:11.1111111111%}.sd-row-cols-sm-10>*{flex:0 0 auto;-ms-flex:0 0 auto;width:10%}.sd-row-cols-sm-11>*{flex:0 0 auto;-ms-flex:0 0 auto;width:9.0909090909%}.sd-row-cols-sm-12>*{flex:0 0 auto;-ms-flex:0 0 auto;width:8.3333333333%}}@media(min-width: 768px){.sd-col-md{flex:1 0 0%;-ms-flex:1 0 0%}.sd-row-cols-md-auto{flex:1 0 auto;-ms-flex:1 0 auto;width:100%}.sd-row-cols-md-1>*{flex:0 0 auto;-ms-flex:0 0 auto;width:100%}.sd-row-cols-md-2>*{flex:0 0 auto;-ms-flex:0 0 auto;width:50%}.sd-row-cols-md-3>*{flex:0 0 auto;-ms-flex:0 0 auto;width:33.3333333333%}.sd-row-cols-md-4>*{flex:0 0 auto;-ms-flex:0 0 auto;width:25%}.sd-row-cols-md-5>*{flex:0 0 auto;-ms-flex:0 0 auto;width:20%}.sd-row-cols-md-6>*{flex:0 0 auto;-ms-flex:0 0 auto;width:16.6666666667%}.sd-row-cols-md-7>*{flex:0 0 auto;-ms-flex:0 0 auto;width:14.2857142857%}.sd-row-cols-md-8>*{flex:0 0 auto;-ms-flex:0 0 auto;width:12.5%}.sd-row-cols-md-9>*{flex:0 0 auto;-ms-flex:0 0 auto;width:11.1111111111%}.sd-row-cols-md-10>*{flex:0 0 auto;-ms-flex:0 0 auto;width:10%}.sd-row-cols-md-11>*{flex:0 0 auto;-ms-flex:0 0 auto;width:9.0909090909%}.sd-row-cols-md-12>*{flex:0 0 auto;-ms-flex:0 0 auto;width:8.3333333333%}}@media(min-width: 992px){.sd-col-lg{flex:1 0 0%;-ms-flex:1 0 0%}.sd-row-cols-lg-auto{flex:1 0 auto;-ms-flex:1 0 auto;width:100%}.sd-row-cols-lg-1>*{flex:0 0 auto;-ms-flex:0 0 auto;width:100%}.sd-row-cols-lg-2>*{flex:0 0 auto;-ms-flex:0 0 auto;width:50%}.sd-row-cols-lg-3>*{flex:0 0 auto;-ms-flex:0 0 auto;width:33.3333333333%}.sd-row-cols-lg-4>*{flex:0 0 auto;-ms-flex:0 0 auto;width:25%}.sd-row-cols-lg-5>*{flex:0 0 auto;-ms-flex:0 0 auto;width:20%}.sd-row-cols-lg-6>*{flex:0 0 auto;-ms-flex:0 0 auto;width:16.6666666667%}.sd-row-cols-lg-7>*{flex:0 0 auto;-ms-flex:0 0 auto;width:14.2857142857%}.sd-row-cols-lg-8>*{flex:0 0 auto;-ms-flex:0 0 auto;width:12.5%}.sd-row-cols-lg-9>*{flex:0 0 auto;-ms-flex:0 0 auto;width:11.1111111111%}.sd-row-cols-lg-10>*{flex:0 0 auto;-ms-flex:0 0 auto;width:10%}.sd-row-cols-lg-11>*{flex:0 0 auto;-ms-flex:0 0 auto;width:9.0909090909%}.sd-row-cols-lg-12>*{flex:0 0 auto;-ms-flex:0 0 auto;width:8.3333333333%}}@media(min-width: 1200px){.sd-col-xl{flex:1 0 0%;-ms-flex:1 0 0%}.sd-row-cols-xl-auto{flex:1 0 auto;-ms-flex:1 0 auto;width:100%}.sd-row-cols-xl-1>*{flex:0 0 auto;-ms-flex:0 0 auto;width:100%}.sd-row-cols-xl-2>*{flex:0 0 auto;-ms-flex:0 0 auto;width:50%}.sd-row-cols-xl-3>*{flex:0 0 auto;-ms-flex:0 0 auto;width:33.3333333333%}.sd-row-cols-xl-4>*{flex:0 0 auto;-ms-flex:0 0 auto;width:25%}.sd-row-cols-xl-5>*{flex:0 0 auto;-ms-flex:0 0 auto;width:20%}.sd-row-cols-xl-6>*{flex:0 0 auto;-ms-flex:0 0 auto;width:16.6666666667%}.sd-row-cols-xl-7>*{flex:0 0 auto;-ms-flex:0 0 auto;width:14.2857142857%}.sd-row-cols-xl-8>*{flex:0 0 auto;-ms-flex:0 0 auto;width:12.5%}.sd-row-cols-xl-9>*{flex:0 0 auto;-ms-flex:0 0 auto;width:11.1111111111%}.sd-row-cols-xl-10>*{flex:0 0 auto;-ms-flex:0 0 auto;width:10%}.sd-row-cols-xl-11>*{flex:0 0 auto;-ms-flex:0 0 auto;width:9.0909090909%}.sd-row-cols-xl-12>*{flex:0 0 auto;-ms-flex:0 0 auto;width:8.3333333333%}}.sd-col-auto{flex:0 0 auto;-ms-flex:0 0 auto;width:auto}.sd-col-1{flex:0 0 auto;-ms-flex:0 0 auto;width:8.3333333333%}.sd-col-2{flex:0 0 auto;-ms-flex:0 0 auto;width:16.6666666667%}.sd-col-3{flex:0 0 auto;-ms-flex:0 0 auto;width:25%}.sd-col-4{flex:0 0 auto;-ms-flex:0 0 auto;width:33.3333333333%}.sd-col-5{flex:0 0 auto;-ms-flex:0 0 auto;width:41.6666666667%}.sd-col-6{flex:0 0 auto;-ms-flex:0 0 auto;width:50%}.sd-col-7{flex:0 0 auto;-ms-flex:0 0 auto;width:58.3333333333%}.sd-col-8{flex:0 0 auto;-ms-flex:0 0 auto;width:66.6666666667%}.sd-col-9{flex:0 0 auto;-ms-flex:0 0 auto;width:75%}.sd-col-10{flex:0 0 auto;-ms-flex:0 0 auto;width:83.3333333333%}.sd-col-11{flex:0 0 auto;-ms-flex:0 0 auto;width:91.6666666667%}.sd-col-12{flex:0 0 auto;-ms-flex:0 0 auto;width:100%}.sd-g-0,.sd-gy-0{--sd-gutter-y: 0}.sd-g-0,.sd-gx-0{--sd-gutter-x: 0}.sd-g-1,.sd-gy-1{--sd-gutter-y: 0.25rem}.sd-g-1,.sd-gx-1{--sd-gutter-x: 0.25rem}.sd-g-2,.sd-gy-2{--sd-gutter-y: 0.5rem}.sd-g-2,.sd-gx-2{--sd-gutter-x: 0.5rem}.sd-g-3,.sd-gy-3{--sd-gutter-y: 1rem}.sd-g-3,.sd-gx-3{--sd-gutter-x: 1rem}.sd-g-4,.sd-gy-4{--sd-gutter-y: 1.5rem}.sd-g-4,.sd-gx-4{--sd-gutter-x: 1.5rem}.sd-g-5,.sd-gy-5{--sd-gutter-y: 3rem}.sd-g-5,.sd-gx-5{--sd-gutter-x: 3rem}@media(min-width: 576px){.sd-col-sm-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto}.sd-col-sm-1{-ms-flex:0 0 auto;flex:0 0 auto;width:8.3333333333%}.sd-col-sm-2{-ms-flex:0 0 auto;flex:0 0 auto;width:16.6666666667%}.sd-col-sm-3{-ms-flex:0 0 auto;flex:0 0 auto;width:25%}.sd-col-sm-4{-ms-flex:0 0 auto;flex:0 0 auto;width:33.3333333333%}.sd-col-sm-5{-ms-flex:0 0 auto;flex:0 0 auto;width:41.6666666667%}.sd-col-sm-6{-ms-flex:0 0 auto;flex:0 0 auto;width:50%}.sd-col-sm-7{-ms-flex:0 0 auto;flex:0 0 auto;width:58.3333333333%}.sd-col-sm-8{-ms-flex:0 0 auto;flex:0 0 auto;width:66.6666666667%}.sd-col-sm-9{-ms-flex:0 0 auto;flex:0 0 auto;width:75%}.sd-col-sm-10{-ms-flex:0 0 auto;flex:0 0 auto;width:83.3333333333%}.sd-col-sm-11{-ms-flex:0 0 auto;flex:0 0 auto;width:91.6666666667%}.sd-col-sm-12{-ms-flex:0 0 auto;flex:0 0 auto;width:100%}.sd-g-sm-0,.sd-gy-sm-0{--sd-gutter-y: 0}.sd-g-sm-0,.sd-gx-sm-0{--sd-gutter-x: 0}.sd-g-sm-1,.sd-gy-sm-1{--sd-gutter-y: 0.25rem}.sd-g-sm-1,.sd-gx-sm-1{--sd-gutter-x: 0.25rem}.sd-g-sm-2,.sd-gy-sm-2{--sd-gutter-y: 0.5rem}.sd-g-sm-2,.sd-gx-sm-2{--sd-gutter-x: 0.5rem}.sd-g-sm-3,.sd-gy-sm-3{--sd-gutter-y: 1rem}.sd-g-sm-3,.sd-gx-sm-3{--sd-gutter-x: 1rem}.sd-g-sm-4,.sd-gy-sm-4{--sd-gutter-y: 1.5rem}.sd-g-sm-4,.sd-gx-sm-4{--sd-gutter-x: 1.5rem}.sd-g-sm-5,.sd-gy-sm-5{--sd-gutter-y: 3rem}.sd-g-sm-5,.sd-gx-sm-5{--sd-gutter-x: 3rem}}@media(min-width: 768px){.sd-col-md-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto}.sd-col-md-1{-ms-flex:0 0 auto;flex:0 0 auto;width:8.3333333333%}.sd-col-md-2{-ms-flex:0 0 auto;flex:0 0 auto;width:16.6666666667%}.sd-col-md-3{-ms-flex:0 0 auto;flex:0 0 auto;width:25%}.sd-col-md-4{-ms-flex:0 0 auto;flex:0 0 auto;width:33.3333333333%}.sd-col-md-5{-ms-flex:0 0 auto;flex:0 0 auto;width:41.6666666667%}.sd-col-md-6{-ms-flex:0 0 auto;flex:0 0 auto;width:50%}.sd-col-md-7{-ms-flex:0 0 auto;flex:0 0 auto;width:58.3333333333%}.sd-col-md-8{-ms-flex:0 0 auto;flex:0 0 auto;width:66.6666666667%}.sd-col-md-9{-ms-flex:0 0 auto;flex:0 0 auto;width:75%}.sd-col-md-10{-ms-flex:0 0 auto;flex:0 0 auto;width:83.3333333333%}.sd-col-md-11{-ms-flex:0 0 auto;flex:0 0 auto;width:91.6666666667%}.sd-col-md-12{-ms-flex:0 0 auto;flex:0 0 auto;width:100%}.sd-g-md-0,.sd-gy-md-0{--sd-gutter-y: 0}.sd-g-md-0,.sd-gx-md-0{--sd-gutter-x: 0}.sd-g-md-1,.sd-gy-md-1{--sd-gutter-y: 0.25rem}.sd-g-md-1,.sd-gx-md-1{--sd-gutter-x: 0.25rem}.sd-g-md-2,.sd-gy-md-2{--sd-gutter-y: 0.5rem}.sd-g-md-2,.sd-gx-md-2{--sd-gutter-x: 0.5rem}.sd-g-md-3,.sd-gy-md-3{--sd-gutter-y: 1rem}.sd-g-md-3,.sd-gx-md-3{--sd-gutter-x: 1rem}.sd-g-md-4,.sd-gy-md-4{--sd-gutter-y: 1.5rem}.sd-g-md-4,.sd-gx-md-4{--sd-gutter-x: 1.5rem}.sd-g-md-5,.sd-gy-md-5{--sd-gutter-y: 3rem}.sd-g-md-5,.sd-gx-md-5{--sd-gutter-x: 3rem}}@media(min-width: 992px){.sd-col-lg-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto}.sd-col-lg-1{-ms-flex:0 0 auto;flex:0 0 auto;width:8.3333333333%}.sd-col-lg-2{-ms-flex:0 0 auto;flex:0 0 auto;width:16.6666666667%}.sd-col-lg-3{-ms-flex:0 0 auto;flex:0 0 auto;width:25%}.sd-col-lg-4{-ms-flex:0 0 auto;flex:0 0 auto;width:33.3333333333%}.sd-col-lg-5{-ms-flex:0 0 auto;flex:0 0 auto;width:41.6666666667%}.sd-col-lg-6{-ms-flex:0 0 auto;flex:0 0 auto;width:50%}.sd-col-lg-7{-ms-flex:0 0 auto;flex:0 0 auto;width:58.3333333333%}.sd-col-lg-8{-ms-flex:0 0 auto;flex:0 0 auto;width:66.6666666667%}.sd-col-lg-9{-ms-flex:0 0 auto;flex:0 0 auto;width:75%}.sd-col-lg-10{-ms-flex:0 0 auto;flex:0 0 auto;width:83.3333333333%}.sd-col-lg-11{-ms-flex:0 0 auto;flex:0 0 auto;width:91.6666666667%}.sd-col-lg-12{-ms-flex:0 0 auto;flex:0 0 auto;width:100%}.sd-g-lg-0,.sd-gy-lg-0{--sd-gutter-y: 0}.sd-g-lg-0,.sd-gx-lg-0{--sd-gutter-x: 0}.sd-g-lg-1,.sd-gy-lg-1{--sd-gutter-y: 0.25rem}.sd-g-lg-1,.sd-gx-lg-1{--sd-gutter-x: 0.25rem}.sd-g-lg-2,.sd-gy-lg-2{--sd-gutter-y: 0.5rem}.sd-g-lg-2,.sd-gx-lg-2{--sd-gutter-x: 0.5rem}.sd-g-lg-3,.sd-gy-lg-3{--sd-gutter-y: 1rem}.sd-g-lg-3,.sd-gx-lg-3{--sd-gutter-x: 1rem}.sd-g-lg-4,.sd-gy-lg-4{--sd-gutter-y: 1.5rem}.sd-g-lg-4,.sd-gx-lg-4{--sd-gutter-x: 1.5rem}.sd-g-lg-5,.sd-gy-lg-5{--sd-gutter-y: 3rem}.sd-g-lg-5,.sd-gx-lg-5{--sd-gutter-x: 3rem}}@media(min-width: 1200px){.sd-col-xl-auto{-ms-flex:0 0 auto;flex:0 0 auto;width:auto}.sd-col-xl-1{-ms-flex:0 0 auto;flex:0 0 auto;width:8.3333333333%}.sd-col-xl-2{-ms-flex:0 0 auto;flex:0 0 auto;width:16.6666666667%}.sd-col-xl-3{-ms-flex:0 0 auto;flex:0 0 auto;width:25%}.sd-col-xl-4{-ms-flex:0 0 auto;flex:0 0 auto;width:33.3333333333%}.sd-col-xl-5{-ms-flex:0 0 auto;flex:0 0 auto;width:41.6666666667%}.sd-col-xl-6{-ms-flex:0 0 auto;flex:0 0 auto;width:50%}.sd-col-xl-7{-ms-flex:0 0 auto;flex:0 0 auto;width:58.3333333333%}.sd-col-xl-8{-ms-flex:0 0 auto;flex:0 0 auto;width:66.6666666667%}.sd-col-xl-9{-ms-flex:0 0 auto;flex:0 0 auto;width:75%}.sd-col-xl-10{-ms-flex:0 0 auto;flex:0 0 auto;width:83.3333333333%}.sd-col-xl-11{-ms-flex:0 0 auto;flex:0 0 auto;width:91.6666666667%}.sd-col-xl-12{-ms-flex:0 0 auto;flex:0 0 auto;width:100%}.sd-g-xl-0,.sd-gy-xl-0{--sd-gutter-y: 0}.sd-g-xl-0,.sd-gx-xl-0{--sd-gutter-x: 0}.sd-g-xl-1,.sd-gy-xl-1{--sd-gutter-y: 0.25rem}.sd-g-xl-1,.sd-gx-xl-1{--sd-gutter-x: 0.25rem}.sd-g-xl-2,.sd-gy-xl-2{--sd-gutter-y: 0.5rem}.sd-g-xl-2,.sd-gx-xl-2{--sd-gutter-x: 0.5rem}.sd-g-xl-3,.sd-gy-xl-3{--sd-gutter-y: 1rem}.sd-g-xl-3,.sd-gx-xl-3{--sd-gutter-x: 1rem}.sd-g-xl-4,.sd-gy-xl-4{--sd-gutter-y: 1.5rem}.sd-g-xl-4,.sd-gx-xl-4{--sd-gutter-x: 1.5rem}.sd-g-xl-5,.sd-gy-xl-5{--sd-gutter-y: 3rem}.sd-g-xl-5,.sd-gx-xl-5{--sd-gutter-x: 3rem}}.sd-flex-row-reverse{flex-direction:row-reverse !important}details.sd-dropdown{position:relative;font-size:var(--sd-fontsize-dropdown)}details.sd-dropdown:hover{cursor:pointer}details.sd-dropdown .sd-summary-content{cursor:default}details.sd-dropdown summary.sd-summary-title{padding:.5em .6em .5em 1em;font-size:var(--sd-fontsize-dropdown-title);font-weight:var(--sd-fontweight-dropdown-title);user-select:none;-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;list-style:none;display:inline-flex;justify-content:space-between}details.sd-dropdown summary.sd-summary-title::-webkit-details-marker{display:none}details.sd-dropdown summary.sd-summary-title:focus{outline:none}details.sd-dropdown summary.sd-summary-title .sd-summary-icon{margin-right:.6em;display:inline-flex;align-items:center}details.sd-dropdown summary.sd-summary-title .sd-summary-icon svg{opacity:.8}details.sd-dropdown summary.sd-summary-title .sd-summary-text{flex-grow:1;line-height:1.5;padding-right:.5rem}details.sd-dropdown summary.sd-summary-title .sd-summary-state-marker{pointer-events:none;display:inline-flex;align-items:center}details.sd-dropdown summary.sd-summary-title .sd-summary-state-marker svg{opacity:.6}details.sd-dropdown summary.sd-summary-title:hover .sd-summary-state-marker svg{opacity:1;transform:scale(1.1)}details.sd-dropdown[open] summary .sd-octicon.no-title{visibility:hidden}details.sd-dropdown .sd-summary-chevron-right{transition:.25s}details.sd-dropdown[open]>.sd-summary-title .sd-summary-chevron-right{transform:rotate(90deg)}details.sd-dropdown[open]>.sd-summary-title .sd-summary-chevron-down{transform:rotate(180deg)}details.sd-dropdown:not([open]).sd-card{border:none}details.sd-dropdown:not([open])>.sd-card-header{border:1px solid var(--sd-color-card-border);border-radius:.25rem}details.sd-dropdown.sd-fade-in[open] summary~*{-moz-animation:sd-fade-in .5s ease-in-out;-webkit-animation:sd-fade-in .5s ease-in-out;animation:sd-fade-in .5s ease-in-out}details.sd-dropdown.sd-fade-in-slide-down[open] summary~*{-moz-animation:sd-fade-in .5s ease-in-out,sd-slide-down .5s ease-in-out;-webkit-animation:sd-fade-in .5s ease-in-out,sd-slide-down .5s ease-in-out;animation:sd-fade-in .5s ease-in-out,sd-slide-down .5s ease-in-out}.sd-col>.sd-dropdown{width:100%}.sd-summary-content>.sd-tab-set:first-child{margin-top:0}@keyframes sd-fade-in{0%{opacity:0}100%{opacity:1}}@keyframes sd-slide-down{0%{transform:translate(0, -10px)}100%{transform:translate(0, 0)}}.sd-tab-set{border-radius:.125rem;display:flex;flex-wrap:wrap;margin:1em 0;position:relative}.sd-tab-set>input{opacity:0;position:absolute}.sd-tab-set>input:checked+label{border-color:var(--sd-color-tabs-underline-active);color:var(--sd-color-tabs-label-active)}.sd-tab-set>input:checked+label+.sd-tab-content{display:block}.sd-tab-set>input:not(:checked)+label:hover{color:var(--sd-color-tabs-label-hover);border-color:var(--sd-color-tabs-underline-hover)}.sd-tab-set>input:focus+label{outline-style:auto}.sd-tab-set>input:not(.focus-visible)+label{outline:none;-webkit-tap-highlight-color:transparent}.sd-tab-set>label{border-bottom:.125rem solid transparent;margin-bottom:0;color:var(--sd-color-tabs-label-inactive);border-color:var(--sd-color-tabs-underline-inactive);cursor:pointer;font-size:var(--sd-fontsize-tabs-label);font-weight:700;padding:1em 1.25em .5em;transition:color 250ms;width:auto;z-index:1}html .sd-tab-set>label:hover{color:var(--sd-color-tabs-label-active)}.sd-col>.sd-tab-set{width:100%}.sd-tab-content{box-shadow:0 -0.0625rem var(--sd-color-tabs-overline),0 .0625rem var(--sd-color-tabs-underline);display:none;order:99;padding-bottom:.75rem;padding-top:.75rem;width:100%}.sd-tab-content>:first-child{margin-top:0 !important}.sd-tab-content>:last-child{margin-bottom:0 !important}.sd-tab-content>.sd-tab-set{margin:0}.sd-sphinx-override,.sd-sphinx-override *{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}.sd-sphinx-override p{margin-top:0}:root{--sd-color-primary: #0071bc;--sd-color-secondary: #6c757d;--sd-color-success: #28a745;--sd-color-info: #17a2b8;--sd-color-warning: #f0b37e;--sd-color-danger: #dc3545;--sd-color-light: #f8f9fa;--sd-color-muted: #6c757d;--sd-color-dark: #212529;--sd-color-black: black;--sd-color-white: white;--sd-color-primary-highlight: #0060a0;--sd-color-secondary-highlight: #5c636a;--sd-color-success-highlight: #228e3b;--sd-color-info-highlight: #148a9c;--sd-color-warning-highlight: #cc986b;--sd-color-danger-highlight: #bb2d3b;--sd-color-light-highlight: #d3d4d5;--sd-color-muted-highlight: #5c636a;--sd-color-dark-highlight: #1c1f23;--sd-color-black-highlight: black;--sd-color-white-highlight: #d9d9d9;--sd-color-primary-bg: rgba(0, 113, 188, 0.2);--sd-color-secondary-bg: rgba(108, 117, 125, 0.2);--sd-color-success-bg: rgba(40, 167, 69, 0.2);--sd-color-info-bg: rgba(23, 162, 184, 0.2);--sd-color-warning-bg: rgba(240, 179, 126, 0.2);--sd-color-danger-bg: rgba(220, 53, 69, 0.2);--sd-color-light-bg: rgba(248, 249, 250, 0.2);--sd-color-muted-bg: rgba(108, 117, 125, 0.2);--sd-color-dark-bg: rgba(33, 37, 41, 0.2);--sd-color-black-bg: rgba(0, 0, 0, 0.2);--sd-color-white-bg: rgba(255, 255, 255, 0.2);--sd-color-primary-text: #fff;--sd-color-secondary-text: #fff;--sd-color-success-text: #fff;--sd-color-info-text: #fff;--sd-color-warning-text: #212529;--sd-color-danger-text: #fff;--sd-color-light-text: #212529;--sd-color-muted-text: #fff;--sd-color-dark-text: #fff;--sd-color-black-text: #fff;--sd-color-white-text: #212529;--sd-color-shadow: rgba(0, 0, 0, 0.15);--sd-color-card-border: rgba(0, 0, 0, 0.125);--sd-color-card-border-hover: hsla(231, 99%, 66%, 1);--sd-color-card-background: transparent;--sd-color-card-text: inherit;--sd-color-card-header: transparent;--sd-color-card-footer: transparent;--sd-color-tabs-label-active: hsla(231, 99%, 66%, 1);--sd-color-tabs-label-hover: hsla(231, 99%, 66%, 1);--sd-color-tabs-label-inactive: hsl(0, 0%, 66%);--sd-color-tabs-underline-active: hsla(231, 99%, 66%, 1);--sd-color-tabs-underline-hover: rgba(178, 206, 245, 0.62);--sd-color-tabs-underline-inactive: transparent;--sd-color-tabs-overline: rgb(222, 222, 222);--sd-color-tabs-underline: rgb(222, 222, 222);--sd-fontsize-tabs-label: 1rem;--sd-fontsize-dropdown: inherit;--sd-fontsize-dropdown-title: 1rem;--sd-fontweight-dropdown-title: 700}


(()=>{"use strict";function e(e){"loading"!=document.readyState?e():document.addEventListener("DOMContentLoaded",e)}const t=e=>"string"==typeof e&&/^[v\d]/.test(e)&&o.test(e),n=(e,t,n)=>{u(n);const o=((e,t)=>{const n=r(e),o=r(t),a=n.pop(),c=o.pop(),s=i(n,o);return 0!==s?s:a&&c?i(a.split("."),c.split(".")):a||c?a?-1:1:0})(e,t);return d[n].includes(o)},o=/^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i,r=e=>{if("string"!=typeof e)throw new TypeError("Invalid argument expected string");const t=e.match(o);if(!t)throw new Error(`Invalid argument not valid semver ('${e}' received)`);return t.shift(),t},a=e=>"*"===e||"x"===e||"X"===e,c=e=>{const t=parseInt(e,10);return isNaN(t)?e:t},s=(e,t)=>{if(a(e)||a(t))return 0;const[n,o]=((e,t)=>typeof e!=typeof t?[String(e),String(t)]:[e,t])(c(e),c(t));return n>o?1:n{for(let n=0;n":[1],">=":[0,1],"=":[0],"<=":[-1,0],"<":[-1]},l=Object.keys(d),u=e=>{if("string"!=typeof e)throw new TypeError("Invalid operator type, expected string but got "+typeof e);if(-1===l.indexOf(e))throw new Error(`Invalid operator, expected one of ${l.join("|")}`)};var m=window.matchMedia("(prefers-color-scheme: dark)");function h(e){document.documentElement.dataset.theme=m.matches?"dark":"light"}function p(e){"light"!==e&&"dark"!==e&&"auto"!==e&&(console.error(`Got invalid theme mode: ${e}. Resetting to auto.`),e="auto");var t=m.matches?"dark":"light";document.documentElement.dataset.mode=e;var n="auto"==e?t:e;document.documentElement.dataset.theme=n,document.querySelectorAll(".dropdown-menu").forEach((e=>{"dark"===n?e.classList.add("dropdown-menu-dark"):e.classList.remove("dropdown-menu-dark")})),localStorage.setItem("mode",e),localStorage.setItem("theme",n),console.log(`[PST]: Changed to ${e} mode using the ${n} theme.`),m.onchange="auto"==e?h:""}function f(){const e=document.documentElement.dataset.defaultMode||"auto",t=localStorage.getItem("mode")||e;var n,o;p(((o=(n=m.matches?["auto","light","dark"]:["auto","dark","light"]).indexOf(t)+1)===n.length&&(o=0),n[o]))}var g=()=>{let e=document.querySelectorAll("form.bd-search");return e.length?(1==e.length?e[0]:document.querySelector("div:not(.search-button__search-container) > form.bd-search")).querySelector("input"):void 0},v=()=>{let e=g(),t=document.querySelector(".search-button__wrapper");e===t.querySelector("input")&&t.classList.toggle("show"),document.activeElement===e?e.blur():(e.focus(),e.select(),e.scrollIntoView({block:"center"}))},y=0===navigator.platform.indexOf("Mac")||"iPhone"===navigator.platform,b=()=>"dirhtml"==DOCUMENTATION_OPTIONS.BUILDER?"index"==DOCUMENTATION_OPTIONS.pagename?"/":`${DOCUMENTATION_OPTIONS.pagename}/`:`${DOCUMENTATION_OPTIONS.pagename}.html`;async function w(e){document.querySelector("#bd-header-version-warning").remove();const t=DOCUMENTATION_OPTIONS.VERSION,n=new Date,o=JSON.parse(localStorage.getItem("pst_banner_pref")||"{}");console.debug(`[PST] Dismissing the version warning banner on ${t} starting ${n}.`),o[t]=n,localStorage.setItem("pst_banner_pref",JSON.stringify(o))}async function E(e){e.preventDefault();const t=b();let n=e.currentTarget.getAttribute("href"),o=n.replace(t,"");try{(await fetch(n,{method:"HEAD"})).ok?location.href=n:location.href=o}catch(e){location.href=o}}async function S(){var e=document.querySelectorAll(".version-switcher__button");const o=e.length>0,r=DOCUMENTATION_OPTIONS.hasOwnProperty("theme_switcher_json_url"),a=DOCUMENTATION_OPTIONS.show_version_warning_banner;if(r&&(o||a)){const o=await async function(e){try{var t=new URL(e)}catch(n){if(!(n instanceof TypeError))throw n;{if(!window.location.origin)return null;const n=await fetch(window.location.origin,{method:"HEAD"});t=new URL(e,n.url)}}const n=await fetch(t);return await n.json()}(DOCUMENTATION_OPTIONS.theme_switcher_json_url);o&&(function(e,t){const n=b();t.forEach((e=>{e.dataset.activeVersionName="",e.dataset.activeVersion=""}));const o=(e=e.map((e=>(e.match=e.version==DOCUMENTATION_OPTIONS.theme_switcher_version_match,e.preferred=e.preferred||!1,"name"in e||(e.name=e.version),e)))).map((e=>e.preferred&&e.match)).some(Boolean);var r=!1;e.forEach((e=>{const a=document.createElement("a");a.setAttribute("class","dropdown-item list-group-item list-group-item-action py-1"),a.setAttribute("href",`${e.url}${n}`),a.setAttribute("role","option");const c=document.createElement("span");c.textContent=`${e.name}`,a.appendChild(c),a.dataset.versionName=e.name,a.dataset.version=e.version;let s=o&&e.preferred,i=!o&&!r&&e.match(s||i)&&(a.classList.add("active"),t.forEach((t=>{t.innerText=e.name,t.dataset.activeVersionName=e.name,t.dataset.activeVersion=e.version})),r=!0),document.querySelectorAll(".version-switcher__menu").forEach((e=>{let t=a.cloneNode(!0);t.onclick=E,e.append(t)}))}))}(o,e),a&&function(e){var o=DOCUMENTATION_OPTIONS.VERSION,r=e.filter((e=>e.preferred));if(1!==r.length){const e=0==r.length?"No":"Multiple";return void console.log(`[PST] ${e} versions marked "preferred" found in versions JSON, ignoring.`)}const a=r[0].version,c=r[0].url,s=t(o)&&t(a);if(s&&n(o,a,"="))return void console.log("This is the prefered version of the docs, not showing the warning banner.");const i=JSON.parse(localStorage.getItem("pst_banner_pref")||"{}")[o];if(null!=i){const e=new Date(i),t=(new Date-e)/864e5;if(t<14)return void console.info(`[PST] Suppressing version warning banner; was dismissed ${Math.floor(t)} day(s) ago`)}const d=document.querySelector("#bd-header-version-warning"),l=document.createElement("div"),u=document.createElement("div"),m=document.createElement("strong"),h=document.createElement("a"),p=document.createElement("a");l.classList="bd-header-announcement__content  ms-auto me-auto",u.classList="sidebar-message",h.classList="btn text-wrap font-weight-bold ms-3 my-1 align-baseline pst-button-link-to-stable-version",h.href=`${c}${b()}`,h.innerText="Switch to stable version",h.onclick=E,p.classList="ms-3 my-1 align-baseline";const f=document.createElement("i");p.append(f),f.classList="fa-solid fa-xmark",p.onclick=w,u.innerText="This is documentation for ";const g=o.includes("dev")||o.includes("rc")||o.includes("pre"),v=s&&n(o,a,">");g||v?m.innerText="an unstable development version":s&&n(o,a,"<")?m.innerText=`an old version (${o})`:m.innerText=o?`version ${o}`:"an unknown version",d.appendChild(l),d.append(p),l.appendChild(u),u.appendChild(m),u.appendChild(document.createTextNode(".")),u.appendChild(h),d.classList.remove("d-none")}(o))}}function T(){const e=()=>{document.querySelectorAll("pre, .nboutput > .output_area, .cell_output > .output, .jp-RenderedHTMLCommon").forEach((e=>{e.tabIndex=e.scrollWidth>e.clientWidth||e.scrollHeight>e.clientHeight?0:-1}))},t=function(e,t){let n=null;return(...t)=>{clearTimeout(n),n=setTimeout((()=>{e(...t)}),300)}}(e);window.addEventListener("resize",t),new MutationObserver(t).observe(document.getElementById("main-content"),{subtree:!0,childList:!0}),e()}async function O(){const e=document.querySelector(".bd-header-announcement"),{pstAnnouncementUrl:t}=e?e.dataset:null;if(t)try{const n=await fetch(t);if(!n.ok)throw new Error(`[PST]: HTTP response status not ok: ${n.status} ${n.statusText}`);const o=await n.text();if(0===o.length)return void console.log(`[PST]: Empty announcement at: ${t}`);e.innerHTML=`${o}`,e.classList.remove("d-none")}catch(e){console.log(`[PST]: Failed to load announcement at: ${t}`),console.error(e)}}e((async function(){await Promise.allSettled([S(),O()]);const e=document.querySelector(".pst-async-banner-revealer");if(!e)return;e.classList.remove("d-none");const t=Array.from(e.children).reduce(((e,t)=>e+t.offsetHeight),0);e.style.setProperty("height",`${t}px`),setTimeout((()=>{e.style.setProperty("height","auto")}),320)})),e((function(){p(document.documentElement.dataset.mode),document.querySelectorAll(".theme-switch-button").forEach((e=>{e.addEventListener("click",f)}))})),e((function(){if(!document.querySelector(".bd-docs-nav"))return;var e=document.querySelector("div.bd-sidebar");let t=parseInt(sessionStorage.getItem("sidebar-scroll-top"),10);if(isNaN(t)){var n=document.querySelector(".bd-docs-nav").querySelectorAll(".active");if(n.length>0){var o=n[n.length-1],r=o.getBoundingClientRect().y-e.getBoundingClientRect().y;if(o.getBoundingClientRect().y>.5*window.innerHeight){let t=.25;e.scrollTop=r-e.clientHeight*t,console.log("[PST]: Scrolled sidebar using last active link...")}}}else e.scrollTop=t,console.log("[PST]: Scrolled sidebar using stored browser position...");window.addEventListener("beforeunload",(()=>{sessionStorage.setItem("sidebar-scroll-top",e.scrollTop)}))})),e((function(){window.addEventListener("activate.bs.scrollspy",(function(){document.querySelectorAll(".bd-toc-nav a").forEach((e=>{e.parentElement.classList.remove("active")})),document.querySelectorAll(".bd-toc-nav a.active").forEach((e=>{e.parentElement.classList.add("active")}))}))})),e((()=>{(()=>{let e=document.querySelectorAll(".search-button__kbd-shortcut");y&&e.forEach((e=>e.querySelector("kbd.kbd-shortcut__modifier").innerText="⌘"))})(),window.addEventListener("keydown",(e=>{let t=g();e.shiftKey||e.altKey||(y?!e.metaKey||e.ctrlKey:e.metaKey||!e.ctrlKey)||!/^k$/i.test(e.key)?document.activeElement===t&&/Escape/i.test(e.key)&&v():(e.preventDefault(),v())}),!0),document.querySelectorAll(".search-button__button").forEach((e=>{e.onclick=v}));let e=document.querySelector(".search-button__overlay");e&&(e.onclick=v)})),e((function(){new MutationObserver(((e,t)=>{e.forEach((e=>{0!==e.addedNodes.length&&void 0!==e.addedNodes[0].data&&-1!=e.addedNodes[0].data.search("Inserted RTD Footer")&&e.addedNodes.forEach((e=>{document.getElementById("rtd-footer-container").append(e)}))}))})).observe(document.body,{childList:!0})})),e((function(){const e=document.getElementById("pst-primary-sidebar-checkbox"),t=document.getElementById("pst-secondary-sidebar-checkbox"),n=document.querySelector(".bd-sidebar-primary"),o=document.querySelector(".bd-sidebar-secondary"),r=document.querySelector(".primary-toggle"),a=document.querySelector(".secondary-toggle");[[r,e,n],[a,t,o]].forEach((([e,t,n])=>{e&&e.addEventListener("click",(e=>{if(e.preventDefault(),e.stopPropagation(),t.checked=!t.checked,t.checked){const e=n.querySelector("a, button");setTimeout((()=>e.focus()),100)}}))})),[[n,e,r],[o,t,a]].forEach((([e,t,n])=>{e&&e.addEventListener("keydown",(e=>{"Escape"===e.key&&(e.preventDefault(),e.stopPropagation(),t.checked=!1,n.focus())}))})),[[e,r],[t,a]].forEach((([e,t])=>{e.addEventListener("change",(e=>{e.currentTarget.checked||t.focus()}))}))})),"complete"===document.readyState?T():window.addEventListener("load",T)})();
//# sourceMappingURL=pydata-sphinx-theme.js.map

/*! For license information please see bootstrap.js.LICENSE.txt */
(()=>{"use strict";var t={d:(e,i)=>{for(var n in i)t.o(i,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:i[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{afterMain:()=>E,afterRead:()=>v,afterWrite:()=>C,applyStyles:()=>$,arrow:()=>J,auto:()=>a,basePlacements:()=>l,beforeMain:()=>y,beforeRead:()=>_,beforeWrite:()=>A,bottom:()=>s,clippingParents:()=>d,computeStyles:()=>it,createPopper:()=>Dt,createPopperBase:()=>St,createPopperLite:()=>$t,detectOverflow:()=>_t,end:()=>h,eventListeners:()=>st,flip:()=>bt,hide:()=>wt,left:()=>r,main:()=>w,modifierPhases:()=>O,offset:()=>Et,placements:()=>g,popper:()=>f,popperGenerator:()=>Lt,popperOffsets:()=>At,preventOverflow:()=>Tt,read:()=>b,reference:()=>p,right:()=>o,start:()=>c,top:()=>n,variationPlacements:()=>m,viewport:()=>u,write:()=>T});var i={};t.r(i),t.d(i,{Alert:()=>Oe,Button:()=>ke,Carousel:()=>li,Collapse:()=>Ei,Dropdown:()=>Ki,Modal:()=>Ln,Offcanvas:()=>Kn,Popover:()=>bs,ScrollSpy:()=>Ls,Tab:()=>Js,Toast:()=>po,Tooltip:()=>fs});var n="top",s="bottom",o="right",r="left",a="auto",l=[n,s,o,r],c="start",h="end",d="clippingParents",u="viewport",f="popper",p="reference",m=l.reduce((function(t,e){return t.concat([e+"-"+c,e+"-"+h])}),[]),g=[].concat(l,[a]).reduce((function(t,e){return t.concat([e,e+"-"+c,e+"-"+h])}),[]),_="beforeRead",b="read",v="afterRead",y="beforeMain",w="main",E="afterMain",A="beforeWrite",T="write",C="afterWrite",O=[_,b,v,y,w,E,A,T,C];function x(t){return t?(t.nodeName||"").toLowerCase():null}function k(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function L(t){return t instanceof k(t).Element||t instanceof Element}function S(t){return t instanceof k(t).HTMLElement||t instanceof HTMLElement}function D(t){return"undefined"!=typeof ShadowRoot&&(t instanceof k(t).ShadowRoot||t instanceof ShadowRoot)}const $={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var i=e.styles[t]||{},n=e.attributes[t]||{},s=e.elements[t];S(s)&&x(s)&&(Object.assign(s.style,i),Object.keys(n).forEach((function(t){var e=n[t];!1===e?s.removeAttribute(t):s.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,i={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,i.popper),e.styles=i,e.elements.arrow&&Object.assign(e.elements.arrow.style,i.arrow),function(){Object.keys(e.elements).forEach((function(t){var n=e.elements[t],s=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:i[t]).reduce((function(t,e){return t[e]="",t}),{});S(n)&&x(n)&&(Object.assign(n.style,o),Object.keys(s).forEach((function(t){n.removeAttribute(t)})))}))}},requires:["computeStyles"]};function I(t){return t.split("-")[0]}var N=Math.max,P=Math.min,M=Math.round;function j(){var t=navigator.userAgentData;return null!=t&&t.brands&&Array.isArray(t.brands)?t.brands.map((function(t){return t.brand+"/"+t.version})).join(" "):navigator.userAgent}function F(){return!/^((?!chrome|android).)*safari/i.test(j())}function H(t,e,i){void 0===e&&(e=!1),void 0===i&&(i=!1);var n=t.getBoundingClientRect(),s=1,o=1;e&&S(t)&&(s=t.offsetWidth>0&&M(n.width)/t.offsetWidth||1,o=t.offsetHeight>0&&M(n.height)/t.offsetHeight||1);var r=(L(t)?k(t):window).visualViewport,a=!F()&&i,l=(n.left+(a&&r?r.offsetLeft:0))/s,c=(n.top+(a&&r?r.offsetTop:0))/o,h=n.width/s,d=n.height/o;return{width:h,height:d,top:c,right:l+h,bottom:c+d,left:l,x:l,y:c}}function B(t){var e=H(t),i=t.offsetWidth,n=t.offsetHeight;return Math.abs(e.width-i)<=1&&(i=e.width),Math.abs(e.height-n)<=1&&(n=e.height),{x:t.offsetLeft,y:t.offsetTop,width:i,height:n}}function W(t,e){var i=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(i&&D(i)){var n=e;do{if(n&&t.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function z(t){return k(t).getComputedStyle(t)}function R(t){return["table","td","th"].indexOf(x(t))>=0}function q(t){return((L(t)?t.ownerDocument:t.document)||window.document).documentElement}function V(t){return"html"===x(t)?t:t.assignedSlot||t.parentNode||(D(t)?t.host:null)||q(t)}function Y(t){return S(t)&&"fixed"!==z(t).position?t.offsetParent:null}function K(t){for(var e=k(t),i=Y(t);i&&R(i)&&"static"===z(i).position;)i=Y(i);return i&&("html"===x(i)||"body"===x(i)&&"static"===z(i).position)?e:i||function(t){var e=/firefox/i.test(j());if(/Trident/i.test(j())&&S(t)&&"fixed"===z(t).position)return null;var i=V(t);for(D(i)&&(i=i.host);S(i)&&["html","body"].indexOf(x(i))<0;){var n=z(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||e&&"filter"===n.willChange||e&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(t)||e}function Q(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function X(t,e,i){return N(t,P(e,i))}function U(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function G(t,e){return e.reduce((function(e,i){return e[i]=t,e}),{})}const J={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,i=t.state,a=t.name,c=t.options,h=i.elements.arrow,d=i.modifiersData.popperOffsets,u=I(i.placement),f=Q(u),p=[r,o].indexOf(u)>=0?"height":"width";if(h&&d){var m=function(t,e){return U("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:G(t,l))}(c.padding,i),g=B(h),_="y"===f?n:r,b="y"===f?s:o,v=i.rects.reference[p]+i.rects.reference[f]-d[f]-i.rects.popper[p],y=d[f]-i.rects.reference[f],w=K(h),E=w?"y"===f?w.clientHeight||0:w.clientWidth||0:0,A=v/2-y/2,T=m[_],C=E-g[p]-m[b],O=E/2-g[p]/2+A,x=X(T,O,C),k=f;i.modifiersData[a]=((e={})[k]=x,e.centerOffset=x-O,e)}},effect:function(t){var e=t.state,i=t.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=e.elements.popper.querySelector(n)))&&W(e.elements.popper,n)&&(e.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Z(t){return t.split("-")[1]}var tt={top:"auto",right:"auto",bottom:"auto",left:"auto"};function et(t){var e,i=t.popper,a=t.popperRect,l=t.placement,c=t.variation,d=t.offsets,u=t.position,f=t.gpuAcceleration,p=t.adaptive,m=t.roundOffsets,g=t.isFixed,_=d.x,b=void 0===_?0:_,v=d.y,y=void 0===v?0:v,w="function"==typeof m?m({x:b,y}):{x:b,y};b=w.x,y=w.y;var E=d.hasOwnProperty("x"),A=d.hasOwnProperty("y"),T=r,C=n,O=window;if(p){var x=K(i),L="clientHeight",S="clientWidth";x===k(i)&&"static"!==z(x=q(i)).position&&"absolute"===u&&(L="scrollHeight",S="scrollWidth"),(l===n||(l===r||l===o)&&c===h)&&(C=s,y-=(g&&x===O&&O.visualViewport?O.visualViewport.height:x[L])-a.height,y*=f?1:-1),l!==r&&(l!==n&&l!==s||c!==h)||(T=o,b-=(g&&x===O&&O.visualViewport?O.visualViewport.width:x[S])-a.width,b*=f?1:-1)}var D,$=Object.assign({position:u},p&&tt),I=!0===m?function(t,e){var i=t.x,n=t.y,s=e.devicePixelRatio||1;return{x:M(i*s)/s||0,y:M(n*s)/s||0}}({x:b,y},k(i)):{x:b,y};return b=I.x,y=I.y,f?Object.assign({},$,((D={})[C]=A?"0":"",D[T]=E?"0":"",D.transform=(O.devicePixelRatio||1)<=1?"translate("+b+"px, "+y+"px)":"translate3d("+b+"px, "+y+"px, 0)",D)):Object.assign({},$,((e={})[C]=A?y+"px":"",e[T]=E?b+"px":"",e.transform="",e))}const it={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,i=t.options,n=i.gpuAcceleration,s=void 0===n||n,o=i.adaptive,r=void 0===o||o,a=i.roundOffsets,l=void 0===a||a,c={placement:I(e.placement),variation:Z(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,et(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,et(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var nt={passive:!0};const st={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,i=t.instance,n=t.options,s=n.scroll,o=void 0===s||s,r=n.resize,a=void 0===r||r,l=k(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach((function(t){t.addEventListener("scroll",i.update,nt)})),a&&l.addEventListener("resize",i.update,nt),function(){o&&c.forEach((function(t){t.removeEventListener("scroll",i.update,nt)})),a&&l.removeEventListener("resize",i.update,nt)}},data:{}};var ot={left:"right",right:"left",bottom:"top",top:"bottom"};function rt(t){return t.replace(/left|right|bottom|top/g,(function(t){return ot[t]}))}var at={start:"end",end:"start"};function lt(t){return t.replace(/start|end/g,(function(t){return at[t]}))}function ct(t){var e=k(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function ht(t){return H(q(t)).left+ct(t).scrollLeft}function dt(t){var e=z(t),i=e.overflow,n=e.overflowX,s=e.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}function ut(t){return["html","body","#document"].indexOf(x(t))>=0?t.ownerDocument.body:S(t)&&dt(t)?t:ut(V(t))}function ft(t,e){var i;void 0===e&&(e=[]);var n=ut(t),s=n===(null==(i=t.ownerDocument)?void 0:i.body),o=k(n),r=s?[o].concat(o.visualViewport||[],dt(n)?n:[]):n,a=e.concat(r);return s?a:a.concat(ft(V(r)))}function pt(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function mt(t,e,i){return e===u?pt(function(t,e){var i=k(t),n=q(t),s=i.visualViewport,o=n.clientWidth,r=n.clientHeight,a=0,l=0;if(s){o=s.width,r=s.height;var c=F();(c||!c&&"fixed"===e)&&(a=s.offsetLeft,l=s.offsetTop)}return{width:o,height:r,x:a+ht(t),y:l}}(t,i)):L(e)?function(t,e){var i=H(t,!1,"fixed"===e);return i.top=i.top+t.clientTop,i.left=i.left+t.clientLeft,i.bottom=i.top+t.clientHeight,i.right=i.left+t.clientWidth,i.width=t.clientWidth,i.height=t.clientHeight,i.x=i.left,i.y=i.top,i}(e,i):pt(function(t){var e,i=q(t),n=ct(t),s=null==(e=t.ownerDocument)?void 0:e.body,o=N(i.scrollWidth,i.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=N(i.scrollHeight,i.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+ht(t),l=-n.scrollTop;return"rtl"===z(s||i).direction&&(a+=N(i.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}(q(t)))}function gt(t){var e,i=t.reference,a=t.element,l=t.placement,d=l?I(l):null,u=l?Z(l):null,f=i.x+i.width/2-a.width/2,p=i.y+i.height/2-a.height/2;switch(d){case n:e={x:f,y:i.y-a.height};break;case s:e={x:f,y:i.y+i.height};break;case o:e={x:i.x+i.width,y:p};break;case r:e={x:i.x-a.width,y:p};break;default:e={x:i.x,y:i.y}}var m=d?Q(d):null;if(null!=m){var g="y"===m?"height":"width";switch(u){case c:e[m]=e[m]-(i[g]/2-a[g]/2);break;case h:e[m]=e[m]+(i[g]/2-a[g]/2)}}return e}function _t(t,e){void 0===e&&(e={});var i=e,r=i.placement,a=void 0===r?t.placement:r,c=i.strategy,h=void 0===c?t.strategy:c,m=i.boundary,g=void 0===m?d:m,_=i.rootBoundary,b=void 0===_?u:_,v=i.elementContext,y=void 0===v?f:v,w=i.altBoundary,E=void 0!==w&&w,A=i.padding,T=void 0===A?0:A,C=U("number"!=typeof T?T:G(T,l)),O=y===f?p:f,k=t.rects.popper,D=t.elements[E?O:y],$=function(t,e,i,n){var s="clippingParents"===e?function(t){var e=ft(V(t)),i=["absolute","fixed"].indexOf(z(t).position)>=0&&S(t)?K(t):t;return L(i)?e.filter((function(t){return L(t)&&W(t,i)&&"body"!==x(t)})):[]}(t):[].concat(e),o=[].concat(s,[i]),r=o[0],a=o.reduce((function(e,i){var s=mt(t,i,n);return e.top=N(s.top,e.top),e.right=P(s.right,e.right),e.bottom=P(s.bottom,e.bottom),e.left=N(s.left,e.left),e}),mt(t,r,n));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(L(D)?D:D.contextElement||q(t.elements.popper),g,b,h),I=H(t.elements.reference),M=gt({reference:I,element:k,strategy:"absolute",placement:a}),j=pt(Object.assign({},k,M)),F=y===f?j:I,B={top:$.top-F.top+C.top,bottom:F.bottom-$.bottom+C.bottom,left:$.left-F.left+C.left,right:F.right-$.right+C.right},R=t.modifiersData.offset;if(y===f&&R){var Y=R[a];Object.keys(B).forEach((function(t){var e=[o,s].indexOf(t)>=0?1:-1,i=[n,s].indexOf(t)>=0?"y":"x";B[t]+=Y[i]*e}))}return B}const bt={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,i=t.options,h=t.name;if(!e.modifiersData[h]._skip){for(var d=i.mainAxis,u=void 0===d||d,f=i.altAxis,p=void 0===f||f,_=i.fallbackPlacements,b=i.padding,v=i.boundary,y=i.rootBoundary,w=i.altBoundary,E=i.flipVariations,A=void 0===E||E,T=i.allowedAutoPlacements,C=e.options.placement,O=I(C),x=_||(O!==C&&A?function(t){if(I(t)===a)return[];var e=rt(t);return[lt(t),e,lt(e)]}(C):[rt(C)]),k=[C].concat(x).reduce((function(t,i){return t.concat(I(i)===a?function(t,e){void 0===e&&(e={});var i=e,n=i.placement,s=i.boundary,o=i.rootBoundary,r=i.padding,a=i.flipVariations,c=i.allowedAutoPlacements,h=void 0===c?g:c,d=Z(n),u=d?a?m:m.filter((function(t){return Z(t)===d})):l,f=u.filter((function(t){return h.indexOf(t)>=0}));0===f.length&&(f=u);var p=f.reduce((function(e,i){return e[i]=_t(t,{placement:i,boundary:s,rootBoundary:o,padding:r})[I(i)],e}),{});return Object.keys(p).sort((function(t,e){return p[t]-p[e]}))}(e,{placement:i,boundary:v,rootBoundary:y,padding:b,flipVariations:A,allowedAutoPlacements:T}):i)}),[]),L=e.rects.reference,S=e.rects.popper,D=new Map,$=!0,N=k[0],P=0;P=0,B=H?"width":"height",W=_t(e,{placement:M,boundary:v,rootBoundary:y,altBoundary:w,padding:b}),z=H?F?o:r:F?s:n;L[B]>S[B]&&(z=rt(z));var R=rt(z),q=[];if(u&&q.push(W[j]<=0),p&&q.push(W[z]<=0,W[R]<=0),q.every((function(t){return t}))){N=M,$=!1;break}D.set(M,q)}if($)for(var V=function(t){var e=k.find((function(e){var i=D.get(e);if(i)return i.slice(0,t).every((function(t){return t}))}));if(e)return N=e,"break"},Y=A?3:1;Y>0&&"break"!==V(Y);Y--);e.placement!==N&&(e.modifiersData[h]._skip=!0,e.placement=N,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function vt(t,e,i){return void 0===i&&(i={x:0,y:0}),{top:t.top-e.height-i.y,right:t.right-e.width+i.x,bottom:t.bottom-e.height+i.y,left:t.left-e.width-i.x}}function yt(t){return[n,o,s,r].some((function(e){return t[e]>=0}))}const wt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,i=t.name,n=e.rects.reference,s=e.rects.popper,o=e.modifiersData.preventOverflow,r=_t(e,{elementContext:"reference"}),a=_t(e,{altBoundary:!0}),l=vt(r,n),c=vt(a,s,o),h=yt(l),d=yt(c);e.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:h,hasPopperEscaped:d},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":h,"data-popper-escaped":d})}},Et={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,i=t.options,s=t.name,a=i.offset,l=void 0===a?[0,0]:a,c=g.reduce((function(t,i){return t[i]=function(t,e,i){var s=I(t),a=[r,n].indexOf(s)>=0?-1:1,l="function"==typeof i?i(Object.assign({},e,{placement:t})):i,c=l[0],h=l[1];return c=c||0,h=(h||0)*a,[r,o].indexOf(s)>=0?{x:h,y:c}:{x:c,y:h}}(i,e.rects,l),t}),{}),h=c[e.placement],d=h.x,u=h.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=d,e.modifiersData.popperOffsets.y+=u),e.modifiersData[s]=c}},At={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,i=t.name;e.modifiersData[i]=gt({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},Tt={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,i=t.options,a=t.name,l=i.mainAxis,h=void 0===l||l,d=i.altAxis,u=void 0!==d&&d,f=i.boundary,p=i.rootBoundary,m=i.altBoundary,g=i.padding,_=i.tether,b=void 0===_||_,v=i.tetherOffset,y=void 0===v?0:v,w=_t(e,{boundary:f,rootBoundary:p,padding:g,altBoundary:m}),E=I(e.placement),A=Z(e.placement),T=!A,C=Q(E),O="x"===C?"y":"x",x=e.modifiersData.popperOffsets,k=e.rects.reference,L=e.rects.popper,S="function"==typeof y?y(Object.assign({},e.rects,{placement:e.placement})):y,D="number"==typeof S?{mainAxis:S,altAxis:S}:Object.assign({mainAxis:0,altAxis:0},S),$=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,M={x:0,y:0};if(x){if(h){var j,F="y"===C?n:r,H="y"===C?s:o,W="y"===C?"height":"width",z=x[C],R=z+w[F],q=z-w[H],V=b?-L[W]/2:0,Y=A===c?k[W]:L[W],U=A===c?-L[W]:-k[W],G=e.elements.arrow,J=b&&G?B(G):{width:0,height:0},tt=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},et=tt[F],it=tt[H],nt=X(0,k[W],J[W]),st=T?k[W]/2-V-nt-et-D.mainAxis:Y-nt-et-D.mainAxis,ot=T?-k[W]/2+V+nt+it+D.mainAxis:U+nt+it+D.mainAxis,rt=e.elements.arrow&&K(e.elements.arrow),at=rt?"y"===C?rt.clientTop||0:rt.clientLeft||0:0,lt=null!=(j=null==$?void 0:$[C])?j:0,ct=z+ot-lt,ht=X(b?P(R,z+st-lt-at):R,z,b?N(q,ct):q);x[C]=ht,M[C]=ht-z}if(u){var dt,ut="x"===C?n:r,ft="x"===C?s:o,pt=x[O],mt="y"===O?"height":"width",gt=pt+w[ut],bt=pt-w[ft],vt=-1!==[n,r].indexOf(E),yt=null!=(dt=null==$?void 0:$[O])?dt:0,wt=vt?gt:pt-k[mt]-L[mt]-yt+D.altAxis,Et=vt?pt+k[mt]+L[mt]-yt-D.altAxis:bt,At=b&&vt?function(t,e,i){var n=X(t,e,i);return n>i?i:n}(wt,pt,Et):X(b?wt:gt,pt,b?Et:bt);x[O]=At,M[O]=At-pt}e.modifiersData[a]=M}},requiresIfExists:["offset"]};function Ct(t,e,i){void 0===i&&(i=!1);var n,s,o=S(e),r=S(e)&&function(t){var e=t.getBoundingClientRect(),i=M(e.width)/t.offsetWidth||1,n=M(e.height)/t.offsetHeight||1;return 1!==i||1!==n}(e),a=q(e),l=H(t,r,i),c={scrollLeft:0,scrollTop:0},h={x:0,y:0};return(o||!o&&!i)&&(("body"!==x(e)||dt(a))&&(c=(n=e)!==k(n)&&S(n)?{scrollLeft:(s=n).scrollLeft,scrollTop:s.scrollTop}:ct(n)),S(e)?((h=H(e,!0)).x+=e.clientLeft,h.y+=e.clientTop):a&&(h.x=ht(a))),{x:l.left+c.scrollLeft-h.x,y:l.top+c.scrollTop-h.y,width:l.width,height:l.height}}function Ot(t){var e=new Map,i=new Set,n=[];function s(t){i.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!i.has(t)){var n=e.get(t);n&&s(n)}})),n.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){i.has(t.name)||s(t)})),n}var xt={placement:"bottom",modifiers:[],strategy:"absolute"};function kt(){for(var t=arguments.length,e=new Array(t),i=0;iIt.has(t)&&It.get(t).get(e)||null,remove(t,e){if(!It.has(t))return;const i=It.get(t);i.delete(e),0===i.size&&It.delete(t)}},Pt="transitionend",Mt=t=>(t&&window.CSS&&window.CSS.escape&&(t=t.replace(/#([^\s"#']+)/g,((t,e)=>`#${CSS.escape(e)}`))),t),jt=t=>{t.dispatchEvent(new Event(Pt))},Ft=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),Ht=t=>Ft(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(Mt(t)):null,Bt=t=>{if(!Ft(t)||0===t.getClientRects().length)return!1;const e="visible"===getComputedStyle(t).getPropertyValue("visibility"),i=t.closest("details:not([open])");if(!i)return e;if(i!==t){const e=t.closest("summary");if(e&&e.parentNode!==i)return!1;if(null===e)return!1}return e},Wt=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),zt=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?zt(t.parentNode):null},Rt=()=>{},qt=t=>{t.offsetHeight},Vt=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,Yt=[],Kt=()=>"rtl"===document.documentElement.dir,Qt=t=>{var e;e=()=>{const e=Vt();if(e){const i=t.NAME,n=e.fn[i];e.fn[i]=t.jQueryInterface,e.fn[i].Constructor=t,e.fn[i].noConflict=()=>(e.fn[i]=n,t.jQueryInterface)}},"loading"===document.readyState?(Yt.length||document.addEventListener("DOMContentLoaded",(()=>{for(const t of Yt)t()})),Yt.push(e)):e()},Xt=(t,e=[],i=t)=>"function"==typeof t?t(...e):i,Ut=(t,e,i=!0)=>{if(!i)return void Xt(t);const n=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:i}=window.getComputedStyle(t);const n=Number.parseFloat(e),s=Number.parseFloat(i);return n||s?(e=e.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(i))):0})(e)+5;let s=!1;const o=({target:i})=>{i===e&&(s=!0,e.removeEventListener(Pt,o),Xt(t))};e.addEventListener(Pt,o),setTimeout((()=>{s||jt(e)}),n)},Gt=(t,e,i,n)=>{const s=t.length;let o=t.indexOf(e);return-1===o?!i&&n?t[s-1]:t[0]:(o+=i?1:-1,n&&(o=(o+s)%s),t[Math.max(0,Math.min(o,s-1))])},Jt=/[^.]*(?=\..*)\.|.*/,Zt=/\..*/,te=/::\d+$/,ee={};let ie=1;const ne={mouseenter:"mouseover",mouseleave:"mouseout"},se=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function oe(t,e){return e&&`${e}::${ie++}`||t.uidEvent||ie++}function re(t){const e=oe(t);return t.uidEvent=e,ee[e]=ee[e]||{},ee[e]}function ae(t,e,i=null){return Object.values(t).find((t=>t.callable===e&&t.delegationSelector===i))}function le(t,e,i){const n="string"==typeof e,s=n?i:e||i;let o=ue(t);return se.has(o)||(o=t),[n,s,o]}function ce(t,e,i,n,s){if("string"!=typeof e||!t)return;let[o,r,a]=le(e,i,n);if(e in ne){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};r=t(r)}const l=re(t),c=l[a]||(l[a]={}),h=ae(c,r,o?i:null);if(h)return void(h.oneOff=h.oneOff&&s);const d=oe(r,e.replace(Jt,"")),u=o?function(t,e,i){return function n(s){const o=t.querySelectorAll(e);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(const a of o)if(a===r)return pe(s,{delegateTarget:r}),n.oneOff&&fe.off(t,s.type,e,i),i.apply(r,[s])}}(t,i,r):function(t,e){return function i(n){return pe(n,{delegateTarget:t}),i.oneOff&&fe.off(t,n.type,e),e.apply(t,[n])}}(t,r);u.delegationSelector=o?i:null,u.callable=r,u.oneOff=s,u.uidEvent=d,c[d]=u,t.addEventListener(a,u,o)}function he(t,e,i,n,s){const o=ae(e[i],n,s);o&&(t.removeEventListener(i,o,Boolean(s)),delete e[i][o.uidEvent])}function de(t,e,i,n){const s=e[i]||{};for(const[o,r]of Object.entries(s))o.includes(n)&&he(t,e,i,r.callable,r.delegationSelector)}function ue(t){return t=t.replace(Zt,""),ne[t]||t}const fe={on(t,e,i,n){ce(t,e,i,n,!1)},one(t,e,i,n){ce(t,e,i,n,!0)},off(t,e,i,n){if("string"!=typeof e||!t)return;const[s,o,r]=le(e,i,n),a=r!==e,l=re(t),c=l[r]||{},h=e.startsWith(".");if(void 0===o){if(h)for(const i of Object.keys(l))de(t,l,i,e.slice(1));for(const[i,n]of Object.entries(c)){const s=i.replace(te,"");a&&!e.includes(s)||he(t,l,r,n.callable,n.delegationSelector)}}else{if(!Object.keys(c).length)return;he(t,l,r,o,s?i:null)}},trigger(t,e,i){if("string"!=typeof e||!t)return null;const n=Vt();let s=null,o=!0,r=!0,a=!1;e!==ue(e)&&n&&(s=n.Event(e,i),n(t).trigger(s),o=!s.isPropagationStopped(),r=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());const l=pe(new Event(e,{bubbles:o,cancelable:!0}),i);return a&&l.preventDefault(),r&&t.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function pe(t,e={}){for(const[i,n]of Object.entries(e))try{t[i]=n}catch(e){Object.defineProperty(t,i,{configurable:!0,get:()=>n})}return t}function me(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function ge(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}const _e={setDataAttribute(t,e,i){t.setAttribute(`data-bs-${ge(e)}`,i)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${ge(e)}`)},getDataAttributes(t){if(!t)return{};const e={},i=Object.keys(t.dataset).filter((t=>t.startsWith("bs")&&!t.startsWith("bsConfig")));for(const n of i){let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=me(t.dataset[n])}return e},getDataAttribute:(t,e)=>me(t.getAttribute(`data-bs-${ge(e)}`))};class be{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(t){return t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t}_mergeConfigObj(t,e){const i=Ft(e)?_e.getDataAttribute(e,"config"):{};return{...this.constructor.Default,..."object"==typeof i?i:{},...Ft(e)?_e.getDataAttributes(e):{},..."object"==typeof t?t:{}}}_typeCheckConfig(t,e=this.constructor.DefaultType){for(const[n,s]of Object.entries(e)){const e=t[n],o=Ft(e)?"element":null==(i=e)?`${i}`:Object.prototype.toString.call(i).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(o))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n}" provided type "${o}" but expected type "${s}".`)}var i}}class ve extends be{constructor(t,e){super(),(t=Ht(t))&&(this._element=t,this._config=this._getConfig(e),Nt.set(this._element,this.constructor.DATA_KEY,this))}dispose(){Nt.remove(this._element,this.constructor.DATA_KEY),fe.off(this._element,this.constructor.EVENT_KEY);for(const t of Object.getOwnPropertyNames(this))this[t]=null}_queueCallback(t,e,i=!0){Ut(t,e,i)}_getConfig(t){return t=this._mergeConfigObj(t,this._element),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}static getInstance(t){return Nt.get(Ht(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.3.3"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(t){return`${t}${this.EVENT_KEY}`}}const ye=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let i=t.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),e=i&&"#"!==i?i.trim():null}return e?e.split(",").map((t=>Mt(t))).join(","):null},we={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const i=[];let n=t.parentNode.closest(e);for(;n;)i.push(n),n=n.parentNode.closest(e);return i},prev(t,e){let i=t.previousElementSibling;for(;i;){if(i.matches(e))return[i];i=i.previousElementSibling}return[]},next(t,e){let i=t.nextElementSibling;for(;i;){if(i.matches(e))return[i];i=i.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(",");return this.find(e,t).filter((t=>!Wt(t)&&Bt(t)))},getSelectorFromElement(t){const e=ye(t);return e&&we.findOne(e)?e:null},getElementFromSelector(t){const e=ye(t);return e?we.findOne(e):null},getMultipleElementsFromSelector(t){const e=ye(t);return e?we.find(e):[]}},Ee=(t,e="hide")=>{const i=`click.dismiss${t.EVENT_KEY}`,n=t.NAME;fe.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),Wt(this))return;const s=we.getElementFromSelector(this)||this.closest(`.${n}`);t.getOrCreateInstance(s)[e]()}))},Ae=".bs.alert",Te=`close${Ae}`,Ce=`closed${Ae}`;class Oe extends ve{static get NAME(){return"alert"}close(){if(fe.trigger(this._element,Te).defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),fe.trigger(this._element,Ce),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=Oe.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}Ee(Oe,"close"),Qt(Oe);const xe='[data-bs-toggle="button"]';class ke extends ve{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=ke.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}fe.on(document,"click.bs.button.data-api",xe,(t=>{t.preventDefault();const e=t.target.closest(xe);ke.getOrCreateInstance(e).toggle()})),Qt(ke);const Le=".bs.swipe",Se=`touchstart${Le}`,De=`touchmove${Le}`,$e=`touchend${Le}`,Ie=`pointerdown${Le}`,Ne=`pointerup${Le}`,Pe={endCallback:null,leftCallback:null,rightCallback:null},Me={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class je extends be{constructor(t,e){super(),this._element=t,t&&je.isSupported()&&(this._config=this._getConfig(e),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return Pe}static get DefaultType(){return Me}static get NAME(){return"swipe"}dispose(){fe.off(this._element,Le)}_start(t){this._supportPointerEvents?this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX):this._deltaX=t.touches[0].clientX}_end(t){this._eventIsPointerPenTouch(t)&&(this._deltaX=t.clientX-this._deltaX),this._handleSwipe(),Xt(this._config.endCallback)}_move(t){this._deltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this._deltaX}_handleSwipe(){const t=Math.abs(this._deltaX);if(t<=40)return;const e=t/this._deltaX;this._deltaX=0,e&&Xt(e>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(fe.on(this._element,Ie,(t=>this._start(t))),fe.on(this._element,Ne,(t=>this._end(t))),this._element.classList.add("pointer-event")):(fe.on(this._element,Se,(t=>this._start(t))),fe.on(this._element,De,(t=>this._move(t))),fe.on(this._element,$e,(t=>this._end(t))))}_eventIsPointerPenTouch(t){return this._supportPointerEvents&&("pen"===t.pointerType||"touch"===t.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const Fe=".bs.carousel",He=".data-api",Be="ArrowLeft",We="ArrowRight",ze="next",Re="prev",qe="left",Ve="right",Ye=`slide${Fe}`,Ke=`slid${Fe}`,Qe=`keydown${Fe}`,Xe=`mouseenter${Fe}`,Ue=`mouseleave${Fe}`,Ge=`dragstart${Fe}`,Je=`load${Fe}${He}`,Ze=`click${Fe}${He}`,ti="carousel",ei="active",ii=".active",ni=".carousel-item",si=ii+ni,oi={[Be]:Ve,[We]:qe},ri={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},ai={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class li extends ve{constructor(t,e){super(t,e),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=we.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===ti&&this.cycle()}static get Default(){return ri}static get DefaultType(){return ai}static get NAME(){return"carousel"}next(){this._slide(ze)}nextWhenVisible(){!document.hidden&&Bt(this._element)&&this.next()}prev(){this._slide(Re)}pause(){this._isSliding&&jt(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?fe.one(this._element,Ke,(()=>this.cycle())):this.cycle())}to(t){const e=this._getItems();if(t>e.length-1||t<0)return;if(this._isSliding)return void fe.one(this._element,Ke,(()=>this.to(t)));const i=this._getItemIndex(this._getActive());if(i===t)return;const n=t>i?ze:Re;this._slide(n,e[t])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(t){return t.defaultInterval=t.interval,t}_addEventListeners(){this._config.keyboard&&fe.on(this._element,Qe,(t=>this._keydown(t))),"hover"===this._config.pause&&(fe.on(this._element,Xe,(()=>this.pause())),fe.on(this._element,Ue,(()=>this._maybeEnableCycle()))),this._config.touch&&je.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const t of we.find(".carousel-item img",this._element))fe.on(t,Ge,(t=>t.preventDefault()));const t={leftCallback:()=>this._slide(this._directionToOrder(qe)),rightCallback:()=>this._slide(this._directionToOrder(Ve)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new je(this._element,t)}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=oi[t.key];e&&(t.preventDefault(),this._slide(this._directionToOrder(e)))}_getItemIndex(t){return this._getItems().indexOf(t)}_setActiveIndicatorElement(t){if(!this._indicatorsElement)return;const e=we.findOne(ii,this._indicatorsElement);e.classList.remove(ei),e.removeAttribute("aria-current");const i=we.findOne(`[data-bs-slide-to="${t}"]`,this._indicatorsElement);i&&(i.classList.add(ei),i.setAttribute("aria-current","true"))}_updateInterval(){const t=this._activeElement||this._getActive();if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);this._config.interval=e||this._config.defaultInterval}_slide(t,e=null){if(this._isSliding)return;const i=this._getActive(),n=t===ze,s=e||Gt(this._getItems(),i,n,this._config.wrap);if(s===i)return;const o=this._getItemIndex(s),r=e=>fe.trigger(this._element,e,{relatedTarget:s,direction:this._orderToDirection(t),from:this._getItemIndex(i),to:o});if(r(Ye).defaultPrevented)return;if(!i||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=s;const l=n?"carousel-item-start":"carousel-item-end",c=n?"carousel-item-next":"carousel-item-prev";s.classList.add(c),qt(s),i.classList.add(l),s.classList.add(l),this._queueCallback((()=>{s.classList.remove(l,c),s.classList.add(ei),i.classList.remove(ei,c,l),this._isSliding=!1,r(Ke)}),i,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return we.findOne(si,this._element)}_getItems(){return we.find(ni,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(t){return Kt()?t===qe?Re:ze:t===qe?ze:Re}_orderToDirection(t){return Kt()?t===Re?qe:Ve:t===Re?Ve:qe}static jQueryInterface(t){return this.each((function(){const e=li.getOrCreateInstance(this,t);if("number"!=typeof t){if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}else e.to(t)}))}}fe.on(document,Ze,"[data-bs-slide], [data-bs-slide-to]",(function(t){const e=we.getElementFromSelector(this);if(!e||!e.classList.contains(ti))return;t.preventDefault();const i=li.getOrCreateInstance(e),n=this.getAttribute("data-bs-slide-to");return n?(i.to(n),void i._maybeEnableCycle()):"next"===_e.getDataAttribute(this,"slide")?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())})),fe.on(window,Je,(()=>{const t=we.find('[data-bs-ride="carousel"]');for(const e of t)li.getOrCreateInstance(e)})),Qt(li);const ci=".bs.collapse",hi=`show${ci}`,di=`shown${ci}`,ui=`hide${ci}`,fi=`hidden${ci}`,pi=`click${ci}.data-api`,mi="show",gi="collapse",_i="collapsing",bi=`:scope .${gi} .${gi}`,vi='[data-bs-toggle="collapse"]',yi={parent:null,toggle:!0},wi={parent:"(null|element)",toggle:"boolean"};class Ei extends ve{constructor(t,e){super(t,e),this._isTransitioning=!1,this._triggerArray=[];const i=we.find(vi);for(const t of i){const e=we.getSelectorFromElement(t),i=we.find(e).filter((t=>t===this._element));null!==e&&i.length&&this._triggerArray.push(t)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return yi}static get DefaultType(){return wi}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t=[];if(this._config.parent&&(t=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((t=>t!==this._element)).map((t=>Ei.getOrCreateInstance(t,{toggle:!1})))),t.length&&t[0]._isTransitioning)return;if(fe.trigger(this._element,hi).defaultPrevented)return;for(const e of t)e.hide();const e=this._getDimension();this._element.classList.remove(gi),this._element.classList.add(_i),this._element.style[e]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const i=`scroll${e[0].toUpperCase()+e.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(_i),this._element.classList.add(gi,mi),this._element.style[e]="",fe.trigger(this._element,di)}),this._element,!0),this._element.style[e]=`${this._element[i]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(fe.trigger(this._element,ui).defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,qt(this._element),this._element.classList.add(_i),this._element.classList.remove(gi,mi);for(const t of this._triggerArray){const e=we.getElementFromSelector(t);e&&!this._isShown(e)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0,this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(_i),this._element.classList.add(gi),fe.trigger(this._element,fi)}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(mi)}_configAfterMerge(t){return t.toggle=Boolean(t.toggle),t.parent=Ht(t.parent),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=this._getFirstLevelChildren(vi);for(const e of t){const t=we.getElementFromSelector(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}}_getFirstLevelChildren(t){const e=we.find(bi,this._config.parent);return we.find(t,this._config.parent).filter((t=>!e.includes(t)))}_addAriaAndCollapsedClass(t,e){if(t.length)for(const i of t)i.classList.toggle("collapsed",!e),i.setAttribute("aria-expanded",e)}static jQueryInterface(t){const e={};return"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1),this.each((function(){const i=Ei.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t]()}}))}}fe.on(document,pi,vi,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();for(const t of we.getMultipleElementsFromSelector(this))Ei.getOrCreateInstance(t,{toggle:!1}).toggle()})),Qt(Ei);const Ai="dropdown",Ti=".bs.dropdown",Ci=".data-api",Oi="ArrowUp",xi="ArrowDown",ki=`hide${Ti}`,Li=`hidden${Ti}`,Si=`show${Ti}`,Di=`shown${Ti}`,$i=`click${Ti}${Ci}`,Ii=`keydown${Ti}${Ci}`,Ni=`keyup${Ti}${Ci}`,Pi="show",Mi='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',ji=`${Mi}.${Pi}`,Fi=".dropdown-menu",Hi=Kt()?"top-end":"top-start",Bi=Kt()?"top-start":"top-end",Wi=Kt()?"bottom-end":"bottom-start",zi=Kt()?"bottom-start":"bottom-end",Ri=Kt()?"left-start":"right-start",qi=Kt()?"right-start":"left-start",Vi={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},Yi={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class Ki extends ve{constructor(t,e){super(t,e),this._popper=null,this._parent=this._element.parentNode,this._menu=we.next(this._element,Fi)[0]||we.prev(this._element,Fi)[0]||we.findOne(Fi,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return Vi}static get DefaultType(){return Yi}static get NAME(){return Ai}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Wt(this._element)||this._isShown())return;const t={relatedTarget:this._element};if(!fe.trigger(this._element,Si,t).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const t of[].concat(...document.body.children))fe.on(t,"mouseover",Rt);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Pi),this._element.classList.add(Pi),fe.trigger(this._element,Di,t)}}hide(){if(Wt(this._element)||!this._isShown())return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){if(!fe.trigger(this._element,ki,t).defaultPrevented){if("ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))fe.off(t,"mouseover",Rt);this._popper&&this._popper.destroy(),this._menu.classList.remove(Pi),this._element.classList.remove(Pi),this._element.setAttribute("aria-expanded","false"),_e.removeDataAttribute(this._menu,"popper"),fe.trigger(this._element,Li,t)}}_getConfig(t){if("object"==typeof(t=super._getConfig(t)).reference&&!Ft(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${Ai.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(){if(void 0===e)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=this._parent:Ft(this._config.reference)?t=Ht(this._config.reference):"object"==typeof this._config.reference&&(t=this._config.reference);const i=this._getPopperConfig();this._popper=Dt(t,this._menu,i)}_isShown(){return this._menu.classList.contains(Pi)}_getPlacement(){const t=this._parent;if(t.classList.contains("dropend"))return Ri;if(t.classList.contains("dropstart"))return qi;if(t.classList.contains("dropup-center"))return"top";if(t.classList.contains("dropdown-center"))return"bottom";const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?Bi:Hi:e?zi:Wi}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(_e.setDataAttribute(this._menu,"popper","static"),t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,...Xt(this._config.popperConfig,[t])}}_selectMenuItem({key:t,target:e}){const i=we.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((t=>Bt(t)));i.length&≫(i,e,t===xi,!i.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=Ki.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(2===t.button||"keyup"===t.type&&"Tab"!==t.key)return;const e=we.find(ji);for(const i of e){const e=Ki.getInstance(i);if(!e||!1===e._config.autoClose)continue;const n=t.composedPath(),s=n.includes(e._menu);if(n.includes(e._element)||"inside"===e._config.autoClose&&!s||"outside"===e._config.autoClose&&s)continue;if(e._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;const o={relatedTarget:e._element};"click"===t.type&&(o.clickEvent=t),e._completeHide(o)}}static dataApiKeydownHandler(t){const e=/input|textarea/i.test(t.target.tagName),i="Escape"===t.key,n=[Oi,xi].includes(t.key);if(!n&&!i)return;if(e&&!i)return;t.preventDefault();const s=this.matches(Mi)?this:we.prev(this,Mi)[0]||we.next(this,Mi)[0]||we.findOne(Mi,t.delegateTarget.parentNode),o=Ki.getOrCreateInstance(s);if(n)return t.stopPropagation(),o.show(),void o._selectMenuItem(t);o._isShown()&&(t.stopPropagation(),o.hide(),s.focus())}}fe.on(document,Ii,Mi,Ki.dataApiKeydownHandler),fe.on(document,Ii,Fi,Ki.dataApiKeydownHandler),fe.on(document,$i,Ki.clearMenus),fe.on(document,Ni,Ki.clearMenus),fe.on(document,$i,Mi,(function(t){t.preventDefault(),Ki.getOrCreateInstance(this).toggle()})),Qt(Ki);const Qi="backdrop",Xi="show",Ui=`mousedown.bs.${Qi}`,Gi={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Ji={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class Zi extends be{constructor(t){super(),this._config=this._getConfig(t),this._isAppended=!1,this._element=null}static get Default(){return Gi}static get DefaultType(){return Ji}static get NAME(){return Qi}show(t){if(!this._config.isVisible)return void Xt(t);this._append();const e=this._getElement();this._config.isAnimated&&qt(e),e.classList.add(Xi),this._emulateAnimation((()=>{Xt(t)}))}hide(t){this._config.isVisible?(this._getElement().classList.remove(Xi),this._emulateAnimation((()=>{this.dispose(),Xt(t)}))):Xt(t)}dispose(){this._isAppended&&(fe.off(this._element,Ui),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_configAfterMerge(t){return t.rootElement=Ht(t.rootElement),t}_append(){if(this._isAppended)return;const t=this._getElement();this._config.rootElement.append(t),fe.on(t,Ui,(()=>{Xt(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(t){Ut(t,this._getElement(),this._config.isAnimated)}}const tn=".bs.focustrap",en=`focusin${tn}`,nn=`keydown.tab${tn}`,sn="backward",on={autofocus:!0,trapElement:null},rn={autofocus:"boolean",trapElement:"element"};class an extends be{constructor(t){super(),this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return on}static get DefaultType(){return rn}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),fe.off(document,tn),fe.on(document,en,(t=>this._handleFocusin(t))),fe.on(document,nn,(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,fe.off(document,tn))}_handleFocusin(t){const{trapElement:e}=this._config;if(t.target===document||t.target===e||e.contains(t.target))return;const i=we.focusableChildren(e);0===i.length?e.focus():this._lastTabNavDirection===sn?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?sn:"forward")}}const ln=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",cn=".sticky-top",hn="padding-right",dn="margin-right";class un{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,hn,(e=>e+t)),this._setElementAttributes(ln,hn,(e=>e+t)),this._setElementAttributes(cn,dn,(e=>e-t))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,hn),this._resetElementAttributes(ln,hn),this._resetElementAttributes(cn,dn)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,i){const n=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+n)return;this._saveInitialAttribute(t,e);const s=window.getComputedStyle(t).getPropertyValue(e);t.style.setProperty(e,`${i(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(t,e){const i=t.style.getPropertyValue(e);i&&_e.setDataAttribute(t,e,i)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const i=_e.getDataAttribute(t,e);null!==i?(_e.removeDataAttribute(t,e),t.style.setProperty(e,i)):t.style.removeProperty(e)}))}_applyManipulationCallback(t,e){if(Ft(t))e(t);else for(const i of we.find(t,this._element))e(i)}}const fn=".bs.modal",pn=`hide${fn}`,mn=`hidePrevented${fn}`,gn=`hidden${fn}`,_n=`show${fn}`,bn=`shown${fn}`,vn=`resize${fn}`,yn=`click.dismiss${fn}`,wn=`mousedown.dismiss${fn}`,En=`keydown.dismiss${fn}`,An=`click${fn}.data-api`,Tn="modal-open",Cn="show",On="modal-static",xn={backdrop:!0,focus:!0,keyboard:!0},kn={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Ln extends ve{constructor(t,e){super(t,e),this._dialog=we.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new un,this._addEventListeners()}static get Default(){return xn}static get DefaultType(){return kn}static get NAME(){return"modal"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||fe.trigger(this._element,_n,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Tn),this._adjustDialog(),this._backdrop.show((()=>this._showElement(t))))}hide(){this._isShown&&!this._isTransitioning&&(fe.trigger(this._element,pn).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Cn),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){fe.off(window,fn),fe.off(this._dialog,fn),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Zi({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new an({trapElement:this._element})}_showElement(t){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const e=we.findOne(".modal-body",this._dialog);e&&(e.scrollTop=0),qt(this._element),this._element.classList.add(Cn),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,fe.trigger(this._element,bn,{relatedTarget:t})}),this._dialog,this._isAnimated())}_addEventListeners(){fe.on(this._element,En,(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),fe.on(window,vn,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),fe.on(this._element,wn,(t=>{fe.one(this._element,yn,(e=>{this._element===t.target&&this._element===e.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Tn),this._resetAdjustments(),this._scrollBar.reset(),fe.trigger(this._element,gn)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(fe.trigger(this._element,mn).defaultPrevented)return;const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._element.style.overflowY;"hidden"===e||this._element.classList.contains(On)||(t||(this._element.style.overflowY="hidden"),this._element.classList.add(On),this._queueCallback((()=>{this._element.classList.remove(On),this._queueCallback((()=>{this._element.style.overflowY=e}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),i=e>0;if(i&&!t){const t=Kt()?"paddingLeft":"paddingRight";this._element.style[t]=`${e}px`}if(!i&&t){const t=Kt()?"paddingRight":"paddingLeft";this._element.style[t]=`${e}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const i=Ln.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t](e)}}))}}fe.on(document,An,'[data-bs-toggle="modal"]',(function(t){const e=we.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),fe.one(e,_n,(t=>{t.defaultPrevented||fe.one(e,gn,(()=>{Bt(this)&&this.focus()}))}));const i=we.findOne(".modal.show");i&&Ln.getInstance(i).hide(),Ln.getOrCreateInstance(e).toggle(this)})),Ee(Ln),Qt(Ln);const Sn=".bs.offcanvas",Dn=".data-api",$n=`load${Sn}${Dn}`,In="show",Nn="showing",Pn="hiding",Mn=".offcanvas.show",jn=`show${Sn}`,Fn=`shown${Sn}`,Hn=`hide${Sn}`,Bn=`hidePrevented${Sn}`,Wn=`hidden${Sn}`,zn=`resize${Sn}`,Rn=`click${Sn}${Dn}`,qn=`keydown.dismiss${Sn}`,Vn={backdrop:!0,keyboard:!0,scroll:!1},Yn={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class Kn extends ve{constructor(t,e){super(t,e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return Vn}static get DefaultType(){return Yn}static get NAME(){return"offcanvas"}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||fe.trigger(this._element,jn,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new un).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Nn),this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(In),this._element.classList.remove(Nn),fe.trigger(this._element,Fn,{relatedTarget:t})}),this._element,!0))}hide(){this._isShown&&(fe.trigger(this._element,Hn).defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(Pn),this._backdrop.hide(),this._queueCallback((()=>{this._element.classList.remove(In,Pn),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new un).reset(),fe.trigger(this._element,Wn)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const t=Boolean(this._config.backdrop);return new Zi({className:"offcanvas-backdrop",isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?()=>{"static"!==this._config.backdrop?this.hide():fe.trigger(this._element,Bn)}:null})}_initializeFocusTrap(){return new an({trapElement:this._element})}_addEventListeners(){fe.on(this._element,qn,(t=>{"Escape"===t.key&&(this._config.keyboard?this.hide():fe.trigger(this._element,Bn))}))}static jQueryInterface(t){return this.each((function(){const e=Kn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}fe.on(document,Rn,'[data-bs-toggle="offcanvas"]',(function(t){const e=we.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),Wt(this))return;fe.one(e,Wn,(()=>{Bt(this)&&this.focus()}));const i=we.findOne(Mn);i&&i!==e&&Kn.getInstance(i).hide(),Kn.getOrCreateInstance(e).toggle(this)})),fe.on(window,$n,(()=>{for(const t of we.find(Mn))Kn.getOrCreateInstance(t).show()})),fe.on(window,zn,(()=>{for(const t of we.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(t).position&&Kn.getOrCreateInstance(t).hide()})),Ee(Kn),Qt(Kn);const Qn={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],dd:[],div:[],dl:[],dt:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Xn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Un=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,Gn=(t,e)=>{const i=t.nodeName.toLowerCase();return e.includes(i)?!Xn.has(i)||Boolean(Un.test(t.nodeValue)):e.filter((t=>t instanceof RegExp)).some((t=>t.test(i)))},Jn={allowList:Qn,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:""},Zn={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},ts={entry:"(string|element|function|null)",selector:"(string|element)"};class es extends be{constructor(t){super(),this._config=this._getConfig(t)}static get Default(){return Jn}static get DefaultType(){return Zn}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((t=>this._resolvePossibleFunction(t))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(t){return this._checkContent(t),this._config.content={...this._config.content,...t},this}toHtml(){const t=document.createElement("div");t.innerHTML=this._maybeSanitize(this._config.template);for(const[e,i]of Object.entries(this._config.content))this._setContent(t,i,e);const e=t.children[0],i=this._resolvePossibleFunction(this._config.extraClass);return i&&e.classList.add(...i.split(" ")),e}_typeCheckConfig(t){super._typeCheckConfig(t),this._checkContent(t.content)}_checkContent(t){for(const[e,i]of Object.entries(t))super._typeCheckConfig({selector:e,entry:i},ts)}_setContent(t,e,i){const n=we.findOne(i,t);n&&((e=this._resolvePossibleFunction(e))?Ft(e)?this._putElementInTemplate(Ht(e),n):this._config.html?n.innerHTML=this._maybeSanitize(e):n.textContent=e:n.remove())}_maybeSanitize(t){return this._config.sanitize?function(t,e,i){if(!t.length)return t;if(i&&"function"==typeof i)return i(t);const n=(new window.DOMParser).parseFromString(t,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(const t of s){const i=t.nodeName.toLowerCase();if(!Object.keys(e).includes(i)){t.remove();continue}const n=[].concat(...t.attributes),s=[].concat(e["*"]||[],e[i]||[]);for(const e of n)Gn(e,s)||t.removeAttribute(e.nodeName)}return n.body.innerHTML}(t,this._config.allowList,this._config.sanitizeFn):t}_resolvePossibleFunction(t){return Xt(t,[this])}_putElementInTemplate(t,e){if(this._config.html)return e.innerHTML="",void e.append(t);e.textContent=t.textContent}}const is=new Set(["sanitize","allowList","sanitizeFn"]),ns="fade",ss="show",os=".tooltip-inner",rs=".modal",as="hide.bs.modal",ls="hover",cs="focus",hs={AUTO:"auto",TOP:"top",RIGHT:Kt()?"left":"right",BOTTOM:"bottom",LEFT:Kt()?"right":"left"},ds={allowList:Qn,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'',title:"",trigger:"hover focus"},us={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class fs extends ve{constructor(t,i){if(void 0===e)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t,i),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return ds}static get DefaultType(){return us}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),fe.off(this._element.closest(rs),as,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const t=fe.trigger(this._element,this.constructor.eventName("show")),e=(zt(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(t.defaultPrevented||!e)return;this._disposePopper();const i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));const{container:n}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(n.append(i),fe.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(i),i.classList.add(ss),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))fe.on(t,"mouseover",Rt);this._queueCallback((()=>{fe.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(this._isShown()&&!fe.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented){if(this._getTipElement().classList.remove(ss),"ontouchstart"in document.documentElement)for(const t of[].concat(...document.body.children))fe.off(t,"mouseover",Rt);this._activeTrigger.click=!1,this._activeTrigger[cs]=!1,this._activeTrigger[ls]=!1,this._isHovered=null,this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),fe.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(t){const e=this._getTemplateFactory(t).toHtml();if(!e)return null;e.classList.remove(ns,ss),e.classList.add(`bs-${this.constructor.NAME}-auto`);const i=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME).toString();return e.setAttribute("id",i),this._isAnimated()&&e.classList.add(ns),e}setContent(t){this._newContent=t,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(t){return this._templateFactory?this._templateFactory.changeContent(t):this._templateFactory=new es({...this._config,content:t,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{[os]:this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(t){return this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(ns)}_isShown(){return this.tip&&this.tip.classList.contains(ss)}_createPopper(t){const e=Xt(this._config.placement,[this,t,this._element]),i=hs[e.toUpperCase()];return Dt(this._element,t,this._getPopperConfig(i))}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return Xt(t,[this._element])}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:t=>{this._getTipElement().setAttribute("data-popper-placement",t.state.placement)}}]};return{...e,...Xt(this._config.popperConfig,[e])}}_setListeners(){const t=this._config.trigger.split(" ");for(const e of t)if("click"===e)fe.on(this._element,this.constructor.eventName("click"),this._config.selector,(t=>{this._initializeOnDelegatedTarget(t).toggle()}));else if("manual"!==e){const t=e===ls?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),i=e===ls?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");fe.on(this._element,t,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusin"===t.type?cs:ls]=!0,e._enter()})),fe.on(this._element,i,this._config.selector,(t=>{const e=this._initializeOnDelegatedTarget(t);e._activeTrigger["focusout"===t.type?cs:ls]=e._element.contains(t.relatedTarget),e._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},fe.on(this._element.closest(rs),as,this._hideModalHandler)}_fixTitle(){const t=this._element.getAttribute("title");t&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",t),this._element.setAttribute("data-bs-original-title",t),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(t,e){clearTimeout(this._timeout),this._timeout=setTimeout(t,e)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(t){const e=_e.getDataAttributes(this._element);for(const t of Object.keys(e))is.has(t)&&delete e[t];return t={...e,..."object"==typeof t&&t?t:{}},t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t.container=!1===t.container?document.body:Ht(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),t}_getDelegateConfig(){const t={};for(const[e,i]of Object.entries(this._config))this.constructor.Default[e]!==i&&(t[e]=i);return t.selector=!1,t.trigger="manual",t}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(t){return this.each((function(){const e=fs.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Qt(fs);const ps=".popover-header",ms=".popover-body",gs={...fs.Default,content:"",offset:[0,8],placement:"right",template:'',trigger:"click"},_s={...fs.DefaultType,content:"(null|string|element|function)"};class bs extends fs{static get Default(){return gs}static get DefaultType(){return _s}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{[ps]:this._getTitle(),[ms]:this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(t){return this.each((function(){const e=bs.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Qt(bs);const vs=".bs.scrollspy",ys=`activate${vs}`,ws=`click${vs}`,Es=`load${vs}.data-api`,As="active",Ts="[href]",Cs=".nav-link",Os=`${Cs}, .nav-item > ${Cs}, .list-group-item`,xs={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},ks={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Ls extends ve{constructor(t,e){super(t,e),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return xs}static get DefaultType(){return ks}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const t of this._observableSections.values())this._observer.observe(t)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(t){return t.target=Ht(t.target)||document.body,t.rootMargin=t.offset?`${t.offset}px 0px -30%`:t.rootMargin,"string"==typeof t.threshold&&(t.threshold=t.threshold.split(",").map((t=>Number.parseFloat(t)))),t}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(fe.off(this._config.target,ws),fe.on(this._config.target,ws,Ts,(t=>{const e=this._observableSections.get(t.target.hash);if(e){t.preventDefault();const i=this._rootElement||window,n=e.offsetTop-this._element.offsetTop;if(i.scrollTo)return void i.scrollTo({top:n,behavior:"smooth"});i.scrollTop=n}})))}_getNewObserver(){const t={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((t=>this._observerCallback(t)),t)}_observerCallback(t){const e=t=>this._targetLinks.get(`#${t.target.id}`),i=t=>{this._previousScrollData.visibleEntryTop=t.target.offsetTop,this._process(e(t))},n=(this._rootElement||document.documentElement).scrollTop,s=n>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=n;for(const o of t){if(!o.isIntersecting){this._activeTarget=null,this._clearActiveClass(e(o));continue}const t=o.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&t){if(i(o),!n)return}else s||t||i(o)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const t=we.find(Ts,this._config.target);for(const e of t){if(!e.hash||Wt(e))continue;const t=we.findOne(decodeURI(e.hash),this._element);Bt(t)&&(this._targetLinks.set(decodeURI(e.hash),e),this._observableSections.set(e.hash,t))}}_process(t){this._activeTarget!==t&&(this._clearActiveClass(this._config.target),this._activeTarget=t,t.classList.add(As),this._activateParents(t),fe.trigger(this._element,ys,{relatedTarget:t}))}_activateParents(t){if(t.classList.contains("dropdown-item"))we.findOne(".dropdown-toggle",t.closest(".dropdown")).classList.add(As);else for(const e of we.parents(t,".nav, .list-group"))for(const t of we.prev(e,Os))t.classList.add(As)}_clearActiveClass(t){t.classList.remove(As);const e=we.find(`${Ts}.${As}`,t);for(const t of e)t.classList.remove(As)}static jQueryInterface(t){return this.each((function(){const e=Ls.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}fe.on(window,Es,(()=>{for(const t of we.find('[data-bs-spy="scroll"]'))Ls.getOrCreateInstance(t)})),Qt(Ls);const Ss=".bs.tab",Ds=`hide${Ss}`,$s=`hidden${Ss}`,Is=`show${Ss}`,Ns=`shown${Ss}`,Ps=`click${Ss}`,Ms=`keydown${Ss}`,js=`load${Ss}`,Fs="ArrowLeft",Hs="ArrowRight",Bs="ArrowUp",Ws="ArrowDown",zs="Home",Rs="End",qs="active",Vs="fade",Ys="show",Ks=".dropdown-toggle",Qs=`:not(${Ks})`,Xs='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Us=`.nav-link${Qs}, .list-group-item${Qs}, [role="tab"]${Qs}, ${Xs}`,Gs=`.${qs}[data-bs-toggle="tab"], .${qs}[data-bs-toggle="pill"], .${qs}[data-bs-toggle="list"]`;class Js extends ve{constructor(t){super(t),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),fe.on(this._element,Ms,(t=>this._keydown(t))))}static get NAME(){return"tab"}show(){const t=this._element;if(this._elemIsActive(t))return;const e=this._getActiveElem(),i=e?fe.trigger(e,Ds,{relatedTarget:t}):null;fe.trigger(t,Is,{relatedTarget:e}).defaultPrevented||i&&i.defaultPrevented||(this._deactivate(e,t),this._activate(t,e))}_activate(t,e){t&&(t.classList.add(qs),this._activate(we.getElementFromSelector(t)),this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.removeAttribute("tabindex"),t.setAttribute("aria-selected",!0),this._toggleDropDown(t,!0),fe.trigger(t,Ns,{relatedTarget:e})):t.classList.add(Ys)}),t,t.classList.contains(Vs)))}_deactivate(t,e){t&&(t.classList.remove(qs),t.blur(),this._deactivate(we.getElementFromSelector(t)),this._queueCallback((()=>{"tab"===t.getAttribute("role")?(t.setAttribute("aria-selected",!1),t.setAttribute("tabindex","-1"),this._toggleDropDown(t,!1),fe.trigger(t,$s,{relatedTarget:e})):t.classList.remove(Ys)}),t,t.classList.contains(Vs)))}_keydown(t){if(![Fs,Hs,Bs,Ws,zs,Rs].includes(t.key))return;t.stopPropagation(),t.preventDefault();const e=this._getChildren().filter((t=>!Wt(t)));let i;if([zs,Rs].includes(t.key))i=e[t.key===zs?0:e.length-1];else{const n=[Hs,Ws].includes(t.key);i=Gt(e,t.target,n,!0)}i&&(i.focus({preventScroll:!0}),Js.getOrCreateInstance(i).show())}_getChildren(){return we.find(Us,this._parent)}_getActiveElem(){return this._getChildren().find((t=>this._elemIsActive(t)))||null}_setInitialAttributes(t,e){this._setAttributeIfNotExists(t,"role","tablist");for(const t of e)this._setInitialAttributesOnChild(t)}_setInitialAttributesOnChild(t){t=this._getInnerElement(t);const e=this._elemIsActive(t),i=this._getOuterElement(t);t.setAttribute("aria-selected",e),i!==t&&this._setAttributeIfNotExists(i,"role","presentation"),e||t.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(t,"role","tab"),this._setInitialAttributesOnTargetPanel(t)}_setInitialAttributesOnTargetPanel(t){const e=we.getElementFromSelector(t);e&&(this._setAttributeIfNotExists(e,"role","tabpanel"),t.id&&this._setAttributeIfNotExists(e,"aria-labelledby",`${t.id}`))}_toggleDropDown(t,e){const i=this._getOuterElement(t);if(!i.classList.contains("dropdown"))return;const n=(t,n)=>{const s=we.findOne(t,i);s&&s.classList.toggle(n,e)};n(Ks,qs),n(".dropdown-menu",Ys),i.setAttribute("aria-expanded",e)}_setAttributeIfNotExists(t,e,i){t.hasAttribute(e)||t.setAttribute(e,i)}_elemIsActive(t){return t.classList.contains(qs)}_getInnerElement(t){return t.matches(Us)?t:we.findOne(Us,t)}_getOuterElement(t){return t.closest(".nav-item, .list-group-item")||t}static jQueryInterface(t){return this.each((function(){const e=Js.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t]()}}))}}fe.on(document,Ps,Xs,(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),Wt(this)||Js.getOrCreateInstance(this).show()})),fe.on(window,js,(()=>{for(const t of we.find(Gs))Js.getOrCreateInstance(t)})),Qt(Js);const Zs=".bs.toast",to=`mouseover${Zs}`,eo=`mouseout${Zs}`,io=`focusin${Zs}`,no=`focusout${Zs}`,so=`hide${Zs}`,oo=`hidden${Zs}`,ro=`show${Zs}`,ao=`shown${Zs}`,lo="hide",co="show",ho="showing",uo={animation:"boolean",autohide:"boolean",delay:"number"},fo={animation:!0,autohide:!0,delay:5e3};class po extends ve{constructor(t,e){super(t,e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return fo}static get DefaultType(){return uo}static get NAME(){return"toast"}show(){fe.trigger(this._element,ro).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(lo),qt(this._element),this._element.classList.add(co,ho),this._queueCallback((()=>{this._element.classList.remove(ho),fe.trigger(this._element,ao),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this.isShown()&&(fe.trigger(this._element,so).defaultPrevented||(this._element.classList.add(ho),this._queueCallback((()=>{this._element.classList.add(lo),this._element.classList.remove(ho,co),fe.trigger(this._element,oo)}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(co),super.dispose()}isShown(){return this._element.classList.contains(co)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const i=t.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){fe.on(this._element,to,(t=>this._onInteraction(t,!0))),fe.on(this._element,eo,(t=>this._onInteraction(t,!1))),fe.on(this._element,io,(t=>this._onInteraction(t,!0))),fe.on(this._element,no,(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=po.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}function mo(t){"loading"!=document.readyState?t():document.addEventListener("DOMContentLoaded",t)}Ee(po),Qt(po),mo((function(){[].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map((function(t){return new fs(t,{delay:{show:500,hide:100}})}))})),mo((function(){document.getElementById("pst-back-to-top").addEventListener("click",(function(){document.body.scrollTop=0,document.documentElement.scrollTop=0}))})),mo((function(){var t=document.getElementById("pst-back-to-top"),e=document.getElementsByClassName("bd-header")[0].getBoundingClientRect();window.addEventListener("scroll",(function(){this.oldScroll>this.scrollY&&this.scrollY>e.bottom?t.style.display="block":t.style.display="none",this.oldScroll=this.scrollY}))})),window.bootstrap=i})();
//# sourceMappingURL=bootstrap.js.map

html[data-theme="light"] .highlight pre { line-height: 125%; }
html[data-theme="light"] .highlight td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
html[data-theme="light"] .highlight span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
html[data-theme="light"] .highlight td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
html[data-theme="light"] .highlight span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
html[data-theme="light"] .highlight .hll { background-color: #fae4c2 }
html[data-theme="light"] .highlight { background: #fefefe; color: #080808 }
html[data-theme="light"] .highlight .c { color: #515151 } /* Comment */
html[data-theme="light"] .highlight .err { color: #a12236 } /* Error */
html[data-theme="light"] .highlight .k { color: #6730c5 } /* Keyword */
html[data-theme="light"] .highlight .l { color: #7f4707 } /* Literal */
html[data-theme="light"] .highlight .n { color: #080808 } /* Name */
html[data-theme="light"] .highlight .o { color: #00622f } /* Operator */
html[data-theme="light"] .highlight .p { color: #080808 } /* Punctuation */
html[data-theme="light"] .highlight .ch { color: #515151 } /* Comment.Hashbang */
html[data-theme="light"] .highlight .cm { color: #515151 } /* Comment.Multiline */
html[data-theme="light"] .highlight .cp { color: #515151 } /* Comment.Preproc */
html[data-theme="light"] .highlight .cpf { color: #515151 } /* Comment.PreprocFile */
html[data-theme="light"] .highlight .c1 { color: #515151 } /* Comment.Single */
html[data-theme="light"] .highlight .cs { color: #515151 } /* Comment.Special */
html[data-theme="light"] .highlight .gd { color: #005b82 } /* Generic.Deleted */
html[data-theme="light"] .highlight .ge { font-style: italic } /* Generic.Emph */
html[data-theme="light"] .highlight .gh { color: #005b82 } /* Generic.Heading */
html[data-theme="light"] .highlight .gs { font-weight: bold } /* Generic.Strong */
html[data-theme="light"] .highlight .gu { color: #005b82 } /* Generic.Subheading */
html[data-theme="light"] .highlight .kc { color: #6730c5 } /* Keyword.Constant */
html[data-theme="light"] .highlight .kd { color: #6730c5 } /* Keyword.Declaration */
html[data-theme="light"] .highlight .kn { color: #6730c5 } /* Keyword.Namespace */
html[data-theme="light"] .highlight .kp { color: #6730c5 } /* Keyword.Pseudo */
html[data-theme="light"] .highlight .kr { color: #6730c5 } /* Keyword.Reserved */
html[data-theme="light"] .highlight .kt { color: #7f4707 } /* Keyword.Type */
html[data-theme="light"] .highlight .ld { color: #7f4707 } /* Literal.Date */
html[data-theme="light"] .highlight .m { color: #7f4707 } /* Literal.Number */
html[data-theme="light"] .highlight .s { color: #00622f } /* Literal.String */
html[data-theme="light"] .highlight .na { color: #912583 } /* Name.Attribute */
html[data-theme="light"] .highlight .nb { color: #7f4707 } /* Name.Builtin */
html[data-theme="light"] .highlight .nc { color: #005b82 } /* Name.Class */
html[data-theme="light"] .highlight .no { color: #005b82 } /* Name.Constant */
html[data-theme="light"] .highlight .nd { color: #7f4707 } /* Name.Decorator */
html[data-theme="light"] .highlight .ni { color: #00622f } /* Name.Entity */
html[data-theme="light"] .highlight .ne { color: #6730c5 } /* Name.Exception */
html[data-theme="light"] .highlight .nf { color: #005b82 } /* Name.Function */
html[data-theme="light"] .highlight .nl { color: #7f4707 } /* Name.Label */
html[data-theme="light"] .highlight .nn { color: #080808 } /* Name.Namespace */
html[data-theme="light"] .highlight .nx { color: #080808 } /* Name.Other */
html[data-theme="light"] .highlight .py { color: #005b82 } /* Name.Property */
html[data-theme="light"] .highlight .nt { color: #005b82 } /* Name.Tag */
html[data-theme="light"] .highlight .nv { color: #a12236 } /* Name.Variable */
html[data-theme="light"] .highlight .ow { color: #6730c5 } /* Operator.Word */
html[data-theme="light"] .highlight .pm { color: #080808 } /* Punctuation.Marker */
html[data-theme="light"] .highlight .w { color: #080808 } /* Text.Whitespace */
html[data-theme="light"] .highlight .mb { color: #7f4707 } /* Literal.Number.Bin */
html[data-theme="light"] .highlight .mf { color: #7f4707 } /* Literal.Number.Float */
html[data-theme="light"] .highlight .mh { color: #7f4707 } /* Literal.Number.Hex */
html[data-theme="light"] .highlight .mi { color: #7f4707 } /* Literal.Number.Integer */
html[data-theme="light"] .highlight .mo { color: #7f4707 } /* Literal.Number.Oct */
html[data-theme="light"] .highlight .sa { color: #00622f } /* Literal.String.Affix */
html[data-theme="light"] .highlight .sb { color: #00622f } /* Literal.String.Backtick */
html[data-theme="light"] .highlight .sc { color: #00622f } /* Literal.String.Char */
html[data-theme="light"] .highlight .dl { color: #00622f } /* Literal.String.Delimiter */
html[data-theme="light"] .highlight .sd { color: #00622f } /* Literal.String.Doc */
html[data-theme="light"] .highlight .s2 { color: #00622f } /* Literal.String.Double */
html[data-theme="light"] .highlight .se { color: #00622f } /* Literal.String.Escape */
html[data-theme="light"] .highlight .sh { color: #00622f } /* Literal.String.Heredoc */
html[data-theme="light"] .highlight .si { color: #00622f } /* Literal.String.Interpol */
html[data-theme="light"] .highlight .sx { color: #00622f } /* Literal.String.Other */
html[data-theme="light"] .highlight .sr { color: #a12236 } /* Literal.String.Regex */
html[data-theme="light"] .highlight .s1 { color: #00622f } /* Literal.String.Single */
html[data-theme="light"] .highlight .ss { color: #005b82 } /* Literal.String.Symbol */
html[data-theme="light"] .highlight .bp { color: #7f4707 } /* Name.Builtin.Pseudo */
html[data-theme="light"] .highlight .fm { color: #005b82 } /* Name.Function.Magic */
html[data-theme="light"] .highlight .vc { color: #a12236 } /* Name.Variable.Class */
html[data-theme="light"] .highlight .vg { color: #a12236 } /* Name.Variable.Global */
html[data-theme="light"] .highlight .vi { color: #a12236 } /* Name.Variable.Instance */
html[data-theme="light"] .highlight .vm { color: #7f4707 } /* Name.Variable.Magic */
html[data-theme="light"] .highlight .il { color: #7f4707 } /* Literal.Number.Integer.Long */
html[data-theme="dark"] .highlight pre { line-height: 125%; }
html[data-theme="dark"] .highlight td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
html[data-theme="dark"] .highlight span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
html[data-theme="dark"] .highlight td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
html[data-theme="dark"] .highlight span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
html[data-theme="dark"] .highlight .hll { background-color: #ffd9002e }
html[data-theme="dark"] .highlight { background: #2b2b2b; color: #f8f8f2 }
html[data-theme="dark"] .highlight .c { color: #ffd900 } /* Comment */
html[data-theme="dark"] .highlight .err { color: #ffa07a } /* Error */
html[data-theme="dark"] .highlight .k { color: #dcc6e0 } /* Keyword */
html[data-theme="dark"] .highlight .l { color: #ffd900 } /* Literal */
html[data-theme="dark"] .highlight .n { color: #f8f8f2 } /* Name */
html[data-theme="dark"] .highlight .o { color: #abe338 } /* Operator */
html[data-theme="dark"] .highlight .p { color: #f8f8f2 } /* Punctuation */
html[data-theme="dark"] .highlight .ch { color: #ffd900 } /* Comment.Hashbang */
html[data-theme="dark"] .highlight .cm { color: #ffd900 } /* Comment.Multiline */
html[data-theme="dark"] .highlight .cp { color: #ffd900 } /* Comment.Preproc */
html[data-theme="dark"] .highlight .cpf { color: #ffd900 } /* Comment.PreprocFile */
html[data-theme="dark"] .highlight .c1 { color: #ffd900 } /* Comment.Single */
html[data-theme="dark"] .highlight .cs { color: #ffd900 } /* Comment.Special */
html[data-theme="dark"] .highlight .gd { color: #00e0e0 } /* Generic.Deleted */
html[data-theme="dark"] .highlight .ge { font-style: italic } /* Generic.Emph */
html[data-theme="dark"] .highlight .gh { color: #00e0e0 } /* Generic.Heading */
html[data-theme="dark"] .highlight .gs { font-weight: bold } /* Generic.Strong */
html[data-theme="dark"] .highlight .gu { color: #00e0e0 } /* Generic.Subheading */
html[data-theme="dark"] .highlight .kc { color: #dcc6e0 } /* Keyword.Constant */
html[data-theme="dark"] .highlight .kd { color: #dcc6e0 } /* Keyword.Declaration */
html[data-theme="dark"] .highlight .kn { color: #dcc6e0 } /* Keyword.Namespace */
html[data-theme="dark"] .highlight .kp { color: #dcc6e0 } /* Keyword.Pseudo */
html[data-theme="dark"] .highlight .kr { color: #dcc6e0 } /* Keyword.Reserved */
html[data-theme="dark"] .highlight .kt { color: #ffd900 } /* Keyword.Type */
html[data-theme="dark"] .highlight .ld { color: #ffd900 } /* Literal.Date */
html[data-theme="dark"] .highlight .m { color: #ffd900 } /* Literal.Number */
html[data-theme="dark"] .highlight .s { color: #abe338 } /* Literal.String */
html[data-theme="dark"] .highlight .na { color: #ffd900 } /* Name.Attribute */
html[data-theme="dark"] .highlight .nb { color: #ffd900 } /* Name.Builtin */
html[data-theme="dark"] .highlight .nc { color: #00e0e0 } /* Name.Class */
html[data-theme="dark"] .highlight .no { color: #00e0e0 } /* Name.Constant */
html[data-theme="dark"] .highlight .nd { color: #ffd900 } /* Name.Decorator */
html[data-theme="dark"] .highlight .ni { color: #abe338 } /* Name.Entity */
html[data-theme="dark"] .highlight .ne { color: #dcc6e0 } /* Name.Exception */
html[data-theme="dark"] .highlight .nf { color: #00e0e0 } /* Name.Function */
html[data-theme="dark"] .highlight .nl { color: #ffd900 } /* Name.Label */
html[data-theme="dark"] .highlight .nn { color: #f8f8f2 } /* Name.Namespace */
html[data-theme="dark"] .highlight .nx { color: #f8f8f2 } /* Name.Other */
html[data-theme="dark"] .highlight .py { color: #00e0e0 } /* Name.Property */
html[data-theme="dark"] .highlight .nt { color: #00e0e0 } /* Name.Tag */
html[data-theme="dark"] .highlight .nv { color: #ffa07a } /* Name.Variable */
html[data-theme="dark"] .highlight .ow { color: #dcc6e0 } /* Operator.Word */
html[data-theme="dark"] .highlight .pm { color: #f8f8f2 } /* Punctuation.Marker */
html[data-theme="dark"] .highlight .w { color: #f8f8f2 } /* Text.Whitespace */
html[data-theme="dark"] .highlight .mb { color: #ffd900 } /* Literal.Number.Bin */
html[data-theme="dark"] .highlight .mf { color: #ffd900 } /* Literal.Number.Float */
html[data-theme="dark"] .highlight .mh { color: #ffd900 } /* Literal.Number.Hex */
html[data-theme="dark"] .highlight .mi { color: #ffd900 } /* Literal.Number.Integer */
html[data-theme="dark"] .highlight .mo { color: #ffd900 } /* Literal.Number.Oct */
html[data-theme="dark"] .highlight .sa { color: #abe338 } /* Literal.String.Affix */
html[data-theme="dark"] .highlight .sb { color: #abe338 } /* Literal.String.Backtick */
html[data-theme="dark"] .highlight .sc { color: #abe338 } /* Literal.String.Char */
html[data-theme="dark"] .highlight .dl { color: #abe338 } /* Literal.String.Delimiter */
html[data-theme="dark"] .highlight .sd { color: #abe338 } /* Literal.String.Doc */
html[data-theme="dark"] .highlight .s2 { color: #abe338 } /* Literal.String.Double */
html[data-theme="dark"] .highlight .se { color: #abe338 } /* Literal.String.Escape */
html[data-theme="dark"] .highlight .sh { color: #abe338 } /* Literal.String.Heredoc */
html[data-theme="dark"] .highlight .si { color: #abe338 } /* Literal.String.Interpol */
html[data-theme="dark"] .highlight .sx { color: #abe338 } /* Literal.String.Other */
html[data-theme="dark"] .highlight .sr { color: #ffa07a } /* Literal.String.Regex */
html[data-theme="dark"] .highlight .s1 { color: #abe338 } /* Literal.String.Single */
html[data-theme="dark"] .highlight .ss { color: #00e0e0 } /* Literal.String.Symbol */
html[data-theme="dark"] .highlight .bp { color: #ffd900 } /* Name.Builtin.Pseudo */
html[data-theme="dark"] .highlight .fm { color: #00e0e0 } /* Name.Function.Magic */
html[data-theme="dark"] .highlight .vc { color: #ffa07a } /* Name.Variable.Class */
html[data-theme="dark"] .highlight .vg { color: #ffa07a } /* Name.Variable.Global */
html[data-theme="dark"] .highlight .vi { color: #ffa07a } /* Name.Variable.Instance */
html[data-theme="dark"] .highlight .vm { color: #ffd900 } /* Name.Variable.Magic */
html[data-theme="dark"] .highlight .il { color: #ffd900 } /* Literal.Number.Integer.Long */

/*
 * graphviz.css
 * ~~~~~~~~~~~~
 *
 * Sphinx stylesheet -- graphviz extension.
 *
 * :copyright: Copyright 2007-2024 by the Sphinx team, see AUTHORS.
 * :license: BSD, see LICENSE for details.
 *
 */

img.graphviz {
    border: 0;
    max-width: 100%;
}

object.graphviz {
    max-width: 100%;
}


/* Copy buttons */
button.copybtn {
    position: absolute;
    display: flex;
    top: .3em;
    right: .3em;
    width: 1.7em;
    height: 1.7em;
	opacity: 0;
    transition: opacity 0.3s, border .3s, background-color .3s;
    user-select: none;
    padding: 0;
    border: none;
    outline: none;
    border-radius: 0.4em;
    /* The colors that GitHub uses */
    border: #1b1f2426 1px solid;
    background-color: #f6f8fa;
    color: #57606a;
}

button.copybtn.success {
    border-color: #22863a;
    color: #22863a;
}

button.copybtn svg {
    stroke: currentColor;
    width: 1.5em;
    height: 1.5em;
    padding: 0.1em;
}

div.highlight  {
    position: relative;
}

/* Show the copybutton */
.highlight:hover button.copybtn, button.copybtn.success {
	opacity: 1;
}

.highlight button.copybtn:hover {
    background-color: rgb(235, 235, 235);
}

.highlight button.copybtn:active {
    background-color: rgb(187, 187, 187);
}

/**
 * A minimal CSS-only tooltip copied from:
 *   https://codepen.io/mildrenben/pen/rVBrpK
 *
 * To use, write HTML like the following:
 *
 * Short
 */
 .o-tooltip--left {
  position: relative;
 }

 .o-tooltip--left:after {
    opacity: 0;
    visibility: hidden;
    position: absolute;
    content: attr(data-tooltip);
    padding: .2em;
    font-size: .8em;
    left: -.2em;
    background: grey;
    color: white;
    white-space: nowrap;
    z-index: 2;
    border-radius: 2px;
    transform: translateX(-102%) translateY(0);
    transition: opacity 0.2s cubic-bezier(0.64, 0.09, 0.08, 1), transform 0.2s cubic-bezier(0.64, 0.09, 0.08, 1);
}

.o-tooltip--left:hover:after {
    display: block;
    opacity: 1;
    visibility: visible;
    transform: translateX(-100%) translateY(0);
    transition: opacity 0.2s cubic-bezier(0.64, 0.09, 0.08, 1), transform 0.2s cubic-bezier(0.64, 0.09, 0.08, 1);
    transition-delay: .5s;
}

/* By default the copy button shouldn't show up when printing a page */
@media print {
    button.copybtn {
        display: none;
    }
}


---
jupyter:
  jupytext:
    text_representation:
      extension: .md
      format_name: markdown
      format_version: '1.3'
      jupytext_version: 1.16.3
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
---

# Robot Description

(robot_description_header)=
The robot description contains semantic information about the robot which can not be extracted from the URDF in a
general way. This inludes kinematic chains, end-effectors, cameras and their parameter, etc.

In genral a Robot Description consists a number of different descriptions, these are:

* RobotDescription
* KinematicChainDescription
* EndEffectorDescription
* CameraDescription

In this example we will create a robot description step-by-step and describe the different components on the way. The
robot we will use as an example will be the PR2, the complete PR2 description can also be seen in
{meth}`pycram.robot_descriptions.pr2_description`.

## Robot Description Class

We start by creating an instance of the {class}`~pycram.robot_description.RobotDescription` class, this will serve as a
the main component to which all other descriptions will be added.

To initialize a {class}`~pycram.robot_description.RobotDescription` we need a few parameter which are:

* Name
* base_link
* torso_link
* torso_joint
* Path to a URDF file

```python
from pycram.robot_description import RobotDescription
import rospkg

rospack = rospkg.RosPack()
filename = rospack.get_path('pycram') + '/resources/robots/' + "pr2" + '.urdf'

pr2_description = RobotDescription("pr2", "base_link", "torso_lift_link", "torso_lift_joint", filename)
```

## Kinematic Chain Description

The kinematic chain description describes a chain of links and joints of the robot which might be interesting when
working with the robot. An example of such a chain would be the arm of the robot, when programming for the robot it is
important to know which links and joints exactly make up the arm, however, these can not be extracted from the URDF
automatically.

The kinematic chain is based upon the URDF, meaning when initializing the description one only needs to specify the
first and last link of the chain.

We will now create the kinematic chain description for the right arm of the PR2. For initializing
the {class}`~pycram.robot_description.KinematicChainDescription` the following parameter are needed:

* Name
* first link
* last link
* URDF object
* Arm type

The arm type specifies which arm this kinematic chain describes, this is needed when one wants to access only the arms
of the robot.

```python
from pycram.robot_description import KinematicChainDescription
from pycram.datastructures.enums import Arms

right_arm = KinematicChainDescription("right", "torso_lift_link", "r_wrist_roll_link",
                                      pr2_description.urdf_object, arm_type=Arms.RIGHT)
```

The created {class}`~pycram.robot_description.KinematicChainDescription` can now be added to the robot description.

```python
pr2_description.add_kinematic_chain_description(right_arm)
```

## End Effector Description

Since kinematic chains only describe a moveable chain of links and joints like arms these do not represent end-effectors
which can be used to do manipulation tasks.

To represent end-effectors we will create an {class}`~pycram.robot_description.EndEffectorDescription` which contains the information of the respective
end-effector. When creating an {class}`~pycram.robot_description.EndEffectorDescription` we need the following parameter:

* Name
* first link
* tool_frame
* URDF object

You might have noticed that the end-efftor only has a first link but no last link, this is the case since end-effectors
are at the end of the arms. Therefore, all links and joints below a certain link can be seen as part of the
end-effector.

```python
from pycram.robot_description import EndEffectorDescription

right_gripper = EndEffectorDescription("right_gripper", "r_gripper_palm_link", "r_gripper_tool_frame",
                                       pr2_description.urdf_object)
```

The gripper can no be added to the previously created {class}`~pycram.robot_description.KinematicChainDescription`.

```python
right_arm.end_effector = right_gripper
```

## Camera Description

The camera description contains all parameters of a camera, which is mounted on the robot. The parameter for
the {class}`~pycram.robot_description.CameraDescription` are:

* Name
* Link name
* minimal height
* maximal height
* horizontal angle
* vertical angle

```python
from pycram.robot_description import CameraDescription
from pycram.datastructures.enums import Grasp

camera = CameraDescription("kinect_camera", "wide_stereo_optical_frame", 1.27,
                           1.60, 0.99483, 0.75049)
```

The finished camera description can now be added to the robot description.

```python
pr2_description.add_camera_description(camera)
```

## Grasps

Grasps define how a robot interacts with objects. The grasps defined in the robot description define for each grasp (
right, left, top, front) the orientation of the end-effector, relative to the base_frame of the robot, to achieve the
respective grasp.

```python
pr2_description.add_grasp_orientations({Grasp.FRONT: [0, 0, 0, 1],
                                        Grasp.LEFT: [0, 0, -1, 1],
                                        Grasp.RIGHT: [0, 0, 1, 1],
                                        Grasp.TOP: [0, 1, 0, 1]})
```

## Register Robot Description

Lastly, you need to register the robot description to the {class}`~pycram.robot_description.RobotDescriptionManager`. As you can see the code to
register the robot description has to be executed at the start of PyCRAM, if you put your file with the robot
description in the {class}`pycram.robot_descriptions` directory it will be executed upon the start of PyCRAM.

```python
from pycram.robot_description import RobotDescriptionManager

rdm = RobotDescriptionManager()
rdm.register_description(pr2_description)
```


---
jupyter:
  jupytext:
    text_representation:
      extension: .md
      format_name: markdown
      format_version: '1.3'
      jupytext_version: 1.16.3
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
---

# ORM querying examples

In this tutorial, we will get to see more examples of ORM querying. 


First, we will gather a lot of data. In order to achieve that we will write a randomized experiment for grasping a couple of objects.
In the experiment the robot will try to grasp a randomized object using random poses and torso heights.


```python
from tf import transformations
import itertools
import time
from typing import Optional, List, Tuple

import numpy as np

import sqlalchemy.orm
import tf
import tqdm

import pycram.orm.base
from pycram.worlds.bullet_world import BulletWorld
from pycram.world_concepts.world_object import Object as BulletWorldObject
from pycram.designators.action_designator import MoveTorsoAction, PickUpAction, NavigateAction, ParkArmsAction, ParkArmsActionPerformable, MoveTorsoActionPerformable
from pycram.designators.object_designator import ObjectDesignatorDescription
from pycram.plan_failures import PlanFailure
from pycram.process_module import ProcessModule
from pycram.datastructures.enums import Arms, ObjectType, Grasp

from pycram.process_module import simulated_robot
import sqlalchemy.orm
import pycram.orm
from pycram.orm.base import Position, RobotState
from pycram.orm.tasktree import TaskTreeNode
from pycram.orm.action_designator import PickUpAction as ORMPickUpAction
from pycram.orm.object_designator import Object
import sqlalchemy.sql
import pandas as pd

from pycram.datastructures.pose import Pose

np.random.seed(420)

ProcessModule.execution_delay = False
pycram.orm.base.ProcessMetaData().description = "Tutorial for learning from experience in a Grasping action."


class GraspingExplorer:
    """Class to try randomized grasping plans."""

    world: Optional[BulletWorld]

    def __init__(self, robots: Optional[List[Tuple[str, str]]] = None, objects: Optional[List[Tuple[str, str]]] = None,
                 arms: Optional[List[Arms]] = None, grasps: Optional[List[Grasp]] = None,
                 samples_per_scenario: int = 1000):
        """
        Create a GraspingExplorer.
        :param robots: The robots to use
        :param objects: The objects to try to grasp
        :param arms: The arms of the robot to use
        :param grasps: The grasp orientations to use
        :param samples_per_scenario: The number of tries per scenario.
        """
        # store exploration space
        if not robots:
            self.robots: List[Tuple[str, str]] = [("pr2", "pr2.urdf")]

        if not objects:
            self.objects: List[Tuple[str, ObjectType, str]] = [("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl"),
                                                                            ("bowl", ObjectType.BOWL, "bowl.stl"),
                                                                            ("milk", ObjectType.MILK, "milk.stl"),
                                                                            ("spoon", ObjectType.SPOON, "spoon.stl")]

        if not arms:
            self.arms: List[str] = [Arms.LEFT, Arms.RIGHT]

        if not grasps:
            self.grasps: List[str] = [Grasp.LEFT, Grasp.RIGHT, Grasp.FRONT, Grasp.TOP]

        # store trials per scenario
        self.samples_per_scenario: int = samples_per_scenario

        # chain hyperparameters
        self.hyper_parameters = [self.robots, self.objects, self.arms, self.grasps]

        self.total_tries = 0
        self.total_failures = 0

    def perform(self, session: sqlalchemy.orm.Session):
        """
        Perform all experiments.
        :param session: The database-session to insert the samples in.
        """

        # create progress bar
        progress_bar = tqdm.tqdm(
            total=np.prod([len(p) for p in self.hyper_parameters]) * self.samples_per_scenario)

        self.world = BulletWorld("DIRECT")

        # for every robot
        for robot, robot_urdf in self.robots:

            # spawn it
            robot = BulletWorldObject(robot, ObjectType.ROBOT, robot_urdf)

            # for every obj
            for obj, obj_type, obj_stl in self.objects:

                # spawn it
                bw_object = BulletWorldObject(obj, obj_type, obj_stl, pose=Pose([0, 0, 0.75], [0, 0, 0, 1]))

                # create object designator
                object_designator = ObjectDesignatorDescription(names=[obj])

                # for every arm and grasp pose
                for arm, grasp in itertools.product(self.arms, self.grasps):
                    # sample positions in 2D
                    positions = np.random.uniform([-2, -2], [2, 2], (self.samples_per_scenario, 2))

                    # for every position
                    for position in positions:

                        # set z axis to 0
                        position = [*position, 0]

                        # calculate orientation for robot to face the object
                        angle = np.arctan2(position[1], position[0]) + np.pi
                        orientation = list(transformations.quaternion_from_euler(0, 0, angle, axes="sxyz"))

                        # try to execute a grasping plan
                        with simulated_robot:

                            ParkArmsActionPerformable(Arms.BOTH).perform()
                            # navigate to sampled position
                            NavigateAction([Pose(position, orientation)]).resolve().perform()

                            # move torso
                            height = np.random.uniform(0., 0.33, 1)[0]
                            MoveTorsoActionPerformable(height).perform()

                            # try to pick it up
                            try:
                                PickUpAction(object_designator, [arm], [grasp]).resolve().perform()

                            # if it fails
                            except PlanFailure:

                                # update failure stats
                                self.total_failures += 1

                            # reset BulletWorld
                            self.world.reset_world()

                            # update progress bar
                            self.total_tries += 1

                            # insert into database
                            pycram.tasktree.task_tree.insert(session, use_progress_bar=False)
                            pycram.tasktree.reset_tree()

                            progress_bar.update()
                            progress_bar.set_postfix(success_rate=(self.total_tries - self.total_failures) /
                                                                  self.total_tries)

                bw_object.remove()
            robot.remove()

```

Next we have to establish a connection to a database and execute the experiment a couple of times. Note that the (few) number of samples we generate is only for demonstrations.
For robust and reliable machine learning millions of samples are required.


```python
engine = sqlalchemy.create_engine("sqlite+pysqlite:///:memory:")
session = sqlalchemy.orm.Session(bind=engine)
pycram.orm.base.Base.metadata.create_all(bind=engine)
session.commit()

explorer = GraspingExplorer(samples_per_scenario=30)
explorer.perform(session)
```

The success_rate of the output above indicates how many of our samples succeeded in trying to grasp a randomized object.


Now that we have data to query from and a running session, we can actually start creating queries. 
Let's say we want to select positions of robots that were able to grasp a specific object (in this case a "milk" object):

```python
from sqlalchemy import select
from pycram.datastructures.enums import ObjectType

milk = BulletWorldObject("Milk", ObjectType.MILK, "milk.stl")

# query all relative robot positions in regard to an objects position
# make sure to order the joins() correctly
query = (select(ORMPickUpAction.arm, ORMPickUpAction.grasp, RobotState.torso_height, Position.x, Position.y)
         .join(TaskTreeNode.code)
         .join(Code.designator.of_type(ORMPickUpAction))
         .join(ORMPickUpAction.robot_state)
         .join(RobotState.pose)
         .join(pycram.orm.base.Pose.position)
         .join(ORMPickUpAction.object).where(Object.type == milk.type)
                                      .where(TaskTreeNode.status == "SUCCEEDED"))
print(query)

df = pd.read_sql_query(query, session.get_bind())
print(df)
```

If you are not familiar with sqlalchemy querying you might wonder what the of_type() function does and why we needed it in this query:

In order to understand the importance of the of_type() function in the joins above it is crucial to understand the inheritance structure in the ORM package. The action necessary for this query is the PickUpAction. It inherits the Action class/table (which holds all the actions). The Action class itself on the other hand inherits Designator (which holds all the actions, but also all the motions). 
We started our joins by joining TaskTreeNode on its relationship to Code and Code on its relationship to Designator. Next table we need is the PickUpAction table, but there is no specified relationship between Designator and PickUpAction. But we do know that a PickUpAction is actually a Designator, meaning, it inherits from Designator. So we can just "tell" the join to join Code on every Designator, that is "of_type" PickUpAction (.join(Code.designator.of_type(ORMPickUpAction))). 
The effect of this function can also be seen in the printed query of above's output. 


Another interesting query: Let's say we want to select the torso height and positions of robots relative to the object they were trying to grasp:

```python
from pycram.orm.base import Pose as ORMPose

robot_pose = sqlalchemy.orm.aliased(ORMPose)
object_pose = sqlalchemy.orm.aliased(ORMPose)
robot_position = sqlalchemy.orm.aliased(Position)
object_position = sqlalchemy.orm.aliased(Position)

query = (select(TaskTreeNode.status, Object.type, 
                       sqlalchemy.label("relative torso height", object_position.z - RobotState.torso_height),
                       sqlalchemy.label("x", robot_position.x - object_position.x),
                       sqlalchemy.label("y", robot_position.y - object_position.y))
         .join(TaskTreeNode.code)
         .join(Code.designator.of_type(ORMPickUpAction))
         .join(ORMPickUpAction.robot_state)
         .join(robot_pose, RobotState.pose)
         .join(robot_position, robot_pose.position)
         .join(ORMPickUpAction.object)
         .join(object_pose, Object.pose)
         .join(object_position, object_pose.position))
print(query)

df = pd.read_sql(query, session.get_bind())
df["status"] = df["status"].apply(lambda x: str(x.name))
print(df)
```

Obviously the query returned every row of the database since we didn't apply any filters.

Why is this query interesting? This query not only required more joins and the usage of the of_type() function, but we actually needed to access two of the tables twice with different purposes, namely the Pose and Position tables. We wanted to get the position of the robot relative to the object position, meaning we had to obtain all robot positions and all object positions. If we want to access the same table twice, we have to make sure to rename (one of) the occurrences in our query in order to provide proper sql syntax. This can be done by creating aliases using the sqlalchemy.orm.aliased() function. Sqlalchemy will automatically rename all the aliased tables for you during runtime.


---
jupyter:
  jupytext:
    text_representation:
      extension: .md
      format_name: markdown
      format_version: '1.3'
      jupytext_version: 1.16.2
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
---

# Giskard interface in PyCRAM

This notebook should provide you with an example on how to use the Giskard interface. This includes how to use the
interface, how it actually works and how to extend it.

We start by installing and launching Giskard. For the installation please follow the
instructions [here](https://github.com/SemRoCo/giskardpy).
After you finish the installation you should be able to launch Giskard by calling:

```
roslaunch giskardpy giskardpy_pr2_standalone.launch
```

This way you can launch Giskard for any robot that is supported:

```
roslaunch giskardpy giskardpy_hsr_standalone.launch
```

"Standalone" means that Giskard only uses a simulated robot and does not look for a real robot. If you want to use
Giskard with a real robot you have to switch out "standalone" with "iai", e.g:

```
roslaunch giskardpy giskardpy_hsr_iai.launch
```

To see what Giskard is doing you can start RViz, there should already be a MarkerArray when starting otherwise you have
to add this manually.

## How to use the Giskard interface

Everything related to the Giskard interface is located in {class}`pycram.external_interfaces.giskard`.
The content of the file can be roughly divided into three parts:
1. Methods to manage the belief states between PyCRAM and Giskard
2. Motion goals that should be sent to Giskard for execution
3. Helper methods to construct ROS messages

The most useful methods are the ones for sending and executing Motion goals. These are the ones we will mostly look at.

We will now start by setting up PyCRAM and then try to send some simple motion goals.

```python
from pycram.bullet_world import BulletWorld, Object
from pycram.enums import ObjectType

world = BulletWorld()
pr2 = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
```

When you are working on the real robot you also need to initialize the RobotStateUpdater, this module updates the robot
in the BulletWorld with the pose and joint state of the real robot.

You might need to change to topic names to fit the topic names as published by your robot.

```python
from pycram.ros.robot_state_updater import RobotStateUpdater

r = RobotStateUpdater("/tf", "/joint_states")
```

Now we have a PyCRAM belief state set up, belief state in this case just refers to the BulletWorld since the BulletWorld
represents what we believe the world to look like.

The next step will be to send a simple motion goal. The motion goal we will be sending is moving the torso up. For this
we just need to move one joint, so we can use the ```achive_joint_goal```. This method takes a dictionary with the
joints that should be moved and the target value for the joints.

Look at RViz to see the robot move, since we call Giskard for movement the robot in the BulletWorld will not move.

```python
from pycram.external_interfaces import giskard

giskard.achieve_joint_goal({"torso_lift_joint": 0.28})
```

For Giskard everything is connected by joints (this is called
a [World Tree](https://github.com/SemRoCo/giskardpy/wiki/World-Tree) by Giskard) therefore we can move the robot's base
by using motion goals between the map origin and the robot base. (e.g. by sending a "base_link" goal in the "map"
frame).

In the example below we use a cartesian goal, meaning we give Giskard a goal pose, a root link and a tip link and
Giskard tries to move all joints between root link and tip link such that the tip link is at the goal pose.

This sort of movement is fine for short distances, but keep in mind that Giskard has no collision avoidance for longer
journeys. So using MoveBase for longer distances is a better idea.

```python
from pycram.external_interfaces import giskard
from pycram.pose import Pose

giskard.achieve_cartesian_goal(Pose([1, 0, 0]), "base_link", "map")
```

Now for the last example: we will move the gripper using full body motion control.

We will again use the cartesian goal, but now between "map" and "r_gripper_tool_frame" frames. This will not only move
the robot (because the kinematic chain between "map" and "base_link" as used in the previous example is also part of
this chain) but also move the arm of the robot such that it reaches the goal pose.

```python
from pycram.external_interfaces import giskard
from pycram.pose import Pose

giskard.achieve_cartesian_goal(Pose([1, 0.5, 0.7]), "r_gripper_tool_frame", "map")
```

That concludes this example you can now close the BulletWorld by using the "exit" method.

```python
world.exit()
```

## How the Giskard interface works

The PyCRAM interface to Giskard mostly relies on the Python interface that Giskard already
provides ([tutorial](https://github.com/SemRoCo/giskardpy/wiki/Python-Interface) and
the [source code](https://github.com/SemRoCo/giskardpy/blob/master/src/giskardpy/python_interface.py)). This interface
provides methods to achieve motion goals and load things into the Giskard believe state.

What PyCRAM does with this, is: Synchronize the belief state of Giskard with the one of PyCRAM by loading the
environment URDF in Giskard, this is done before any motion goal is sent. Furthermore, the motion goals are wrapped in
methods that use PyCRAM data types.

You can also set collisions between different groups of links. By default, Giskard avoids all collisions but for things
like grasping an object you want to allow collisions of the gripper. The interface also supports the following collision
modes:
* avoid_all_collisions
* allow_self_collision
* allow_gripper_collision
The collision mode can be set by calling the respective method, after calling the method the collision mode is valid for
the next motion goal. Afterwards, it defaults back to avoid_all_collisions.

There is a ```init_giskard_interface``` method which can be used as a decorator. This decorator should be used on all
methods that access the giskard_wrapper, since it assures that the interface is working and checks if Giskard died or
the imports for the giskard_msgs failed.

## Extend the Giskard interface

At the moment the PyCRAM Giskard interface is mostly a wrapper around the Python interface provided by Giskard. If you
want to extend the interface there are two ways:

* Wrap more motion goals which are provided by the Python interface
* Design new Higher-Level motion goals by combining the motion goals already provided


============
Installation
============

The setup of PyCRAM can be divided in four steps:
 * Install ROS
 * Installing Dependencies
 * Cloning the PyCRAM repo
 * Building your ROS workspace

All dependencies are available via PyPi.

PyCRAM is developed and tested currently with Python3.8, Ubuntu 20.04 and ROS Noetic.

This guide expects you to have a GitHub account with an SSH key (you can read about adding a new ssh key
`here `_).

Installing ROS
==============

PyCRAM uses ROS for a variety of functionality, for this reason you need a working ROS installation on your machine.
For information on how to install ROS please referee to the official
documentation `here `_.

Installing Dependencies
=======================

The dependencies you will need are:
    * Pip
    * vcstool

These are available via the Ubuntu apt-repos and can be installed via the terminal:


.. code-block:: shell

    sudo apt-get install python3-pip python3-vcstool

PyCRAM on Ubuntu 20.04 (ROS Noetic)
===================================
.. _install-pycram:

Before installing PyCRAM you need to setup a ROS workspace into which PyCRAM can be cloned.

.. code-block:: shell

    mkdir -p ~/workspace/ros/src
    cd workspace/ros
    catkin_make
    source devel/setup.bash

If ``catkin_make`` does not work this probably means that you did not source your ROS installation.
Source it by invoking:

.. code-block:: shell

    source /opt/ros/noetic/setup.bash


Now you can install PyCRAM into your ROS workspace.

.. code-block:: shell

    cd ~/workspace/ros/src
    vcs import --input https://raw.githubusercontent.com/cram2/pycram/dev/pycram.rosinstall --recursive
    rosdep update
    rosdep install --ignore-src --from-paths . -r
    cd ..
    catkin_make
    source devel/setup.bash
    echo "source ~/workspace/ros/devel/setup.bash" >> ~/.bashrc

The cloning and setting up can take several minutes. After the command finishes you should see a number of repositories
in your ROS workspace.

Now the last thing that needs to be done is clone the submodules of the PyCRAM repo, this is done via the following
commands.

.. code-block:: shell

    cd src/pycram
    git submodule init
    git submodule update

The cloned repository contains the source code for PyCRAM as well as two short demos which demonstrate how to use it.

Python Dependencies
===================

To install the Python dependencies Pip is used. To install Pip type the following command into a terminal.

.. code-block:: shell

    sudo apt-get install python3-pip

Now the actual Python packages can be installed, these are summarized in the requirements.txt in the PyCRAM repo.
For this first navigate to your PyCRAM repo.

.. code-block:: shell

    cd ~/workspace/ros/src/pycram

Then install the Python packages in the requirements.txt file

.. code-block:: shell

    sudo pip3 install -r requirements.txt
    sudo pip3 install -r src/neem_interface_python/requirements.txt


Building your ROS workspace
===========================
.. _build-ws:

Building and sourcing your ROS workspace using catkin compiles all ROS packages and manages the appending to the
respective PATH variables. This is necessary to be able to import PyCRAM via the Python import system and to find the
robot descriptions in the launch file.

If you have been following the tutorial steps until now you can skip this part. 

You can build your ROS workspace with the following commands:

.. code-block:: shell

    cd ~/workspace/ros
    catkin_make
    source devel/setup.bash

Using PyCRAM
============

To start using PyCRAM you first need to launch the ROS launch file. This launchfile is located in the directory "launch"
and is named "ik_and_description.launch".

The launchfile can be started with the following command:

.. code-block:: shell

    roslaunch pycram ik_and_description.launch


What the launch file does is start a ROS master, upload the robot URDF to the parameter server as well as starting the
IK solver.

Building the documentation
==========================

The documentation uses jupyter-book as engine.
Building the documentation requires Python 3.9 to avoid dependency conflicts.
To install Python 3.9 on Ubuntu 20.04, use the following commands:

.. code-block:: shell

    sudo apt install python3.9

It is recommended to use a virtual environment to avoid conflicts with the system Python.

.. code-block:: shell

    apt-get install python3-virtualenv
    virtualenv -p python3.9 --system-site-packages build-doc
    source build-doc/bin/activate

Install the requirements in your python interpreter.

.. code-block:: shell

    cd ~/workspace/ros/src/pycram/doc
    pip install -r requirements.txt

Run pycram and build the docs.

.. code-block:: shell

    cd ~/workspace/ros
    roslaunch pycram ik_and_description.launch
    cd src/pycram/doc/source
    jupyter-book build .

Show the index.

.. code-block::

    firefox _build/html/index.html



Setting up PyCRAM with PyCharm
==============================

Setting up PyCharm with packages that rely on rospy is non trivial. Follow this guide to get correct syntax highlighting for the PyCRAM project. 

Install PyCharm Professional
----------------------------

First, `install PyCharm Professional `_.

Create a JetBrains account and verify it for educational purpose. Normally, a school email address would suffice, otherwise you would have to upload your student/employee id card. The verification process typically takes 1~2-week time, so until then please use Trial version.
Once your account is verified, you can unlock the PyCharm Professional features in PyCharm.

The next step will set up the virtual Python environment, so it can be used as a project interpreter in PyCharm. 


Set up virtualenv
-----------------
.. _virtualenv:

The virtualenvwrapper allows to manage virtual Python environments, where additional packages can be installed without the risk of breaking the system-wide Python configuration. Install `virtualenvwrapper `_ via pip and set it up.

.. code-block:: shell

    sudo pip3 install virtualenvwrapper


(Optional but recommended) Set virtualenvwrapper's `WORKON_HOME` env variable, of which the default value is `~/.virtualenvs`

.. code-block:: shell

    echo "export WORKON_HOME=~/envs" >> ~/.bashrc
    mkdir -p $WORKON_HOME

Activate virtualenvwrapper at terminal start

.. code-block:: shell

    echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc
    source ~/.bashrc

Create a virtual env based on the workspaces libraries (see build-ws_) and add the `--system-site-packages` to get them properly. The env will be registered in `$WORKON_HOME`.

.. code-block:: shell

    source ~/workspace/ros/devel/setup.bash
    mkvirtualenv pycram --system-site-packages
    ls $WORKON_HOME


Check if the ROS libraries are available in the virtual env.

.. code-block:: shell

    workon pycram
    python -c "import rospy"

If it complains about `python`, install the following, to set `python` to Python 3 by default.

.. code-block:: shell

    sudo apt install python-is-python3  

If it finds `python` but complains about missing packages, make sure that the workspace is sourced before creating the virtual env. Also remember to create the virtual env with the `--system-site-packages` flag.

If this returns no errors, you can be sure that rospy is usable in your virtual environment. Next you have to build the
ros workspace including pycram and source it as described in build-ws_.

Configure PyCharm
-----------------

Always start PyCharm from the terminal via

.. code-block:: shell

    pycharm-professional

or

.. code-block:: shell

    ~/pycharm/bin/pycharm.sh


Select **File | Open** and select the root folder of the PyCRAM package.
Next go to **File | Settings | Project: pycram | Python Interpreter** and set up your virtual environment with rospy and
the sourced workspace available as the python interpreter.

Finally, go to  **File | Settings | Project: pycram | Project Structure** and mark the src folder as Sources, the test
folder as Tests and the resources as Resources.

To verify that it works, you can execute any Testcase.

**Useful tips**

- `Keyboard shortcuts `_
    - `Keymap `_, which can be configured in **Settings | Keymap**. The default is GNOME.

- `Python interpreter `_
    - `Python virtual environment `_
- `Python packages `_
- `Python console `_

- **View | Active Editor | Soft-wrap**: wrap text inside the editor view

- **View | Tool Windows | Structure**: display structure window for easy content navigation

- **F12**: Open terminal

- **Double Shift**: Quick file search

- **Alt + Shift + 1**: Reveal/Select current file in Project View

- **Ctrl F/R**: Find/Replace text in current file

- **Ctrl Shift F/R**: Find/Replace text in the whole project, module, directory, scope

- **Settings | Editor | Inspections | Code is compatible with specific Python versions**: Enable/Disable Python version-specific warnings

Using IPython as REPL
=====================

If you want to use a REPl with PyCRAM you can use IPython for that. IPython can be installed via
the Ubunutu package manager.

.. code-block:: shell

    sudo apt install ipython3


Enable autoreload
-----------------

To use changes made in the Python file while the Repl is running you need to enable the iPython extension ``autoreload``.
This can be done using the iPython startup files, these are files which are always run if iPython is started.
First run ``ipython profile create`` to create a `default profile `_.
Then you will find the startup files located in ``~/.ipython/profile_default/startup`` along with a README file which explains the usage
of the startup files. In this directory create a file called ``00-autoreload.ipy`` and enter the following code to the file.


.. code-block:: shell

    %load_ext autoreload
    %autoreload 2

The first line loads the extension to iPython and the second line configures autoreload to reload all modules before the
code in the shell is executed.


Run scripts
-----------

IPython allows to run Python files and enables the access to created variables. This can be helpful
if you want to create a setup script which initializes things like the BulletWorld, Objects and imports
relevant modules.

To execute a Python script simply run ``run filename.py`` in the IPython shell.

Here is an example how a setup script can look like.

.. code-block:: python

    from pycram.bullet_world import BulletWorld, Object
    from pycram.designators.action_designator import *
    from pycram.designators.motion_designator import *
    from pycram.designators.location_designator import *
    from pycram.designators.object_designator import *
    from pycram.process_module import simulated_robot
    from pycram.pose import Pose
    from pycram.enums import ObjectType

    world = BulletWorld()

    robot = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
    kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
    cereal = Object("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", pose=Pose([1.4, 1, 0.95]))


==================================
Welcome to pycram's documentation!
==================================

.. image:: ../images/pycram_logo.png
   :alt: Pycram Logo

What is PyCRAM?
===============

PyCRAM is the Python 3 re-implementation of `CRAM `_.
PyCRAM is a toolbox for designing, implementing and deploying software on autonomous robots.
The framework provides various tools and libraries for aiding in robot software development as well as geometric
reasoning and fast simulation mechanisms to develop cognition-enabled control programs that achieve high levels of robot
autonomy.

PyCRAM is developed in Python with support for the ROS middleware which is used for communication with different
software components as well as the robot.

This framework is tested with Ubuntu 20.04, ROS Noetic and Python 3.8


Simple Demonstration
--------------------
PyCRAM allows the execution of the same high-level plan on different robot platforms. Below you can see an example of
this where the plan is executed on the PR2 and the IAIs Boxy.

.. list-table::
   :widths: 50 50
   :header-rows: 1

   *  - Boxy
      - PR2
   *  - .. image:: ../images/boxy.gif
            :alt: Boxy robot performing tasks using pycram
      - .. image:: ../images/pr2.gif
            :alt: PR2 robot performing tasks using pycram


The plan that both robots execute is a relatively simple pick and place plan:

 * They start at the world origin
 * park their arms
 * move to the counter
 * observe the object
 * pickup the object
 * move to the kitchen island
 * place the object
 * move to the world origin

The code for this plan can be seen below.

.. code-block:: python

    from pycram.world.bullet_world import BulletWorld
    from pycram.world_concepts.world_concepts import Object
    from pycram.process_module import simulated_robot
    from pycram.designators.motion_designator import *
    from pycram.designators.location_designator import *
    from pycram.designators.action_designator import *
    from pycram.designators.object_designator import *
    from pycram.datastructures.enums import ObjectType, Arms, Grasps

    world = BulletWorld()
    kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
    robot = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
    cereal = Object("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", position=[1.4, 1, 0.95])

    cereal_desig = ObjectDesignatorDescription(names=["cereal"])
    kitchen_desig = ObjectDesignatorDescription(names=["kitchen"])
    robot_desig = ObjectDesignatorDescription(names=["pr2"]).resolve()

    with simulated_robot:
        ParkArmsAction([Arms.BOTH]).resolve().perform()

        MoveTorsoAction([0.3]).resolve().perform()

        pickup_pose = CostmapLocation(target=cereal_desig.resolve(), reachable_for=robot_desig).resolve()
        pickup_arm = pickup_pose.reachable_arms[0]

        NavigateAction(target_locations=[pickup_pose.pose]).resolve().perform()

        PickUpAction(object_designator_description=cereal_desig, arms=[pickup_arm], grasps=[Grasps.FRONT]).resolve().perform()

        ParkArmsAction([Arms.BOTH]).resolve().perform()

        place_island = SemanticCostmapLocation("kitchen_island_surface", kitchen_desig.resolve(), cereal_desig.resolve()).resolve()

        place_stand = CostmapLocation(place_island.pose, reachable_for=robot_desig, reachable_arm=pickup_arm).resolve()

        NavigateAction(target_locations=[place_stand.pose]).resolve().perform()

        PlaceAction(cereal_desig, target_locations=[place_island.pose], arms=[pickup_arm]).resolve().perform()

        ParkArmsAction([Arms.BOTH]).resolve().perform()

    world.exit()


Citing PyCRAM
=============

If you want to cite PyCRAM in your work, you can use the following bibtex entry:

.. code-block:: bibtex

        @software{dech2024pycram,
        author = {Dech, Jonas},
        title = {PyCRAM: A Python framework for cognition-enbabled robtics},
        url = {https://github.com/cram2/pycram},
        version = {0.2.0},
        }



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`


pycram.world_concepts.event
===========================

.. py:module:: pycram.world_concepts.event


Classes
-------

.. autoapisummary::

   pycram.world_concepts.event.Event


Module Contents
---------------

.. py:class:: Event

   Base implementation of events in PyCRAM.
   Events allow to attach handler methods to events that fire for specific occurences in the world.

   :ivar handler: List of methods that are called when this event is fired.


   .. py:attribute:: handlers
      :type:  typing_extensions.List[typing_extensions.Callable]
      :value: []



   .. py:method:: add(handler: typing_extensions.Callable) -> None

      Adds a new handler to the list of handlers. All handler methods are called when this event is fired.
      Handler have to take the event sender as parameter as well as args* which can contain further parameter.

      :param handler: A method that should be added



   .. py:method:: remove(handler: typing_extensions.Callable) -> None

      Removes a method from the list of handlers, the method will not be called when the event is fired.

      :param handler: The method that should be removed.



   .. py:method:: fire(sender: typing_extensions.Any, earg: typing_extensions.Optional[typing_extensions.Any] = None) -> None

      Fire this event, this causes every method to be called with a sender as well as additional args.

      :param sender: The entity that fired the event.
      :param earg: Additional arguments.



   .. py:method:: __iadd__(other: typing_extensions.Callable) -> Event

      Operator overload that allows to add handlers by the '+=' operator.

      :param other: The handler that should be added.
      :return: This instance



   .. py:method:: __isub__(other: typing_extensions.Callable) -> Event

      Operator overload that allows to remove methods as handlers by using the '-=' operator.

      :param other: The method that should be removed as handler.
      :return: This instance



   .. py:attribute:: __call__

      Allows to directly call the reference.





pycram.world_concepts.constraints
=================================

.. py:module:: pycram.world_concepts.constraints


Classes
-------

.. autoapisummary::

   pycram.world_concepts.constraints.AbstractConstraint
   pycram.world_concepts.constraints.Constraint
   pycram.world_concepts.constraints.Attachment


Module Contents
---------------

.. py:class:: AbstractConstraint(parent_link: pycram.description.Link, child_link: pycram.description.Link, _type: pycram.datastructures.enums.JointType, parent_to_constraint: pycram.datastructures.pose.Transform, child_to_constraint: pycram.datastructures.pose.Transform)

   Represents an abstract constraint concept, this could be used to create joints for example or any kind of constraint
   between two links in the world.


   .. py:attribute:: parent_link
      :type:  pycram.description.Link


   .. py:attribute:: child_link
      :type:  pycram.description.Link


   .. py:attribute:: type
      :type:  pycram.datastructures.enums.JointType


   .. py:attribute:: parent_to_constraint


   .. py:attribute:: child_to_constraint


   .. py:attribute:: _parent_to_child
      :value: None



   .. py:property:: parent_to_child_transform
      :type: typing_extensions.Union[pycram.datastructures.pose.Transform, None]



   .. py:property:: parent_object_id
      :type: int

      Returns the id of the parent object of the constraint.

      :return: The id of the parent object of the constraint



   .. py:property:: child_object_id
      :type: int

      Returns the id of the child object of the constraint.

      :return: The id of the child object of the constraint



   .. py:property:: parent_link_id
      :type: int

      Returns the id of the parent link of the constraint.

      :return: The id of the parent link of the constraint



   .. py:property:: child_link_id
      :type: int

      Returns the id of the child link of the constraint.

      :return: The id of the child link of the constraint



   .. py:property:: position_wrt_parent_as_list
      :type: typing_extensions.List[float]

      Returns the constraint frame pose with respect to the parent origin as a list.

      :return: The constraint frame pose with respect to the parent origin as a list



   .. py:property:: orientation_wrt_parent_as_list
      :type: typing_extensions.List[float]

      Returns the constraint frame orientation with respect to the parent origin as a list.

      :return: The constraint frame orientation with respect to the parent origin as a list



   .. py:property:: pose_wrt_parent
      :type: pycram.datastructures.pose.Pose

      Returns the joint frame pose with respect to the parent origin.

      :return: The joint frame pose with respect to the parent origin



   .. py:property:: position_wrt_child_as_list
      :type: typing_extensions.List[float]

      Returns the constraint frame pose with respect to the child origin as a list.

      :return: The constraint frame pose with respect to the child origin as a list



   .. py:property:: orientation_wrt_child_as_list
      :type: typing_extensions.List[float]

      Returns the constraint frame orientation with respect to the child origin as a list.

      :return: The constraint frame orientation with respect to the child origin as a list



   .. py:property:: pose_wrt_child
      :type: pycram.datastructures.pose.Pose

      Returns the joint frame pose with respect to the child origin.

      :return: The joint frame pose with respect to the child origin



.. py:class:: Constraint(parent_link: pycram.description.Link, child_link: pycram.description.Link, _type: pycram.datastructures.enums.JointType, axis_in_child_frame: geometry_msgs.msg.Point, constraint_to_parent: pycram.datastructures.pose.Transform, child_to_constraint: pycram.datastructures.pose.Transform)

   Bases: :py:obj:`AbstractConstraint`


   Represents a constraint between two links in the World.


   .. py:attribute:: parent_to_constraint


   .. py:attribute:: axis
      :type:  geometry_msgs.msg.Point


   .. py:property:: axis_as_list
      :type: typing_extensions.List[float]

      Returns the axis of this constraint as a list.

      :return: The axis of this constraint as a list of xyz



.. py:class:: Attachment(parent_link: pycram.description.Link, child_link: pycram.description.Link, bidirectional: typing_extensions.Optional[bool] = False, parent_to_child_transform: typing_extensions.Optional[pycram.datastructures.pose.Transform] = None, constraint_id: typing_extensions.Optional[int] = None)

   Bases: :py:obj:`AbstractConstraint`


   Represents an abstract constraint concept, this could be used to create joints for example or any kind of constraint
   between two links in the world.


   .. py:attribute:: id


   .. py:attribute:: bidirectional
      :type:  bool


   .. py:attribute:: _loose
      :type:  bool
      :value: False



   .. py:method:: update_transform_and_constraint() -> None

      Updates the transform and constraint of this attachment.



   .. py:method:: update_transform() -> None

      Updates the transform of this attachment by calculating the transform from the parent link to the child link.



   .. py:method:: update_constraint() -> None

      Updates the constraint of this attachment by removing the old constraint if one exists and adding a new one.



   .. py:method:: add_fixed_constraint() -> None

      Adds a fixed constraint between the parent link and the child link.



   .. py:method:: calculate_transform() -> pycram.datastructures.pose.Transform

      Calculates the transform from the parent link to the child link.



   .. py:method:: remove_constraint_if_exists() -> None

      Removes the constraint between the parent and the child links if one exists.



   .. py:method:: get_inverse() -> Attachment

      :return: A new Attachment object with the parent and child links swapped.



   .. py:property:: loose
      :type: bool

      If true, then the child object will not move when parent moves.



   .. py:property:: is_reversed
      :type: bool

      :return: True if the parent and child links are swapped.



   .. py:method:: __del__() -> None

      Removes the constraint between the parent and the child links if one exists when the attachment is deleted.



   .. py:method:: __copy__()


   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: __hash__()

      Return hash(self).





pycram.ros.joint_state_publisher
================================

.. py:module:: pycram.ros.joint_state_publisher


Classes
-------

.. autoapisummary::

   pycram.ros.joint_state_publisher.JointStatePublisher


Module Contents
---------------

.. py:class:: JointStatePublisher(joint_state_topic='/pycram/joint_state', interval=0.1)

   Joint state publisher for the robot currently loaded in the World


   .. py:attribute:: world


   .. py:attribute:: joint_state_pub


   .. py:attribute:: interval


   .. py:attribute:: kill_event


   .. py:attribute:: thread


   .. py:method:: _publish() -> None

      Publishes the current joint states of the :py:attr:`~pycram.world.World.robot` in an infinite loop.
      The joint states are published as long as the kill_event is not set by :py:meth:`~JointStatePublisher._stop_publishing`



   .. py:method:: _stop_publishing() -> None

      Sets the kill_event to terminate the publishing thread and joins the thread.





pycram.ros.force_torque_sensor
==============================

.. py:module:: pycram.ros.force_torque_sensor


Classes
-------

.. autoapisummary::

   pycram.ros.force_torque_sensor.ForceTorqueSensor


Module Contents
---------------

.. py:class:: ForceTorqueSensor(joint_name, fts_topic='/pycram/fts', interval=0.1)

   Simulated force-torque sensor for a joint with a given name.
   Reads simulated forces and torques at that joint from world and publishes geometry_msgs/Wrench messages
   to the given topic.


   .. py:attribute:: world


   .. py:attribute:: fts_joint_idx
      :value: None



   .. py:attribute:: joint_name


   .. py:attribute:: fts_pub


   .. py:attribute:: interval


   .. py:attribute:: kill_event


   .. py:attribute:: thread


   .. py:method:: _publish() -> None

      Continuously publishes the force-torque values for the simulated joint. Values are published as long as the
      kill_event is not set.



   .. py:method:: _stop_publishing() -> None

      Sets the kill_event and therefore terminates the Thread publishing the force-torque values as well as join the
      threads.





pycram.robot_descriptions.stretch_description
=============================================

.. py:module:: pycram.robot_descriptions.stretch_description


Attributes
----------

.. autoapisummary::

   pycram.robot_descriptions.stretch_description.rospack
   pycram.robot_descriptions.stretch_description.filename
   pycram.robot_descriptions.stretch_description.stretch_description
   pycram.robot_descriptions.stretch_description.arm_description
   pycram.robot_descriptions.stretch_description.gripper_description
   pycram.robot_descriptions.stretch_description.neck
   pycram.robot_descriptions.stretch_description.realsense_color
   pycram.robot_descriptions.stretch_description.realsense_depth
   pycram.robot_descriptions.stretch_description.realsense_infra1
   pycram.robot_descriptions.stretch_description.realsense_infra2
   pycram.robot_descriptions.stretch_description.rdm


Module Contents
---------------

.. py:data:: rospack

.. py:data:: filename

.. py:data:: stretch_description

.. py:data:: arm_description

.. py:data:: gripper_description

.. py:data:: neck

.. py:data:: realsense_color

.. py:data:: realsense_depth

.. py:data:: realsense_infra1

.. py:data:: realsense_infra2

.. py:data:: rdm



pycram.process_modules
======================

.. py:module:: pycram.process_modules


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/pycram/process_modules/boxy_process_modules/index
   /autoapi/pycram/process_modules/default_process_modules/index
   /autoapi/pycram/process_modules/donbot_process_modules/index
   /autoapi/pycram/process_modules/hsrb_process_modules/index
   /autoapi/pycram/process_modules/pr2_process_modules/index
   /autoapi/pycram/process_modules/stretch_process_modules/index


Classes
-------

.. autoapisummary::

   pycram.process_modules.Pr2Manager
   pycram.process_modules.BoxyManager
   pycram.process_modules.DonbotManager
   pycram.process_modules.HSRBManager
   pycram.process_modules.DefaultManager
   pycram.process_modules.StretchManager


Package Contents
----------------

.. py:class:: Pr2Manager

   Bases: :py:obj:`pycram.process_module.ProcessModuleManager`


   Base class for managing process modules, any new process modules have to implement this class to register the
   Process Modules


   .. py:attribute:: _navigate_lock


   .. py:attribute:: _looking_lock


   .. py:attribute:: _detecting_lock


   .. py:attribute:: _move_tcp_lock


   .. py:attribute:: _move_arm_joints_lock


   .. py:attribute:: _world_state_detecting_lock


   .. py:attribute:: _move_joints_lock


   .. py:attribute:: _move_gripper_lock


   .. py:attribute:: _open_lock


   .. py:attribute:: _close_lock


   .. py:method:: navigate()

      Returns the Process Module for navigating the robot with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for navigating



   .. py:method:: looking()

      Returns the Process Module for looking at a point with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for looking at a specific point



   .. py:method:: detecting()

      Returns the Process Module for detecting an object with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for detecting an object



   .. py:method:: move_tcp()

      Returns the Process Module for moving the Tool Center Point with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for moving the TCP



   .. py:method:: move_arm_joints()

      Returns the Process Module for moving the joints of the robot arm
      with respect to the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for moving the arm joints



   .. py:method:: world_state_detecting()

      Returns the Process Module for detecting an object using the world state with respect to the
      :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for world state detecting



   .. py:method:: move_joints()

      Returns the Process Module for moving any joint of the robot with respect to the
      :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for moving joints



   .. py:method:: move_gripper()

      Returns the Process Module for moving the gripper with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for moving the gripper



   .. py:method:: open()

      Returns the Process Module for opening drawers with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for opening drawers



   .. py:method:: close()

      Returns the Process Module for closing drawers with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for closing drawers



.. py:class:: BoxyManager

   Bases: :py:obj:`pycram.process_module.ProcessModuleManager`


   Base class for managing process modules, any new process modules have to implement this class to register the
   Process Modules


   .. py:attribute:: _navigate_lock


   .. py:attribute:: _looking_lock


   .. py:attribute:: _detecting_lock


   .. py:attribute:: _move_tcp_lock


   .. py:attribute:: _move_arm_joints_lock


   .. py:attribute:: _world_state_detecting_lock


   .. py:attribute:: _move_joints_lock


   .. py:attribute:: _move_gripper_lock


   .. py:attribute:: _open_lock


   .. py:attribute:: _close_lock


   .. py:method:: navigate()

      Returns the Process Module for navigating the robot with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for navigating



   .. py:method:: looking()

      Returns the Process Module for looking at a point with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for looking at a specific point



   .. py:method:: detecting()

      Returns the Process Module for detecting an object with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for detecting an object



   .. py:method:: move_tcp()

      Returns the Process Module for moving the Tool Center Point with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for moving the TCP



   .. py:method:: move_arm_joints()

      Returns the Process Module for moving the joints of the robot arm
      with respect to the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for moving the arm joints



   .. py:method:: world_state_detecting()

      Returns the Process Module for detecting an object using the world state with respect to the
      :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for world state detecting



   .. py:method:: move_gripper()

      Returns the Process Module for moving the gripper with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for moving the gripper



.. py:class:: DonbotManager

   Bases: :py:obj:`pycram.process_module.ProcessModuleManager`


   Base class for managing process modules, any new process modules have to implement this class to register the
   Process Modules


   .. py:attribute:: _navigate_lock


   .. py:attribute:: _pick_up_lock


   .. py:attribute:: _place_lock


   .. py:attribute:: _looking_lock


   .. py:attribute:: _detecting_lock


   .. py:attribute:: _move_tcp_lock


   .. py:attribute:: _move_arm_joints_lock


   .. py:attribute:: _world_state_detecting_lock


   .. py:attribute:: _move_joints_lock


   .. py:attribute:: _move_gripper_lock


   .. py:attribute:: _open_lock


   .. py:attribute:: _close_lock


   .. py:method:: navigate()

      Returns the Process Module for navigating the robot with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for navigating



   .. py:method:: place()

      Returns the Process Module for placing with respect to the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for placing an Object



   .. py:method:: looking()

      Returns the Process Module for looking at a point with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for looking at a specific point



   .. py:method:: detecting()

      Returns the Process Module for detecting an object with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for detecting an object



   .. py:method:: move_tcp()

      Returns the Process Module for moving the Tool Center Point with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for moving the TCP



   .. py:method:: move_arm_joints()

      Returns the Process Module for moving the joints of the robot arm
      with respect to the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for moving the arm joints



   .. py:method:: world_state_detecting()

      Returns the Process Module for detecting an object using the world state with respect to the
      :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for world state detecting



   .. py:method:: move_gripper()

      Returns the Process Module for moving the gripper with respect to
       the :py:attr:`~ProcessModuleManager.execution_type`

      :return: The Process Module for moving the gripper



.. py:class:: HSRBManager

   Bases: :py:obj:`ProcessModuleManager`


   .. py:attribute:: _navigate_lock


   .. py:attribute:: _pick_up_lock


   .. py:attribute:: _place_lock


   .. py:attribute:: _looking_lock


   .. py:attribute:: _detecting_lock


   .. py:attribute:: _move_tcp_lock


   .. py:attribute:: _move_arm_joints_lock


   .. py:attribute:: _world_state_detecting_lock


   .. py:attribute:: _move_joints_lock


   .. py:attribute:: _move_gripper_lock


   .. py:attribute:: _open_lock


   .. py:attribute:: _close_lock


   .. py:attribute:: _talk_lock


   .. py:method:: navigate()


   .. py:method:: looking()


   .. py:method:: detecting()


   .. py:method:: move_tcp()


   .. py:method:: move_arm_joints()


   .. py:method:: move_joints()


   .. py:method:: move_gripper()


   .. py:method:: open()


   .. py:method:: close()


   .. py:method:: talk()


.. py:class:: DefaultManager

   Bases: :py:obj:`ProcessModuleManager`


   .. py:attribute:: _navigate_lock


   .. py:attribute:: _looking_lock


   .. py:attribute:: _detecting_lock


   .. py:attribute:: _move_tcp_lock


   .. py:attribute:: _move_arm_joints_lock


   .. py:attribute:: _world_state_detecting_lock


   .. py:attribute:: _move_joints_lock


   .. py:attribute:: _move_gripper_lock


   .. py:attribute:: _open_lock


   .. py:attribute:: _close_lock


   .. py:method:: navigate()


   .. py:method:: looking()


   .. py:method:: detecting()


   .. py:method:: move_tcp()


   .. py:method:: move_arm_joints()


   .. py:method:: world_state_detecting()


   .. py:method:: move_joints()


   .. py:method:: move_gripper()


   .. py:method:: open()


   .. py:method:: close()


.. py:class:: StretchManager

   Bases: :py:obj:`ProcessModuleManager`


   .. py:attribute:: _navigate_lock


   .. py:attribute:: _looking_lock


   .. py:attribute:: _detecting_lock


   .. py:attribute:: _move_tcp_lock


   .. py:attribute:: _move_arm_joints_lock


   .. py:attribute:: _world_state_detecting_lock


   .. py:attribute:: _move_joints_lock


   .. py:attribute:: _move_gripper_lock


   .. py:attribute:: _open_lock


   .. py:attribute:: _close_lock


   .. py:method:: navigate()


   .. py:method:: looking()


   .. py:method:: detecting()


   .. py:method:: move_tcp()


   .. py:method:: move_arm_joints()


   .. py:method:: world_state_detecting()


   .. py:method:: move_joints()


   .. py:method:: move_gripper()


   .. py:method:: open()


   .. py:method:: close()




pycram.process_modules.default_process_modules
==============================================

.. py:module:: pycram.process_modules.default_process_modules


Classes
-------

.. autoapisummary::

   pycram.process_modules.default_process_modules.DefaultNavigation
   pycram.process_modules.default_process_modules.DefaultMoveHead
   pycram.process_modules.default_process_modules.DefaultMoveGripper
   pycram.process_modules.default_process_modules.DefaultDetecting
   pycram.process_modules.default_process_modules.DefaultMoveTCP
   pycram.process_modules.default_process_modules.DefaultMoveArmJoints
   pycram.process_modules.default_process_modules.DefaultMoveJoints
   pycram.process_modules.default_process_modules.DefaultWorldStateDetecting
   pycram.process_modules.default_process_modules.DefaultOpen
   pycram.process_modules.default_process_modules.DefaultClose
   pycram.process_modules.default_process_modules.DefaultManager


Functions
---------

.. autoapisummary::

   pycram.process_modules.default_process_modules._move_arm_tcp


Module Contents
---------------

.. py:class:: DefaultNavigation(lock)

   Bases: :py:obj:`pycram.process_module.ProcessModule`


   The process module to move the robot from one position to another.


   .. py:method:: _execute(desig: MoveMotion)

      Helper method for internal usage only.
      This method is to be overwritten instead of the execute method.



.. py:class:: DefaultMoveHead(lock)

   Bases: :py:obj:`pycram.process_module.ProcessModule`


   This process module moves the head to look at a specific point in the world coordinate frame.
   This point can either be a position or an object.


   .. py:method:: _execute(desig: LookingMotion)

      Helper method for internal usage only.
      This method is to be overwritten instead of the execute method.



.. py:class:: DefaultMoveGripper(lock)

   Bases: :py:obj:`pycram.process_module.ProcessModule`


   This process module controls the gripper of the robot. They can either be opened or closed.
   Furthermore, it can only moved one gripper at a time.


   .. py:method:: _execute(desig: MoveGripperMotion)

      Helper method for internal usage only.
      This method is to be overwritten instead of the execute method.



.. py:class:: DefaultDetecting(lock)

   Bases: :py:obj:`pycram.process_module.ProcessModule`


   This process module tries to detect an object with the given type. To be detected the object has to be in
   the field of view of the robot.


   .. py:method:: _execute(desig: DetectingMotion)

      Helper method for internal usage only.
      This method is to be overwritten instead of the execute method.



.. py:class:: DefaultMoveTCP(lock)

   Bases: :py:obj:`pycram.process_module.ProcessModule`


   This process moves the tool center point of either the right or the left arm.


   .. py:method:: _execute(desig: MoveTCPMotion)

      Helper method for internal usage only.
      This method is to be overwritten instead of the execute method.



.. py:class:: DefaultMoveArmJoints(lock)

   Bases: :py:obj:`pycram.process_module.ProcessModule`


   This process modules moves the joints of either the right or the left arm. The joint states can be given as
   list that should be applied or a pre-defined position can be used, such as "parking"


   .. py:method:: _execute(desig: MoveArmJointsMotion)

      Helper method for internal usage only.
      This method is to be overwritten instead of the execute method.



.. py:class:: DefaultMoveJoints(lock)

   Bases: :py:obj:`pycram.process_module.ProcessModule`


   Implementation of process modules. Process modules are the part that communicate with the outer world to execute
    designators.


   .. py:method:: _execute(desig: MoveJointsMotion)

      Helper method for internal usage only.
      This method is to be overwritten instead of the execute method.



.. py:class:: DefaultWorldStateDetecting(lock)

   Bases: :py:obj:`pycram.process_module.ProcessModule`


   This process moduledetectes an object even if it is not in the field of view of the robot.


   .. py:method:: _execute(desig: WorldStateDetectingMotion)

      Helper method for internal usage only.
      This method is to be overwritten instead of the execute method.



.. py:class:: DefaultOpen(lock)

   Bases: :py:obj:`pycram.process_module.ProcessModule`


   Low-level implementation of opening a container in the simulation. Assumes the handle is already grasped.


   .. py:method:: _execute(desig: OpeningMotion)

      Helper method for internal usage only.
      This method is to be overwritten instead of the execute method.



.. py:class:: DefaultClose(lock)

   Bases: :py:obj:`pycram.process_module.ProcessModule`


   Low-level implementation that lets the robot close a grasped container, in simulation


   .. py:method:: _execute(desig: ClosingMotion)

      Helper method for internal usage only.
      This method is to be overwritten instead of the execute method.



.. py:function:: _move_arm_tcp(target: Pose, robot: pycram.world_concepts.world_object.Object, arm: Arms) -> None

.. py:class:: DefaultManager

   Bases: :py:obj:`ProcessModuleManager`


   .. py:attribute:: _navigate_lock


   .. py:attribute:: _looking_lock


   .. py:attribute:: _detecting_lock


   .. py:attribute:: _move_tcp_lock


   .. py:attribute:: _move_arm_joints_lock


   .. py:attribute:: _world_state_detecting_lock


   .. py:attribute:: _move_joints_lock


   .. py:attribute:: _move_gripper_lock


   .. py:attribute:: _open_lock


   .. py:attribute:: _close_lock


   .. py:method:: navigate()


   .. py:method:: looking()


   .. py:method:: detecting()


   .. py:method:: move_tcp()


   .. py:method:: move_arm_joints()


   .. py:method:: world_state_detecting()


   .. py:method:: move_joints()


   .. py:method:: move_gripper()


   .. py:method:: open()


   .. py:method:: close()




pycram.object_descriptors
=========================

.. py:module:: pycram.object_descriptors


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/pycram/object_descriptors/generic/index
   /autoapi/pycram/object_descriptors/urdf/index




pycram.external_interfaces.robokudo
===================================

.. py:module:: pycram.external_interfaces.robokudo


Attributes
----------

.. autoapisummary::

   pycram.external_interfaces.robokudo.is_init
   pycram.external_interfaces.robokudo.number_of_par_goals
   pycram.external_interfaces.robokudo.robokudo_lock
   pycram.external_interfaces.robokudo.robokudo_rlock
   pycram.external_interfaces.robokudo.par_threads


Functions
---------

.. autoapisummary::

   pycram.external_interfaces.robokudo.thread_safe
   pycram.external_interfaces.robokudo.init_robokudo_interface
   pycram.external_interfaces.robokudo.send_query
   pycram.external_interfaces.robokudo.query_object
   pycram.external_interfaces.robokudo.query_human
   pycram.external_interfaces.robokudo.stop_query
   pycram.external_interfaces.robokudo.query_specific_region
   pycram.external_interfaces.robokudo.query_human_attributes
   pycram.external_interfaces.robokudo.query_waving_human


Module Contents
---------------

.. py:data:: is_init
   :value: False


.. py:data:: number_of_par_goals
   :value: 0


.. py:data:: robokudo_lock

.. py:data:: robokudo_rlock

.. py:data:: par_threads

.. py:function:: thread_safe(func: typing_extensions.Callable) -> typing_extensions.Callable

   Adds thread safety to a function via a decorator. This uses the robokudo_lock

   :param func: Function that should be thread safe
   :return: A function with thread safety


.. py:function:: init_robokudo_interface(func: typing_extensions.Callable) -> typing_extensions.Callable

   Checks if the ROS messages are available and if Robokudo is running, if that is the case the interface will be
   initialized.

   :param func: Function this decorator should be wrapping
   :return: A callable function which initializes the interface and then calls the wrapped function


.. py:function:: send_query(obj_type: typing_extensions.Optional[str] = None, region: typing_extensions.Optional[str] = None, attributes: typing_extensions.Optional[typing_extensions.List[str]] = None) -> Any

   Generic function to send a query to RoboKudo.


.. py:function:: query_object(obj_desc: pycram.designator.ObjectDesignatorDescription) -> dict

   Query RoboKudo for an object that fits the description.


.. py:function:: query_human() -> geometry_msgs.msg.PointStamped

   Query RoboKudo for human detection and return the detected human's pose.


.. py:function:: stop_query()

   Stop any ongoing query to RoboKudo.


.. py:function:: query_specific_region(region: str) -> Any

   Query RoboKudo to scan a specific region.


.. py:function:: query_human_attributes() -> Any

   Query RoboKudo for human attributes like brightness of clothes, headgear, and gender.


.. py:function:: query_waving_human() -> pycram.datastructures.pose.Pose

   Query RoboKudo for detecting a waving human.




pycram.external_interfaces.ik
=============================

.. py:module:: pycram.external_interfaces.ik


Functions
---------

.. autoapisummary::

   pycram.external_interfaces.ik._make_request_msg
   pycram.external_interfaces.ik.call_ik
   pycram.external_interfaces.ik.try_to_reach_with_grasp
   pycram.external_interfaces.ik.apply_grasp_orientation_to_pose
   pycram.external_interfaces.ik.try_to_reach
   pycram.external_interfaces.ik.request_ik
   pycram.external_interfaces.ik.request_kdl_ik
   pycram.external_interfaces.ik.request_giskard_ik


Module Contents
---------------

.. py:function:: _make_request_msg(root_link: str, tip_link: str, target_pose: pycram.datastructures.pose.Pose, robot_object: pycram.world_concepts.world_object.Object, joints: typing_extensions.List[str]) -> moveit_msgs.msg.PositionIKRequest

   Generates an ik request message for the kdl_ik_service. The message is
   of the type moveit_msgs/PositionIKRequest and contains all information
   contained in the parameter.

   :param root_link: The first link of the chain of joints to be altered
   :param tip_link: The last link of the chain of joints to be altered
   :param target_pose: Target pose for which the message should be created
   :param robot_object: The robot for which the ik should be generated
   :param joints: A list of joint names between the root_link and tip_link that should be altered.
   :return: A moveit_msgs/PositionIKRequest message containing all the information from the parameter


.. py:function:: call_ik(root_link: str, tip_link: str, target_pose: pycram.datastructures.pose.Pose, robot_object: pycram.world_concepts.world_object.Object, joints: typing_extensions.List[str]) -> typing_extensions.List[float]

   Sends a request to the kdl_ik_service and returns the solution.
   Note that the robot in robot_object should be identical to the robot description
   uploaded to the parameter server. Furthermore, note that the root_link and
   tip_link are the links attached to the first and last joints in the joints list.

   :param root_link: The first link of the chain of joints to be altered
   :param tip_link: The last link in the chain of joints to be altered
   :param target_pose: The target pose in frame of root link second is the orientation as quaternion in world coordinate frame
   :param robot_object: The robot object for which the ik solution should be generated
   :param joints: A list of joint name that should be altered
   :return: The solution that was generated as a list of joint values corresponding to the order of joints given


.. py:function:: try_to_reach_with_grasp(pose_or_object: typing_extensions.Union[pycram.datastructures.pose.Pose, pycram.world_concepts.world_object.Object], prospection_robot: pycram.world_concepts.world_object.Object, gripper_name: str, grasp: str) -> typing_extensions.Union[pycram.datastructures.pose.Pose, None]

   Checks if the robot can reach a given position with a specific grasp orientation.
   To determine this the inverse kinematics are calculated and applied.

   :param pose_or_object: The position and rotation or Object for which reachability should be checked or an Object
   :param prospection_robot: The robot that should reach for the position
   :param gripper_name: The name of the end effector
   :param grasp: The grasp type with which the object should be grasped


.. py:function:: apply_grasp_orientation_to_pose(grasp: str, pose: pycram.datastructures.pose.Pose) -> pycram.datastructures.pose.Pose

   Applies the orientation of a grasp to a given pose. This is done by using the grasp orientation
   of the given grasp and applying it to the given pose.

   :param grasp: The name of the grasp
   :param pose: The pose to which the grasp orientation should be applied


.. py:function:: try_to_reach(pose_or_object: typing_extensions.Union[pycram.datastructures.pose.Pose, pycram.world_concepts.world_object.Object], prospection_robot: pycram.world_concepts.world_object.Object, gripper_name: str) -> typing_extensions.Union[pycram.datastructures.pose.Pose, None]

   Tries to reach a given position with a given robot. This is done by calculating the inverse kinematics.

   :param pose_or_object: The position and rotation or Object for which reachability should be checked.
   :param prospection_robot: The robot that should be used to check for reachability, should be the one in the prospection world
   :param gripper_name: Name of the gripper tool frame
   :return: The pose at which the robot should stand or None if the target is not reachable


.. py:function:: request_ik(target_pose: pycram.datastructures.pose.Pose, robot: pycram.world_concepts.world_object.Object, joints: typing_extensions.List[str], gripper: str) -> typing_extensions.Tuple[pycram.datastructures.pose.Pose, typing_extensions.Dict[str, float]]

   Top-level method to request ik solution for a given pose. This method will check if the giskard node is running
   and if so will call the giskard service. If the giskard node is not running the kdl_ik_service will be called.

   :param target_pose: Pose of the end-effector for which an ik solution should be found
   :param robot: The robot object which should be used
   :param joints: A list of joints that should be used in computation, this is only relevant for the kdl_ik_service
   :param gripper: Name of the tool frame which should grasp, this should be at the end of the given joint chain
   :return: A Pose at which the robt should stand as well as a dictionary of joint values


.. py:function:: request_kdl_ik(target_pose: pycram.datastructures.pose.Pose, robot: pycram.world_concepts.world_object.Object, joints: typing_extensions.List[str], gripper: str) -> typing_extensions.Dict[str, float]

   Top-level method to request ik solution for a given pose. Before calling the ik service the links directly before
   and after the joint chain will be queried and the target_pose will be transformed into the frame of the root_link.
   Afterward, the offset between the tip_link and end effector will be calculated and taken into account. Lastly the
   ik service is called and the result returned

   :param target_pose: Pose for which an ik solution should be found
   :param robot: Robot object which should be used
   :param joints: List of joints that should be used in computation
   :param gripper: Name of the gripper which should grasp, this should be at the end of the given joint chain
   :return: A list of joint values


.. py:function:: request_giskard_ik(target_pose: pycram.datastructures.pose.Pose, robot: pycram.world_concepts.world_object.Object, gripper: str) -> typing_extensions.Tuple[pycram.datastructures.pose.Pose, typing_extensions.Dict[str, float]]

   Calls giskard in projection mode and queries the ik solution for a full body ik solution. This method will
   try to drive the robot directly to a pose from which the target_pose is reachable for the end effector. If there
   are obstacles in the way this method will fail. In this case please use the GiskardLocation designator.

   :param target_pose: Pose at which the end effector should be moved.
   :param robot: Robot object which should be used.
   :param gripper: Name of the tool frame which should grasp, this should be at the end of the given joint chain.
   :return: A list of joint values.




pycram.designators.specialized_designators.probabilistic.probabilistic_action
=============================================================================

.. py:module:: pycram.designators.specialized_designators.probabilistic.probabilistic_action


Classes
-------

.. autoapisummary::

   pycram.designators.specialized_designators.probabilistic.probabilistic_action.Grasp
   pycram.designators.specialized_designators.probabilistic.probabilistic_action.Arms
   pycram.designators.specialized_designators.probabilistic.probabilistic_action.ProbabilisticAction
   pycram.designators.specialized_designators.probabilistic.probabilistic_action.GaussianCostmapModel
   pycram.designators.specialized_designators.probabilistic.probabilistic_action.MoveAndPickUp


Module Contents
---------------

.. py:class:: Grasp

   Bases: :py:obj:`random_events.set.SetElement`


   .. py:attribute:: EMPTY_SET


   .. py:attribute:: FRONT
      :value: 0



   .. py:attribute:: LEFT
      :value: 1



   .. py:attribute:: RIGHT
      :value: 2



   .. py:attribute:: TOP
      :value: 3



.. py:class:: Arms

   Bases: :py:obj:`random_events.set.SetElement`


   .. py:attribute:: EMPTY_SET


   .. py:attribute:: LEFT
      :value: 0



   .. py:attribute:: RIGHT
      :value: 1



.. py:class:: ProbabilisticAction(policy: typing_extensions.Optional[probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit] = None)

   Abstract class for probabilistic performables.


   .. py:class:: Variables

      Variables for probabilistic performables.

      This inner class serves the purpose to define the variables that are used in a model and make them easily
      accessible for the user. The user can access the variables by using the dot notation, e.g. `self.variables.x`.

      The members of this class have to be ordered the same way as the variables in the policy.
      The order of the variables in the policy is most likely alphabetical by name.



   .. py:attribute:: policy
      :type:  probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit

      The policy that is used to determine the parameters.



   .. py:attribute:: variables
      :type:  ProbabilisticAction.Variables

      The variables of this action.



   .. py:method:: default_policy() -> probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit
      :abstractmethod:


      Create a default policy for the action.

      :return: The default policy for the action



   .. py:method:: sample_to_action(sample: typing_extensions.List) -> pycram.designators.action_designator.ActionAbstract
      :abstractmethod:


      Convert a sample from the policy to a performable action.
      :param sample: The sample
      :return: The action



.. py:class:: GaussianCostmapModel(distance_to_center: float = 0.2, variance: float = 0.5)

   Class that generates a Gaussian Costmap around the center of an object. The costmap cuts out a square in the middle
   that has side lengths given by ``distance_to_center``.


   .. py:attribute:: distance_to_center
      :type:  float

      The side length of the cut out square.



   .. py:attribute:: variance
      :type:  float

      The variance of the distributions involved



   .. py:attribute:: relative_x


   .. py:attribute:: relative_y


   .. py:attribute:: grasp


   .. py:attribute:: arm


   .. py:method:: center_event() -> random_events.product_algebra.Event

      Create an event that describes the center of the map.



   .. py:method:: create_model_with_center() -> probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit

      Create a fully factorized gaussian at the center of the map.



   .. py:method:: create_model() -> probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit

      Create a gaussian model that assumes mass everywhere besides the center square.

      :return: The probabilistic circuit



.. py:class:: MoveAndPickUp(object_designator: pycram.designator.ObjectDesignatorDescription.Object, arms: typing_extensions.List[Arms], grasps: typing_extensions.List[Grasp], policy: typing_extensions.Optional[probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit] = None)

   Bases: :py:obj:`pycram.designator.ActionDesignatorDescription`, :py:obj:`ProbabilisticAction`


   Abstract class for action designator descriptions.
   Descriptions hold possible parameter ranges for action designators.


   .. py:class:: Variables

      .. py:attribute:: arm
         :type:  random_events.variable.Symbolic


      .. py:attribute:: grasp
         :type:  random_events.variable.Symbolic


      .. py:attribute:: relative_x
         :type:  random_events.variable.Continuous


      .. py:attribute:: relative_y
         :type:  random_events.variable.Continuous



   .. py:attribute:: variables
      :type:  MoveAndPickUp.Variables


   .. py:attribute:: sample_amount
      :type:  int
      :value: 20


      The amount of samples that should be drawn from the policy when iterating over it.



   .. py:attribute:: object_designator
      :type:  pycram.designator.ObjectDesignatorDescription.Object

      The object designator that should be picked up.



   .. py:attribute:: arms
      :type:  typing_extensions.List[Arms]

      The arms that can be used for the pick up.



   .. py:attribute:: grasps
      :type:  typing_extensions.List[Grasp]

      The grasps that can be used for the pick up.



   .. py:method:: default_policy() -> probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit

      Create a default policy for the action.

      :return: The default policy for the action



   .. py:method:: sample_to_action(sample: typing_extensions.List) -> pycram.designators.action_designator.MoveAndPickUpPerformable

      Convert a sample from the underlying distribution to a performable action.
      :param sample: The sample
      :return:  action



   .. py:method:: events_from_occupancy_and_visibility_costmap() -> random_events.product_algebra.Event

      Create events from the occupancy and visibility costmap.

      :return: The events that can be used as evidence for the model.



   .. py:method:: ground_model(model: typing_extensions.Optional[probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit] = None, event: typing_extensions.Optional[random_events.product_algebra.Event] = None) -> probabilistic_model.probabilistic_circuit.probabilistic_circuit.ProbabilisticCircuit

      Ground the model to the current evidence.

      :param model: The model that should be grounded. If None, the policy is used.
      :param event: The events that should be used as evidence. If None, the occupancy costmap is used.
      :return: The grounded model



   .. py:method:: iter_with_mode() -> typing_extensions.Iterator[pycram.designators.action_designator.MoveAndPickUpPerformable]

      Generate performables by sampling from the mode of the policy conditioned on visibility and occupancy.



   .. py:method:: __iter__() -> typing_extensions.Iterator[pycram.designators.action_designator.MoveAndPickUpPerformable]

      Generate performables by sampling from the policy conditioned on visibility and occupancy.



   .. py:method:: iterate_without_occupancy_costmap() -> typing_extensions.Iterator[pycram.designators.action_designator.MoveAndPickUpPerformable]

      Generate performables by sampling from the policy without conditioning on visibility and occupancy.



   .. py:method:: query_for_database()
      :staticmethod:



   .. py:method:: batch_rollout()

      Try the policy without conditioning on visibility and occupancy and count the successful tries.

      :amount: The amount of tries





pycram.designators.specialized_designators.probabilistic
========================================================

.. py:module:: pycram.designators.specialized_designators.probabilistic


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/pycram/designators/specialized_designators/probabilistic/probabilistic_action/index




pycram.designators.specialized_designators.location.giskard_location
====================================================================

.. py:module:: pycram.designators.specialized_designators.location.giskard_location


Classes
-------

.. autoapisummary::

   pycram.designators.specialized_designators.location.giskard_location.GiskardLocation


Module Contents
---------------

.. py:class:: GiskardLocation(target: typing_extensions.Union[pycram.datastructures.pose.Pose, pycram.designators.object_designator.ObjectDesignatorDescription.Object], reachable_for: typing_extensions.Optional[pycram.designators.object_designator.ObjectDesignatorDescription.Object] = None, visible_for: typing_extensions.Optional[pycram.designators.object_designator.ObjectDesignatorDescription.Object] = None, reachable_arm: typing_extensions.Optional[pycram.datastructures.enums.Arms] = None, resolver: typing_extensions.Optional[typing_extensions.Callable] = None)

   Bases: :py:obj:`pycram.designators.location_designator.CostmapLocation`


   '
   Specialization version of the CostmapLocation which uses Giskard to solve for a full-body IK solution. This
   designator is especially useful for robots which lack a degree of freedom and therefore need to use the base to
   manipulate the environment effectively.


   .. py:method:: __iter__() -> pycram.designators.location_designator.CostmapLocation.Location

      Uses Giskard to perform full body ik solving to get the pose of a robot at which it is able to reach a certain point.

      :yield: An instance of CostmapLocation.Location with a pose from which the robot can reach the target





pycram.designators.specialized_designators.location.database_location
=====================================================================

.. py:module:: pycram.designators.specialized_designators.location.database_location


Classes
-------

.. autoapisummary::

   pycram.designators.specialized_designators.location.database_location.Location
   pycram.designators.specialized_designators.location.database_location.AbstractCostmapLocation
   pycram.designators.specialized_designators.location.database_location.DatabaseCostmapLocation


Module Contents
---------------

.. py:class:: Location

   Bases: :py:obj:`pycram.designator.LocationDesignatorDescription.Location`


   A location that is described by a pose, a reachable arm, a torso height and a grasp.


   .. py:attribute:: pose
      :type:  pycram.datastructures.pose.Pose


   .. py:attribute:: reachable_arm
      :type:  str


   .. py:attribute:: torso_height
      :type:  float


   .. py:attribute:: grasp
      :type:  str


.. py:class:: AbstractCostmapLocation(target, reachable_for=None, reachable_arm=None)

   Bases: :py:obj:`pycram.designators.location_designator.CostmapLocation`


   Abstract Class for JPT and Database costmaps.


   .. py:method:: create_occupancy_rectangles() -> typing_extensions.List[pycram.costmaps.Rectangle]

      :return: A list of rectangles that represent the occupied space of the target object.



.. py:class:: DatabaseCostmapLocation(target, session: sqlalchemy.orm.Session = None, reachable_for=None, reachable_arm=None)

   Bases: :py:obj:`AbstractCostmapLocation`


   Class that represents costmap locations from a given Database.
   The database has to have a schema that is compatible with the pycram.orm package.


   .. py:attribute:: session


   .. py:method:: select_statement(view: typing_extensions.Type[pycram.orm.views.PickUpWithContextView]) -> sqlalchemy.Select
      :staticmethod:



   .. py:method:: create_query_from_occupancy_costmap() -> sqlalchemy.Select

      Create a query that queries all relative robot positions from an object that are not occluded using an
      OccupancyCostmap.



   .. py:method:: sample_to_location(sample: sqlalchemy.engine.row.Row) -> Location

      Convert a database row to a costmap location.

      :param sample: The database row.
      :return: The costmap location



   .. py:method:: __iter__() -> Location

      Generates positions for a given set of constrains from a costmap and returns
      them. The generation is based of a costmap which itself is the product of
      merging costmaps, each for a different purpose. In any case an occupancy costmap
      is used as the base, then according to the given constrains a visibility or
      gaussian costmap is also merged with this. Once the costmaps are merged,
      a generator generates pose candidates from the costmap. Each pose candidate
      is then validated against the constraints given by the designator if all validators
      pass the pose is considered valid and yielded.

      :yield: An instance of CostmapLocation.Location with a valid position that satisfies the given constraints





pycram.designators.specialized_designators.action.dual_arm_pickup_action
========================================================================

.. py:module:: pycram.designators.specialized_designators.action.dual_arm_pickup_action


Classes
-------

.. autoapisummary::

   pycram.designators.specialized_designators.action.dual_arm_pickup_action.DualArmPickupAction


Module Contents
---------------

.. py:class:: DualArmPickupAction(object_designator_description: typing_extensions.Union[pycram.designator.ObjectDesignatorDescription, pycram.designator.ObjectDesignatorDescription.Object], grasps: typing_extensions.List[pycram.datastructures.enums.Grasp], resolver=None, ontology_concept_holders: typing_extensions.Optional[typing_extensions.List[owlready2.Thing]] = None)

   Bases: :py:obj:`pycram.designators.action_designator.PickUpAction`


   Specialization version of the PickUpAction designator which uses heuristics to solve for a dual pickup solution.


   .. py:attribute:: object_designator_description
      :type:  typing_extensions.Union[pycram.designator.ObjectDesignatorDescription, pycram.designator.ObjectDesignatorDescription.Object]


   .. py:attribute:: left_gripper


   .. py:attribute:: right_gripper


   .. py:attribute:: gripper_list
      :type:  typing_extensions.List[pycram.robot_description.KinematicChainDescription]


   .. py:method:: ground() -> pycram.designators.action_designator.PickUpActionPerformable

      Default specialized_designators, returns a performable designator with the first entries from the lists of possible parameter.

      :return: A performable designator





pycram.datastructures
=====================

.. py:module:: pycram.datastructures


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/pycram/datastructures/dataclasses/index
   /autoapi/pycram/datastructures/enums/index
   /autoapi/pycram/datastructures/pose/index
   /autoapi/pycram/datastructures/world/index




pycram.cache_manager
====================

.. py:module:: pycram.cache_manager


Classes
-------

.. autoapisummary::

   pycram.cache_manager.CacheManager


Module Contents
---------------

.. py:class:: CacheManager(cache_dir: str, data_directory: typing_extensions.List[str])

   The CacheManager is responsible for caching object description files and managing the cache directory.


   .. py:attribute:: mesh_extensions
      :type:  typing_extensions.List[str]
      :value: ['.obj', '.stl']


      The file extensions of mesh files.



   .. py:attribute:: cache_dir


   .. py:attribute:: data_directory


   .. py:method:: update_cache_dir_with_object(path: str, ignore_cached_files: bool, object_description: pycram.description.ObjectDescription, object_name: str) -> str

      Checks if the file is already in the cache directory, if not it will be preprocessed and saved in the cache.

      :param path: The path of the file to preprocess and save in the cache directory.
      :param ignore_cached_files: If True, the file will be preprocessed and saved in the cache directory even if it
       is already cached.
      :param object_description: The object description of the file.
      :param object_name: The name of the object.



   .. py:method:: generate_description_and_write_to_cache(path: str, name: str, extension: str, cache_path: str, object_description: pycram.description.ObjectDescription) -> None

      Generates the description from the file at the given path and writes it to the cache directory.

      :param path: The path of the file to preprocess.
      :param name: The name of the object.
      :param extension: The file extension of the file to preprocess.
      :param cache_path: The path of the file in the cache directory.
      :param object_description: The object description of the file.



   .. py:method:: write_to_cache(description_string: str, cache_path: str) -> None
      :staticmethod:


      Writes the description string to the cache directory.

      :param description_string: The description string to write to the cache directory.
      :param cache_path: The path of the file in the cache directory.



   .. py:method:: look_for_file_in_data_dir(path_object: pathlib.Path) -> str

      Looks for a file in the data directory of the World. If the file is not found in the data directory, this method
      raises a FileNotFoundError.

      :param path_object: The pathlib object of the file to look for.



   .. py:method:: create_cache_dir_if_not_exists()

      Creates the cache directory if it does not exist.



   .. py:method:: is_cached(path: str, object_description: pycram.description.ObjectDescription) -> bool

      Checks if the file in the given path is already cached or if
      there is already a cached file with the given name, this is the case if a .stl, .obj file or a description from
      the parameter server is used.

      :param path: The path of the file to check.
      :param object_description: The object description of the file.
      :return: True if there already exists a cached file, False in any other case.



   .. py:method:: check_with_extension(path: str) -> bool

      Checks if the file in the given ath exists in the cache directory including file extension.

      :param path: The path of the file to check.



   .. py:method:: check_without_extension(path: str, object_description: pycram.description.ObjectDescription) -> bool

      Checks if the file in the given path exists in the cache directory without file extension,
      the extension is added after the file name manually in this case.

      :param path: The path of the file to check.
      :param object_description: The object description of the file.











Welcome to pycram’s documentation! — PyCRAM


























































Skip to main content


Back to top










Ctrl+K

























                    Welcome to pycram’s documentation!
                


Getting Started

Installation

Concepts

ROS Utils
Adding a new robot to PyCRAM
Jupyter Notebook Examples
Designators

Trouble Shooting

Troubleshooting
General Remarks

Examples

PyCRAM Introduction
Bullet World
Plan Language
Local Transformer
Designators
Action Designator
Object Designator
Location Designator
Motion Designator


ORM
Hands on Object Relational Mapping in PyCram
ORM querying examples
Migrate NEEMs


Datastructure
Pose
Robot Description


External Interface
Giskard interface in PyCRAM
Robokudo interface in PyCRAM
Ontology interface



API

pycram
pycram.datastructures
pycram.datastructures.dataclasses
pycram.datastructures.enums
pycram.datastructures.pose
pycram.datastructures.world


pycram.designators
pycram.designators.specialized_designators
pycram.designators.specialized_designators.action
pycram.designators.specialized_designators.location
pycram.designators.specialized_designators.probabilistic


pycram.designators.action_designator
pycram.designators.location_designator
pycram.designators.motion_designator
pycram.designators.object_designator


pycram.external_interfaces
pycram.external_interfaces.giskard
pycram.external_interfaces.ik
pycram.external_interfaces.knowrob
pycram.external_interfaces.move_base
pycram.external_interfaces.robokudo
pycram.external_interfaces.tmc


pycram.object_descriptors
pycram.object_descriptors.generic
pycram.object_descriptors.urdf


pycram.ontology
pycram.ontology.ontology
pycram.ontology.ontology_common


pycram.orm
pycram.orm.action_designator
pycram.orm.base
pycram.orm.motion_designator
pycram.orm.object_designator
pycram.orm.tasktree
pycram.orm.utils
pycram.orm.views


pycram.process_modules
pycram.process_modules.boxy_process_modules
pycram.process_modules.default_process_modules
pycram.process_modules.donbot_process_modules
pycram.process_modules.hsrb_process_modules
pycram.process_modules.pr2_process_modules
pycram.process_modules.stretch_process_modules


pycram.robot_descriptions
pycram.robot_descriptions.boxy_description
pycram.robot_descriptions.donbot_description
pycram.robot_descriptions.hsrb_description
pycram.robot_descriptions.pr2_description
pycram.robot_descriptions.stretch_description
pycram.robot_descriptions.tiago_description
pycram.robot_descriptions.turtlebot_description
pycram.robot_descriptions.ur5_description


pycram.ros
pycram.ros.force_torque_sensor
pycram.ros.joint_state_publisher
pycram.ros.robot_state_updater
pycram.ros.tf_broadcaster
pycram.ros.viz_marker_publisher


pycram.world_concepts
pycram.world_concepts.constraints
pycram.world_concepts.event
pycram.world_concepts.world_object


pycram.worlds
pycram.worlds.bullet_world


pycram.cache_manager
pycram.costmaps
pycram.description
pycram.designator
pycram.failure_handling
pycram.fluent
pycram.helper
pycram.language
pycram.local_transformer
pycram.plan_failures
pycram.pose_generator_and_validator
pycram.process_module
pycram.robot_description
pycram.tasktree
pycram.utils
pycram.world_reasoning





































Repository






Open issue













.rst







.pdf



















Welcome to pycram’s documentation!




 Contents 



What is PyCRAM?
Simple Demonstration


Citing PyCRAM
Indices and tables








Welcome to pycram’s documentation!#


What is PyCRAM?#
PyCRAM is the Python 3 re-implementation of CRAM.
PyCRAM is a toolbox for designing, implementing and deploying software on autonomous robots.
The framework provides various tools and libraries for aiding in robot software development as well as geometric
reasoning and fast simulation mechanisms to develop cognition-enabled control programs that achieve high levels of robot
autonomy.
PyCRAM is developed in Python with support for the ROS middleware which is used for communication with different
software components as well as the robot.
This framework is tested with Ubuntu 20.04, ROS Noetic and Python 3.8

Simple Demonstration#
PyCRAM allows the execution of the same high-level plan on different robot platforms. Below you can see an example of
this where the plan is executed on the PR2 and the IAIs Boxy.






Boxy
PR2











The plan that both robots execute is a relatively simple pick and place plan:


They start at the world origin
park their arms
move to the counter
observe the object
pickup the object
move to the kitchen island
place the object
move to the world origin


The code for this plan can be seen below.
from pycram.world.bullet_world import BulletWorld
from pycram.world_concepts.world_concepts import Object
from pycram.process_module import simulated_robot
from pycram.designators.motion_designator import *
from pycram.designators.location_designator import *
from pycram.designators.action_designator import *
from pycram.designators.object_designator import *
from pycram.datastructures.enums import ObjectType, Arms, Grasps

world = BulletWorld()
kitchen = Object("kitchen", ObjectType.ENVIRONMENT, "kitchen.urdf")
robot = Object("pr2", ObjectType.ROBOT, "pr2.urdf")
cereal = Object("cereal", ObjectType.BREAKFAST_CEREAL, "breakfast_cereal.stl", position=[1.4, 1, 0.95])

cereal_desig = ObjectDesignatorDescription(names=["cereal"])
kitchen_desig = ObjectDesignatorDescription(names=["kitchen"])
robot_desig = ObjectDesignatorDescription(names=["pr2"]).resolve()

with simulated_robot:
    ParkArmsAction([Arms.BOTH]).resolve().perform()

    MoveTorsoAction([0.3]).resolve().perform()

    pickup_pose = CostmapLocation(target=cereal_desig.resolve(), reachable_for=robot_desig).resolve()
    pickup_arm = pickup_pose.reachable_arms[0]

    NavigateAction(target_locations=[pickup_pose.pose]).resolve().perform()

    PickUpAction(object_designator_description=cereal_desig, arms=[pickup_arm], grasps=[Grasps.FRONT]).resolve().perform()

    ParkArmsAction([Arms.BOTH]).resolve().perform()

    place_island = SemanticCostmapLocation("kitchen_island_surface", kitchen_desig.resolve(), cereal_desig.resolve()).resolve()

    place_stand = CostmapLocation(place_island.pose, reachable_for=robot_desig, reachable_arm=pickup_arm).resolve()

    NavigateAction(target_locations=[place_stand.pose]).resolve().perform()

    PlaceAction(cereal_desig, target_locations=[place_island.pose], arms=[pickup_arm]).resolve().perform()

    ParkArmsAction([Arms.BOTH]).resolve().perform()

world.exit()





Citing PyCRAM#
If you want to cite PyCRAM in your work, you can use the following bibtex entry:
@software{dech2024pycram,
author = {Dech, Jonas},
title = {PyCRAM: A Python framework for cognition-enbabled robtics},
url = {https://github.com/cram2/pycram},
version = {0.2.0},
}




Indices and tables#

Index
Module Index
Search Page




















next
Installation









 Contents
  


What is PyCRAM?
Simple Demonstration


Citing PyCRAM
Indices and tables








By Jonas Dech




    
      © Copyright 2024.
      



















